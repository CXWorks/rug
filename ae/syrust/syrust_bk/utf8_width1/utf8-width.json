{"dependencies":{"get_width":[],"get_width_assume_valid":[],"is_width_0":[],"is_width_1":[],"is_width_2":[],"is_width_3":[],"is_width_4":[]},"glob_path_import":{},"self_to_fn":{},"single_path_import":{},"srcs":{"get_width":["/// Given a first byte, determines how many bytes are in this UTF-8 character. If the UTF-8 character is invalid, returns `0`, otherwise returns `1` ~ `4`,\n#[inline]\npub fn get_width(byte: u8) -> usize{\n    if is_width_1(byte) {\n        1\n    } else if is_width_2(byte) {\n        2\n    } else if byte <= MAX_3 { // no need to check `MIN_3 <= byte`\n        3\n    } else if byte <= MAX_4 { // no need to check `MIN_4 <= byte`\n        4\n    } else {\n        0\n    }\n}","Real(LocalPath(\"src/lib.rs\"))"],"get_width_assume_valid":["#[allow(clippy::missing_safety_doc)]\n/// *Assume the input first byte is from a valid UTF-8 character.* Given a first byte, determines how many bytes are in this UTF-8 character. It returns `1` ~ `4`,\n#[inline]\npub unsafe fn get_width_assume_valid(byte: u8) -> usize{\n    if byte <= MAX_1 {\n        1\n    } else if byte <= MAX_2 {\n        2\n    } else if byte <= MAX_3 {\n        3\n    } else {\n        4\n    }\n}","Real(LocalPath(\"src/lib.rs\"))"],"is_width_0":["#[inline]\npub fn is_width_0(byte: u8) -> bool{\n    MIN_0_1 <= byte && byte <= MAX_0_1 || MIN_0_2 <= byte // no need to check `byte <= MAX_0_2`\n}","Real(LocalPath(\"src/lib.rs\"))"],"is_width_1":["#[inline]\npub fn is_width_1(byte: u8) -> bool{\n    byte <= MAX_1 // no need to check `MIN_1 <= byte`\n}","Real(LocalPath(\"src/lib.rs\"))"],"is_width_2":["#[inline]\npub fn is_width_2(byte: u8) -> bool{\n    MIN_2 <= byte && byte <= MAX_2\n}","Real(LocalPath(\"src/lib.rs\"))"],"is_width_3":["#[inline]\npub fn is_width_3(byte: u8) -> bool{\n    MIN_3 <= byte && byte <= MAX_3\n}","Real(LocalPath(\"src/lib.rs\"))"],"is_width_4":["#[inline]\npub fn is_width_4(byte: u8) -> bool{\n    MIN_4 <= byte && byte <= MAX_4\n}","Real(LocalPath(\"src/lib.rs\"))"]},"struct_constructor":{"bool":["is_width_0","is_width_1","is_width_2","is_width_3","is_width_4"],"usize":["get_width","get_width_assume_valid"]},"struct_to_trait":{},"targets":{"get_width":["get_width","Real(LocalPath(\"src/lib.rs\"))",""],"get_width_assume_valid":["get_width_assume_valid","Real(LocalPath(\"src/lib.rs\"))",""],"is_width_0":["is_width_0","Real(LocalPath(\"src/lib.rs\"))",""],"is_width_1":["is_width_1","Real(LocalPath(\"src/lib.rs\"))",""],"is_width_2":["is_width_2","Real(LocalPath(\"src/lib.rs\"))",""],"is_width_3":["is_width_3","Real(LocalPath(\"src/lib.rs\"))",""],"is_width_4":["is_width_4","Real(LocalPath(\"src/lib.rs\"))",""]},"trait_to_struct":{},"type_to_def_path":{}}