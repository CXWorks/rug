{"dependencies":{"<FromUrlEncodingError as std::error::Error>::source":["FromUrlEncodingError","std::marker::Sized","std::option::Option","std::string::FromUtf8Error"],"<FromUrlEncodingError as std::fmt::Debug>::fmt":["FromUrlEncodingError","std::fmt::Formatter","std::marker::Sized","std::result::Result","std::string::FromUtf8Error"],"<FromUrlEncodingError as std::fmt::Display>::fmt":["FromUrlEncodingError","std::fmt::Formatter","std::marker::Sized","std::result::Result","std::string::FromUtf8Error"],"FromUrlEncodingError":["FromUrlEncodingError","std::string::FromUtf8Error"],"decode":["std::marker::Sized","std::result::Result"],"encode":["std::string::String"],"encode_into":["std::io::Write","std::marker::Sized","std::result::Result"],"from_hex_digit":["std::marker::Sized","std::option::Option"],"to_hex_digit":[]},"glob_path_import":{},"self_to_fn":{"FromUrlEncodingError":["Debug","impl Display for FromUrlEncodingError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n        match self {\n            &FromUrlEncodingError::UriCharacterError {character, index} =>\n                write!(f, \"invalid URI char [{}] at [{}]\", character, index),\n            &FromUrlEncodingError::Utf8CharacterError {ref error} =>\n                write!(f, \"invalid utf8 char: {}\", error)\n        }\n    }\n}","impl Error for FromUrlEncodingError {\n    fn source(&self) -> Option<&(dyn Error + 'static)> {\n        match self {\n            &FromUrlEncodingError::UriCharacterError {character: _, index: _} => None,\n            &FromUrlEncodingError::Utf8CharacterError {ref error} => Some(error)\n        }\n    }\n}"]},"single_path_import":{},"srcs":{"<FromUrlEncodingError as std::error::Error>::source":["fn source(&self) -> Option<&(dyn Error + 'static)>{\n        match self {\n            &FromUrlEncodingError::UriCharacterError {character: _, index: _} => None,\n            &FromUrlEncodingError::Utf8CharacterError {ref error} => Some(error)\n        }\n    }","Real(LocalPath(\"src/lib.rs\"))"],"<FromUrlEncodingError as std::fmt::Display>::fmt":["fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error>{\n        match self {\n            &FromUrlEncodingError::UriCharacterError {character, index} =>\n                write!(f, \"invalid URI char [{}] at [{}]\", character, index),\n            &FromUrlEncodingError::Utf8CharacterError {ref error} =>\n                write!(f, \"invalid utf8 char: {}\", error)\n        }\n    }","Real(LocalPath(\"src/lib.rs\"))"],"FromUrlEncodingError":["pub enum FromUrlEncodingError {\n    UriCharacterError { character: char, index: usize },\n    Utf8CharacterError { error: FromUtf8Error },\n}","Real(LocalPath(\"src/lib.rs\"))"],"decode":["pub fn decode(string: &str) -> Result<String, FromUrlEncodingError>{\n    let mut out: Vec<u8> = Vec::with_capacity(string.len());\n    let mut bytes = string.as_bytes().iter().copied();\n    while let Some(b) = bytes.next() {\n        match b {\n            b'%' => {\n                match bytes.next() {\n                    Some(first) => match from_hex_digit(first) {\n                        Some(first_val) => match bytes.next() {\n                            Some(second) => match from_hex_digit(second) {\n                                Some(second_val) => {\n                                    out.push((first_val << 4) | second_val);\n                                },\n                                None => {\n                                    out.push(b'%');\n                                    out.push(first);\n                                    out.push(second);\n                                },\n                            },\n                            None => {\n                                out.push(b'%');\n                                out.push(first);\n                            },\n                        },\n                        None => {\n                            out.push(b'%');\n                            out.push(first);\n                        },\n                    },\n                    None => out.push(b'%'),\n                };\n            },\n            other => out.push(other),\n        }\n    }\n    String::from_utf8(out).map_err(|error| FromUrlEncodingError::Utf8CharacterError {error})\n}","Real(LocalPath(\"src/lib.rs\"))"],"encode":["pub fn encode(data: &str) -> String{\n    let mut escaped = Vec::with_capacity(data.len());\n    encode_into(data, &mut escaped).unwrap();\n    // Encoded string is guaranteed to be ASCII\n    unsafe {\n        String::from_utf8_unchecked(escaped)\n    }\n}","Real(LocalPath(\"src/lib.rs\"))"],"encode_into":["#[inline]\nfn encode_into<W: Write>(data: &str, mut escaped: W) -> io::Result<()>{\n    for byte in data.as_bytes().iter() {\n        match *byte {\n            b'0'..=b'9' | b'A'..=b'Z' | b'a'..=b'z' |  b'-' | b'.' | b'_' | b'~' => {\n                escaped.write(std::slice::from_ref(byte))?;\n            },\n            other => {\n                escaped.write(&[b'%', to_hex_digit(other >> 4), to_hex_digit(other & 15)])?;\n            },\n        }\n    }\n    Ok(())\n}","Real(LocalPath(\"src/lib.rs\"))"],"from_hex_digit":["#[inline]\nfn from_hex_digit(digit: u8) -> Option<u8>{\n    match digit {\n        b'0'..=b'9' => Some(digit - b'0'),\n        b'A'..=b'F' => Some(digit - b'A' + 10),\n        b'a'..=b'f' => Some(digit - b'a' + 10),\n        _ => None,\n    }\n}","Real(LocalPath(\"src/lib.rs\"))"],"to_hex_digit":["#[inline]\nfn to_hex_digit(digit: u8) -> u8{\n    match digit {\n        0..=9 => b'0' + digit,\n        10..=255 => b'A' - 10 + digit,\n    }\n}","Real(LocalPath(\"src/lib.rs\"))"]},"struct_constructor":{"&(dyn std::error::Error + 'static)":["source"],"std::string::String":["decode","encode"]},"struct_to_trait":{"FromUrlEncodingError":["std::error::Error","std::fmt::Debug","std::fmt::Display"]},"targets":{"<FromUrlEncodingError as std::error::Error>::source":["source","Real(LocalPath(\"src/lib.rs\"))","std::error::Error"],"<FromUrlEncodingError as std::fmt::Display>::fmt":["fmt","Real(LocalPath(\"src/lib.rs\"))","std::fmt::Display"],"decode":["decode","Real(LocalPath(\"src/lib.rs\"))",""],"encode":["encode","Real(LocalPath(\"src/lib.rs\"))",""],"encode_into":["encode_into","Real(LocalPath(\"src/lib.rs\"))",""],"from_hex_digit":["from_hex_digit","Real(LocalPath(\"src/lib.rs\"))",""],"to_hex_digit":["to_hex_digit","Real(LocalPath(\"src/lib.rs\"))",""]},"trait_to_struct":{"std::error::Error":["FromUrlEncodingError"],"std::fmt::Debug":["FromUrlEncodingError"],"std::fmt::Display":["FromUrlEncodingError"]},"type_to_def_path":{"FromUrlEncodingError":"FromUrlEncodingError"}}