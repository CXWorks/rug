-----------------
src/backend/test.rs backend::test::buffer_view
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // buffer::Buffer
+backend::test::buffer_view(p0);
+crate::backend::test::buffer_view(p0);
+crate::backend::test::buffer_view(p0);
-----------------
/home/xiang/.rustup/toolchains/nightly-2022-12-10-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs layout::LAYOUT_CACHE::__init
deps:{}
candidates:{}
+layout::LAYOUT_CACHE::__init();
+crate::layout::LAYOUT_CACHE::__init();
+crate::layout::LAYOUT_CACHE::__init();
-----------------
/home/xiang/.rustup/toolchains/nightly-2022-12-10-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs layout::LAYOUT_CACHE::__getit
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::option::Option<&mut std::option::Option<std::cell::RefCell<std::collections::HashMap<(layout::Rect, layout::Layout), std::vec::Vec<layout::Rect>>>>>
+layout::LAYOUT_CACHE::__getit(p0);
+crate::layout::LAYOUT_CACHE::__getit(p0);
+crate::layout::LAYOUT_CACHE::__getit(p0);
-----------------
src/layout.rs layout::split
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p1 = & MaybeUninit::uninit().assume_init(); // layout::Layout
+layout::split(p0, p1);
+crate::layout::split(p0, p1);
+crate::layout::split(p0, p1);
-----------------
src/widgets/canvas/line.rs widgets::canvas::line::draw_line_low
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::canvas::Painter<'_, '_>
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
let mut p3 = 0usize; // None+usize
let mut p4 = 0usize; // None+usize
let mut p5 = MaybeUninit::uninit().assume_init(); // style::Color
+widgets::canvas::line::draw_line_low(p0, p1, p2, p3, p4, p5);
+crate::widgets::canvas::line::draw_line_low(p0, p1, p2, p3, p4, p5);
+crate::widgets::canvas::line::draw_line_low(p0, p1, p2, p3, p4, p5);
-----------------
src/widgets/canvas/line.rs widgets::canvas::line::draw_line_high
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::canvas::Painter<'_, '_>
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
let mut p3 = 0usize; // None+usize
let mut p4 = 0usize; // None+usize
let mut p5 = MaybeUninit::uninit().assume_init(); // style::Color
+widgets::canvas::line::draw_line_high(p0, p1, p2, p3, p4, p5);
+crate::widgets::canvas::line::draw_line_high(p0, p1, p2, p3, p4, p5);
+crate::widgets::canvas::line::draw_line_high(p0, p1, p2, p3, p4, p5);
-----------------
src/widgets/paragraph.rs widgets::paragraph::get_line_offset
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
let mut p1 = 0u16; // None+u16
let mut p2 = MaybeUninit::uninit().assume_init(); // layout::Alignment
+widgets::paragraph::get_line_offset(p0, p1, p2);
+crate::widgets::paragraph::get_line_offset(p0, p1, p2);
+crate::widgets::paragraph::get_line_offset(p0, p1, p2);
-----------------
src/widgets/reflow.rs widgets::reflow::trim_offset
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = 0usize; // None+usize
+widgets::reflow::trim_offset(&p0, p1);
+crate::widgets::reflow::trim_offset(&p0, p1);
+crate::widgets::reflow::trim_offset(&p0, p1);
-----------------
src/backend/mod.rs backend::Backend::draw
'a
deps:{"<&mut I as std::iter::Iterator>":{},"backend::Backend::draw":{"I":["std::iter::Iterator","std::marker::Sized"],"Self":["backend::Backend"]},"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"<&mut I as std::iter::Iterator>":{},"backend::Backend::draw":{"I":["std::iter::SkipWhile<I, P>","std::slice::ArrayChunksMut<'a, T, N>","std::env::SplitPaths<'a>","std::os::unix::net::ScmRights<'a>","std::str::SplitWhitespace<'a>","std::slice::RSplitMut<'a, T, P>","std::result::IterMut<'a, T>","std::str::RSplit<'a, P>","std::path::Components<'a>","std::str::CharIndices<'a>","std::iter::Rev<I>","std::slice::RSplitNMut<'a, T, P>","bitflags::core::error::Source<'a>","std::str::SplitAsciiWhitespace<'a>","std::iter::Successors<T, F>","std::slice::EscapeAscii<'a>","std::collections::vec_deque::IterMut<'a, T>","std::vec::DrainFilter<'_, T, F, A>","std::collections::linked_list::IterMut<'a, T>","std::collections::btree_set::Iter<'a, T>","std::option::Item<A>","std::collections::btree_map::Keys<'a, K, V>","std::iter::Repeat<A>","std::fs::ReadDir","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::iter::FlatMap<I, U, F>","std::os::unix::net::Messages<'a>","std::collections::btree_map::IntoKeys<K, V, A>","std::collections::hash_map::Drain<'a, K, V>","std::str::Utf8Chunks<'a>","std::slice::Chunks<'a, T>","std::char::ToLowercase","std::slice::RChunksExact<'a, T>","std::collections::linked_list::DrainFilter<'_, T, F>","std::slice::IterMut<'a, T>","std::collections::hash_set::Iter<'a, K>","std::vec::IntoIter<T, A>","std::iter::Take<I>","std::str::RMatchIndices<'a, P>","std::iter::Scan<I, St, F>","std::path::Ancestors<'a>","std::collections::btree_map::Iter<'a, K, V>","bitflags::core::slice::iter::GenericSplitN<I>","std::char::ToUppercase","std::str::SplitInclusive<'a, P>","std::iter::FilterMap<I, F>","std::ascii::EscapeDefault","std::iter::Flatten<I>","std::str::SplitN<'a, P>","std::collections::btree_set::SymmetricDifference<'a, T>","std::collections::btree_map::IterMut<'a, K, V>","std::io::Bytes<R>","std::iter::ByRefSized<'_, I>","std::iter::Chain<A, B>","std::collections::hash_map::IntoValues<K, V>","<&mut I as std::iter::Iterator>","std::net::IntoIncoming","std::ops::RangeFrom<A>","std::slice::SplitN<'a, T, P>","std::collections::btree_map::RangeMut<'a, K, V>","std::iter::RepeatWith<F>","std::collections::vec_deque::Iter<'a, T>","std::collections::btree_set::IntoIter<T, A>","std::collections::btree_set::Intersection<'a, T, A>","std::str::Split<'a, P>","std::iter::Intersperse<I>","std::str::Lines<'a>","std::slice::SplitMut<'a, T, P>","std::collections::hash_map::ValuesMut<'a, K, V>","std::collections::binary_heap::Iter<'a, T>","std::collections::hash_map::IterMut<'a, K, V>","std::collections::btree_map::IntoValues<K, V, A>","std::string::Drain<'_>","std::collections::hash_set::IntoIter<K>","std::collections::btree_map::ValuesMut<'a, K, V>","std::slice::ArrayChunks<'a, T, N>","std::iter::Filter<I, P>","std::collections::linked_list::Iter<'a, T>","std::iter::IntersperseWith<I, G>","std::sys_common::wstr::WStrUnits<'_>","std::option::IterMut<'a, A>","std::slice::RChunksExactMut<'a, T>","std::str::EscapeDebug<'a>","std::ops::Range<A>","std::str::RSplitN<'a, P>","std::sync::mpsc::IntoIter<T>","std::str::RMatches<'a, P>","std::result::Iter<'a, T>","std::collections::btree_map::Range<'a, K, V>","std::iter::sources::from_generator::FromGenerator<G>","std::char::EscapeDefault","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::sys::unix::args::Args","std::option::IntoIter<A>","std::vec::Drain<'_, T, A>","std::collections::binary_heap::IntoIter<T>","std::str::Chars<'a>","std::collections::hash_set::Drain<'a, K>","std::str::EncodeUtf16<'a>","std::iter::Cycle<I>","std::os::unix::net::Incoming<'a>","std::io::Lines<B>","std::collections::btree_set::Difference<'a, T, A>","std::env::Vars","std::iter::ArrayChunks<I, N>","std::slice::SplitInclusiveMut<'a, T, P>","std::str::MatchIndices<'a, P>","std::collections::hash_map::IntoIter<K, V>","std::io::Split<B>","std::iter::Peekable<I>","std::net::Incoming<'a>","std::slice::ChunksMut<'a, T>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::iter::Empty<T>","std::collections::vec_deque::IntoIter<T, A>","std::array::IntoIter<T, N>","std::iter::Map<I, F>","std::sys_common::net::LookupHost","std::collections::hash_map::Values<'a, K, V>","std::sys::unix::fs::ReadDir","std::collections::hash_set::Intersection<'a, T, S>","std::env::VarsOs","std::iter::Cloned<I>","std::collections::hash_map::Iter<'a, K, V>","std::iter::adapters::GenericShunt<'_, I, R>","std::ops::RangeInclusive<A>","std::collections::hash_set::DrainFilter<'_, K, F>","std::collections::vec_deque::Drain<'_, T, A>","std::process::CommandArgs<'a>","std::sys::unix::os::Env","std::sys_common::wtf8::EncodeWide<'a>","std::iter::Once<T>","std::sync::mpsc::TryIter<'a, T>","std::collections::btree_set::Union<'a, T>","std::iter::FromFn<F>","std::slice::SplitNMut<'a, T, P>","std::ops::index_range::IndexRange","std::env::Args","std::slice::GroupByMut<'a, T, P>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::collections::btree_map::Values<'a, K, V>","std::slice::Split<'a, T, P>","std::collections::btree_set::Range<'a, T>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::sys::unix::os::SplitPaths<'a>","std::option::Iter<'a, A>","std::str::EscapeDefault<'a>","std::collections::linked_list::IntoIter<T>","std::str::RSplitTerminator<'a, P>","std::iter::Inspect<I, F>","std::collections::hash_map::Keys<'a, K, V>","std::slice::Iter<'a, T>","std::slice::GroupBy<'a, T, P>","std::sync::mpsc::Iter<'a, T>","std::collections::binary_heap::Drain<'_, T>","std::str::EscapeUnicode<'a>","std::iter::Zip<A, B>","std::iter::StepBy<I>","std::slice::RChunks<'a, T>","std::str::Bytes<'_>","std::char::EscapeUnicode","std::iter::Fuse<I>","std::str::Matches<'a, P>","std::slice::RChunksMut<'a, T>","std::collections::binary_heap::DrainSorted<'_, T>","std::process::CommandEnvs<'a>","std::collections::hash_map::IntoKeys<K, V>","std::boxed::Box<I, A>","std::result::IntoIter<T>","std::iter::Enumerate<I>","std::slice::Windows<'a, T>","std::os::unix::net::ScmCredentials<'a>","std::sys::unix::process::process_common::CommandArgs<'a>","std::slice::RSplit<'a, T, P>","std::str::SplitTerminator<'a, P>","std::iter::OnceWith<F>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::iter::MapWhile<I, P>","std::env::ArgsOs","std::iter::Copied<I>","std::slice::SplitInclusive<'a, T, P>","std::slice::ArrayWindows<'a, T, N>","std::collections::hash_set::Union<'a, T, S>","std::slice::RSplitN<'a, T, P>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::collections::binary_heap::IntoIterSorted<T>","std::str::LinesAny<'a>","std::char::EscapeDebug","std::vec::Splice<'_, I, A>","std::collections::hash_set::Difference<'a, T, S>","std::char::CaseMappingIter","std::collections::btree_map::IntoIter<K, V, A>","std::iter::TakeWhile<I, P>","std::char::DecodeUtf16<I>","std::iter::Skip<I>","std::iter::RepeatN<A>","std::slice::ChunksExactMut<'a, T>","std::slice::ChunksExact<'a, T>","std::path::Iter<'a>"],"Self":["backend::test::TestBackend","backend::termion::TermionBackend"]},"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.draw(p1);
+backend::Backend::draw(p0, p1);
+crate::backend::Backend::draw(p0, p1);
+crate::backend::Backend::draw(p0, p1);
-----------------
src/backend/mod.rs backend::Backend::hide_cursor
deps:{"backend::Backend::hide_cursor":{"Self":["backend::Backend"]},"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"backend::Backend::hide_cursor":{"Self":["backend::termion::TermionBackend","backend::test::TestBackend"]},"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
+p0.hide_cursor();
+backend::Backend::hide_cursor(p0);
+crate::backend::Backend::hide_cursor(p0);
+crate::backend::Backend::hide_cursor(p0);
-----------------
src/backend/mod.rs backend::Backend::show_cursor
deps:{"backend::Backend::show_cursor":{"Self":["backend::Backend"]},"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"backend::Backend::show_cursor":{"Self":["backend::test::TestBackend","backend::termion::TermionBackend"]},"backend::termion::TermionBackend":{"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
+p0.show_cursor();
+backend::Backend::show_cursor(p0);
+crate::backend::Backend::show_cursor(p0);
+crate::backend::Backend::show_cursor(p0);
-----------------
src/backend/mod.rs backend::Backend::get_cursor
deps:{"backend::Backend::get_cursor":{"Self":["backend::Backend"]},"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"backend::Backend::get_cursor":{"Self":["backend::termion::TermionBackend","backend::test::TestBackend"]},"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
+p0.get_cursor();
+backend::Backend::get_cursor(p0);
+crate::backend::Backend::get_cursor(p0);
+crate::backend::Backend::get_cursor(p0);
-----------------
src/backend/mod.rs backend::Backend::set_cursor
deps:{"backend::Backend::set_cursor":{"Self":["backend::Backend"]},"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"backend::Backend::set_cursor":{"Self":["backend::test::TestBackend","backend::termion::TermionBackend"]},"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0u16; // None+u16
let mut p2 = 0u16; // None+u16
+p0.set_cursor(p1, p2);
+backend::Backend::set_cursor(p0, p1, p2);
+crate::backend::Backend::set_cursor(p0, p1, p2);
+crate::backend::Backend::set_cursor(p0, p1, p2);
-----------------
src/backend/mod.rs backend::Backend::clear
deps:{"backend::Backend::clear":{"Self":["backend::Backend"]},"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"backend::Backend::clear":{"Self":["backend::test::TestBackend","backend::termion::TermionBackend"]},"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
+p0.clear();
+backend::Backend::clear(p0);
+crate::backend::Backend::clear(p0);
+crate::backend::Backend::clear(p0);
-----------------
src/backend/mod.rs backend::Backend::size
deps:{"backend::Backend::size":{"Self":["backend::Backend"]},"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"backend::Backend::size":{"Self":["backend::termion::TermionBackend","backend::test::TestBackend"]},"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.size();
+backend::Backend::size(p0);
+crate::backend::Backend::size(p0);
+crate::backend::Backend::size(p0);
-----------------
src/backend/mod.rs backend::Backend::flush
deps:{"backend::Backend::flush":{"Self":["backend::Backend"]},"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"backend::Backend::flush":{"Self":["backend::test::TestBackend","backend::termion::TermionBackend"]},"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
+p0.flush();
+backend::Backend::flush(p0);
+crate::backend::Backend::flush(p0);
+crate::backend::Backend::flush(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::fmt::Debug>::fmt::__BitFlags::BOLD
deps:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::BOLD":{"Self":["<style::Modifier as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::BOLD":{"Self":["style::Modifier"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.BOLD();
+<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::BOLD(p0);
+crate::<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::BOLD(p0);
+<style::Modifier>::fmt::__BitFlags::BOLD(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::fmt::Debug>::fmt::__BitFlags::DIM
deps:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::DIM":{"Self":["<style::Modifier as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::DIM":{"Self":["style::Modifier"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.DIM();
+<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::DIM(p0);
+crate::<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::DIM(p0);
+<style::Modifier>::fmt::__BitFlags::DIM(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::fmt::Debug>::fmt::__BitFlags::ITALIC
deps:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::ITALIC":{"Self":["<style::Modifier as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::ITALIC":{"Self":["style::Modifier"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.ITALIC();
+<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::ITALIC(p0);
+crate::<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::ITALIC(p0);
+<style::Modifier>::fmt::__BitFlags::ITALIC(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::fmt::Debug>::fmt::__BitFlags::UNDERLINED
deps:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::UNDERLINED":{"Self":["<style::Modifier as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::UNDERLINED":{"Self":["style::Modifier"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.UNDERLINED();
+<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::UNDERLINED(p0);
+crate::<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::UNDERLINED(p0);
+<style::Modifier>::fmt::__BitFlags::UNDERLINED(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::fmt::Debug>::fmt::__BitFlags::SLOW_BLINK
deps:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::SLOW_BLINK":{"Self":["<style::Modifier as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::SLOW_BLINK":{"Self":["style::Modifier"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.SLOW_BLINK();
+<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::SLOW_BLINK(p0);
+crate::<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::SLOW_BLINK(p0);
+<style::Modifier>::fmt::__BitFlags::SLOW_BLINK(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::fmt::Debug>::fmt::__BitFlags::RAPID_BLINK
deps:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::RAPID_BLINK":{"Self":["<style::Modifier as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::RAPID_BLINK":{"Self":["style::Modifier"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.RAPID_BLINK();
+<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::RAPID_BLINK(p0);
+crate::<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::RAPID_BLINK(p0);
+<style::Modifier>::fmt::__BitFlags::RAPID_BLINK(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::fmt::Debug>::fmt::__BitFlags::REVERSED
deps:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::REVERSED":{"Self":["<style::Modifier as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::REVERSED":{"Self":["style::Modifier"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.REVERSED();
+<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::REVERSED(p0);
+crate::<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::REVERSED(p0);
+<style::Modifier>::fmt::__BitFlags::REVERSED(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::fmt::Debug>::fmt::__BitFlags::HIDDEN
deps:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::HIDDEN":{"Self":["<style::Modifier as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::HIDDEN":{"Self":["style::Modifier"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.HIDDEN();
+<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::HIDDEN(p0);
+crate::<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::HIDDEN(p0);
+<style::Modifier>::fmt::__BitFlags::HIDDEN(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::fmt::Debug>::fmt::__BitFlags::CROSSED_OUT
deps:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::CROSSED_OUT":{"Self":["<style::Modifier as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::CROSSED_OUT":{"Self":["style::Modifier"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.CROSSED_OUT();
+<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::CROSSED_OUT(p0);
+crate::<style::Modifier as std::fmt::Debug>::fmt::__BitFlags::CROSSED_OUT(p0);
+<style::Modifier>::fmt::__BitFlags::CROSSED_OUT(p0);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Shape::draw
deps:{"widgets::canvas::Shape::draw":{"Self":["widgets::canvas::Shape"]}}
candidates:{"widgets::canvas::Shape::draw":{"Self":["widgets::canvas::map::Map","widgets::canvas::line::Line","widgets::canvas::points::Points","widgets::canvas::rectangle::Rectangle"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // widgets::canvas::Painter<'_, '_>
+p0.draw(p1);
+widgets::canvas::Shape::draw(p0, p1);
+crate::widgets::canvas::Shape::draw(p0, p1);
+crate::widgets::canvas::Shape::draw(p0, p1);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Grid::width
deps:{"widgets::canvas::Grid::width":{"Self":["widgets::canvas::Grid","std::fmt::Debug"]}}
candidates:{"widgets::canvas::Grid::width":{"Self":["widgets::canvas::BrailleGrid","widgets::canvas::CharGrid"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.width();
+widgets::canvas::Grid::width(p0);
+crate::widgets::canvas::Grid::width(p0);
+crate::widgets::canvas::Grid::width(p0);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Grid::height
deps:{"widgets::canvas::Grid::height":{"Self":["widgets::canvas::Grid","std::fmt::Debug"]}}
candidates:{"widgets::canvas::Grid::height":{"Self":["widgets::canvas::BrailleGrid","widgets::canvas::CharGrid"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.height();
+widgets::canvas::Grid::height(p0);
+crate::widgets::canvas::Grid::height(p0);
+crate::widgets::canvas::Grid::height(p0);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Grid::resolution
deps:{"widgets::canvas::Grid::resolution":{"Self":["std::fmt::Debug","widgets::canvas::Grid"]}}
candidates:{"widgets::canvas::Grid::resolution":{"Self":["widgets::canvas::BrailleGrid","widgets::canvas::CharGrid"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.resolution();
+widgets::canvas::Grid::resolution(p0);
+crate::widgets::canvas::Grid::resolution(p0);
+crate::widgets::canvas::Grid::resolution(p0);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Grid::paint
deps:{"widgets::canvas::Grid::paint":{"Self":["widgets::canvas::Grid","std::fmt::Debug"]}}
candidates:{"widgets::canvas::Grid::paint":{"Self":["widgets::canvas::CharGrid","widgets::canvas::BrailleGrid"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
let mut p3 = MaybeUninit::uninit().assume_init(); // style::Color
+p0.paint(p1, p2, p3);
+widgets::canvas::Grid::paint(p0, p1, p2, p3);
+crate::widgets::canvas::Grid::paint(p0, p1, p2, p3);
+crate::widgets::canvas::Grid::paint(p0, p1, p2, p3);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Grid::save
deps:{"widgets::canvas::Grid::save":{"Self":["widgets::canvas::Grid","std::fmt::Debug"]}}
candidates:{"widgets::canvas::Grid::save":{"Self":["widgets::canvas::BrailleGrid","widgets::canvas::CharGrid"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.save();
+widgets::canvas::Grid::save(p0);
+crate::widgets::canvas::Grid::save(p0);
+crate::widgets::canvas::Grid::save(p0);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Grid::reset
deps:{"widgets::canvas::Grid::reset":{"Self":["widgets::canvas::Grid","std::fmt::Debug"]}}
candidates:{"widgets::canvas::Grid::reset":{"Self":["widgets::canvas::BrailleGrid","widgets::canvas::CharGrid"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
+p0.reset();
+widgets::canvas::Grid::reset(p0);
+crate::widgets::canvas::Grid::reset(p0);
+crate::widgets::canvas::Grid::reset(p0);
-----------------
src/widgets/reflow.rs widgets::reflow::LineComposer::next_line
'a
deps:{"widgets::reflow::LineComposer::next_line":{"Self":["widgets::reflow::LineComposer"]}}
candidates:{"widgets::reflow::LineComposer::next_line":{"Self":["widgets::reflow::LineTruncator","widgets::reflow::WordWrapper"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
+p0.next_line();
+widgets::reflow::LineComposer::next_line(p0);
+crate::widgets::reflow::LineComposer::next_line(p0);
+crate::widgets::reflow::LineComposer::next_line(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::NONE
deps:{"<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::NONE":{"Self":["<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::NONE":{"Self":["widgets::Borders"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.NONE();
+<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::NONE(p0);
+crate::<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::NONE(p0);
+<widgets::Borders>::fmt::__BitFlags::NONE(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::TOP
deps:{"<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::TOP":{"Self":["<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::TOP":{"Self":["widgets::Borders"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.TOP();
+<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::TOP(p0);
+crate::<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::TOP(p0);
+<widgets::Borders>::fmt::__BitFlags::TOP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::RIGHT
deps:{"<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::RIGHT":{"Self":["<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::RIGHT":{"Self":["widgets::Borders"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.RIGHT();
+<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::RIGHT(p0);
+crate::<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::RIGHT(p0);
+<widgets::Borders>::fmt::__BitFlags::RIGHT(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::BOTTOM
deps:{"<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::BOTTOM":{"Self":["<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::BOTTOM":{"Self":["widgets::Borders"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.BOTTOM();
+<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::BOTTOM(p0);
+crate::<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::BOTTOM(p0);
+<widgets::Borders>::fmt::__BitFlags::BOTTOM(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::LEFT
deps:{"<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::LEFT":{"Self":["<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::LEFT":{"Self":["widgets::Borders"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.LEFT();
+<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::LEFT(p0);
+crate::<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::LEFT(p0);
+<widgets::Borders>::fmt::__BitFlags::LEFT(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::ALL
deps:{"<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::ALL":{"Self":["<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::ALL":{"Self":["widgets::Borders"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.ALL();
+<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::ALL(p0);
+crate::<widgets::Borders as std::fmt::Debug>::fmt::__BitFlags::ALL(p0);
+<widgets::Borders>::fmt::__BitFlags::ALL(p0);
-----------------
src/widgets/mod.rs widgets::Widget::render
deps:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"widgets::Widget::render":{"Self":["widgets::Widget"]},"widgets::canvas::Canvas":{"F":["std::marker::Sized","std::ops::Fn"]},"widgets::table::Table":{"H":["std::clone::Clone","std::default::Default","std::fmt::Debug","std::marker::Sized","std::iter::Iterator"],"R":["std::iter::Iterator","std::default::Default","std::fmt::Debug","std::marker::Sized","std::clone::Clone"]}}
candidates:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"widgets::Widget::render":{"Self":["widgets::table::Table","widgets::block::Block","widgets::tabs::Tabs","widgets::list::List","widgets::gauge::LineGauge","widgets::gauge::Gauge","widgets::canvas::Canvas","widgets::paragraph::Paragraph","widgets::sparkline::Sparkline","widgets::barchart::BarChart","widgets::clear::Clear","widgets::chart::Chart"]},"widgets::canvas::Canvas":{"F":["bitflags::core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","bitflags::core::str::IsNotEmpty","bitflags::core::str::IsAsciiWhitespace","bitflags::core::str::UnsafeBytesToStr","bitflags::core::str::CharEscapeUnicode","bitflags::core::str::CharEscapeDebugContinue","bitflags::core::str::IsWhitespace","bitflags::core::str::BytesIsNotEmpty","bitflags::core::slice::ascii::EscapeByte","bitflags::core::str::CharEscapeDefault","std::boxed::Box<F, A>"]},"widgets::table::Table":{"H":["std::iter::Empty<T>"],"R":["std::iter::Empty<T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.render(p1, p2);
+widgets::Widget::render(p0, p1, p2);
+crate::widgets::Widget::render(p0, p1, p2);
+crate::widgets::Widget::render(p0, p1, p2);
-----------------
src/widgets/mod.rs widgets::StatefulWidget::render
deps:{"widgets::StatefulWidget::render":{"Self":["widgets::StatefulWidget"]},"widgets::table::Table":{"H":["std::marker::Sized","std::iter::Iterator","std::fmt::Debug","std::default::Default","std::clone::Clone"],"R":["std::fmt::Debug","std::iter::Iterator","std::marker::Sized","std::clone::Clone","std::default::Default"]}}
candidates:{"widgets::StatefulWidget::render":{"Self":["widgets::table::Table","widgets::list::List"]},"widgets::table::Table":{"H":["std::iter::Empty<T>"],"R":["std::iter::Empty<T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p3 = &mut  MaybeUninit::uninit().assume_init(); // <Self as widgets::StatefulWidget>::State
+p0.render(p1, p2, p3);
+widgets::StatefulWidget::render(p0, p1, p2, p3);
+crate::widgets::StatefulWidget::render(p0, p1, p2, p3);
+crate::widgets::StatefulWidget::render(p0, p1, p2, p3);
-----------------
src/backend/termion.rs backend::termion::TermionBackend::<W>::new
deps:{"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"backend::termion::TermionBackend::<W>::new":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"backend::termion::TermionBackend::<W>::new":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // W
+backend::termion::TermionBackend::<W>::new(p0);
+crate::backend::termion::TermionBackend::<W>::new(p0);
+<backend::termion::TermionBackend<W>>::new(p0);
-----------------
src/backend/termion.rs <backend::termion::TermionBackend<W> as std::io::Write>::write
deps:{"<backend::termion::TermionBackend<W> as std::io::Write>::write":{"W":["std::marker::Sized","std::io::Write"]},"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"<backend::termion::TermionBackend<W> as std::io::Write>::write":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // backend::termion::TermionBackend<W>
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.write(p1);
+<backend::termion::TermionBackend<W> as std::io::Write>::write(p0, p1);
+crate::<backend::termion::TermionBackend<W> as std::io::Write>::write(p0, p1);
+<backend::termion::TermionBackend<W>>::write(p0, p1);
-----------------
src/backend/termion.rs <backend::termion::TermionBackend<W> as std::io::Write>::flush
deps:{"<backend::termion::TermionBackend<W> as std::io::Write>::flush":{"W":["std::io::Write","std::marker::Sized"]},"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"<backend::termion::TermionBackend<W> as std::io::Write>::flush":{"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"backend::termion::TermionBackend":{"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // backend::termion::TermionBackend<W>
+p0.flush();
+<backend::termion::TermionBackend<W> as std::io::Write>::flush(p0);
+crate::<backend::termion::TermionBackend<W> as std::io::Write>::flush(p0);
+<backend::termion::TermionBackend<W>>::flush(p0);
-----------------
src/backend/termion.rs <backend::termion::TermionBackend<W> as backend::Backend>::clear
deps:{"<backend::termion::TermionBackend<W> as backend::Backend>::clear":{"W":["std::io::Write","std::marker::Sized"]},"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"<backend::termion::TermionBackend<W> as backend::Backend>::clear":{"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // backend::termion::TermionBackend<W>
+p0.clear();
+<backend::termion::TermionBackend<W> as backend::Backend>::clear(p0);
+crate::<backend::termion::TermionBackend<W> as backend::Backend>::clear(p0);
+<backend::termion::TermionBackend<W>>::clear(p0);
-----------------
src/backend/termion.rs <backend::termion::TermionBackend<W> as backend::Backend>::hide_cursor
deps:{"<backend::termion::TermionBackend<W> as backend::Backend>::hide_cursor":{"W":["std::io::Write","std::marker::Sized"]},"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"<backend::termion::TermionBackend<W> as backend::Backend>::hide_cursor":{"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"backend::termion::TermionBackend":{"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // backend::termion::TermionBackend<W>
+p0.hide_cursor();
+<backend::termion::TermionBackend<W> as backend::Backend>::hide_cursor(p0);
+crate::<backend::termion::TermionBackend<W> as backend::Backend>::hide_cursor(p0);
+<backend::termion::TermionBackend<W>>::hide_cursor(p0);
-----------------
src/backend/termion.rs <backend::termion::TermionBackend<W> as backend::Backend>::show_cursor
deps:{"<backend::termion::TermionBackend<W> as backend::Backend>::show_cursor":{"W":["std::io::Write","std::marker::Sized"]},"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"<backend::termion::TermionBackend<W> as backend::Backend>::show_cursor":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"backend::termion::TermionBackend":{"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // backend::termion::TermionBackend<W>
+p0.show_cursor();
+<backend::termion::TermionBackend<W> as backend::Backend>::show_cursor(p0);
+crate::<backend::termion::TermionBackend<W> as backend::Backend>::show_cursor(p0);
+<backend::termion::TermionBackend<W>>::show_cursor(p0);
-----------------
src/backend/termion.rs <backend::termion::TermionBackend<W> as backend::Backend>::get_cursor
deps:{"<backend::termion::TermionBackend<W> as backend::Backend>::get_cursor":{"W":["std::marker::Sized","std::io::Write"]},"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"<backend::termion::TermionBackend<W> as backend::Backend>::get_cursor":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"backend::termion::TermionBackend":{"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // backend::termion::TermionBackend<W>
+p0.get_cursor();
+<backend::termion::TermionBackend<W> as backend::Backend>::get_cursor(p0);
+crate::<backend::termion::TermionBackend<W> as backend::Backend>::get_cursor(p0);
+<backend::termion::TermionBackend<W>>::get_cursor(p0);
-----------------
src/backend/termion.rs <backend::termion::TermionBackend<W> as backend::Backend>::set_cursor
deps:{"<backend::termion::TermionBackend<W> as backend::Backend>::set_cursor":{"W":["std::io::Write","std::marker::Sized"]},"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"<backend::termion::TermionBackend<W> as backend::Backend>::set_cursor":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"backend::termion::TermionBackend":{"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // backend::termion::TermionBackend<W>
let mut p1 = 0u16; // None+u16
let mut p2 = 0u16; // None+u16
+p0.set_cursor(p1, p2);
+<backend::termion::TermionBackend<W> as backend::Backend>::set_cursor(p0, p1, p2);
+crate::<backend::termion::TermionBackend<W> as backend::Backend>::set_cursor(p0, p1, p2);
+<backend::termion::TermionBackend<W>>::set_cursor(p0, p1, p2);
-----------------
src/backend/termion.rs <backend::termion::TermionBackend<W> as backend::Backend>::draw
'a
deps:{"<&mut I as std::iter::Iterator>":{},"<backend::termion::TermionBackend<W> as backend::Backend>::draw":{"I":["std::marker::Sized","std::iter::Iterator"],"W":["std::marker::Sized","std::io::Write"]},"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"<&mut I as std::iter::Iterator>":{},"<backend::termion::TermionBackend<W> as backend::Backend>::draw":{"I":["std::iter::Intersperse<I>","std::iter::Chain<A, B>","std::iter::Repeat<A>","std::str::SplitTerminator<'a, P>","std::str::RSplit<'a, P>","std::slice::IterMut<'a, T>","std::iter::FromFn<F>","std::collections::linked_list::IntoIter<T>","std::collections::btree_map::IntoValues<K, V, A>","std::char::EscapeUnicode","std::str::EscapeDefault<'a>","std::iter::RepeatWith<F>","std::collections::hash_map::ValuesMut<'a, K, V>","std::path::Components<'a>","std::iter::Map<I, F>","std::collections::hash_set::Intersection<'a, T, S>","std::str::Chars<'a>","<&mut I as std::iter::Iterator>","std::option::IntoIter<A>","std::collections::btree_map::ValuesMut<'a, K, V>","std::collections::hash_map::Drain<'a, K, V>","std::collections::hash_map::Keys<'a, K, V>","std::ops::Range<A>","std::str::SplitAsciiWhitespace<'a>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::slice::Chunks<'a, T>","std::collections::hash_map::IntoKeys<K, V>","std::collections::vec_deque::Iter<'a, T>","bitflags::core::error::Source<'a>","std::os::unix::net::ScmRights<'a>","std::iter::sources::from_generator::FromGenerator<G>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::str::CharIndices<'a>","std::iter::Once<T>","std::env::VarsOs","std::sys::unix::fs::ReadDir","std::collections::btree_map::RangeMut<'a, K, V>","std::collections::btree_set::Iter<'a, T>","std::collections::btree_map::IntoIter<K, V, A>","std::collections::btree_set::IntoIter<T, A>","std::iter::Empty<T>","std::collections::vec_deque::IntoIter<T, A>","std::iter::adapters::GenericShunt<'_, I, R>","std::collections::hash_set::IntoIter<K>","std::iter::Fuse<I>","std::iter::SkipWhile<I, P>","std::collections::btree_set::Range<'a, T>","std::sync::mpsc::TryIter<'a, T>","std::sys_common::wstr::WStrUnits<'_>","std::collections::linked_list::DrainFilter<'_, T, F>","std::str::EscapeUnicode<'a>","std::ascii::EscapeDefault","std::iter::Flatten<I>","std::char::EscapeDefault","std::iter::FlatMap<I, U, F>","std::iter::TakeWhile<I, P>","std::fs::ReadDir","std::slice::RSplit<'a, T, P>","std::slice::SplitInclusive<'a, T, P>","std::collections::binary_heap::IntoIter<T>","std::char::EscapeDebug","std::collections::btree_set::Difference<'a, T, A>","std::ops::RangeInclusive<A>","std::ops::RangeFrom<A>","std::char::ToUppercase","std::iter::Copied<I>","std::iter::Scan<I, St, F>","std::string::Drain<'_>","std::slice::ArrayChunksMut<'a, T, N>","std::collections::btree_map::Iter<'a, K, V>","std::collections::btree_map::IntoKeys<K, V, A>","std::io::Split<B>","std::collections::binary_heap::IntoIterSorted<T>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::result::IterMut<'a, T>","std::collections::btree_set::Union<'a, T>","std::ops::index_range::IndexRange","std::slice::RSplitMut<'a, T, P>","std::net::IntoIncoming","std::path::Ancestors<'a>","std::slice::ArrayWindows<'a, T, N>","std::str::RSplitTerminator<'a, P>","std::collections::binary_heap::DrainSorted<'_, T>","std::collections::btree_map::Values<'a, K, V>","std::slice::Windows<'a, T>","std::slice::Iter<'a, T>","std::iter::Successors<T, F>","std::array::IntoIter<T, N>","std::slice::SplitNMut<'a, T, P>","std::sync::mpsc::Iter<'a, T>","std::collections::btree_map::Keys<'a, K, V>","std::slice::RChunksMut<'a, T>","bitflags::core::slice::iter::GenericSplitN<I>","std::char::CaseMappingIter","std::os::unix::net::Messages<'a>","std::slice::ChunksExactMut<'a, T>","std::sys_common::net::LookupHost","std::slice::SplitN<'a, T, P>","std::sys::unix::os::Env","std::boxed::Box<I, A>","std::slice::ChunksExact<'a, T>","std::collections::hash_map::IntoIter<K, V>","std::net::Incoming<'a>","std::slice::RSplitNMut<'a, T, P>","std::sys::unix::os::SplitPaths<'a>","std::collections::hash_map::Iter<'a, K, V>","std::option::Iter<'a, A>","std::collections::hash_map::IterMut<'a, K, V>","std::vec::Splice<'_, I, A>","std::iter::OnceWith<F>","std::slice::SplitInclusiveMut<'a, T, P>","std::path::Iter<'a>","std::iter::Peekable<I>","std::iter::ArrayChunks<I, N>","std::collections::linked_list::IterMut<'a, T>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::slice::ChunksMut<'a, T>","std::slice::RChunks<'a, T>","std::str::SplitN<'a, P>","std::iter::Zip<A, B>","std::str::Split<'a, P>","std::io::Bytes<R>","std::iter::FilterMap<I, F>","std::str::RMatchIndices<'a, P>","std::option::IterMut<'a, A>","std::slice::RChunksExact<'a, T>","std::iter::Filter<I, P>","std::iter::Inspect<I, F>","std::iter::ByRefSized<'_, I>","std::sys::unix::process::process_common::CommandArgs<'a>","std::slice::EscapeAscii<'a>","std::slice::RChunksExactMut<'a, T>","std::str::Bytes<'_>","std::str::SplitWhitespace<'a>","std::iter::Skip<I>","std::vec::DrainFilter<'_, T, F, A>","std::str::RMatches<'a, P>","std::sys::unix::args::Args","std::collections::btree_set::Intersection<'a, T, A>","std::vec::IntoIter<T, A>","std::collections::hash_set::Drain<'a, K>","std::iter::Enumerate<I>","std::slice::Split<'a, T, P>","std::io::Lines<B>","std::sys_common::wtf8::EncodeWide<'a>","std::iter::MapWhile<I, P>","std::collections::binary_heap::Drain<'_, T>","std::str::EncodeUtf16<'a>","std::collections::hash_set::Difference<'a, T, S>","std::slice::GroupBy<'a, T, P>","std::os::unix::net::ScmCredentials<'a>","std::slice::GroupByMut<'a, T, P>","std::collections::vec_deque::IterMut<'a, T>","std::str::RSplitN<'a, P>","std::str::SplitInclusive<'a, P>","std::vec::Drain<'_, T, A>","std::iter::StepBy<I>","std::iter::Rev<I>","std::option::Item<A>","std::collections::hash_map::Values<'a, K, V>","std::env::ArgsOs","std::iter::Cloned<I>","std::sync::mpsc::IntoIter<T>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::iter::RepeatN<A>","std::str::Lines<'a>","std::collections::btree_map::IterMut<'a, K, V>","std::str::Matches<'a, P>","std::iter::Cycle<I>","std::collections::linked_list::Iter<'a, T>","std::collections::binary_heap::Iter<'a, T>","std::slice::ArrayChunks<'a, T, N>","std::result::Iter<'a, T>","std::os::unix::net::Incoming<'a>","std::result::IntoIter<T>","std::env::Args","std::collections::btree_set::SymmetricDifference<'a, T>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::collections::hash_set::DrainFilter<'_, K, F>","std::char::ToLowercase","std::slice::RSplitN<'a, T, P>","std::iter::IntersperseWith<I, G>","std::env::Vars","std::slice::SplitMut<'a, T, P>","std::process::CommandArgs<'a>","std::str::MatchIndices<'a, P>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::hash_set::Union<'a, T, S>","std::process::CommandEnvs<'a>","std::iter::Take<I>","std::str::EscapeDebug<'a>","std::str::LinesAny<'a>","std::env::SplitPaths<'a>","std::collections::hash_set::Iter<'a, K>","std::collections::hash_map::IntoValues<K, V>","std::str::Utf8Chunks<'a>","std::char::DecodeUtf16<I>","std::collections::btree_map::Range<'a, K, V>"],"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"backend::termion::TermionBackend":{"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // backend::termion::TermionBackend<W>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.draw(p1);
+<backend::termion::TermionBackend<W> as backend::Backend>::draw(p0, p1);
+crate::<backend::termion::TermionBackend<W> as backend::Backend>::draw(p0, p1);
+<backend::termion::TermionBackend<W>>::draw(p0, p1);
-----------------
src/backend/termion.rs <backend::termion::TermionBackend<W> as backend::Backend>::size
deps:{"<backend::termion::TermionBackend<W> as backend::Backend>::size":{"W":["std::io::Write","std::marker::Sized"]},"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"<backend::termion::TermionBackend<W> as backend::Backend>::size":{"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // backend::termion::TermionBackend<W>
+p0.size();
+<backend::termion::TermionBackend<W> as backend::Backend>::size(p0);
+crate::<backend::termion::TermionBackend<W> as backend::Backend>::size(p0);
+<backend::termion::TermionBackend<W>>::size(p0);
-----------------
src/backend/termion.rs <backend::termion::TermionBackend<W> as backend::Backend>::flush
deps:{"<backend::termion::TermionBackend<W> as backend::Backend>::flush":{"W":["std::io::Write","std::marker::Sized"]},"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"<backend::termion::TermionBackend<W> as backend::Backend>::flush":{"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // backend::termion::TermionBackend<W>
+p0.flush();
+<backend::termion::TermionBackend<W> as backend::Backend>::flush(p0);
+crate::<backend::termion::TermionBackend<W> as backend::Backend>::flush(p0);
+<backend::termion::TermionBackend<W>>::flush(p0);
-----------------
src/backend/termion.rs <backend::termion::Fg as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // backend::termion::Fg
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<backend::termion::Fg as std::fmt::Display>::fmt(p0, p1);
+crate::<backend::termion::Fg as std::fmt::Display>::fmt(p0, p1);
+<backend::termion::Fg>::fmt(p0, p1);
-----------------
src/backend/termion.rs <backend::termion::Bg as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // backend::termion::Bg
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<backend::termion::Bg as std::fmt::Display>::fmt(p0, p1);
+crate::<backend::termion::Bg as std::fmt::Display>::fmt(p0, p1);
+<backend::termion::Bg>::fmt(p0, p1);
-----------------
src/backend/termion.rs <backend::termion::ModifierDiff as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // backend::termion::ModifierDiff
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<backend::termion::ModifierDiff as std::fmt::Display>::fmt(p0, p1);
+crate::<backend::termion::ModifierDiff as std::fmt::Display>::fmt(p0, p1);
+<backend::termion::ModifierDiff>::fmt(p0, p1);
-----------------
src/backend/test.rs <backend::test::TestBackend as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // backend::test::TestBackend
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<backend::test::TestBackend as std::fmt::Debug>::fmt(p0, p1);
+crate::<backend::test::TestBackend as std::fmt::Debug>::fmt(p0, p1);
+<backend::test::TestBackend>::fmt(p0, p1);
-----------------
src/backend/test.rs backend::test::TestBackend::new
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
let mut p1 = 0u16; // None+u16
+backend::test::TestBackend::new(p0, p1);
+crate::backend::test::TestBackend::new(p0, p1);
+<backend::test::TestBackend>::new(p0, p1);
-----------------
src/backend/test.rs backend::test::TestBackend::buffer
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // backend::test::TestBackend
+p0.buffer();
+backend::test::TestBackend::buffer(p0);
+crate::backend::test::TestBackend::buffer(p0);
+<backend::test::TestBackend>::buffer(p0);
-----------------
src/backend/test.rs backend::test::TestBackend::assert_buffer
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // backend::test::TestBackend
let mut p1 = & MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.assert_buffer(p1);
+backend::test::TestBackend::assert_buffer(p0, p1);
+crate::backend::test::TestBackend::assert_buffer(p0, p1);
+<backend::test::TestBackend>::assert_buffer(p0, p1);
-----------------
src/backend/test.rs <backend::test::TestBackend as backend::Backend>::draw
'a
deps:{"<&mut I as std::iter::Iterator>":{},"<backend::test::TestBackend as backend::Backend>::draw":{"I":["std::iter::Iterator","std::marker::Sized"]}}
candidates:{"<&mut I as std::iter::Iterator>":{},"<backend::test::TestBackend as backend::Backend>::draw":{"I":["std::slice::RChunksExactMut<'a, T>","std::os::unix::net::ScmCredentials<'a>","std::iter::Chain<A, B>","std::collections::hash_map::IntoKeys<K, V>","std::iter::StepBy<I>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::collections::vec_deque::IntoIter<T, A>","std::ops::index_range::IndexRange","std::slice::SplitNMut<'a, T, P>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::iter::Peekable<I>","std::str::Matches<'a, P>","std::slice::ArrayChunksMut<'a, T, N>","std::result::IntoIter<T>","std::str::RSplitTerminator<'a, P>","std::sys::unix::fs::ReadDir","std::iter::FromFn<F>","std::collections::linked_list::IntoIter<T>","std::slice::RSplitN<'a, T, P>","std::str::RMatchIndices<'a, P>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::collections::btree_set::Intersection<'a, T, A>","std::collections::btree_map::Keys<'a, K, V>","std::collections::binary_heap::IntoIter<T>","std::collections::btree_set::Iter<'a, T>","std::slice::RChunksMut<'a, T>","std::env::Args","std::sync::mpsc::Iter<'a, T>","std::collections::binary_heap::Iter<'a, T>","std::slice::Windows<'a, T>","std::slice::ChunksExactMut<'a, T>","std::collections::btree_map::ValuesMut<'a, K, V>","std::str::Lines<'a>","std::slice::ChunksMut<'a, T>","std::option::IntoIter<A>","std::option::Item<A>","std::iter::RepeatN<A>","std::str::EncodeUtf16<'a>","std::iter::Inspect<I, F>","std::collections::btree_set::Difference<'a, T, A>","std::str::Utf8Chunks<'a>","std::char::DecodeUtf16<I>","std::str::Split<'a, P>","std::iter::Empty<T>","std::collections::binary_heap::IntoIterSorted<T>","std::str::MatchIndices<'a, P>","std::str::EscapeDebug<'a>","std::vec::IntoIter<T, A>","std::iter::Copied<I>","std::boxed::Box<I, A>","std::slice::RChunksExact<'a, T>","std::collections::vec_deque::Iter<'a, T>","std::str::Chars<'a>","std::collections::btree_set::Range<'a, T>","std::collections::linked_list::IterMut<'a, T>","std::char::EscapeDefault","std::slice::SplitN<'a, T, P>","std::iter::Intersperse<I>","std::env::ArgsOs","std::sys_common::net::LookupHost","std::sys_common::wtf8::EncodeWide<'a>","std::str::SplitTerminator<'a, P>","std::string::Drain<'_>","std::collections::btree_map::IntoIter<K, V, A>","std::char::EscapeDebug","std::iter::Cycle<I>","bitflags::core::slice::iter::GenericSplitN<I>","std::os::unix::net::Messages<'a>","std::iter::OnceWith<F>","std::iter::Cloned<I>","std::collections::btree_map::RangeMut<'a, K, V>","std::path::Components<'a>","std::str::SplitWhitespace<'a>","std::collections::btree_map::IntoValues<K, V, A>","std::sys_common::wstr::WStrUnits<'_>","std::iter::adapters::GenericShunt<'_, I, R>","std::vec::Splice<'_, I, A>","std::sync::mpsc::TryIter<'a, T>","std::slice::SplitInclusive<'a, T, P>","std::io::Split<B>","std::process::CommandEnvs<'a>","bitflags::core::error::Source<'a>","std::iter::Map<I, F>","std::iter::FlatMap<I, U, F>","std::ops::RangeInclusive<A>","std::array::IntoIter<T, N>","std::iter::FilterMap<I, F>","std::collections::btree_map::Values<'a, K, V>","std::collections::hash_map::Iter<'a, K, V>","std::collections::btree_map::IterMut<'a, K, V>","std::char::EscapeUnicode","std::collections::btree_map::Iter<'a, K, V>","std::slice::RSplitMut<'a, T, P>","std::collections::hash_map::IntoIter<K, V>","std::path::Iter<'a>","std::collections::hash_map::Keys<'a, K, V>","std::path::Ancestors<'a>","std::collections::hash_set::Union<'a, T, S>","std::ascii::EscapeDefault","std::collections::binary_heap::DrainSorted<'_, T>","std::fs::ReadDir","std::char::ToLowercase","std::str::SplitInclusive<'a, P>","std::option::Iter<'a, A>","std::slice::ArrayWindows<'a, T, N>","std::sys::unix::os::SplitPaths<'a>","std::vec::DrainFilter<'_, T, F, A>","std::collections::hash_map::Drain<'a, K, V>","std::sys::unix::os::Env","std::char::ToUppercase","std::str::EscapeDefault<'a>","std::str::LinesAny<'a>","<&mut I as std::iter::Iterator>","std::collections::hash_map::ValuesMut<'a, K, V>","std::iter::Skip<I>","std::iter::MapWhile<I, P>","std::result::IterMut<'a, T>","std::collections::vec_deque::Drain<'_, T, A>","std::slice::Iter<'a, T>","std::collections::hash_map::Values<'a, K, V>","std::collections::btree_set::IntoIter<T, A>","std::str::RSplit<'a, P>","std::iter::ArrayChunks<I, N>","std::env::VarsOs","std::str::RSplitN<'a, P>","std::collections::binary_heap::Drain<'_, T>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::env::SplitPaths<'a>","std::option::IterMut<'a, A>","std::collections::hash_set::Drain<'a, K>","std::str::RMatches<'a, P>","std::collections::btree_map::Range<'a, K, V>","std::slice::ArrayChunks<'a, T, N>","std::collections::vec_deque::IterMut<'a, T>","std::iter::Filter<I, P>","std::os::unix::net::ScmRights<'a>","std::net::Incoming<'a>","std::collections::btree_set::SymmetricDifference<'a, T>","std::iter::Fuse<I>","std::iter::Scan<I, St, F>","std::iter::IntersperseWith<I, G>","std::str::SplitN<'a, P>","std::ops::Range<A>","std::collections::hash_set::IntoIter<K>","std::collections::btree_set::Union<'a, T>","std::vec::Drain<'_, T, A>","std::collections::linked_list::Iter<'a, T>","std::iter::Enumerate<I>","std::collections::btree_map::IntoKeys<K, V, A>","std::slice::SplitMut<'a, T, P>","std::slice::EscapeAscii<'a>","std::iter::Flatten<I>","std::os::unix::net::Incoming<'a>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::iter::Repeat<A>","std::iter::SkipWhile<I, P>","std::collections::hash_set::Difference<'a, T, S>","std::iter::Take<I>","std::iter::TakeWhile<I, P>","std::iter::ByRefSized<'_, I>","std::collections::hash_set::DrainFilter<'_, K, F>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::str::Bytes<'_>","std::slice::ChunksExact<'a, T>","std::slice::GroupByMut<'a, T, P>","std::collections::hash_map::IterMut<'a, K, V>","std::str::CharIndices<'a>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::collections::hash_set::Intersection<'a, T, S>","std::str::SplitAsciiWhitespace<'a>","std::slice::RSplit<'a, T, P>","std::env::Vars","std::io::Lines<B>","std::iter::sources::from_generator::FromGenerator<G>","std::str::EscapeUnicode<'a>","std::sys::unix::args::Args","std::result::Iter<'a, T>","std::char::CaseMappingIter","std::iter::RepeatWith<F>","std::process::CommandArgs<'a>","std::io::Bytes<R>","std::iter::Zip<A, B>","std::collections::hash_map::IntoValues<K, V>","std::sync::mpsc::IntoIter<T>","std::slice::Split<'a, T, P>","std::iter::Once<T>","std::slice::RChunks<'a, T>","std::sys::unix::process::process_common::CommandArgs<'a>","std::slice::Chunks<'a, T>","std::slice::IterMut<'a, T>","std::slice::RSplitNMut<'a, T, P>","std::iter::Successors<T, F>","std::ops::RangeFrom<A>","std::collections::linked_list::DrainFilter<'_, T, F>","std::slice::SplitInclusiveMut<'a, T, P>","std::iter::Rev<I>","std::slice::GroupBy<'a, T, P>","std::collections::hash_set::Iter<'a, K>","std::net::IntoIncoming"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // backend::test::TestBackend
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.draw(p1);
+<backend::test::TestBackend as backend::Backend>::draw(p0, p1);
+crate::<backend::test::TestBackend as backend::Backend>::draw(p0, p1);
+<backend::test::TestBackend>::draw(p0, p1);
-----------------
src/backend/test.rs <backend::test::TestBackend as backend::Backend>::hide_cursor
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // backend::test::TestBackend
+p0.hide_cursor();
+<backend::test::TestBackend as backend::Backend>::hide_cursor(p0);
+crate::<backend::test::TestBackend as backend::Backend>::hide_cursor(p0);
+<backend::test::TestBackend>::hide_cursor(p0);
-----------------
src/backend/test.rs <backend::test::TestBackend as backend::Backend>::show_cursor
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // backend::test::TestBackend
+p0.show_cursor();
+<backend::test::TestBackend as backend::Backend>::show_cursor(p0);
+crate::<backend::test::TestBackend as backend::Backend>::show_cursor(p0);
+<backend::test::TestBackend>::show_cursor(p0);
-----------------
src/backend/test.rs <backend::test::TestBackend as backend::Backend>::get_cursor
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // backend::test::TestBackend
+p0.get_cursor();
+<backend::test::TestBackend as backend::Backend>::get_cursor(p0);
+crate::<backend::test::TestBackend as backend::Backend>::get_cursor(p0);
+<backend::test::TestBackend>::get_cursor(p0);
-----------------
src/backend/test.rs <backend::test::TestBackend as backend::Backend>::set_cursor
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // backend::test::TestBackend
let mut p1 = 0u16; // None+u16
let mut p2 = 0u16; // None+u16
+p0.set_cursor(p1, p2);
+<backend::test::TestBackend as backend::Backend>::set_cursor(p0, p1, p2);
+crate::<backend::test::TestBackend as backend::Backend>::set_cursor(p0, p1, p2);
+<backend::test::TestBackend>::set_cursor(p0, p1, p2);
-----------------
src/backend/test.rs <backend::test::TestBackend as backend::Backend>::clear
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // backend::test::TestBackend
+p0.clear();
+<backend::test::TestBackend as backend::Backend>::clear(p0);
+crate::<backend::test::TestBackend as backend::Backend>::clear(p0);
+<backend::test::TestBackend>::clear(p0);
-----------------
src/backend/test.rs <backend::test::TestBackend as backend::Backend>::size
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // backend::test::TestBackend
+p0.size();
+<backend::test::TestBackend as backend::Backend>::size(p0);
+crate::<backend::test::TestBackend as backend::Backend>::size(p0);
+<backend::test::TestBackend>::size(p0);
-----------------
src/backend/test.rs <backend::test::TestBackend as backend::Backend>::flush
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // backend::test::TestBackend
+p0.flush();
+<backend::test::TestBackend as backend::Backend>::flush(p0);
+crate::<backend::test::TestBackend as backend::Backend>::flush(p0);
+<backend::test::TestBackend>::flush(p0);
-----------------
src/buffer.rs <buffer::Cell as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // buffer::Cell
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<buffer::Cell as std::fmt::Debug>::fmt(p0, p1);
+crate::<buffer::Cell as std::fmt::Debug>::fmt(p0, p1);
+<buffer::Cell>::fmt(p0, p1);
-----------------
src/buffer.rs <buffer::Cell as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // buffer::Cell
+p0.clone();
+<buffer::Cell as std::clone::Clone>::clone(p0);
+crate::<buffer::Cell as std::clone::Clone>::clone(p0);
+<buffer::Cell>::clone(p0);
-----------------
src/buffer.rs <buffer::Cell as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // buffer::Cell
let mut p1 = & MaybeUninit::uninit().assume_init(); // buffer::Cell
+p0.eq(p1);
+<buffer::Cell as std::cmp::PartialEq>::eq(p0, p1);
+crate::<buffer::Cell as std::cmp::PartialEq>::eq(p0, p1);
+<buffer::Cell>::eq(p0, p1);
-----------------
src/buffer.rs buffer::Cell::set_symbol
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Cell
let mut p1 = "sample"; // None+&str
+p0.set_symbol(&p1);
+buffer::Cell::set_symbol(p0, &p1);
+crate::buffer::Cell::set_symbol(p0, &p1);
+<buffer::Cell>::set_symbol(p0, &p1);
-----------------
src/buffer.rs buffer::Cell::set_char
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Cell
let mut p1 = 'a'; // None+char
+p0.set_char(p1);
+buffer::Cell::set_char(p0, p1);
+crate::buffer::Cell::set_char(p0, p1);
+<buffer::Cell>::set_char(p0, p1);
-----------------
src/buffer.rs buffer::Cell::set_fg
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Cell
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Color
+p0.set_fg(p1);
+buffer::Cell::set_fg(p0, p1);
+crate::buffer::Cell::set_fg(p0, p1);
+<buffer::Cell>::set_fg(p0, p1);
-----------------
src/buffer.rs buffer::Cell::set_bg
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Cell
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Color
+p0.set_bg(p1);
+buffer::Cell::set_bg(p0, p1);
+crate::buffer::Cell::set_bg(p0, p1);
+<buffer::Cell>::set_bg(p0, p1);
-----------------
src/buffer.rs buffer::Cell::set_style
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Cell
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.set_style(p1);
+buffer::Cell::set_style(p0, p1);
+crate::buffer::Cell::set_style(p0, p1);
+<buffer::Cell>::set_style(p0, p1);
-----------------
src/buffer.rs buffer::Cell::style
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // buffer::Cell
+p0.style();
+buffer::Cell::style(p0);
+crate::buffer::Cell::style(p0);
+<buffer::Cell>::style(p0);
-----------------
src/buffer.rs buffer::Cell::reset
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Cell
+p0.reset();
+buffer::Cell::reset(p0);
+crate::buffer::Cell::reset(p0);
+<buffer::Cell>::reset(p0);
-----------------
src/buffer.rs <buffer::Cell as std::default::Default>::default
deps:{}
candidates:{}
+<buffer::Cell as std::default::Default>::default();
+crate::<buffer::Cell as std::default::Default>::default();
+<buffer::Cell>::default();
-----------------
src/buffer.rs <buffer::Buffer as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<buffer::Buffer as std::fmt::Debug>::fmt(p0, p1);
+crate::<buffer::Buffer as std::fmt::Debug>::fmt(p0, p1);
+<buffer::Buffer>::fmt(p0, p1);
-----------------
src/buffer.rs <buffer::Buffer as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.clone();
+<buffer::Buffer as std::clone::Clone>::clone(p0);
+crate::<buffer::Buffer as std::clone::Clone>::clone(p0);
+<buffer::Buffer>::clone(p0);
-----------------
src/buffer.rs <buffer::Buffer as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p1 = & MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.eq(p1);
+<buffer::Buffer as std::cmp::PartialEq>::eq(p0, p1);
+crate::<buffer::Buffer as std::cmp::PartialEq>::eq(p0, p1);
+<buffer::Buffer>::eq(p0, p1);
-----------------
src/buffer.rs <buffer::Buffer as std::default::Default>::default
deps:{}
candidates:{}
+<buffer::Buffer as std::default::Default>::default();
+crate::<buffer::Buffer as std::default::Default>::default();
+<buffer::Buffer>::default();
-----------------
src/buffer.rs buffer::Buffer::empty
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Rect
+buffer::Buffer::empty(p0);
+crate::buffer::Buffer::empty(p0);
+<buffer::Buffer>::empty(p0);
-----------------
src/buffer.rs buffer::Buffer::filled
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p1 = & MaybeUninit::uninit().assume_init(); // buffer::Cell
+buffer::Buffer::filled(p0, p1);
+crate::buffer::Buffer::filled(p0, p1);
+<buffer::Buffer>::filled(p0, p1);
-----------------
src/buffer.rs buffer::Buffer::with_lines
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"buffer::Buffer::with_lines":{"S":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"buffer::Buffer::with_lines":{"S":["<&T as std::convert::AsRef<U>>","std::boxed::Box<T, A>","std::rc::Rc<T>","std::ffi::CString","std::slice::Iter<'_, T>","<&mut T as std::convert::AsRef<U>>","std::sync::Arc<T>","std::slice::IterMut<'_, T>","std::vec::Drain<'a, T, A>","std::borrow::Cow<'_, T>","std::borrow::Cow<'_, std::ffi::OsStr>","std::ffi::CStr","std::vec::IntoIter<T, A>","bitflags::core::num::dec2flt::common::AsciiStr<'a>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::vec::Vec<S>
+buffer::Buffer::with_lines(p0);
+crate::buffer::Buffer::with_lines(p0);
+<buffer::Buffer>::with_lines(p0);
-----------------
src/buffer.rs buffer::Buffer::content
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.content();
+buffer::Buffer::content(p0);
+crate::buffer::Buffer::content(p0);
+<buffer::Buffer>::content(p0);
-----------------
src/buffer.rs buffer::Buffer::area
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.area();
+buffer::Buffer::area(p0);
+crate::buffer::Buffer::area(p0);
+<buffer::Buffer>::area(p0);
-----------------
src/buffer.rs buffer::Buffer::get
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p1 = 0u16; // None+u16
let mut p2 = 0u16; // None+u16
+p0.get(p1, p2);
+buffer::Buffer::get(p0, p1, p2);
+crate::buffer::Buffer::get(p0, p1, p2);
+<buffer::Buffer>::get(p0, p1, p2);
-----------------
src/buffer.rs buffer::Buffer::get_mut
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p1 = 0u16; // None+u16
let mut p2 = 0u16; // None+u16
+p0.get_mut(p1, p2);
+buffer::Buffer::get_mut(p0, p1, p2);
+crate::buffer::Buffer::get_mut(p0, p1, p2);
+<buffer::Buffer>::get_mut(p0, p1, p2);
-----------------
src/buffer.rs buffer::Buffer::index_of
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p1 = 0u16; // None+u16
let mut p2 = 0u16; // None+u16
+p0.index_of(p1, p2);
+buffer::Buffer::index_of(p0, p1, p2);
+crate::buffer::Buffer::index_of(p0, p1, p2);
+<buffer::Buffer>::index_of(p0, p1, p2);
-----------------
src/buffer.rs buffer::Buffer::pos_of
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p1 = 0usize; // None+usize
+p0.pos_of(p1);
+buffer::Buffer::pos_of(p0, p1);
+crate::buffer::Buffer::pos_of(p0, p1);
+<buffer::Buffer>::pos_of(p0, p1);
-----------------
src/buffer.rs buffer::Buffer::set_string
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"buffer::Buffer::set_string":{"S":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"buffer::Buffer::set_string":{"S":["std::ffi::CString","std::vec::IntoIter<T, A>","std::borrow::Cow<'_, T>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","<&T as std::convert::AsRef<U>>","std::borrow::Cow<'_, std::ffi::OsStr>","std::sync::Arc<T>","std::slice::Iter<'_, T>","std::ffi::CStr","std::vec::Drain<'a, T, A>","std::slice::IterMut<'_, T>","std::rc::Rc<T>","std::boxed::Box<T, A>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p1 = 0u16; // None+u16
let mut p2 = 0u16; // None+u16
let mut p3 = MaybeUninit::uninit().assume_init(); // S
let mut p4 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.set_string(p1, p2, p3, p4);
+buffer::Buffer::set_string(p0, p1, p2, p3, p4);
+crate::buffer::Buffer::set_string(p0, p1, p2, p3, p4);
+<buffer::Buffer>::set_string(p0, p1, p2, p3, p4);
-----------------
src/buffer.rs buffer::Buffer::set_stringn
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"buffer::Buffer::set_stringn":{"S":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"buffer::Buffer::set_stringn":{"S":["std::borrow::Cow<'_, std::ffi::OsStr>","std::ffi::CString","std::rc::Rc<T>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::sync::Arc<T>","std::borrow::Cow<'_, T>","<&T as std::convert::AsRef<U>>","std::ffi::CStr","std::slice::IterMut<'_, T>","<&mut T as std::convert::AsRef<U>>","std::slice::Iter<'_, T>","std::vec::Drain<'a, T, A>","std::vec::IntoIter<T, A>","std::boxed::Box<T, A>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p1 = 0u16; // None+u16
let mut p2 = 0u16; // None+u16
let mut p3 = MaybeUninit::uninit().assume_init(); // S
let mut p4 = 0usize; // None+usize
let mut p5 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.set_stringn(p1, p2, p3, p4, p5);
+buffer::Buffer::set_stringn(p0, p1, p2, p3, p4, p5);
+crate::buffer::Buffer::set_stringn(p0, p1, p2, p3, p4, p5);
+<buffer::Buffer>::set_stringn(p0, p1, p2, p3, p4, p5);
-----------------
src/buffer.rs buffer::Buffer::set_spans
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p1 = 0u16; // None+u16
let mut p2 = 0u16; // None+u16
let mut p3 = & MaybeUninit::uninit().assume_init(); // text::Spans<'a>
let mut p4 = 0u16; // None+u16
+p0.set_spans(p1, p2, p3, p4);
+buffer::Buffer::set_spans(p0, p1, p2, p3, p4);
+crate::buffer::Buffer::set_spans(p0, p1, p2, p3, p4);
+<buffer::Buffer>::set_spans(p0, p1, p2, p3, p4);
-----------------
src/buffer.rs buffer::Buffer::set_span
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p1 = 0u16; // None+u16
let mut p2 = 0u16; // None+u16
let mut p3 = & MaybeUninit::uninit().assume_init(); // text::Span<'a>
let mut p4 = 0u16; // None+u16
+p0.set_span(p1, p2, p3, p4);
+buffer::Buffer::set_span(p0, p1, p2, p3, p4);
+crate::buffer::Buffer::set_span(p0, p1, p2, p3, p4);
+<buffer::Buffer>::set_span(p0, p1, p2, p3, p4);
-----------------
src/buffer.rs buffer::Buffer::set_background
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = MaybeUninit::uninit().assume_init(); // style::Color
+p0.set_background(p1, p2);
+buffer::Buffer::set_background(p0, p1, p2);
+crate::buffer::Buffer::set_background(p0, p1, p2);
+<buffer::Buffer>::set_background(p0, p1, p2);
-----------------
src/buffer.rs buffer::Buffer::set_style
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.set_style(p1, p2);
+buffer::Buffer::set_style(p0, p1, p2);
+crate::buffer::Buffer::set_style(p0, p1, p2);
+<buffer::Buffer>::set_style(p0, p1, p2);
-----------------
src/buffer.rs buffer::Buffer::resize
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
+p0.resize(p1);
+buffer::Buffer::resize(p0, p1);
+crate::buffer::Buffer::resize(p0, p1);
+<buffer::Buffer>::resize(p0, p1);
-----------------
src/buffer.rs buffer::Buffer::reset
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.reset();
+buffer::Buffer::reset(p0);
+crate::buffer::Buffer::reset(p0);
+<buffer::Buffer>::reset(p0);
-----------------
src/buffer.rs buffer::Buffer::merge
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p1 = & MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.merge(p1);
+buffer::Buffer::merge(p0, p1);
+crate::buffer::Buffer::merge(p0, p1);
+<buffer::Buffer>::merge(p0, p1);
-----------------
src/buffer.rs buffer::Buffer::diff
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p1 = & MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.diff(p1);
+buffer::Buffer::diff(p0, p1);
+crate::buffer::Buffer::diff(p0, p1);
+<buffer::Buffer>::diff(p0, p1);
-----------------
src/layout.rs <layout::Corner as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Corner
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<layout::Corner as std::fmt::Debug>::fmt(p0, p1);
+crate::<layout::Corner as std::fmt::Debug>::fmt(p0, p1);
+<layout::Corner>::fmt(p0, p1);
-----------------
src/layout.rs <layout::Corner as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<layout::Corner as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<layout::Corner as std::hash::Hash>::hash":{"__H":["<&mut H as std::hash::Hasher>","std::boxed::Box<T, A>","std::hash::sip::Hasher<S>","std::hash::SipHasher13","std::hash::SipHasher","std::collections::hash_map::DefaultHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Corner
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<layout::Corner as std::hash::Hash>::hash(p0, p1);
+crate::<layout::Corner as std::hash::Hash>::hash(p0, p1);
+<layout::Corner>::hash(p0, p1);
-----------------
src/layout.rs <layout::Corner as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Corner
+p0.clone();
+<layout::Corner as std::clone::Clone>::clone(p0);
+crate::<layout::Corner as std::clone::Clone>::clone(p0);
+<layout::Corner>::clone(p0);
-----------------
src/layout.rs <layout::Corner as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Corner
let mut p1 = & MaybeUninit::uninit().assume_init(); // layout::Corner
+p0.eq(p1);
+<layout::Corner as std::cmp::PartialEq>::eq(p0, p1);
+crate::<layout::Corner as std::cmp::PartialEq>::eq(p0, p1);
+<layout::Corner>::eq(p0, p1);
-----------------
src/layout.rs <layout::Corner as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Corner
+p0.assert_receiver_is_total_eq();
+<layout::Corner as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<layout::Corner as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<layout::Corner>::assert_receiver_is_total_eq(p0);
-----------------
src/layout.rs <layout::Direction as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Direction
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<layout::Direction as std::fmt::Debug>::fmt(p0, p1);
+crate::<layout::Direction as std::fmt::Debug>::fmt(p0, p1);
+<layout::Direction>::fmt(p0, p1);
-----------------
src/layout.rs <layout::Direction as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<layout::Direction as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<layout::Direction as std::hash::Hash>::hash":{"__H":["std::hash::sip::Hasher<S>","<&mut H as std::hash::Hasher>","std::hash::SipHasher","std::hash::SipHasher13","std::boxed::Box<T, A>","std::collections::hash_map::DefaultHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Direction
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<layout::Direction as std::hash::Hash>::hash(p0, p1);
+crate::<layout::Direction as std::hash::Hash>::hash(p0, p1);
+<layout::Direction>::hash(p0, p1);
-----------------
src/layout.rs <layout::Direction as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Direction
+p0.clone();
+<layout::Direction as std::clone::Clone>::clone(p0);
+crate::<layout::Direction as std::clone::Clone>::clone(p0);
+<layout::Direction>::clone(p0);
-----------------
src/layout.rs <layout::Direction as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Direction
let mut p1 = & MaybeUninit::uninit().assume_init(); // layout::Direction
+p0.eq(p1);
+<layout::Direction as std::cmp::PartialEq>::eq(p0, p1);
+crate::<layout::Direction as std::cmp::PartialEq>::eq(p0, p1);
+<layout::Direction>::eq(p0, p1);
-----------------
src/layout.rs <layout::Direction as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Direction
+p0.assert_receiver_is_total_eq();
+<layout::Direction as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<layout::Direction as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<layout::Direction>::assert_receiver_is_total_eq(p0);
-----------------
src/layout.rs <layout::Constraint as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Constraint
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<layout::Constraint as std::fmt::Debug>::fmt(p0, p1);
+crate::<layout::Constraint as std::fmt::Debug>::fmt(p0, p1);
+<layout::Constraint>::fmt(p0, p1);
-----------------
src/layout.rs <layout::Constraint as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Constraint
+p0.clone();
+<layout::Constraint as std::clone::Clone>::clone(p0);
+crate::<layout::Constraint as std::clone::Clone>::clone(p0);
+<layout::Constraint>::clone(p0);
-----------------
src/layout.rs <layout::Constraint as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Constraint
let mut p1 = & MaybeUninit::uninit().assume_init(); // layout::Constraint
+p0.eq(p1);
+<layout::Constraint as std::cmp::PartialEq>::eq(p0, p1);
+crate::<layout::Constraint as std::cmp::PartialEq>::eq(p0, p1);
+<layout::Constraint>::eq(p0, p1);
-----------------
src/layout.rs <layout::Constraint as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Constraint
+p0.assert_receiver_is_total_eq();
+<layout::Constraint as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<layout::Constraint as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<layout::Constraint>::assert_receiver_is_total_eq(p0);
-----------------
src/layout.rs <layout::Constraint as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<layout::Constraint as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<layout::Constraint as std::hash::Hash>::hash":{"__H":["std::boxed::Box<T, A>","<&mut H as std::hash::Hasher>","std::hash::SipHasher13","std::hash::sip::Hasher<S>","std::hash::SipHasher","std::collections::hash_map::DefaultHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Constraint
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<layout::Constraint as std::hash::Hash>::hash(p0, p1);
+crate::<layout::Constraint as std::hash::Hash>::hash(p0, p1);
+<layout::Constraint>::hash(p0, p1);
-----------------
src/layout.rs layout::Constraint::apply
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Constraint
let mut p1 = 0u16; // None+u16
+p0.apply(p1);
+layout::Constraint::apply(p0, p1);
+crate::layout::Constraint::apply(p0, p1);
+<layout::Constraint>::apply(p0, p1);
-----------------
src/layout.rs <layout::Margin as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Margin
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<layout::Margin as std::fmt::Debug>::fmt(p0, p1);
+crate::<layout::Margin as std::fmt::Debug>::fmt(p0, p1);
+<layout::Margin>::fmt(p0, p1);
-----------------
src/layout.rs <layout::Margin as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Margin
+p0.clone();
+<layout::Margin as std::clone::Clone>::clone(p0);
+crate::<layout::Margin as std::clone::Clone>::clone(p0);
+<layout::Margin>::clone(p0);
-----------------
src/layout.rs <layout::Margin as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Margin
let mut p1 = & MaybeUninit::uninit().assume_init(); // layout::Margin
+p0.eq(p1);
+<layout::Margin as std::cmp::PartialEq>::eq(p0, p1);
+crate::<layout::Margin as std::cmp::PartialEq>::eq(p0, p1);
+<layout::Margin>::eq(p0, p1);
-----------------
src/layout.rs <layout::Margin as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Margin
+p0.assert_receiver_is_total_eq();
+<layout::Margin as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<layout::Margin as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<layout::Margin>::assert_receiver_is_total_eq(p0);
-----------------
src/layout.rs <layout::Margin as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<layout::Margin as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<layout::Margin as std::hash::Hash>::hash":{"__H":["<&mut H as std::hash::Hasher>","std::hash::sip::Hasher<S>","std::boxed::Box<T, A>","std::hash::SipHasher13","std::hash::SipHasher","std::collections::hash_map::DefaultHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Margin
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<layout::Margin as std::hash::Hash>::hash(p0, p1);
+crate::<layout::Margin as std::hash::Hash>::hash(p0, p1);
+<layout::Margin>::hash(p0, p1);
-----------------
src/layout.rs <layout::Alignment as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Alignment
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<layout::Alignment as std::fmt::Debug>::fmt(p0, p1);
+crate::<layout::Alignment as std::fmt::Debug>::fmt(p0, p1);
+<layout::Alignment>::fmt(p0, p1);
-----------------
src/layout.rs <layout::Alignment as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Alignment
+p0.clone();
+<layout::Alignment as std::clone::Clone>::clone(p0);
+crate::<layout::Alignment as std::clone::Clone>::clone(p0);
+<layout::Alignment>::clone(p0);
-----------------
src/layout.rs <layout::Alignment as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Alignment
let mut p1 = & MaybeUninit::uninit().assume_init(); // layout::Alignment
+p0.eq(p1);
+<layout::Alignment as std::cmp::PartialEq>::eq(p0, p1);
+crate::<layout::Alignment as std::cmp::PartialEq>::eq(p0, p1);
+<layout::Alignment>::eq(p0, p1);
-----------------
src/layout.rs <layout::Layout as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Layout
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<layout::Layout as std::fmt::Debug>::fmt(p0, p1);
+crate::<layout::Layout as std::fmt::Debug>::fmt(p0, p1);
+<layout::Layout>::fmt(p0, p1);
-----------------
src/layout.rs <layout::Layout as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Layout
+p0.clone();
+<layout::Layout as std::clone::Clone>::clone(p0);
+crate::<layout::Layout as std::clone::Clone>::clone(p0);
+<layout::Layout>::clone(p0);
-----------------
src/layout.rs <layout::Layout as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Layout
let mut p1 = & MaybeUninit::uninit().assume_init(); // layout::Layout
+p0.eq(p1);
+<layout::Layout as std::cmp::PartialEq>::eq(p0, p1);
+crate::<layout::Layout as std::cmp::PartialEq>::eq(p0, p1);
+<layout::Layout>::eq(p0, p1);
-----------------
src/layout.rs <layout::Layout as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Layout
+p0.assert_receiver_is_total_eq();
+<layout::Layout as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<layout::Layout as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<layout::Layout>::assert_receiver_is_total_eq(p0);
-----------------
src/layout.rs <layout::Layout as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<layout::Layout as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<layout::Layout as std::hash::Hash>::hash":{"__H":["<&mut H as std::hash::Hasher>","std::boxed::Box<T, A>","std::hash::sip::Hasher<S>","std::hash::SipHasher","std::hash::SipHasher13","std::collections::hash_map::DefaultHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Layout
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<layout::Layout as std::hash::Hash>::hash(p0, p1);
+crate::<layout::Layout as std::hash::Hash>::hash(p0, p1);
+<layout::Layout>::hash(p0, p1);
-----------------
src/layout.rs <layout::Layout as std::default::Default>::default
deps:{}
candidates:{}
+<layout::Layout as std::default::Default>::default();
+crate::<layout::Layout as std::default::Default>::default();
+<layout::Layout>::default();
-----------------
src/layout.rs layout::Layout::constraints
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"layout::Layout::constraints":{"C":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"layout::Layout::constraints":{"C":["std::process::ExitStatusError","std::sync::mpmc::select::Selected","<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Layout
let mut p1 = MaybeUninit::uninit().assume_init(); // C
+p0.constraints(p1);
+layout::Layout::constraints(p0, p1);
+crate::layout::Layout::constraints(p0, p1);
+<layout::Layout>::constraints(p0, p1);
-----------------
src/layout.rs layout::Layout::margin
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Layout
let mut p1 = 0u16; // None+u16
+p0.margin(p1);
+layout::Layout::margin(p0, p1);
+crate::layout::Layout::margin(p0, p1);
+<layout::Layout>::margin(p0, p1);
-----------------
src/layout.rs layout::Layout::horizontal_margin
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Layout
let mut p1 = 0u16; // None+u16
+p0.horizontal_margin(p1);
+layout::Layout::horizontal_margin(p0, p1);
+crate::layout::Layout::horizontal_margin(p0, p1);
+<layout::Layout>::horizontal_margin(p0, p1);
-----------------
src/layout.rs layout::Layout::vertical_margin
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Layout
let mut p1 = 0u16; // None+u16
+p0.vertical_margin(p1);
+layout::Layout::vertical_margin(p0, p1);
+crate::layout::Layout::vertical_margin(p0, p1);
+<layout::Layout>::vertical_margin(p0, p1);
-----------------
src/layout.rs layout::Layout::direction
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Layout
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Direction
+p0.direction(p1);
+layout::Layout::direction(p0, p1);
+crate::layout::Layout::direction(p0, p1);
+<layout::Layout>::direction(p0, p1);
-----------------
src/layout.rs layout::Layout::split
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Layout
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
+p0.split(p1);
+layout::Layout::split(p0, p1);
+crate::layout::Layout::split(p0, p1);
+<layout::Layout>::split(p0, p1);
-----------------
src/layout.rs layout::Element::new
deps:{}
candidates:{}
+layout::Element::new();
+crate::layout::Element::new();
+<layout::Element>::new();
-----------------
src/layout.rs layout::Element::left
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Element
+p0.left();
+layout::Element::left(p0);
+crate::layout::Element::left(p0);
+<layout::Element>::left(p0);
-----------------
src/layout.rs layout::Element::top
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Element
+p0.top();
+layout::Element::top(p0);
+crate::layout::Element::top(p0);
+<layout::Element>::top(p0);
-----------------
src/layout.rs layout::Element::right
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Element
+p0.right();
+layout::Element::right(p0);
+crate::layout::Element::right(p0);
+<layout::Element>::right(p0);
-----------------
src/layout.rs layout::Element::bottom
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Element
+p0.bottom();
+layout::Element::bottom(p0);
+crate::layout::Element::bottom(p0);
+<layout::Element>::bottom(p0);
-----------------
src/layout.rs <layout::Rect as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<layout::Rect as std::fmt::Debug>::fmt(p0, p1);
+crate::<layout::Rect as std::fmt::Debug>::fmt(p0, p1);
+<layout::Rect>::fmt(p0, p1);
-----------------
src/layout.rs <layout::Rect as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Rect
+p0.clone();
+<layout::Rect as std::clone::Clone>::clone(p0);
+crate::<layout::Rect as std::clone::Clone>::clone(p0);
+<layout::Rect>::clone(p0);
-----------------
src/layout.rs <layout::Rect as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<layout::Rect as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<layout::Rect as std::hash::Hash>::hash":{"__H":["std::hash::SipHasher","std::boxed::Box<T, A>","std::collections::hash_map::DefaultHasher","std::hash::SipHasher13","<&mut H as std::hash::Hasher>","std::hash::sip::Hasher<S>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<layout::Rect as std::hash::Hash>::hash(p0, p1);
+crate::<layout::Rect as std::hash::Hash>::hash(p0, p1);
+<layout::Rect>::hash(p0, p1);
-----------------
src/layout.rs <layout::Rect as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p1 = & MaybeUninit::uninit().assume_init(); // layout::Rect
+p0.eq(p1);
+<layout::Rect as std::cmp::PartialEq>::eq(p0, p1);
+crate::<layout::Rect as std::cmp::PartialEq>::eq(p0, p1);
+<layout::Rect>::eq(p0, p1);
-----------------
src/layout.rs <layout::Rect as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // layout::Rect
+p0.assert_receiver_is_total_eq();
+<layout::Rect as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<layout::Rect as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<layout::Rect>::assert_receiver_is_total_eq(p0);
-----------------
src/layout.rs <layout::Rect as std::default::Default>::default
deps:{}
candidates:{}
+<layout::Rect as std::default::Default>::default();
+crate::<layout::Rect as std::default::Default>::default();
+<layout::Rect>::default();
-----------------
src/layout.rs layout::Rect::new
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
let mut p1 = 0u16; // None+u16
let mut p2 = 0u16; // None+u16
let mut p3 = 0u16; // None+u16
+layout::Rect::new(p0, p1, p2, p3);
+crate::layout::Rect::new(p0, p1, p2, p3);
+<layout::Rect>::new(p0, p1, p2, p3);
-----------------
src/layout.rs layout::Rect::area
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Rect
+p0.area();
+layout::Rect::area(p0);
+crate::layout::Rect::area(p0);
+<layout::Rect>::area(p0);
-----------------
src/layout.rs layout::Rect::left
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Rect
+p0.left();
+layout::Rect::left(p0);
+crate::layout::Rect::left(p0);
+<layout::Rect>::left(p0);
-----------------
src/layout.rs layout::Rect::right
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Rect
+p0.right();
+layout::Rect::right(p0);
+crate::layout::Rect::right(p0);
+<layout::Rect>::right(p0);
-----------------
src/layout.rs layout::Rect::top
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Rect
+p0.top();
+layout::Rect::top(p0);
+crate::layout::Rect::top(p0);
+<layout::Rect>::top(p0);
-----------------
src/layout.rs layout::Rect::bottom
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Rect
+p0.bottom();
+layout::Rect::bottom(p0);
+crate::layout::Rect::bottom(p0);
+<layout::Rect>::bottom(p0);
-----------------
src/layout.rs layout::Rect::inner
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p1 = & MaybeUninit::uninit().assume_init(); // layout::Margin
+p0.inner(p1);
+layout::Rect::inner(p0, p1);
+crate::layout::Rect::inner(p0, p1);
+<layout::Rect>::inner(p0, p1);
-----------------
src/layout.rs layout::Rect::union
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
+p0.union(p1);
+layout::Rect::union(p0, p1);
+crate::layout::Rect::union(p0, p1);
+<layout::Rect>::union(p0, p1);
-----------------
src/layout.rs layout::Rect::intersection
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
+p0.intersection(p1);
+layout::Rect::intersection(p0, p1);
+crate::layout::Rect::intersection(p0, p1);
+<layout::Rect>::intersection(p0, p1);
-----------------
src/layout.rs layout::Rect::intersects
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
+p0.intersects(p1);
+layout::Rect::intersects(p0, p1);
+crate::layout::Rect::intersects(p0, p1);
+<layout::Rect>::intersects(p0, p1);
-----------------
src/style.rs <style::Color as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Color
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<style::Color as std::fmt::Debug>::fmt(p0, p1);
+crate::<style::Color as std::fmt::Debug>::fmt(p0, p1);
+<style::Color>::fmt(p0, p1);
-----------------
src/style.rs <style::Color as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Color
+p0.clone();
+<style::Color as std::clone::Clone>::clone(p0);
+crate::<style::Color as std::clone::Clone>::clone(p0);
+<style::Color>::clone(p0);
-----------------
src/style.rs <style::Color as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Color
let mut p1 = & MaybeUninit::uninit().assume_init(); // style::Color
+p0.eq(p1);
+<style::Color as std::cmp::PartialEq>::eq(p0, p1);
+crate::<style::Color as std::cmp::PartialEq>::eq(p0, p1);
+<style::Color>::eq(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = & MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.eq(p1);
+<style::Modifier as std::cmp::PartialEq>::eq(p0, p1);
+crate::<style::Modifier as std::cmp::PartialEq>::eq(p0, p1);
+<style::Modifier>::eq(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.assert_receiver_is_total_eq();
+<style::Modifier as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<style::Modifier as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<style::Modifier>::assert_receiver_is_total_eq(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.clone();
+<style::Modifier as std::clone::Clone>::clone(p0);
+crate::<style::Modifier as std::clone::Clone>::clone(p0);
+<style::Modifier>::clone(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = & MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.partial_cmp(p1);
+<style::Modifier as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<style::Modifier as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<style::Modifier>::partial_cmp(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = & MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.cmp(p1);
+<style::Modifier as std::cmp::Ord>::cmp(p0, p1);
+crate::<style::Modifier as std::cmp::Ord>::cmp(p0, p1);
+<style::Modifier>::cmp(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<style::Modifier as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<style::Modifier as std::hash::Hash>::hash":{"__H":["std::boxed::Box<T, A>","std::hash::sip::Hasher<S>","std::hash::SipHasher","<&mut H as std::hash::Hasher>","std::hash::SipHasher13","std::collections::hash_map::DefaultHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<style::Modifier as std::hash::Hash>::hash(p0, p1);
+crate::<style::Modifier as std::hash::Hash>::hash(p0, p1);
+<style::Modifier>::hash(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<style::Modifier as std::fmt::Debug>::fmt(p0, p1);
+crate::<style::Modifier as std::fmt::Debug>::fmt(p0, p1);
+<style::Modifier>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::BOLD
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.BOLD();
+<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::BOLD(p0);
+crate::<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::BOLD(p0);
+<style::Modifier>::BOLD(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::DIM
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.DIM();
+<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::DIM(p0);
+crate::<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::DIM(p0);
+<style::Modifier>::DIM(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::ITALIC
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.ITALIC();
+<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::ITALIC(p0);
+crate::<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::ITALIC(p0);
+<style::Modifier>::ITALIC(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::UNDERLINED
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.UNDERLINED();
+<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::UNDERLINED(p0);
+crate::<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::UNDERLINED(p0);
+<style::Modifier>::UNDERLINED(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::SLOW_BLINK
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.SLOW_BLINK();
+<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::SLOW_BLINK(p0);
+crate::<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::SLOW_BLINK(p0);
+<style::Modifier>::SLOW_BLINK(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::RAPID_BLINK
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.RAPID_BLINK();
+<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::RAPID_BLINK(p0);
+crate::<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::RAPID_BLINK(p0);
+<style::Modifier>::RAPID_BLINK(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::REVERSED
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.REVERSED();
+<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::REVERSED(p0);
+crate::<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::REVERSED(p0);
+<style::Modifier>::REVERSED(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::HIDDEN
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.HIDDEN();
+<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::HIDDEN(p0);
+crate::<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::HIDDEN(p0);
+<style::Modifier>::HIDDEN(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::CROSSED_OUT
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.CROSSED_OUT();
+<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::CROSSED_OUT(p0);
+crate::<style::Modifier as <style::Modifier as std::fmt::Debug>::fmt::__BitFlags>::CROSSED_OUT(p0);
+<style::Modifier>::CROSSED_OUT(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::fmt::Binary>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.fmt(p1);
+<style::Modifier as std::fmt::Binary>::fmt(p0, p1);
+crate::<style::Modifier as std::fmt::Binary>::fmt(p0, p1);
+<style::Modifier>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::fmt::Octal>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.fmt(p1);
+<style::Modifier as std::fmt::Octal>::fmt(p0, p1);
+crate::<style::Modifier as std::fmt::Octal>::fmt(p0, p1);
+<style::Modifier>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::fmt::LowerHex>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.fmt(p1);
+<style::Modifier as std::fmt::LowerHex>::fmt(p0, p1);
+crate::<style::Modifier as std::fmt::LowerHex>::fmt(p0, p1);
+<style::Modifier>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::fmt::UpperHex>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.fmt(p1);
+<style::Modifier as std::fmt::UpperHex>::fmt(p0, p1);
+crate::<style::Modifier as std::fmt::UpperHex>::fmt(p0, p1);
+<style::Modifier>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::empty
deps:{}
candidates:{}
+style::Modifier::empty();
+crate::style::Modifier::empty();
+<style::Modifier>::empty();
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::all
deps:{}
candidates:{}
+style::Modifier::all();
+crate::style::Modifier::all();
+<style::Modifier>::all();
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::bits
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.bits();
+style::Modifier::bits(p0);
+crate::style::Modifier::bits(p0);
+<style::Modifier>::bits(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::from_bits
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+style::Modifier::from_bits(p0);
+crate::style::Modifier::from_bits(p0);
+<style::Modifier>::from_bits(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::from_bits_truncate
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+style::Modifier::from_bits_truncate(p0);
+crate::style::Modifier::from_bits_truncate(p0);
+<style::Modifier>::from_bits_truncate(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::from_bits_unchecked
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+style::Modifier::from_bits_unchecked(p0);
+crate::style::Modifier::from_bits_unchecked(p0);
+<style::Modifier>::from_bits_unchecked(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::is_empty
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.is_empty();
+style::Modifier::is_empty(p0);
+crate::style::Modifier::is_empty(p0);
+<style::Modifier>::is_empty(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::is_all
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.is_all();
+style::Modifier::is_all(p0);
+crate::style::Modifier::is_all(p0);
+<style::Modifier>::is_all(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::intersects
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.intersects(p1);
+style::Modifier::intersects(p0, p1);
+crate::style::Modifier::intersects(p0, p1);
+<style::Modifier>::intersects(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::contains
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.contains(p1);
+style::Modifier::contains(p0, p1);
+crate::style::Modifier::contains(p0, p1);
+<style::Modifier>::contains(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::insert
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.insert(p1);
+style::Modifier::insert(p0, p1);
+crate::style::Modifier::insert(p0, p1);
+<style::Modifier>::insert(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::remove
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.remove(p1);
+style::Modifier::remove(p0, p1);
+crate::style::Modifier::remove(p0, p1);
+<style::Modifier>::remove(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::toggle
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.toggle(p1);
+style::Modifier::toggle(p0, p1);
+crate::style::Modifier::toggle(p0, p1);
+<style::Modifier>::toggle(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::set
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p2 = true; // None+bool
+p0.set(p1, p2);
+style::Modifier::set(p0, p1, p2);
+crate::style::Modifier::set(p0, p1, p2);
+<style::Modifier>::set(p0, p1, p2);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::intersection
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.intersection(p1);
+style::Modifier::intersection(p0, p1);
+crate::style::Modifier::intersection(p0, p1);
+<style::Modifier>::intersection(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::union
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.union(p1);
+style::Modifier::union(p0, p1);
+crate::style::Modifier::union(p0, p1);
+<style::Modifier>::union(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::difference
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.difference(p1);
+style::Modifier::difference(p0, p1);
+crate::style::Modifier::difference(p0, p1);
+<style::Modifier>::difference(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::symmetric_difference
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.symmetric_difference(p1);
+style::Modifier::symmetric_difference(p0, p1);
+crate::style::Modifier::symmetric_difference(p0, p1);
+<style::Modifier>::symmetric_difference(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs style::Modifier::complement
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.complement();
+style::Modifier::complement(p0);
+crate::style::Modifier::complement(p0);
+<style::Modifier>::complement(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::ops::BitOr>::bitor
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.bitor(p1);
+<style::Modifier as std::ops::BitOr>::bitor(p0, p1);
+crate::<style::Modifier as std::ops::BitOr>::bitor(p0, p1);
+<style::Modifier>::bitor(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::ops::BitOrAssign>::bitor_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.bitor_assign(p1);
+<style::Modifier as std::ops::BitOrAssign>::bitor_assign(p0, p1);
+crate::<style::Modifier as std::ops::BitOrAssign>::bitor_assign(p0, p1);
+<style::Modifier>::bitor_assign(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::ops::BitXor>::bitxor
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.bitxor(p1);
+<style::Modifier as std::ops::BitXor>::bitxor(p0, p1);
+crate::<style::Modifier as std::ops::BitXor>::bitxor(p0, p1);
+<style::Modifier>::bitxor(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::ops::BitXorAssign>::bitxor_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.bitxor_assign(p1);
+<style::Modifier as std::ops::BitXorAssign>::bitxor_assign(p0, p1);
+crate::<style::Modifier as std::ops::BitXorAssign>::bitxor_assign(p0, p1);
+<style::Modifier>::bitxor_assign(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::ops::BitAnd>::bitand
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.bitand(p1);
+<style::Modifier as std::ops::BitAnd>::bitand(p0, p1);
+crate::<style::Modifier as std::ops::BitAnd>::bitand(p0, p1);
+<style::Modifier>::bitand(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::ops::BitAndAssign>::bitand_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.bitand_assign(p1);
+<style::Modifier as std::ops::BitAndAssign>::bitand_assign(p0, p1);
+crate::<style::Modifier as std::ops::BitAndAssign>::bitand_assign(p0, p1);
+<style::Modifier>::bitand_assign(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::ops::Sub>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.sub(p1);
+<style::Modifier as std::ops::Sub>::sub(p0, p1);
+crate::<style::Modifier as std::ops::Sub>::sub(p0, p1);
+<style::Modifier>::sub(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::ops::SubAssign>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.sub_assign(p1);
+<style::Modifier as std::ops::SubAssign>::sub_assign(p0, p1);
+crate::<style::Modifier as std::ops::SubAssign>::sub_assign(p0, p1);
+<style::Modifier>::sub_assign(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::ops::Not>::not
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.not();
+<style::Modifier as std::ops::Not>::not(p0);
+crate::<style::Modifier as std::ops::Not>::not(p0);
+<style::Modifier>::not(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::iter::Extend<style::Modifier>>::extend
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::iter::Iterator","std::marker::Sized"]},"<style::Modifier as std::iter::Extend<style::Modifier>>::extend":{"T":["std::marker::Sized","std::iter::IntoIterator"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::string::Drain<'_>","std::iter::SkipWhile<I, P>","std::fs::ReadDir","std::slice::RSplitN<'a, T, P>","std::path::Iter<'a>","std::str::EscapeDefault<'a>","std::collections::binary_heap::IntoIterSorted<T>","std::iter::Fuse<I>","std::sys_common::wstr::WStrUnits<'_>","std::slice::GroupBy<'a, T, P>","std::sync::mpsc::IntoIter<T>","std::sync::mpsc::TryIter<'a, T>","std::os::unix::net::Messages<'a>","std::collections::binary_heap::Iter<'a, T>","std::boxed::Box<I, A>","std::collections::btree_map::IntoKeys<K, V, A>","std::collections::btree_set::Range<'a, T>","std::collections::hash_set::Union<'a, T, S>","std::collections::hash_map::IntoValues<K, V>","std::iter::Filter<I, P>","std::collections::hash_set::Drain<'a, K>","std::char::ToUppercase","std::ops::RangeInclusive<A>","std::os::unix::net::ScmRights<'a>","std::iter::Rev<I>","std::str::EscapeDebug<'a>","std::str::SplitN<'a, P>","std::collections::btree_set::IntoIter<T, A>","std::slice::RChunks<'a, T>","std::iter::StepBy<I>","std::collections::btree_map::IterMut<'a, K, V>","std::sys_common::wtf8::EncodeWide<'a>","std::collections::hash_map::Drain<'a, K, V>","std::collections::btree_map::IntoIter<K, V, A>","std::iter::Cycle<I>","std::ops::index_range::IndexRange","std::slice::Chunks<'a, T>","std::env::ArgsOs","std::collections::hash_map::ValuesMut<'a, K, V>","std::iter::Empty<T>","std::slice::RSplitNMut<'a, T, P>","std::iter::MapWhile<I, P>","std::str::MatchIndices<'a, P>","std::sys::unix::os::SplitPaths<'a>","std::collections::hash_map::Values<'a, K, V>","std::result::IntoIter<T>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::sys::unix::os::Env","std::collections::vec_deque::IterMut<'a, T>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::option::IterMut<'a, A>","std::str::RMatches<'a, P>","std::collections::linked_list::Iter<'a, T>","std::iter::Inspect<I, F>","std::slice::SplitInclusive<'a, T, P>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::btree_map::Iter<'a, K, V>","std::str::SplitTerminator<'a, P>","std::sys::unix::process::process_common::CommandArgs<'a>","std::collections::hash_map::Keys<'a, K, V>","std::collections::vec_deque::Iter<'a, T>","std::collections::hash_set::Iter<'a, K>","std::iter::FilterMap<I, F>","std::slice::SplitN<'a, T, P>","std::sync::mpsc::Iter<'a, T>","std::slice::SplitInclusiveMut<'a, T, P>","std::iter::sources::from_generator::FromGenerator<G>","std::collections::vec_deque::IntoIter<T, A>","std::slice::RSplitMut<'a, T, P>","std::slice::RSplit<'a, T, P>","std::path::Components<'a>","std::collections::hash_set::DrainFilter<'_, K, F>","std::slice::Iter<'a, T>","std::iter::Peekable<I>","std::str::RMatchIndices<'a, P>","<&mut I as std::iter::Iterator>","std::iter::Zip<A, B>","std::collections::btree_map::RangeMut<'a, K, V>","std::str::Matches<'a, P>","std::slice::ChunksExactMut<'a, T>","std::iter::adapters::GenericShunt<'_, I, R>","std::collections::btree_set::Difference<'a, T, A>","std::str::Chars<'a>","std::collections::btree_map::ValuesMut<'a, K, V>","std::iter::Cloned<I>","std::net::IntoIncoming","std::iter::Once<T>","std::slice::SplitMut<'a, T, P>","std::ascii::EscapeDefault","std::collections::hash_set::IntoIter<K>","std::char::EscapeUnicode","std::iter::FlatMap<I, U, F>","std::collections::hash_map::IntoKeys<K, V>","std::collections::hash_map::IntoIter<K, V>","std::slice::ArrayWindows<'a, T, N>","std::iter::Chain<A, B>","std::env::SplitPaths<'a>","std::char::EscapeDebug","std::slice::RChunksExactMut<'a, T>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::collections::hash_map::Iter<'a, K, V>","std::char::ToLowercase","std::iter::Intersperse<I>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::slice::IterMut<'a, T>","std::sys::unix::fs::ReadDir","std::option::Item<A>","std::result::Iter<'a, T>","std::collections::btree_set::Intersection<'a, T, A>","std::slice::ChunksExact<'a, T>","std::collections::btree_map::Values<'a, K, V>","std::iter::FromFn<F>","std::ops::Range<A>","std::result::IterMut<'a, T>","std::collections::vec_deque::Drain<'_, T, A>","std::iter::Enumerate<I>","std::slice::EscapeAscii<'a>","std::env::Args","std::env::Vars","std::str::LinesAny<'a>","std::collections::btree_map::Keys<'a, K, V>","std::str::CharIndices<'a>","std::iter::ByRefSized<'_, I>","std::option::IntoIter<A>","std::slice::Windows<'a, T>","std::slice::GroupByMut<'a, T, P>","std::collections::btree_set::SymmetricDifference<'a, T>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::iter::Skip<I>","std::slice::ArrayChunks<'a, T, N>","std::str::SplitAsciiWhitespace<'a>","std::slice::ChunksMut<'a, T>","bitflags::core::slice::iter::GenericSplitN<I>","std::iter::TakeWhile<I, P>","std::io::Split<B>","std::str::Bytes<'_>","std::collections::btree_map::Range<'a, K, V>","std::iter::ArrayChunks<I, N>","std::os::unix::net::Incoming<'a>","std::vec::Splice<'_, I, A>","std::path::Ancestors<'a>","std::sys::unix::args::Args","std::iter::Successors<T, F>","std::vec::DrainFilter<'_, T, F, A>","std::iter::RepeatN<A>","std::collections::linked_list::IntoIter<T>","std::char::CaseMappingIter","std::str::SplitWhitespace<'a>","std::os::unix::net::ScmCredentials<'a>","std::net::Incoming<'a>","std::iter::Take<I>","std::slice::SplitNMut<'a, T, P>","bitflags::core::error::Source<'a>","std::collections::btree_set::Union<'a, T>","std::process::CommandEnvs<'a>","std::iter::Map<I, F>","std::str::Utf8Chunks<'a>","std::str::Lines<'a>","std::process::CommandArgs<'a>","std::collections::binary_heap::Drain<'_, T>","std::collections::btree_map::IntoValues<K, V, A>","std::collections::hash_map::IterMut<'a, K, V>","std::char::DecodeUtf16<I>","std::io::Bytes<R>","std::iter::OnceWith<F>","std::char::EscapeDefault","std::slice::Split<'a, T, P>","std::collections::linked_list::IterMut<'a, T>","std::str::Split<'a, P>","std::collections::btree_set::Iter<'a, T>","std::option::Iter<'a, A>","std::iter::Repeat<A>","std::array::IntoIter<T, N>","std::collections::linked_list::DrainFilter<'_, T, F>","std::collections::binary_heap::IntoIter<T>","std::slice::RChunksExact<'a, T>","std::vec::IntoIter<T, A>","std::str::SplitInclusive<'a, P>","std::str::RSplit<'a, P>","std::str::RSplitN<'a, P>","std::iter::Flatten<I>","std::str::EscapeUnicode<'a>","std::iter::Copied<I>","std::iter::Scan<I, St, F>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::sys_common::net::LookupHost","std::io::Lines<B>","std::vec::Drain<'_, T, A>","std::str::EncodeUtf16<'a>","std::slice::RChunksMut<'a, T>","std::collections::binary_heap::DrainSorted<'_, T>","std::iter::RepeatWith<F>","std::ops::RangeFrom<A>","std::str::RSplitTerminator<'a, P>","std::slice::ArrayChunksMut<'a, T, N>","std::collections::hash_set::Difference<'a, T, S>","std::env::VarsOs","std::iter::adapters::flatten::FlattenCompat<I, U>","std::iter::IntersperseWith<I, G>"]},"<style::Modifier as std::iter::Extend<style::Modifier>>::extend":{"T":["<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>","text::Text","<I as std::iter::IntoIterator>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // style::Modifier
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.extend(p1);
+<style::Modifier as std::iter::Extend<style::Modifier>>::extend(p0, p1);
+crate::<style::Modifier as std::iter::Extend<style::Modifier>>::extend(p0, p1);
+<style::Modifier>::extend(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <style::Modifier as std::iter::FromIterator<style::Modifier>>::from_iter
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::iter::Iterator","std::marker::Sized"]},"<style::Modifier as std::iter::FromIterator<style::Modifier>>::from_iter":{"T":["std::marker::Sized","std::iter::IntoIterator"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::iter::Take<I>","std::sync::mpsc::TryIter<'a, T>","std::iter::Fuse<I>","std::sys::unix::os::SplitPaths<'a>","std::sys_common::wtf8::EncodeWide<'a>","std::iter::FlatMap<I, U, F>","std::io::Lines<B>","std::slice::RChunksExactMut<'a, T>","std::iter::adapters::GenericShunt<'_, I, R>","std::option::Iter<'a, A>","std::char::EscapeDefault","std::option::IterMut<'a, A>","std::slice::SplitInclusiveMut<'a, T, P>","std::path::Iter<'a>","std::vec::IntoIter<T, A>","std::iter::Cloned<I>","std::str::EscapeUnicode<'a>","std::collections::binary_heap::DrainSorted<'_, T>","std::collections::btree_map::Keys<'a, K, V>","bitflags::core::slice::iter::GenericSplitN<I>","std::slice::SplitMut<'a, T, P>","std::slice::GroupBy<'a, T, P>","std::slice::ArrayWindows<'a, T, N>","std::str::RSplitTerminator<'a, P>","std::iter::StepBy<I>","std::string::Drain<'_>","std::vec::Drain<'_, T, A>","std::char::ToLowercase","std::os::unix::net::ScmCredentials<'a>","std::iter::Copied<I>","std::collections::btree_map::IntoIter<K, V, A>","<&mut I as std::iter::Iterator>","std::slice::SplitInclusive<'a, T, P>","std::env::SplitPaths<'a>","std::collections::vec_deque::IterMut<'a, T>","std::ops::index_range::IndexRange","std::char::CaseMappingIter","std::os::unix::net::ScmRights<'a>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::iter::Enumerate<I>","std::str::MatchIndices<'a, P>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::iter::Scan<I, St, F>","std::collections::hash_map::IntoValues<K, V>","std::iter::SkipWhile<I, P>","std::iter::FilterMap<I, F>","std::sys::unix::fs::ReadDir","std::collections::hash_map::IntoKeys<K, V>","std::collections::btree_set::SymmetricDifference<'a, T>","std::slice::IterMut<'a, T>","std::slice::ArrayChunksMut<'a, T, N>","std::slice::Iter<'a, T>","std::collections::btree_set::Range<'a, T>","std::str::Lines<'a>","std::str::SplitInclusive<'a, P>","std::collections::linked_list::IntoIter<T>","std::process::CommandArgs<'a>","std::vec::Splice<'_, I, A>","std::char::ToUppercase","std::os::unix::net::Incoming<'a>","std::slice::RChunksExact<'a, T>","std::collections::hash_map::IterMut<'a, K, V>","std::collections::hash_map::Keys<'a, K, V>","std::iter::RepeatWith<F>","std::iter::MapWhile<I, P>","std::collections::vec_deque::IntoIter<T, A>","std::str::SplitTerminator<'a, P>","std::str::EncodeUtf16<'a>","std::collections::linked_list::Iter<'a, T>","std::slice::ChunksExactMut<'a, T>","std::sys::unix::os::Env","std::str::Matches<'a, P>","std::iter::Cycle<I>","std::slice::Windows<'a, T>","std::slice::RChunks<'a, T>","std::vec::DrainFilter<'_, T, F, A>","std::iter::Rev<I>","std::iter::Inspect<I, F>","std::slice::RChunksMut<'a, T>","std::collections::btree_map::IterMut<'a, K, V>","std::result::IterMut<'a, T>","std::io::Bytes<R>","std::collections::btree_set::Union<'a, T>","std::collections::btree_map::Values<'a, K, V>","std::iter::Successors<T, F>","std::str::Chars<'a>","std::str::Split<'a, P>","std::ops::RangeFrom<A>","std::slice::SplitNMut<'a, T, P>","std::net::IntoIncoming","std::iter::sources::from_generator::FromGenerator<G>","std::collections::binary_heap::IntoIterSorted<T>","std::char::EscapeUnicode","std::collections::btree_map::Iter<'a, K, V>","std::collections::hash_map::Drain<'a, K, V>","std::str::RMatches<'a, P>","std::result::IntoIter<T>","std::result::Iter<'a, T>","std::option::Item<A>","std::collections::hash_set::Difference<'a, T, S>","std::slice::SplitN<'a, T, P>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::str::SplitWhitespace<'a>","std::str::SplitN<'a, P>","std::collections::btree_map::RangeMut<'a, K, V>","std::os::unix::net::Messages<'a>","std::collections::hash_set::DrainFilter<'_, K, F>","std::collections::binary_heap::Drain<'_, T>","std::str::EscapeDefault<'a>","std::fs::ReadDir","std::collections::binary_heap::IntoIter<T>","std::collections::hash_map::Iter<'a, K, V>","std::iter::FromFn<F>","std::env::Args","std::boxed::Box<I, A>","std::slice::RSplitNMut<'a, T, P>","std::iter::Once<T>","std::collections::hash_map::ValuesMut<'a, K, V>","std::iter::Peekable<I>","std::slice::Chunks<'a, T>","std::iter::Skip<I>","std::collections::vec_deque::Iter<'a, T>","std::sys_common::wstr::WStrUnits<'_>","std::str::RMatchIndices<'a, P>","std::iter::ByRefSized<'_, I>","std::net::Incoming<'a>","std::ascii::EscapeDefault","std::iter::Intersperse<I>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::binary_heap::Iter<'a, T>","std::str::RSplitN<'a, P>","std::slice::GroupByMut<'a, T, P>","std::iter::TakeWhile<I, P>","std::collections::btree_set::IntoIter<T, A>","std::str::EscapeDebug<'a>","std::str::SplitAsciiWhitespace<'a>","std::collections::linked_list::DrainFilter<'_, T, F>","std::collections::vec_deque::Drain<'_, T, A>","std::array::IntoIter<T, N>","std::str::Bytes<'_>","std::sys_common::net::LookupHost","std::env::Vars","std::sys::unix::process::process_common::CommandArgs<'a>","std::str::RSplit<'a, P>","std::sync::mpsc::IntoIter<T>","std::str::CharIndices<'a>","std::ops::RangeInclusive<A>","std::slice::ChunksExact<'a, T>","std::iter::Chain<A, B>","std::option::IntoIter<A>","std::slice::RSplit<'a, T, P>","std::collections::btree_map::IntoKeys<K, V, A>","std::sys::unix::args::Args","std::iter::Map<I, F>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::slice::Split<'a, T, P>","std::path::Components<'a>","std::collections::btree_set::Intersection<'a, T, A>","std::iter::Empty<T>","std::collections::btree_set::Difference<'a, T, A>","std::collections::hash_set::IntoIter<K>","std::iter::Repeat<A>","std::str::Utf8Chunks<'a>","std::iter::Zip<A, B>","std::env::VarsOs","std::collections::linked_list::IterMut<'a, T>","std::iter::OnceWith<F>","std::str::LinesAny<'a>","std::io::Split<B>","std::collections::hash_set::Iter<'a, K>","std::slice::ChunksMut<'a, T>","std::slice::RSplitN<'a, T, P>","std::iter::RepeatN<A>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::collections::btree_map::ValuesMut<'a, K, V>","std::char::EscapeDebug","std::env::ArgsOs","std::slice::EscapeAscii<'a>","std::ops::Range<A>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::process::CommandEnvs<'a>","std::iter::ArrayChunks<I, N>","std::sync::mpsc::Iter<'a, T>","std::collections::hash_map::IntoIter<K, V>","std::iter::Flatten<I>","std::slice::ArrayChunks<'a, T, N>","std::path::Ancestors<'a>","std::collections::btree_map::Range<'a, K, V>","std::collections::btree_set::Iter<'a, T>","std::iter::Filter<I, P>","std::collections::btree_map::IntoValues<K, V, A>","std::collections::hash_set::Drain<'a, K>","std::char::DecodeUtf16<I>","std::collections::hash_set::Union<'a, T, S>","std::collections::hash_map::Values<'a, K, V>","bitflags::core::error::Source<'a>","std::slice::RSplitMut<'a, T, P>","std::iter::IntersperseWith<I, G>"]},"<style::Modifier as std::iter::FromIterator<style::Modifier>>::from_iter":{"T":["text::Text","<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>","<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+<style::Modifier as std::iter::FromIterator<style::Modifier>>::from_iter(p0);
+crate::<style::Modifier as std::iter::FromIterator<style::Modifier>>::from_iter(p0);
+<style::Modifier>::from_iter(p0);
-----------------
src/style.rs <style::Style as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Style
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<style::Style as std::fmt::Debug>::fmt(p0, p1);
+crate::<style::Style as std::fmt::Debug>::fmt(p0, p1);
+<style::Style>::fmt(p0, p1);
-----------------
src/style.rs <style::Style as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Style
+p0.clone();
+<style::Style as std::clone::Clone>::clone(p0);
+crate::<style::Style as std::clone::Clone>::clone(p0);
+<style::Style>::clone(p0);
-----------------
src/style.rs <style::Style as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // style::Style
let mut p1 = & MaybeUninit::uninit().assume_init(); // style::Style
+p0.eq(p1);
+<style::Style as std::cmp::PartialEq>::eq(p0, p1);
+crate::<style::Style as std::cmp::PartialEq>::eq(p0, p1);
+<style::Style>::eq(p0, p1);
-----------------
src/style.rs <style::Style as std::default::Default>::default
deps:{}
candidates:{}
+<style::Style as std::default::Default>::default();
+crate::<style::Style as std::default::Default>::default();
+<style::Style>::default();
-----------------
src/style.rs style::Style::fg
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // style::Style
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Color
+p0.fg(p1);
+style::Style::fg(p0, p1);
+crate::style::Style::fg(p0, p1);
+<style::Style>::fg(p0, p1);
-----------------
src/style.rs style::Style::bg
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // style::Style
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Color
+p0.bg(p1);
+style::Style::bg(p0, p1);
+crate::style::Style::bg(p0, p1);
+<style::Style>::bg(p0, p1);
-----------------
src/style.rs style::Style::add_modifier
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // style::Style
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.add_modifier(p1);
+style::Style::add_modifier(p0, p1);
+crate::style::Style::add_modifier(p0, p1);
+<style::Style>::add_modifier(p0, p1);
-----------------
src/style.rs style::Style::remove_modifier
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // style::Style
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Modifier
+p0.remove_modifier(p1);
+style::Style::remove_modifier(p0, p1);
+crate::style::Style::remove_modifier(p0, p1);
+<style::Style>::remove_modifier(p0, p1);
-----------------
src/style.rs style::Style::patch
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // style::Style
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.patch(p1);
+style::Style::patch(p0, p1);
+crate::style::Style::patch(p0, p1);
+<style::Style>::patch(p0, p1);
-----------------
src/symbols.rs <symbols::block::Set as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // symbols::block::Set
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<symbols::block::Set as std::fmt::Debug>::fmt(p0, p1);
+crate::<symbols::block::Set as std::fmt::Debug>::fmt(p0, p1);
+<symbols::block::Set>::fmt(p0, p1);
-----------------
src/symbols.rs <symbols::block::Set as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // symbols::block::Set
+p0.clone();
+<symbols::block::Set as std::clone::Clone>::clone(p0);
+crate::<symbols::block::Set as std::clone::Clone>::clone(p0);
+<symbols::block::Set>::clone(p0);
-----------------
src/symbols.rs <symbols::bar::Set as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // symbols::bar::Set
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<symbols::bar::Set as std::fmt::Debug>::fmt(p0, p1);
+crate::<symbols::bar::Set as std::fmt::Debug>::fmt(p0, p1);
+<symbols::bar::Set>::fmt(p0, p1);
-----------------
src/symbols.rs <symbols::bar::Set as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // symbols::bar::Set
+p0.clone();
+<symbols::bar::Set as std::clone::Clone>::clone(p0);
+crate::<symbols::bar::Set as std::clone::Clone>::clone(p0);
+<symbols::bar::Set>::clone(p0);
-----------------
src/symbols.rs <symbols::line::Set as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // symbols::line::Set
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<symbols::line::Set as std::fmt::Debug>::fmt(p0, p1);
+crate::<symbols::line::Set as std::fmt::Debug>::fmt(p0, p1);
+<symbols::line::Set>::fmt(p0, p1);
-----------------
src/symbols.rs <symbols::line::Set as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // symbols::line::Set
+p0.clone();
+<symbols::line::Set as std::clone::Clone>::clone(p0);
+crate::<symbols::line::Set as std::clone::Clone>::clone(p0);
+<symbols::line::Set>::clone(p0);
-----------------
src/symbols.rs <symbols::Marker as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // symbols::Marker
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<symbols::Marker as std::fmt::Debug>::fmt(p0, p1);
+crate::<symbols::Marker as std::fmt::Debug>::fmt(p0, p1);
+<symbols::Marker>::fmt(p0, p1);
-----------------
src/symbols.rs <symbols::Marker as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // symbols::Marker
+p0.clone();
+<symbols::Marker as std::clone::Clone>::clone(p0);
+crate::<symbols::Marker as std::clone::Clone>::clone(p0);
+<symbols::Marker>::clone(p0);
-----------------
src/terminal.rs <terminal::ResizeBehavior as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // terminal::ResizeBehavior
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<terminal::ResizeBehavior as std::fmt::Debug>::fmt(p0, p1);
+crate::<terminal::ResizeBehavior as std::fmt::Debug>::fmt(p0, p1);
+<terminal::ResizeBehavior>::fmt(p0, p1);
-----------------
src/terminal.rs <terminal::ResizeBehavior as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // terminal::ResizeBehavior
+p0.clone();
+<terminal::ResizeBehavior as std::clone::Clone>::clone(p0);
+crate::<terminal::ResizeBehavior as std::clone::Clone>::clone(p0);
+<terminal::ResizeBehavior>::clone(p0);
-----------------
src/terminal.rs <terminal::ResizeBehavior as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // terminal::ResizeBehavior
let mut p1 = & MaybeUninit::uninit().assume_init(); // terminal::ResizeBehavior
+p0.eq(p1);
+<terminal::ResizeBehavior as std::cmp::PartialEq>::eq(p0, p1);
+crate::<terminal::ResizeBehavior as std::cmp::PartialEq>::eq(p0, p1);
+<terminal::ResizeBehavior>::eq(p0, p1);
-----------------
src/terminal.rs <terminal::Viewport as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // terminal::Viewport
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<terminal::Viewport as std::fmt::Debug>::fmt(p0, p1);
+crate::<terminal::Viewport as std::fmt::Debug>::fmt(p0, p1);
+<terminal::Viewport>::fmt(p0, p1);
-----------------
src/terminal.rs <terminal::Viewport as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // terminal::Viewport
+p0.clone();
+<terminal::Viewport as std::clone::Clone>::clone(p0);
+crate::<terminal::Viewport as std::clone::Clone>::clone(p0);
+<terminal::Viewport>::clone(p0);
-----------------
src/terminal.rs <terminal::Viewport as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // terminal::Viewport
let mut p1 = & MaybeUninit::uninit().assume_init(); // terminal::Viewport
+p0.eq(p1);
+<terminal::Viewport as std::cmp::PartialEq>::eq(p0, p1);
+crate::<terminal::Viewport as std::cmp::PartialEq>::eq(p0, p1);
+<terminal::Viewport>::eq(p0, p1);
-----------------
src/terminal.rs terminal::Viewport::fixed
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // layout::Rect
+terminal::Viewport::fixed(p0);
+crate::terminal::Viewport::fixed(p0);
+<terminal::Viewport>::fixed(p0);
-----------------
src/terminal.rs <terminal::TerminalOptions as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // terminal::TerminalOptions
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<terminal::TerminalOptions as std::fmt::Debug>::fmt(p0, p1);
+crate::<terminal::TerminalOptions as std::fmt::Debug>::fmt(p0, p1);
+<terminal::TerminalOptions>::fmt(p0, p1);
-----------------
src/terminal.rs <terminal::TerminalOptions as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // terminal::TerminalOptions
+p0.clone();
+<terminal::TerminalOptions as std::clone::Clone>::clone(p0);
+crate::<terminal::TerminalOptions as std::clone::Clone>::clone(p0);
+<terminal::TerminalOptions>::clone(p0);
-----------------
src/terminal.rs <terminal::TerminalOptions as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // terminal::TerminalOptions
let mut p1 = & MaybeUninit::uninit().assume_init(); // terminal::TerminalOptions
+p0.eq(p1);
+<terminal::TerminalOptions as std::cmp::PartialEq>::eq(p0, p1);
+crate::<terminal::TerminalOptions as std::cmp::PartialEq>::eq(p0, p1);
+<terminal::TerminalOptions>::eq(p0, p1);
-----------------
src/terminal.rs <terminal::Terminal<B> as std::fmt::Debug>::fmt
deps:{"<terminal::Terminal<B> as std::fmt::Debug>::fmt":{"B":["std::fmt::Debug","std::marker::Sized","backend::Backend"]}}
candidates:{"<terminal::Terminal<B> as std::fmt::Debug>::fmt":{"B":["backend::test::TestBackend"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // terminal::Terminal<B>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<terminal::Terminal<B> as std::fmt::Debug>::fmt(p0, p1);
+crate::<terminal::Terminal<B> as std::fmt::Debug>::fmt(p0, p1);
+<terminal::Terminal<B>>::fmt(p0, p1);
-----------------
src/terminal.rs terminal::Frame::<'a, B>::size
'a
deps:{"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Frame::<'a, B>::size":{"B":["std::marker::Sized","backend::Backend"]}}
candidates:{"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Frame::<'a, B>::size":{"B":["backend::termion::TermionBackend","backend::test::TestBackend"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // terminal::Frame<'a, B>
+p0.size();
+terminal::Frame::<'a, B>::size(p0);
+crate::terminal::Frame::<'a, B>::size(p0);
+<terminal::Frame<'a, B>>::size(p0);
-----------------
src/terminal.rs terminal::Frame::<'a, B>::render_widget
'a
deps:{"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"terminal::Frame::<'a, B>::render_widget":{"B":["backend::Backend","std::marker::Sized"],"W":["std::marker::Sized","widgets::Widget"]},"widgets::canvas::Canvas":{"F":["std::ops::Fn","std::marker::Sized"]},"widgets::table::Table":{"H":["std::fmt::Debug","std::marker::Sized","std::clone::Clone","std::iter::Iterator","std::default::Default"],"R":["std::default::Default","std::marker::Sized","std::iter::Iterator","std::fmt::Debug","std::clone::Clone"]}}
candidates:{"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"terminal::Frame::<'a, B>::render_widget":{"B":["backend::termion::TermionBackend","backend::test::TestBackend"],"W":["widgets::table::Table","widgets::canvas::Canvas","widgets::clear::Clear","widgets::barchart::BarChart","widgets::paragraph::Paragraph","widgets::gauge::LineGauge","widgets::gauge::Gauge","widgets::chart::Chart","widgets::tabs::Tabs","widgets::block::Block","widgets::sparkline::Sparkline","widgets::list::List"]},"widgets::canvas::Canvas":{"F":["bitflags::core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","bitflags::core::str::CharEscapeDefault","bitflags::core::str::LinesAnyMap","bitflags::core::str::IsAsciiWhitespace","bitflags::core::str::CharEscapeUnicode","bitflags::core::str::IsNotEmpty","bitflags::core::slice::ascii::EscapeByte","std::boxed::Box<F, A>","bitflags::core::str::BytesIsNotEmpty","bitflags::core::str::CharEscapeDebugContinue","bitflags::core::str::IsWhitespace"]},"widgets::table::Table":{"H":["std::iter::Empty<T>"],"R":["std::iter::Empty<T>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // terminal::Frame<'a, B>
let mut p1 = MaybeUninit::uninit().assume_init(); // W
let mut p2 = MaybeUninit::uninit().assume_init(); // layout::Rect
+p0.render_widget(p1, p2);
+terminal::Frame::<'a, B>::render_widget(p0, p1, p2);
+crate::terminal::Frame::<'a, B>::render_widget(p0, p1, p2);
+<terminal::Frame<'a, B>>::render_widget(p0, p1, p2);
-----------------
src/terminal.rs terminal::Frame::<'a, B>::render_stateful_widget
'a
deps:{"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Frame::<'a, B>::render_stateful_widget":{"B":["backend::Backend","std::marker::Sized"],"W":["std::marker::Sized","widgets::StatefulWidget"]},"widgets::table::Table":{"H":["std::marker::Sized","std::default::Default","std::fmt::Debug","std::iter::Iterator","std::clone::Clone"],"R":["std::iter::Iterator","std::default::Default","std::marker::Sized","std::clone::Clone","std::fmt::Debug"]}}
candidates:{"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Frame::<'a, B>::render_stateful_widget":{"B":["backend::termion::TermionBackend","backend::test::TestBackend"],"W":["widgets::table::Table","widgets::list::List"]},"widgets::table::Table":{"H":["std::iter::Empty<T>"],"R":["std::iter::Empty<T>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // terminal::Frame<'a, B>
let mut p1 = MaybeUninit::uninit().assume_init(); // W
let mut p2 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p3 = &mut  MaybeUninit::uninit().assume_init(); // <W as widgets::StatefulWidget>::State
+p0.render_stateful_widget(p1, p2, p3);
+terminal::Frame::<'a, B>::render_stateful_widget(p0, p1, p2, p3);
+crate::terminal::Frame::<'a, B>::render_stateful_widget(p0, p1, p2, p3);
+<terminal::Frame<'a, B>>::render_stateful_widget(p0, p1, p2, p3);
-----------------
src/terminal.rs terminal::Frame::<'a, B>::set_cursor
'a
deps:{"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Frame::<'a, B>::set_cursor":{"B":["std::marker::Sized","backend::Backend"]}}
candidates:{"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Frame::<'a, B>::set_cursor":{"B":["backend::test::TestBackend","backend::termion::TermionBackend"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // terminal::Frame<'a, B>
let mut p1 = 0u16; // None+u16
let mut p2 = 0u16; // None+u16
+p0.set_cursor(p1, p2);
+terminal::Frame::<'a, B>::set_cursor(p0, p1, p2);
+crate::terminal::Frame::<'a, B>::set_cursor(p0, p1, p2);
+<terminal::Frame<'a, B>>::set_cursor(p0, p1, p2);
-----------------
src/terminal.rs <terminal::Terminal<B> as std::ops::Drop>::drop
deps:{"<terminal::Terminal<B> as std::ops::Drop>::drop":{"B":["backend::Backend","std::marker::Sized"]},"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"<terminal::Terminal<B> as std::ops::Drop>::drop":{"B":["backend::test::TestBackend","backend::termion::TermionBackend"]},"backend::termion::TermionBackend":{"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // terminal::Terminal<B>
+p0.drop();
+<terminal::Terminal<B> as std::ops::Drop>::drop(p0);
+crate::<terminal::Terminal<B> as std::ops::Drop>::drop(p0);
+<terminal::Terminal<B>>::drop(p0);
-----------------
src/terminal.rs terminal::Terminal::<B>::new
deps:{"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::new":{"B":["std::marker::Sized","backend::Backend"]}}
candidates:{"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::new":{"B":["backend::test::TestBackend","backend::termion::TermionBackend"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // B
+terminal::Terminal::<B>::new(p0);
+crate::terminal::Terminal::<B>::new(p0);
+<terminal::Terminal<B>>::new(p0);
-----------------
src/terminal.rs terminal::Terminal::<B>::with_options
deps:{"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::with_options":{"B":["backend::Backend","std::marker::Sized"]}}
candidates:{"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::with_options":{"B":["backend::termion::TermionBackend","backend::test::TestBackend"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // B
let mut p1 = MaybeUninit::uninit().assume_init(); // terminal::TerminalOptions
+terminal::Terminal::<B>::with_options(p0, p1);
+crate::terminal::Terminal::<B>::with_options(p0, p1);
+<terminal::Terminal<B>>::with_options(p0, p1);
-----------------
src/terminal.rs terminal::Terminal::<B>::get_frame
deps:{"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::get_frame":{"B":["backend::Backend","std::marker::Sized"]}}
candidates:{"backend::termion::TermionBackend":{"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::get_frame":{"B":["backend::termion::TermionBackend","backend::test::TestBackend"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // terminal::Terminal<B>
+p0.get_frame();
+terminal::Terminal::<B>::get_frame(p0);
+crate::terminal::Terminal::<B>::get_frame(p0);
+<terminal::Terminal<B>>::get_frame(p0);
-----------------
src/terminal.rs terminal::Terminal::<B>::current_buffer_mut
deps:{"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::current_buffer_mut":{"B":["std::marker::Sized","backend::Backend"]}}
candidates:{"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::current_buffer_mut":{"B":["backend::termion::TermionBackend","backend::test::TestBackend"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // terminal::Terminal<B>
+p0.current_buffer_mut();
+terminal::Terminal::<B>::current_buffer_mut(p0);
+crate::terminal::Terminal::<B>::current_buffer_mut(p0);
+<terminal::Terminal<B>>::current_buffer_mut(p0);
-----------------
src/terminal.rs terminal::Terminal::<B>::backend
deps:{"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::backend":{"B":["std::marker::Sized","backend::Backend"]}}
candidates:{"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::backend":{"B":["backend::test::TestBackend","backend::termion::TermionBackend"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // terminal::Terminal<B>
+p0.backend();
+terminal::Terminal::<B>::backend(p0);
+crate::terminal::Terminal::<B>::backend(p0);
+<terminal::Terminal<B>>::backend(p0);
-----------------
src/terminal.rs terminal::Terminal::<B>::backend_mut
deps:{"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::backend_mut":{"B":["std::marker::Sized","backend::Backend"]}}
candidates:{"backend::termion::TermionBackend":{"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::backend_mut":{"B":["backend::test::TestBackend","backend::termion::TermionBackend"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // terminal::Terminal<B>
+p0.backend_mut();
+terminal::Terminal::<B>::backend_mut(p0);
+crate::terminal::Terminal::<B>::backend_mut(p0);
+<terminal::Terminal<B>>::backend_mut(p0);
-----------------
src/terminal.rs terminal::Terminal::<B>::flush
deps:{"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::flush":{"B":["std::marker::Sized","backend::Backend"]}}
candidates:{"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::flush":{"B":["backend::test::TestBackend","backend::termion::TermionBackend"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // terminal::Terminal<B>
+p0.flush();
+terminal::Terminal::<B>::flush(p0);
+crate::terminal::Terminal::<B>::flush(p0);
+<terminal::Terminal<B>>::flush(p0);
-----------------
src/terminal.rs terminal::Terminal::<B>::resize
deps:{"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::resize":{"B":["std::marker::Sized","backend::Backend"]}}
candidates:{"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::resize":{"B":["backend::test::TestBackend","backend::termion::TermionBackend"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // terminal::Terminal<B>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
+p0.resize(p1);
+terminal::Terminal::<B>::resize(p0, p1);
+crate::terminal::Terminal::<B>::resize(p0, p1);
+<terminal::Terminal<B>>::resize(p0, p1);
-----------------
src/terminal.rs terminal::Terminal::<B>::autoresize
deps:{"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::autoresize":{"B":["std::marker::Sized","backend::Backend"]}}
candidates:{"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::autoresize":{"B":["backend::test::TestBackend","backend::termion::TermionBackend"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // terminal::Terminal<B>
+p0.autoresize();
+terminal::Terminal::<B>::autoresize(p0);
+crate::terminal::Terminal::<B>::autoresize(p0);
+<terminal::Terminal<B>>::autoresize(p0);
-----------------
src/terminal.rs terminal::Terminal::<B>::draw
deps:{"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"terminal::Terminal::<B>::draw":{"B":["std::marker::Sized","backend::Backend"],"F":["std::marker::Sized","std::ops::FnOnce"]}}
candidates:{"backend::termion::TermionBackend":{"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"terminal::Terminal::<B>::draw":{"B":["backend::test::TestBackend","backend::termion::TermionBackend"],"F":["bitflags::core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","bitflags::core::str::BytesIsNotEmpty","bitflags::core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","bitflags::core::str::CharEscapeDebugContinue","bitflags::core::const_closure::ConstFnMutClosure<&'a mut A, Function>","bitflags::core::str::IsAsciiWhitespace","bitflags::core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>","bitflags::core::str::IsNotEmpty","std::panic::AssertUnwindSafe<F>","bitflags::core::str::IsWhitespace","bitflags::core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>","bitflags::core::slice::ascii::EscapeByte","bitflags::core::str::CharEscapeDefault","bitflags::core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","bitflags::core::str::UnsafeBytesToStr","bitflags::core::str::LinesAnyMap"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // terminal::Terminal<B>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.draw(p1);
+terminal::Terminal::<B>::draw(p0, p1);
+crate::terminal::Terminal::<B>::draw(p0, p1);
+<terminal::Terminal<B>>::draw(p0, p1);
-----------------
src/terminal.rs terminal::Terminal::<B>::hide_cursor
deps:{"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::hide_cursor":{"B":["std::marker::Sized","backend::Backend"]}}
candidates:{"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::hide_cursor":{"B":["backend::test::TestBackend","backend::termion::TermionBackend"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // terminal::Terminal<B>
+p0.hide_cursor();
+terminal::Terminal::<B>::hide_cursor(p0);
+crate::terminal::Terminal::<B>::hide_cursor(p0);
+<terminal::Terminal<B>>::hide_cursor(p0);
-----------------
src/terminal.rs terminal::Terminal::<B>::show_cursor
deps:{"backend::termion::TermionBackend":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::show_cursor":{"B":["backend::Backend","std::marker::Sized"]}}
candidates:{"backend::termion::TermionBackend":{"W":["backend::termion::TermionBackend","std::io::impls::<impl std::io::Write for &mut W>"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::show_cursor":{"B":["backend::test::TestBackend","backend::termion::TermionBackend"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // terminal::Terminal<B>
+p0.show_cursor();
+terminal::Terminal::<B>::show_cursor(p0);
+crate::terminal::Terminal::<B>::show_cursor(p0);
+<terminal::Terminal<B>>::show_cursor(p0);
-----------------
src/terminal.rs terminal::Terminal::<B>::get_cursor
deps:{"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::get_cursor":{"B":["std::marker::Sized","backend::Backend"]}}
candidates:{"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::get_cursor":{"B":["backend::termion::TermionBackend","backend::test::TestBackend"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // terminal::Terminal<B>
+p0.get_cursor();
+terminal::Terminal::<B>::get_cursor(p0);
+crate::terminal::Terminal::<B>::get_cursor(p0);
+<terminal::Terminal<B>>::get_cursor(p0);
-----------------
src/terminal.rs terminal::Terminal::<B>::set_cursor
deps:{"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::set_cursor":{"B":["std::marker::Sized","backend::Backend"]}}
candidates:{"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::set_cursor":{"B":["backend::test::TestBackend","backend::termion::TermionBackend"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // terminal::Terminal<B>
let mut p1 = 0u16; // None+u16
let mut p2 = 0u16; // None+u16
+p0.set_cursor(p1, p2);
+terminal::Terminal::<B>::set_cursor(p0, p1, p2);
+crate::terminal::Terminal::<B>::set_cursor(p0, p1, p2);
+<terminal::Terminal<B>>::set_cursor(p0, p1, p2);
-----------------
src/terminal.rs terminal::Terminal::<B>::clear
deps:{"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::clear":{"B":["std::marker::Sized","backend::Backend"]}}
candidates:{"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::clear":{"B":["backend::termion::TermionBackend","backend::test::TestBackend"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // terminal::Terminal<B>
+p0.clear();
+terminal::Terminal::<B>::clear(p0);
+crate::terminal::Terminal::<B>::clear(p0);
+<terminal::Terminal<B>>::clear(p0);
-----------------
src/terminal.rs terminal::Terminal::<B>::size
deps:{"backend::termion::TermionBackend":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::size":{"B":["std::marker::Sized","backend::Backend"]}}
candidates:{"backend::termion::TermionBackend":{"W":["std::io::impls::<impl std::io::Write for &mut W>","backend::termion::TermionBackend"]},"std::io::impls::<impl std::io::Write for &mut W>":{},"terminal::Terminal::<B>::size":{"B":["backend::termion::TermionBackend","backend::test::TestBackend"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // terminal::Terminal<B>
+p0.size();
+terminal::Terminal::<B>::size(p0);
+crate::terminal::Terminal::<B>::size(p0);
+<terminal::Terminal<B>>::size(p0);
-----------------
src/text.rs <text::StyledGrapheme<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // text::StyledGrapheme<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<text::StyledGrapheme<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<text::StyledGrapheme<'a> as std::fmt::Debug>::fmt(p0, p1);
+<text::StyledGrapheme<'a>>::fmt(p0, p1);
-----------------
src/text.rs <text::StyledGrapheme<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // text::StyledGrapheme<'a>
+p0.clone();
+<text::StyledGrapheme<'a> as std::clone::Clone>::clone(p0);
+crate::<text::StyledGrapheme<'a> as std::clone::Clone>::clone(p0);
+<text::StyledGrapheme<'a>>::clone(p0);
-----------------
src/text.rs <text::StyledGrapheme<'a> as std::cmp::PartialEq>::eq
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // text::StyledGrapheme<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // text::StyledGrapheme<'a>
+p0.eq(p1);
+<text::StyledGrapheme<'a> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<text::StyledGrapheme<'a> as std::cmp::PartialEq>::eq(p0, p1);
+<text::StyledGrapheme<'a>>::eq(p0, p1);
-----------------
src/text.rs <text::Span<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // text::Span<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<text::Span<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<text::Span<'a> as std::fmt::Debug>::fmt(p0, p1);
+<text::Span<'a>>::fmt(p0, p1);
-----------------
src/text.rs <text::Span<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // text::Span<'a>
+p0.clone();
+<text::Span<'a> as std::clone::Clone>::clone(p0);
+crate::<text::Span<'a> as std::clone::Clone>::clone(p0);
+<text::Span<'a>>::clone(p0);
-----------------
src/text.rs <text::Span<'a> as std::cmp::PartialEq>::eq
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // text::Span<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // text::Span<'a>
+p0.eq(p1);
+<text::Span<'a> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<text::Span<'a> as std::cmp::PartialEq>::eq(p0, p1);
+<text::Span<'a>>::eq(p0, p1);
-----------------
src/text.rs text::Span::<'a>::raw
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"text::Span::<'a>::raw":{"T":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"text::Span::<'a>::raw":{"T":["<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected","std::process::ExitStatusError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+text::Span::<'a>::raw(p0);
+crate::text::Span::<'a>::raw(p0);
+<text::Span<'a>>::raw(p0);
-----------------
src/text.rs text::Span::<'a>::styled
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"text::Span::<'a>::styled":{"T":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"text::Span::<'a>::styled":{"T":["std::sys::unix::process::process_inner::ExitStatusError","<T as std::convert::Into<U>>","std::sync::mpmc::select::Selected","std::process::ExitStatusError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+text::Span::<'a>::styled(p0, p1);
+crate::text::Span::<'a>::styled(p0, p1);
+<text::Span<'a>>::styled(p0, p1);
-----------------
src/text.rs text::Span::<'a>::width
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // text::Span<'a>
+p0.width();
+text::Span::<'a>::width(p0);
+crate::text::Span::<'a>::width(p0);
+<text::Span<'a>>::width(p0);
-----------------
src/text.rs text::Span::<'a>::styled_graphemes
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // text::Span<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.styled_graphemes(p1);
+text::Span::<'a>::styled_graphemes(p0, p1);
+crate::text::Span::<'a>::styled_graphemes(p0, p1);
+<text::Span<'a>>::styled_graphemes(p0, p1);
-----------------
src/text.rs <text::Span<'a> as std::convert::From<std::string::String>>::from
'a
deps:{}
candidates:{}
let mut p0 = std::string::String::new(); // None+std::string::String
+<text::Span<'a> as std::convert::From<std::string::String>>::from(p0);
+crate::<text::Span<'a> as std::convert::From<std::string::String>>::from(p0);
+<text::Span<'a>>::from(p0);
-----------------
src/text.rs <text::Span<'a> as std::convert::From<&'a str>>::from
'a
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<text::Span<'a> as std::convert::From<&'a str>>::from(&p0);
+crate::<text::Span<'a> as std::convert::From<&'a str>>::from(&p0);
+<text::Span<'a>>::from(&p0);
-----------------
src/text.rs <text::Spans<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // text::Spans<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<text::Spans<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<text::Spans<'a> as std::fmt::Debug>::fmt(p0, p1);
+<text::Spans<'a>>::fmt(p0, p1);
-----------------
src/text.rs <text::Spans<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // text::Spans<'a>
+p0.clone();
+<text::Spans<'a> as std::clone::Clone>::clone(p0);
+crate::<text::Spans<'a> as std::clone::Clone>::clone(p0);
+<text::Spans<'a>>::clone(p0);
-----------------
src/text.rs <text::Spans<'a> as std::cmp::PartialEq>::eq
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // text::Spans<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // text::Spans<'a>
+p0.eq(p1);
+<text::Spans<'a> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<text::Spans<'a> as std::cmp::PartialEq>::eq(p0, p1);
+<text::Spans<'a>>::eq(p0, p1);
-----------------
src/text.rs <text::Spans<'a> as std::default::Default>::default
'a
deps:{}
candidates:{}
+<text::Spans<'a> as std::default::Default>::default();
+crate::<text::Spans<'a> as std::default::Default>::default();
+<text::Spans<'a>>::default();
-----------------
src/text.rs text::Spans::<'a>::width
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // text::Spans<'a>
+p0.width();
+text::Spans::<'a>::width(p0);
+crate::text::Spans::<'a>::width(p0);
+<text::Spans<'a>>::width(p0);
-----------------
src/text.rs <text::Spans<'a> as std::convert::From<std::string::String>>::from
'a
deps:{}
candidates:{}
let mut p0 = std::string::String::new(); // None+std::string::String
+<text::Spans<'a> as std::convert::From<std::string::String>>::from(p0);
+crate::<text::Spans<'a> as std::convert::From<std::string::String>>::from(p0);
+<text::Spans<'a>>::from(p0);
-----------------
src/text.rs <text::Spans<'a> as std::convert::From<&'a str>>::from
'a
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<text::Spans<'a> as std::convert::From<&'a str>>::from(&p0);
+crate::<text::Spans<'a> as std::convert::From<&'a str>>::from(&p0);
+<text::Spans<'a>>::from(&p0);
-----------------
src/text.rs <text::Spans<'a> as std::convert::From<std::vec::Vec<text::Span<'a>>>>::from
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::vec::Vec<text::Span<'a>>
+<text::Spans<'a> as std::convert::From<std::vec::Vec<text::Span<'a>>>>::from(p0);
+crate::<text::Spans<'a> as std::convert::From<std::vec::Vec<text::Span<'a>>>>::from(p0);
+<text::Spans<'a>>::from(p0);
-----------------
src/text.rs <text::Spans<'a> as std::convert::From<text::Span<'a>>>::from
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // text::Span<'a>
+<text::Spans<'a> as std::convert::From<text::Span<'a>>>::from(p0);
+crate::<text::Spans<'a> as std::convert::From<text::Span<'a>>>::from(p0);
+<text::Spans<'a>>::from(p0);
-----------------
src/text.rs text::<impl std::convert::From<text::Spans<'a>> for std::string::String>::from
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // text::Spans<'a>
+text::<impl std::convert::From<text::Spans<'a>> for std::string::String>::from(p0);
+crate::text::<impl std::convert::From<text::Spans<'a>> for std::string::String>::from(p0);
+<std::string::String>::from(p0);
-----------------
src/text.rs <text::Text<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // text::Text<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<text::Text<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<text::Text<'a> as std::fmt::Debug>::fmt(p0, p1);
+<text::Text<'a>>::fmt(p0, p1);
-----------------
src/text.rs <text::Text<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // text::Text<'a>
+p0.clone();
+<text::Text<'a> as std::clone::Clone>::clone(p0);
+crate::<text::Text<'a> as std::clone::Clone>::clone(p0);
+<text::Text<'a>>::clone(p0);
-----------------
src/text.rs <text::Text<'a> as std::cmp::PartialEq>::eq
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // text::Text<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // text::Text<'a>
+p0.eq(p1);
+<text::Text<'a> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<text::Text<'a> as std::cmp::PartialEq>::eq(p0, p1);
+<text::Text<'a>>::eq(p0, p1);
-----------------
src/text.rs <text::Text<'a> as std::default::Default>::default
'a
deps:{}
candidates:{}
+<text::Text<'a> as std::default::Default>::default();
+crate::<text::Text<'a> as std::default::Default>::default();
+<text::Text<'a>>::default();
-----------------
src/text.rs text::Text::<'a>::raw
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"text::Text::<'a>::raw":{"T":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"text::Text::<'a>::raw":{"T":["<T as std::convert::Into<U>>","std::process::ExitStatusError","std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+text::Text::<'a>::raw(p0);
+crate::text::Text::<'a>::raw(p0);
+<text::Text<'a>>::raw(p0);
-----------------
src/text.rs text::Text::<'a>::styled
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"text::Text::<'a>::styled":{"T":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"text::Text::<'a>::styled":{"T":["std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError","<T as std::convert::Into<U>>","std::sync::mpmc::select::Selected"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+text::Text::<'a>::styled(p0, p1);
+crate::text::Text::<'a>::styled(p0, p1);
+<text::Text<'a>>::styled(p0, p1);
-----------------
src/text.rs text::Text::<'a>::width
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // text::Text<'a>
+p0.width();
+text::Text::<'a>::width(p0);
+crate::text::Text::<'a>::width(p0);
+<text::Text<'a>>::width(p0);
-----------------
src/text.rs text::Text::<'a>::height
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // text::Text<'a>
+p0.height();
+text::Text::<'a>::height(p0);
+crate::text::Text::<'a>::height(p0);
+<text::Text<'a>>::height(p0);
-----------------
src/text.rs text::Text::<'a>::patch_style
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // text::Text<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.patch_style(p1);
+text::Text::<'a>::patch_style(p0, p1);
+crate::text::Text::<'a>::patch_style(p0, p1);
+<text::Text<'a>>::patch_style(p0, p1);
-----------------
src/text.rs <text::Text<'a> as std::convert::From<std::string::String>>::from
'a
deps:{}
candidates:{}
let mut p0 = std::string::String::new(); // None+std::string::String
+<text::Text<'a> as std::convert::From<std::string::String>>::from(p0);
+crate::<text::Text<'a> as std::convert::From<std::string::String>>::from(p0);
+<text::Text<'a>>::from(p0);
-----------------
src/text.rs <text::Text<'a> as std::convert::From<&'a str>>::from
'a
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<text::Text<'a> as std::convert::From<&'a str>>::from(&p0);
+crate::<text::Text<'a> as std::convert::From<&'a str>>::from(&p0);
+<text::Text<'a>>::from(&p0);
-----------------
src/text.rs <text::Text<'a> as std::convert::From<text::Span<'a>>>::from
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // text::Span<'a>
+<text::Text<'a> as std::convert::From<text::Span<'a>>>::from(p0);
+crate::<text::Text<'a> as std::convert::From<text::Span<'a>>>::from(p0);
+<text::Text<'a>>::from(p0);
-----------------
src/text.rs <text::Text<'a> as std::convert::From<text::Spans<'a>>>::from
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // text::Spans<'a>
+<text::Text<'a> as std::convert::From<text::Spans<'a>>>::from(p0);
+crate::<text::Text<'a> as std::convert::From<text::Spans<'a>>>::from(p0);
+<text::Text<'a>>::from(p0);
-----------------
src/text.rs <text::Text<'a> as std::convert::From<std::vec::Vec<text::Spans<'a>>>>::from
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::vec::Vec<text::Spans<'a>>
+<text::Text<'a> as std::convert::From<std::vec::Vec<text::Spans<'a>>>>::from(p0);
+crate::<text::Text<'a> as std::convert::From<std::vec::Vec<text::Spans<'a>>>>::from(p0);
+<text::Text<'a>>::from(p0);
-----------------
src/text.rs <text::Text<'a> as std::iter::IntoIterator>::into_iter
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // text::Text<'a>
+p0.into_iter();
+<text::Text<'a> as std::iter::IntoIterator>::into_iter(p0);
+crate::<text::Text<'a> as std::iter::IntoIterator>::into_iter(p0);
+<text::Text<'a>>::into_iter(p0);
-----------------
src/text.rs <text::Text<'a> as std::iter::Extend<text::Spans<'a>>>::extend
'a
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"<text::Text<'a> as std::iter::Extend<text::Spans<'a>>>::extend":{"T":["std::marker::Sized","std::iter::IntoIterator"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::str::Lines<'a>","std::slice::ArrayChunksMut<'a, T, N>","std::collections::hash_set::Difference<'a, T, S>","std::char::CaseMappingIter","std::slice::GroupBy<'a, T, P>","std::ops::index_range::IndexRange","std::collections::hash_map::ValuesMut<'a, K, V>","std::slice::ChunksExactMut<'a, T>","std::iter::RepeatWith<F>","std::slice::Windows<'a, T>","std::collections::binary_heap::IntoIterSorted<T>","std::collections::binary_heap::Iter<'a, T>","std::slice::RChunksExactMut<'a, T>","std::slice::SplitMut<'a, T, P>","std::iter::FlatMap<I, U, F>","std::iter::adapters::GenericShunt<'_, I, R>","std::result::Iter<'a, T>","std::iter::Cloned<I>","std::boxed::Box<I, A>","std::sys_common::net::LookupHost","std::iter::SkipWhile<I, P>","std::str::EscapeDefault<'a>","std::collections::vec_deque::Iter<'a, T>","std::collections::btree_map::IterMut<'a, K, V>","std::sys::unix::os::Env","std::collections::hash_set::Union<'a, T, S>","std::iter::Scan<I, St, F>","std::iter::Skip<I>","std::collections::hash_set::Iter<'a, K>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::vec::IntoIter<T, A>","std::vec::Splice<'_, I, A>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::str::Matches<'a, P>","std::collections::btree_set::IntoIter<T, A>","std::sync::mpsc::IntoIter<T>","std::collections::hash_map::Drain<'a, K, V>","std::os::unix::net::ScmCredentials<'a>","std::iter::ByRefSized<'_, I>","std::slice::EscapeAscii<'a>","std::iter::Chain<A, B>","std::collections::btree_map::Iter<'a, K, V>","std::ops::RangeInclusive<A>","std::str::Split<'a, P>","std::collections::btree_set::Range<'a, T>","std::collections::btree_map::Keys<'a, K, V>","std::sys::unix::args::Args","std::iter::Copied<I>","std::sync::mpsc::Iter<'a, T>","std::str::SplitInclusive<'a, P>","std::ascii::EscapeDefault","std::sys::unix::fs::ReadDir","std::env::SplitPaths<'a>","std::sys_common::wstr::WStrUnits<'_>","std::str::RMatches<'a, P>","std::iter::Enumerate<I>","std::slice::RChunksExact<'a, T>","std::str::Chars<'a>","std::collections::btree_set::Intersection<'a, T, A>","std::result::IntoIter<T>","std::collections::hash_set::Drain<'a, K>","std::string::Drain<'_>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::path::Components<'a>","std::iter::Map<I, F>","std::str::SplitTerminator<'a, P>","std::collections::binary_heap::Drain<'_, T>","std::str::RSplitN<'a, P>","std::slice::RSplitMut<'a, T, P>","std::net::IntoIncoming","std::io::Lines<B>","std::slice::Chunks<'a, T>","std::path::Ancestors<'a>","std::collections::btree_map::IntoIter<K, V, A>","std::slice::SplitNMut<'a, T, P>","std::iter::FromFn<F>","std::collections::btree_map::Values<'a, K, V>","std::iter::Once<T>","std::char::EscapeDefault","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::iter::Flatten<I>","std::collections::hash_map::Iter<'a, K, V>","std::collections::hash_map::IntoIter<K, V>","std::option::IntoIter<A>","std::process::CommandArgs<'a>","std::iter::Rev<I>","std::sys_common::wtf8::EncodeWide<'a>","std::slice::ChunksMut<'a, T>","std::path::Iter<'a>","std::iter::Filter<I, P>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::io::Bytes<R>","std::collections::btree_map::RangeMut<'a, K, V>","std::slice::ArrayWindows<'a, T, N>","std::slice::GroupByMut<'a, T, P>","<&mut I as std::iter::Iterator>","std::slice::SplitInclusive<'a, T, P>","std::iter::Inspect<I, F>","bitflags::core::slice::iter::GenericSplitN<I>","std::str::Utf8Chunks<'a>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::hash_map::Keys<'a, K, V>","bitflags::core::error::Source<'a>","std::collections::btree_map::IntoValues<K, V, A>","std::slice::IterMut<'a, T>","std::ops::Range<A>","std::str::EscapeDebug<'a>","std::str::SplitN<'a, P>","std::collections::hash_map::IntoKeys<K, V>","std::str::RSplit<'a, P>","std::slice::ChunksExact<'a, T>","std::iter::OnceWith<F>","std::char::EscapeDebug","std::iter::RepeatN<A>","std::iter::Take<I>","std::collections::btree_map::IntoKeys<K, V, A>","std::sync::mpsc::TryIter<'a, T>","std::collections::hash_set::DrainFilter<'_, K, F>","std::vec::Drain<'_, T, A>","std::net::Incoming<'a>","std::char::ToLowercase","std::os::unix::net::ScmRights<'a>","std::collections::hash_map::Values<'a, K, V>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::iter::MapWhile<I, P>","std::collections::hash_map::IterMut<'a, K, V>","std::str::MatchIndices<'a, P>","std::env::VarsOs","std::collections::binary_heap::DrainSorted<'_, T>","std::char::EscapeUnicode","std::slice::RSplitNMut<'a, T, P>","std::iter::Successors<T, F>","std::iter::sources::from_generator::FromGenerator<G>","std::iter::Cycle<I>","std::collections::linked_list::IntoIter<T>","std::collections::vec_deque::Drain<'_, T, A>","std::str::RMatchIndices<'a, P>","std::collections::btree_set::SymmetricDifference<'a, T>","std::option::Iter<'a, A>","std::slice::RSplit<'a, T, P>","std::collections::hash_set::IntoIter<K>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::char::DecodeUtf16<I>","std::collections::btree_set::Difference<'a, T, A>","std::str::LinesAny<'a>","std::slice::RChunksMut<'a, T>","std::sys::unix::os::SplitPaths<'a>","std::env::ArgsOs","std::iter::Fuse<I>","std::env::Args","std::process::CommandEnvs<'a>","std::io::Split<B>","std::iter::Repeat<A>","std::iter::Zip<A, B>","std::str::CharIndices<'a>","std::iter::StepBy<I>","std::str::SplitWhitespace<'a>","std::iter::ArrayChunks<I, N>","std::slice::SplitInclusiveMut<'a, T, P>","std::collections::btree_set::Iter<'a, T>","std::ops::RangeFrom<A>","std::collections::linked_list::IterMut<'a, T>","std::os::unix::net::Incoming<'a>","std::char::ToUppercase","std::collections::linked_list::DrainFilter<'_, T, F>","std::str::RSplitTerminator<'a, P>","std::collections::btree_set::Union<'a, T>","std::option::IterMut<'a, A>","std::iter::Peekable<I>","std::iter::TakeWhile<I, P>","std::collections::hash_map::IntoValues<K, V>","std::collections::btree_map::Range<'a, K, V>","std::iter::Empty<T>","std::slice::RSplitN<'a, T, P>","std::iter::Intersperse<I>","std::array::IntoIter<T, N>","std::str::EscapeUnicode<'a>","std::iter::IntersperseWith<I, G>","std::slice::ArrayChunks<'a, T, N>","std::str::Bytes<'_>","std::fs::ReadDir","std::slice::Split<'a, T, P>","std::env::Vars","std::str::EncodeUtf16<'a>","std::result::IterMut<'a, T>","std::collections::vec_deque::IterMut<'a, T>","std::vec::DrainFilter<'_, T, F, A>","std::option::Item<A>","std::collections::linked_list::Iter<'a, T>","std::slice::RChunks<'a, T>","std::collections::binary_heap::IntoIter<T>","std::slice::Iter<'a, T>","std::collections::vec_deque::IntoIter<T, A>","std::slice::SplitN<'a, T, P>","std::iter::FilterMap<I, F>","std::os::unix::net::Messages<'a>","std::sys::unix::process::process_common::CommandArgs<'a>","std::str::SplitAsciiWhitespace<'a>","std::collections::btree_map::ValuesMut<'a, K, V>"]},"<text::Text<'a> as std::iter::Extend<text::Spans<'a>>>::extend":{"T":["<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>","text::Text","<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // text::Text<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.extend(p1);
+<text::Text<'a> as std::iter::Extend<text::Spans<'a>>>::extend(p0, p1);
+crate::<text::Text<'a> as std::iter::Extend<text::Spans<'a>>>::extend(p0, p1);
+<text::Text<'a>>::extend(p0, p1);
-----------------
src/widgets/barchart.rs <widgets::barchart::BarChart<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::barchart::BarChart<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::barchart::BarChart<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::barchart::BarChart<'a> as std::fmt::Debug>::fmt(p0, p1);
+<widgets::barchart::BarChart<'a>>::fmt(p0, p1);
-----------------
src/widgets/barchart.rs <widgets::barchart::BarChart<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::barchart::BarChart<'a>
+p0.clone();
+<widgets::barchart::BarChart<'a> as std::clone::Clone>::clone(p0);
+crate::<widgets::barchart::BarChart<'a> as std::clone::Clone>::clone(p0);
+<widgets::barchart::BarChart<'a>>::clone(p0);
-----------------
src/widgets/barchart.rs <widgets::barchart::BarChart<'a> as std::default::Default>::default
'a
deps:{}
candidates:{}
+<widgets::barchart::BarChart<'a> as std::default::Default>::default();
+crate::<widgets::barchart::BarChart<'a> as std::default::Default>::default();
+<widgets::barchart::BarChart<'a>>::default();
-----------------
src/widgets/barchart.rs widgets::barchart::BarChart::<'a>::data
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::barchart::BarChart<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // [(&'a str, u64)]
+p0.data(p1);
+widgets::barchart::BarChart::<'a>::data(p0, p1);
+crate::widgets::barchart::BarChart::<'a>::data(p0, p1);
+<widgets::barchart::BarChart<'a>>::data(p0, p1);
-----------------
src/widgets/barchart.rs widgets::barchart::BarChart::<'a>::block
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::barchart::BarChart<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
+p0.block(p1);
+widgets::barchart::BarChart::<'a>::block(p0, p1);
+crate::widgets::barchart::BarChart::<'a>::block(p0, p1);
+<widgets::barchart::BarChart<'a>>::block(p0, p1);
-----------------
src/widgets/barchart.rs widgets::barchart::BarChart::<'a>::max
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::barchart::BarChart<'a>
let mut p1 = 0u64; // None+u64
+p0.max(p1);
+widgets::barchart::BarChart::<'a>::max(p0, p1);
+crate::widgets::barchart::BarChart::<'a>::max(p0, p1);
+<widgets::barchart::BarChart<'a>>::max(p0, p1);
-----------------
src/widgets/barchart.rs widgets::barchart::BarChart::<'a>::bar_style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::barchart::BarChart<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.bar_style(p1);
+widgets::barchart::BarChart::<'a>::bar_style(p0, p1);
+crate::widgets::barchart::BarChart::<'a>::bar_style(p0, p1);
+<widgets::barchart::BarChart<'a>>::bar_style(p0, p1);
-----------------
src/widgets/barchart.rs widgets::barchart::BarChart::<'a>::bar_width
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::barchart::BarChart<'a>
let mut p1 = 0u16; // None+u16
+p0.bar_width(p1);
+widgets::barchart::BarChart::<'a>::bar_width(p0, p1);
+crate::widgets::barchart::BarChart::<'a>::bar_width(p0, p1);
+<widgets::barchart::BarChart<'a>>::bar_width(p0, p1);
-----------------
src/widgets/barchart.rs widgets::barchart::BarChart::<'a>::bar_gap
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::barchart::BarChart<'a>
let mut p1 = 0u16; // None+u16
+p0.bar_gap(p1);
+widgets::barchart::BarChart::<'a>::bar_gap(p0, p1);
+crate::widgets::barchart::BarChart::<'a>::bar_gap(p0, p1);
+<widgets::barchart::BarChart<'a>>::bar_gap(p0, p1);
-----------------
src/widgets/barchart.rs widgets::barchart::BarChart::<'a>::bar_set
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::barchart::BarChart<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // symbols::bar::Set
+p0.bar_set(p1);
+widgets::barchart::BarChart::<'a>::bar_set(p0, p1);
+crate::widgets::barchart::BarChart::<'a>::bar_set(p0, p1);
+<widgets::barchart::BarChart<'a>>::bar_set(p0, p1);
-----------------
src/widgets/barchart.rs widgets::barchart::BarChart::<'a>::value_style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::barchart::BarChart<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.value_style(p1);
+widgets::barchart::BarChart::<'a>::value_style(p0, p1);
+crate::widgets::barchart::BarChart::<'a>::value_style(p0, p1);
+<widgets::barchart::BarChart<'a>>::value_style(p0, p1);
-----------------
src/widgets/barchart.rs widgets::barchart::BarChart::<'a>::label_style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::barchart::BarChart<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.label_style(p1);
+widgets::barchart::BarChart::<'a>::label_style(p0, p1);
+crate::widgets::barchart::BarChart::<'a>::label_style(p0, p1);
+<widgets::barchart::BarChart<'a>>::label_style(p0, p1);
-----------------
src/widgets/barchart.rs widgets::barchart::BarChart::<'a>::style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::barchart::BarChart<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.style(p1);
+widgets::barchart::BarChart::<'a>::style(p0, p1);
+crate::widgets::barchart::BarChart::<'a>::style(p0, p1);
+<widgets::barchart::BarChart<'a>>::style(p0, p1);
-----------------
src/widgets/barchart.rs <widgets::barchart::BarChart<'a> as widgets::Widget>::render
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::barchart::BarChart<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.render(p1, p2);
+<widgets::barchart::BarChart<'a> as widgets::Widget>::render(p0, p1, p2);
+crate::<widgets::barchart::BarChart<'a> as widgets::Widget>::render(p0, p1, p2);
+<widgets::barchart::BarChart<'a>>::render(p0, p1, p2);
-----------------
src/widgets/block.rs <widgets::block::BorderType as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::block::BorderType
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::block::BorderType as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::block::BorderType as std::fmt::Debug>::fmt(p0, p1);
+<widgets::block::BorderType>::fmt(p0, p1);
-----------------
src/widgets/block.rs <widgets::block::BorderType as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::block::BorderType
+p0.clone();
+<widgets::block::BorderType as std::clone::Clone>::clone(p0);
+crate::<widgets::block::BorderType as std::clone::Clone>::clone(p0);
+<widgets::block::BorderType>::clone(p0);
-----------------
src/widgets/block.rs widgets::block::BorderType::line_symbols
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::block::BorderType
+widgets::block::BorderType::line_symbols(p0);
+crate::widgets::block::BorderType::line_symbols(p0);
+<widgets::block::BorderType>::line_symbols(p0);
-----------------
src/widgets/block.rs <widgets::block::Block<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::block::Block<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::block::Block<'a> as std::fmt::Debug>::fmt(p0, p1);
+<widgets::block::Block<'a>>::fmt(p0, p1);
-----------------
src/widgets/block.rs <widgets::block::Block<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
+p0.clone();
+<widgets::block::Block<'a> as std::clone::Clone>::clone(p0);
+crate::<widgets::block::Block<'a> as std::clone::Clone>::clone(p0);
+<widgets::block::Block<'a>>::clone(p0);
-----------------
src/widgets/block.rs <widgets::block::Block<'a> as std::default::Default>::default
'a
deps:{}
candidates:{}
+<widgets::block::Block<'a> as std::default::Default>::default();
+crate::<widgets::block::Block<'a> as std::default::Default>::default();
+<widgets::block::Block<'a>>::default();
-----------------
src/widgets/block.rs widgets::block::Block::<'a>::title
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"widgets::block::Block::<'a>::title":{"T":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"widgets::block::Block::<'a>::title":{"T":["std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError","<T as std::convert::Into<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.title(p1);
+widgets::block::Block::<'a>::title(p0, p1);
+crate::widgets::block::Block::<'a>::title(p0, p1);
+<widgets::block::Block<'a>>::title(p0, p1);
-----------------
src/widgets/block.rs widgets::block::Block::<'a>::title_style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.title_style(p1);
+widgets::block::Block::<'a>::title_style(p0, p1);
+crate::widgets::block::Block::<'a>::title_style(p0, p1);
+<widgets::block::Block<'a>>::title_style(p0, p1);
-----------------
src/widgets/block.rs widgets::block::Block::<'a>::border_style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.border_style(p1);
+widgets::block::Block::<'a>::border_style(p0, p1);
+crate::widgets::block::Block::<'a>::border_style(p0, p1);
+<widgets::block::Block<'a>>::border_style(p0, p1);
-----------------
src/widgets/block.rs widgets::block::Block::<'a>::style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.style(p1);
+widgets::block::Block::<'a>::style(p0, p1);
+crate::widgets::block::Block::<'a>::style(p0, p1);
+<widgets::block::Block<'a>>::style(p0, p1);
-----------------
src/widgets/block.rs widgets::block::Block::<'a>::borders
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.borders(p1);
+widgets::block::Block::<'a>::borders(p0, p1);
+crate::widgets::block::Block::<'a>::borders(p0, p1);
+<widgets::block::Block<'a>>::borders(p0, p1);
-----------------
src/widgets/block.rs widgets::block::Block::<'a>::border_type
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::block::BorderType
+p0.border_type(p1);
+widgets::block::Block::<'a>::border_type(p0, p1);
+crate::widgets::block::Block::<'a>::border_type(p0, p1);
+<widgets::block::Block<'a>>::border_type(p0, p1);
-----------------
src/widgets/block.rs widgets::block::Block::<'a>::inner
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
+p0.inner(p1);
+widgets::block::Block::<'a>::inner(p0, p1);
+crate::widgets::block::Block::<'a>::inner(p0, p1);
+<widgets::block::Block<'a>>::inner(p0, p1);
-----------------
src/widgets/block.rs <widgets::block::Block<'a> as widgets::Widget>::render
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.render(p1, p2);
+<widgets::block::Block<'a> as widgets::Widget>::render(p0, p1, p2);
+crate::<widgets::block::Block<'a> as widgets::Widget>::render(p0, p1, p2);
+<widgets::block::Block<'a>>::render(p0, p1, p2);
-----------------
src/widgets/canvas/line.rs <widgets::canvas::line::Line as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::line::Line
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::canvas::line::Line as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::canvas::line::Line as std::fmt::Debug>::fmt(p0, p1);
+<widgets::canvas::line::Line>::fmt(p0, p1);
-----------------
src/widgets/canvas/line.rs <widgets::canvas::line::Line as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::line::Line
+p0.clone();
+<widgets::canvas::line::Line as std::clone::Clone>::clone(p0);
+crate::<widgets::canvas::line::Line as std::clone::Clone>::clone(p0);
+<widgets::canvas::line::Line>::clone(p0);
-----------------
src/widgets/canvas/line.rs <widgets::canvas::line::Line as widgets::canvas::Shape>::draw
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::line::Line
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // widgets::canvas::Painter<'_, '_>
+p0.draw(p1);
+<widgets::canvas::line::Line as widgets::canvas::Shape>::draw(p0, p1);
+crate::<widgets::canvas::line::Line as widgets::canvas::Shape>::draw(p0, p1);
+<widgets::canvas::line::Line>::draw(p0, p1);
-----------------
src/widgets/canvas/map.rs <widgets::canvas::map::MapResolution as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::map::MapResolution
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::canvas::map::MapResolution as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::canvas::map::MapResolution as std::fmt::Debug>::fmt(p0, p1);
+<widgets::canvas::map::MapResolution>::fmt(p0, p1);
-----------------
src/widgets/canvas/map.rs <widgets::canvas::map::MapResolution as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::map::MapResolution
+p0.clone();
+<widgets::canvas::map::MapResolution as std::clone::Clone>::clone(p0);
+crate::<widgets::canvas::map::MapResolution as std::clone::Clone>::clone(p0);
+<widgets::canvas::map::MapResolution>::clone(p0);
-----------------
src/widgets/canvas/map.rs widgets::canvas::map::MapResolution::data
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::canvas::map::MapResolution
+p0.data();
+widgets::canvas::map::MapResolution::data(p0);
+crate::widgets::canvas::map::MapResolution::data(p0);
+<widgets::canvas::map::MapResolution>::data(p0);
-----------------
src/widgets/canvas/map.rs <widgets::canvas::map::Map as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::map::Map
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::canvas::map::Map as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::canvas::map::Map as std::fmt::Debug>::fmt(p0, p1);
+<widgets::canvas::map::Map>::fmt(p0, p1);
-----------------
src/widgets/canvas/map.rs <widgets::canvas::map::Map as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::map::Map
+p0.clone();
+<widgets::canvas::map::Map as std::clone::Clone>::clone(p0);
+crate::<widgets::canvas::map::Map as std::clone::Clone>::clone(p0);
+<widgets::canvas::map::Map>::clone(p0);
-----------------
src/widgets/canvas/map.rs <widgets::canvas::map::Map as std::default::Default>::default
deps:{}
candidates:{}
+<widgets::canvas::map::Map as std::default::Default>::default();
+crate::<widgets::canvas::map::Map as std::default::Default>::default();
+<widgets::canvas::map::Map>::default();
-----------------
src/widgets/canvas/map.rs <widgets::canvas::map::Map as widgets::canvas::Shape>::draw
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::map::Map
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // widgets::canvas::Painter<'_, '_>
+p0.draw(p1);
+<widgets::canvas::map::Map as widgets::canvas::Shape>::draw(p0, p1);
+crate::<widgets::canvas::map::Map as widgets::canvas::Shape>::draw(p0, p1);
+<widgets::canvas::map::Map>::draw(p0, p1);
-----------------
src/widgets/canvas/points.rs <widgets::canvas::points::Points<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::points::Points<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::canvas::points::Points<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::canvas::points::Points<'a> as std::fmt::Debug>::fmt(p0, p1);
+<widgets::canvas::points::Points<'a>>::fmt(p0, p1);
-----------------
src/widgets/canvas/points.rs <widgets::canvas::points::Points<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::points::Points<'a>
+p0.clone();
+<widgets::canvas::points::Points<'a> as std::clone::Clone>::clone(p0);
+crate::<widgets::canvas::points::Points<'a> as std::clone::Clone>::clone(p0);
+<widgets::canvas::points::Points<'a>>::clone(p0);
-----------------
src/widgets/canvas/points.rs <widgets::canvas::points::Points<'a> as widgets::canvas::Shape>::draw
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::points::Points<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // widgets::canvas::Painter<'_, '_>
+p0.draw(p1);
+<widgets::canvas::points::Points<'a> as widgets::canvas::Shape>::draw(p0, p1);
+crate::<widgets::canvas::points::Points<'a> as widgets::canvas::Shape>::draw(p0, p1);
+<widgets::canvas::points::Points<'a>>::draw(p0, p1);
-----------------
src/widgets/canvas/points.rs <widgets::canvas::points::Points<'a> as std::default::Default>::default
'a
deps:{}
candidates:{}
+<widgets::canvas::points::Points<'a> as std::default::Default>::default();
+crate::<widgets::canvas::points::Points<'a> as std::default::Default>::default();
+<widgets::canvas::points::Points<'a>>::default();
-----------------
src/widgets/canvas/rectangle.rs <widgets::canvas::rectangle::Rectangle as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::rectangle::Rectangle
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::canvas::rectangle::Rectangle as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::canvas::rectangle::Rectangle as std::fmt::Debug>::fmt(p0, p1);
+<widgets::canvas::rectangle::Rectangle>::fmt(p0, p1);
-----------------
src/widgets/canvas/rectangle.rs <widgets::canvas::rectangle::Rectangle as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::rectangle::Rectangle
+p0.clone();
+<widgets::canvas::rectangle::Rectangle as std::clone::Clone>::clone(p0);
+crate::<widgets::canvas::rectangle::Rectangle as std::clone::Clone>::clone(p0);
+<widgets::canvas::rectangle::Rectangle>::clone(p0);
-----------------
src/widgets/canvas/rectangle.rs <widgets::canvas::rectangle::Rectangle as widgets::canvas::Shape>::draw
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::rectangle::Rectangle
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // widgets::canvas::Painter<'_, '_>
+p0.draw(p1);
+<widgets::canvas::rectangle::Rectangle as widgets::canvas::Shape>::draw(p0, p1);
+crate::<widgets::canvas::rectangle::Rectangle as widgets::canvas::Shape>::draw(p0, p1);
+<widgets::canvas::rectangle::Rectangle>::draw(p0, p1);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::Label<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::Label<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::canvas::Label<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::canvas::Label<'a> as std::fmt::Debug>::fmt(p0, p1);
+<widgets::canvas::Label<'a>>::fmt(p0, p1);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::Label<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::Label<'a>
+p0.clone();
+<widgets::canvas::Label<'a> as std::clone::Clone>::clone(p0);
+crate::<widgets::canvas::Label<'a> as std::clone::Clone>::clone(p0);
+<widgets::canvas::Label<'a>>::clone(p0);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::Layer as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::Layer
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::canvas::Layer as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::canvas::Layer as std::fmt::Debug>::fmt(p0, p1);
+<widgets::canvas::Layer>::fmt(p0, p1);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::Layer as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::Layer
+p0.clone();
+<widgets::canvas::Layer as std::clone::Clone>::clone(p0);
+crate::<widgets::canvas::Layer as std::clone::Clone>::clone(p0);
+<widgets::canvas::Layer>::clone(p0);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::BrailleGrid as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::BrailleGrid
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::canvas::BrailleGrid as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::canvas::BrailleGrid as std::fmt::Debug>::fmt(p0, p1);
+<widgets::canvas::BrailleGrid>::fmt(p0, p1);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::BrailleGrid as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::BrailleGrid
+p0.clone();
+<widgets::canvas::BrailleGrid as std::clone::Clone>::clone(p0);
+crate::<widgets::canvas::BrailleGrid as std::clone::Clone>::clone(p0);
+<widgets::canvas::BrailleGrid>::clone(p0);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::BrailleGrid::new
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
let mut p1 = 0u16; // None+u16
+widgets::canvas::BrailleGrid::new(p0, p1);
+crate::widgets::canvas::BrailleGrid::new(p0, p1);
+<widgets::canvas::BrailleGrid>::new(p0, p1);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::BrailleGrid as widgets::canvas::Grid>::width
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::BrailleGrid
+p0.width();
+<widgets::canvas::BrailleGrid as widgets::canvas::Grid>::width(p0);
+crate::<widgets::canvas::BrailleGrid as widgets::canvas::Grid>::width(p0);
+<widgets::canvas::BrailleGrid>::width(p0);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::BrailleGrid as widgets::canvas::Grid>::height
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::BrailleGrid
+p0.height();
+<widgets::canvas::BrailleGrid as widgets::canvas::Grid>::height(p0);
+crate::<widgets::canvas::BrailleGrid as widgets::canvas::Grid>::height(p0);
+<widgets::canvas::BrailleGrid>::height(p0);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::BrailleGrid as widgets::canvas::Grid>::resolution
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::BrailleGrid
+p0.resolution();
+<widgets::canvas::BrailleGrid as widgets::canvas::Grid>::resolution(p0);
+crate::<widgets::canvas::BrailleGrid as widgets::canvas::Grid>::resolution(p0);
+<widgets::canvas::BrailleGrid>::resolution(p0);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::BrailleGrid as widgets::canvas::Grid>::save
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::BrailleGrid
+p0.save();
+<widgets::canvas::BrailleGrid as widgets::canvas::Grid>::save(p0);
+crate::<widgets::canvas::BrailleGrid as widgets::canvas::Grid>::save(p0);
+<widgets::canvas::BrailleGrid>::save(p0);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::BrailleGrid as widgets::canvas::Grid>::reset
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::canvas::BrailleGrid
+p0.reset();
+<widgets::canvas::BrailleGrid as widgets::canvas::Grid>::reset(p0);
+crate::<widgets::canvas::BrailleGrid as widgets::canvas::Grid>::reset(p0);
+<widgets::canvas::BrailleGrid>::reset(p0);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::BrailleGrid as widgets::canvas::Grid>::paint
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::canvas::BrailleGrid
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
let mut p3 = MaybeUninit::uninit().assume_init(); // style::Color
+p0.paint(p1, p2, p3);
+<widgets::canvas::BrailleGrid as widgets::canvas::Grid>::paint(p0, p1, p2, p3);
+crate::<widgets::canvas::BrailleGrid as widgets::canvas::Grid>::paint(p0, p1, p2, p3);
+<widgets::canvas::BrailleGrid>::paint(p0, p1, p2, p3);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::CharGrid as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::CharGrid
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::canvas::CharGrid as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::canvas::CharGrid as std::fmt::Debug>::fmt(p0, p1);
+<widgets::canvas::CharGrid>::fmt(p0, p1);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::CharGrid as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::CharGrid
+p0.clone();
+<widgets::canvas::CharGrid as std::clone::Clone>::clone(p0);
+crate::<widgets::canvas::CharGrid as std::clone::Clone>::clone(p0);
+<widgets::canvas::CharGrid>::clone(p0);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::CharGrid::new
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
let mut p1 = 0u16; // None+u16
let mut p2 = 'a'; // None+char
+widgets::canvas::CharGrid::new(p0, p1, p2);
+crate::widgets::canvas::CharGrid::new(p0, p1, p2);
+<widgets::canvas::CharGrid>::new(p0, p1, p2);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::CharGrid as widgets::canvas::Grid>::width
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::CharGrid
+p0.width();
+<widgets::canvas::CharGrid as widgets::canvas::Grid>::width(p0);
+crate::<widgets::canvas::CharGrid as widgets::canvas::Grid>::width(p0);
+<widgets::canvas::CharGrid>::width(p0);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::CharGrid as widgets::canvas::Grid>::height
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::CharGrid
+p0.height();
+<widgets::canvas::CharGrid as widgets::canvas::Grid>::height(p0);
+crate::<widgets::canvas::CharGrid as widgets::canvas::Grid>::height(p0);
+<widgets::canvas::CharGrid>::height(p0);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::CharGrid as widgets::canvas::Grid>::resolution
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::CharGrid
+p0.resolution();
+<widgets::canvas::CharGrid as widgets::canvas::Grid>::resolution(p0);
+crate::<widgets::canvas::CharGrid as widgets::canvas::Grid>::resolution(p0);
+<widgets::canvas::CharGrid>::resolution(p0);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::CharGrid as widgets::canvas::Grid>::save
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::CharGrid
+p0.save();
+<widgets::canvas::CharGrid as widgets::canvas::Grid>::save(p0);
+crate::<widgets::canvas::CharGrid as widgets::canvas::Grid>::save(p0);
+<widgets::canvas::CharGrid>::save(p0);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::CharGrid as widgets::canvas::Grid>::reset
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::canvas::CharGrid
+p0.reset();
+<widgets::canvas::CharGrid as widgets::canvas::Grid>::reset(p0);
+crate::<widgets::canvas::CharGrid as widgets::canvas::Grid>::reset(p0);
+<widgets::canvas::CharGrid>::reset(p0);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::CharGrid as widgets::canvas::Grid>::paint
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::canvas::CharGrid
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
let mut p3 = MaybeUninit::uninit().assume_init(); // style::Color
+p0.paint(p1, p2, p3);
+<widgets::canvas::CharGrid as widgets::canvas::Grid>::paint(p0, p1, p2, p3);
+crate::<widgets::canvas::CharGrid as widgets::canvas::Grid>::paint(p0, p1, p2, p3);
+<widgets::canvas::CharGrid>::paint(p0, p1, p2, p3);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::Painter<'a, 'b> as std::fmt::Debug>::fmt
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::Painter<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::canvas::Painter<'a, 'b> as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::canvas::Painter<'a, 'b> as std::fmt::Debug>::fmt(p0, p1);
+<widgets::canvas::Painter<'a, 'b>>::fmt(p0, p1);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Painter::<'a, 'b>::get_point
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::Painter<'a, 'b>
let mut p1 = 0f64; // None+f64
let mut p2 = 0f64; // None+f64
+p0.get_point(p1, p2);
+widgets::canvas::Painter::<'a, 'b>::get_point(p0, p1, p2);
+crate::widgets::canvas::Painter::<'a, 'b>::get_point(p0, p1, p2);
+<widgets::canvas::Painter<'a, 'b>>::get_point(p0, p1, p2);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Painter::<'a, 'b>::paint
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::canvas::Painter<'a, 'b>
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
let mut p3 = MaybeUninit::uninit().assume_init(); // style::Color
+p0.paint(p1, p2, p3);
+widgets::canvas::Painter::<'a, 'b>::paint(p0, p1, p2, p3);
+crate::widgets::canvas::Painter::<'a, 'b>::paint(p0, p1, p2, p3);
+<widgets::canvas::Painter<'a, 'b>>::paint(p0, p1, p2, p3);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::Painter<'a, 'b> as std::convert::From<&'a mut widgets::canvas::Context<'b>>>::from
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::canvas::Context<'b>
+<widgets::canvas::Painter<'a, 'b> as std::convert::From<&'a mut widgets::canvas::Context<'b>>>::from(p0);
+crate::<widgets::canvas::Painter<'a, 'b> as std::convert::From<&'a mut widgets::canvas::Context<'b>>>::from(p0);
+<widgets::canvas::Painter<'a, 'b>>::from(p0);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::Context<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::canvas::Context<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::canvas::Context<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::canvas::Context<'a> as std::fmt::Debug>::fmt(p0, p1);
+<widgets::canvas::Context<'a>>::fmt(p0, p1);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Context::<'a>::new
'a
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
let mut p1 = 0u16; // None+u16
let mut p2 = [0f64;1]; // None+[f64; 2]
let mut p3 = [0f64;1]; // None+[f64; 2]
let mut p4 = MaybeUninit::uninit().assume_init(); // symbols::Marker
+widgets::canvas::Context::<'a>::new(p0, p1, p2, p3, p4);
+crate::widgets::canvas::Context::<'a>::new(p0, p1, p2, p3, p4);
+<widgets::canvas::Context<'a>>::new(p0, p1, p2, p3, p4);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Context::<'a>::draw
'a
deps:{"widgets::canvas::Context::<'a>::draw":{"S":["std::marker::Sized","widgets::canvas::Shape"]}}
candidates:{"widgets::canvas::Context::<'a>::draw":{"S":["widgets::canvas::rectangle::Rectangle","widgets::canvas::line::Line","widgets::canvas::points::Points","widgets::canvas::map::Map"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::canvas::Context<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // S
+p0.draw(p1);
+widgets::canvas::Context::<'a>::draw(p0, p1);
+crate::widgets::canvas::Context::<'a>::draw(p0, p1);
+<widgets::canvas::Context<'a>>::draw(p0, p1);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Context::<'a>::layer
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::canvas::Context<'a>
+p0.layer();
+widgets::canvas::Context::<'a>::layer(p0);
+crate::widgets::canvas::Context::<'a>::layer(p0);
+<widgets::canvas::Context<'a>>::layer(p0);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Context::<'a>::print
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::canvas::Context<'a>
let mut p1 = 0f64; // None+f64
let mut p2 = 0f64; // None+f64
let mut p3 = "sample"; // None+&str
let mut p4 = MaybeUninit::uninit().assume_init(); // style::Color
+p0.print(p1, p2, &p3, p4);
+widgets::canvas::Context::<'a>::print(p0, p1, p2, &p3, p4);
+crate::widgets::canvas::Context::<'a>::print(p0, p1, p2, &p3, p4);
+<widgets::canvas::Context<'a>>::print(p0, p1, p2, &p3, p4);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Context::<'a>::finish
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::canvas::Context<'a>
+p0.finish();
+widgets::canvas::Context::<'a>::finish(p0);
+crate::widgets::canvas::Context::<'a>::finish(p0);
+<widgets::canvas::Context<'a>>::finish(p0);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::Canvas<'a, F> as std::default::Default>::default
'a
deps:{"<widgets::canvas::Canvas<'a, F> as std::default::Default>::default":{"F":["std::ops::Fn","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
candidates:{"<widgets::canvas::Canvas<'a, F> as std::default::Default>::default":{"F":["bitflags::core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","bitflags::core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","bitflags::core::str::IsAsciiWhitespace","bitflags::core::str::IsWhitespace","bitflags::core::str::BytesIsNotEmpty","bitflags::core::str::CharEscapeDefault","bitflags::core::str::IsNotEmpty","bitflags::core::str::LinesAnyMap","bitflags::core::str::CharEscapeDebugContinue","bitflags::core::slice::ascii::EscapeByte"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
+<widgets::canvas::Canvas<'a, F> as std::default::Default>::default();
+crate::<widgets::canvas::Canvas<'a, F> as std::default::Default>::default();
+<widgets::canvas::Canvas<'a, F>>::default();
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Canvas::<'a, F>::block
'a
deps:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"widgets::canvas::Canvas::<'a, F>::block":{"F":["std::ops::Fn","std::marker::Sized"]}}
candidates:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"widgets::canvas::Canvas::<'a, F>::block":{"F":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","bitflags::core::str::LinesAnyMap","bitflags::core::str::UnsafeBytesToStr","bitflags::core::str::CharEscapeDebugContinue","bitflags::core::str::CharEscapeUnicode","bitflags::core::str::IsWhitespace","bitflags::core::str::IsAsciiWhitespace","bitflags::core::str::CharEscapeDefault","bitflags::core::str::IsNotEmpty","std::boxed::Box<F, A>","bitflags::core::slice::ascii::EscapeByte","bitflags::core::str::BytesIsNotEmpty"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::canvas::Canvas<'a, F>
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
+p0.block(p1);
+widgets::canvas::Canvas::<'a, F>::block(p0, p1);
+crate::widgets::canvas::Canvas::<'a, F>::block(p0, p1);
+<widgets::canvas::Canvas<'a, F>>::block(p0, p1);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Canvas::<'a, F>::x_bounds
'a
deps:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"widgets::canvas::Canvas::<'a, F>::x_bounds":{"F":["std::ops::Fn","std::marker::Sized"]}}
candidates:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"widgets::canvas::Canvas::<'a, F>::x_bounds":{"F":["bitflags::core::str::IsNotEmpty","std::boxed::Box<F, A>","bitflags::core::str::IsAsciiWhitespace","bitflags::core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","bitflags::core::str::LinesAnyMap","bitflags::core::str::CharEscapeDefault","bitflags::core::slice::ascii::EscapeByte","bitflags::core::str::BytesIsNotEmpty","bitflags::core::str::UnsafeBytesToStr","bitflags::core::str::CharEscapeDebugContinue","bitflags::core::str::IsWhitespace"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::canvas::Canvas<'a, F>
let mut p1 = [0f64;1]; // None+[f64; 2]
+p0.x_bounds(p1);
+widgets::canvas::Canvas::<'a, F>::x_bounds(p0, p1);
+crate::widgets::canvas::Canvas::<'a, F>::x_bounds(p0, p1);
+<widgets::canvas::Canvas<'a, F>>::x_bounds(p0, p1);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Canvas::<'a, F>::y_bounds
'a
deps:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"widgets::canvas::Canvas::<'a, F>::y_bounds":{"F":["std::ops::Fn","std::marker::Sized"]}}
candidates:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"widgets::canvas::Canvas::<'a, F>::y_bounds":{"F":["bitflags::core::str::CharEscapeUnicode","bitflags::core::str::BytesIsNotEmpty","bitflags::core::str::IsNotEmpty","bitflags::core::str::UnsafeBytesToStr","std::boxed::Box<F, A>","bitflags::core::str::CharEscapeDefault","bitflags::core::slice::ascii::EscapeByte","bitflags::core::str::IsAsciiWhitespace","bitflags::core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","bitflags::core::str::IsWhitespace","bitflags::core::str::LinesAnyMap"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::canvas::Canvas<'a, F>
let mut p1 = [0f64;1]; // None+[f64; 2]
+p0.y_bounds(p1);
+widgets::canvas::Canvas::<'a, F>::y_bounds(p0, p1);
+crate::widgets::canvas::Canvas::<'a, F>::y_bounds(p0, p1);
+<widgets::canvas::Canvas<'a, F>>::y_bounds(p0, p1);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Canvas::<'a, F>::paint
'a
deps:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"widgets::canvas::Canvas::<'a, F>::paint":{"F":["std::marker::Sized","std::ops::Fn"]}}
candidates:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"widgets::canvas::Canvas::<'a, F>::paint":{"F":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","bitflags::core::str::CharEscapeDefault","bitflags::core::str::CharEscapeUnicode","std::boxed::Box<F, A>","bitflags::core::str::LinesAnyMap","bitflags::core::str::BytesIsNotEmpty","bitflags::core::str::IsWhitespace","bitflags::core::slice::ascii::EscapeByte","bitflags::core::str::CharEscapeDebugContinue","bitflags::core::str::UnsafeBytesToStr","bitflags::core::str::IsAsciiWhitespace","bitflags::core::str::IsNotEmpty"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::canvas::Canvas<'a, F>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.paint(p1);
+widgets::canvas::Canvas::<'a, F>::paint(p0, p1);
+crate::widgets::canvas::Canvas::<'a, F>::paint(p0, p1);
+<widgets::canvas::Canvas<'a, F>>::paint(p0, p1);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Canvas::<'a, F>::background_color
'a
deps:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"widgets::canvas::Canvas::<'a, F>::background_color":{"F":["std::marker::Sized","std::ops::Fn"]}}
candidates:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"widgets::canvas::Canvas::<'a, F>::background_color":{"F":["bitflags::core::str::CharEscapeDebugContinue","bitflags::core::str::UnsafeBytesToStr","bitflags::core::str::BytesIsNotEmpty","bitflags::core::slice::ascii::EscapeByte","bitflags::core::str::IsAsciiWhitespace","bitflags::core::str::CharEscapeUnicode","bitflags::core::str::IsNotEmpty","bitflags::core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","bitflags::core::str::LinesAnyMap","bitflags::core::str::IsWhitespace"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::canvas::Canvas<'a, F>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Color
+p0.background_color(p1);
+widgets::canvas::Canvas::<'a, F>::background_color(p0, p1);
+crate::widgets::canvas::Canvas::<'a, F>::background_color(p0, p1);
+<widgets::canvas::Canvas<'a, F>>::background_color(p0, p1);
-----------------
src/widgets/canvas/mod.rs widgets::canvas::Canvas::<'a, F>::marker
'a
deps:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"widgets::canvas::Canvas::<'a, F>::marker":{"F":["std::marker::Sized","std::ops::Fn"]}}
candidates:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"widgets::canvas::Canvas::<'a, F>::marker":{"F":["bitflags::core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","bitflags::core::str::IsNotEmpty","bitflags::core::str::LinesAnyMap","bitflags::core::slice::ascii::EscapeByte","bitflags::core::str::BytesIsNotEmpty","bitflags::core::str::CharEscapeUnicode","bitflags::core::str::UnsafeBytesToStr","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","bitflags::core::str::IsAsciiWhitespace","bitflags::core::str::CharEscapeDefault","bitflags::core::str::IsWhitespace"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::canvas::Canvas<'a, F>
let mut p1 = MaybeUninit::uninit().assume_init(); // symbols::Marker
+p0.marker(p1);
+widgets::canvas::Canvas::<'a, F>::marker(p0, p1);
+crate::widgets::canvas::Canvas::<'a, F>::marker(p0, p1);
+<widgets::canvas::Canvas<'a, F>>::marker(p0, p1);
-----------------
src/widgets/canvas/mod.rs <widgets::canvas::Canvas<'a, F> as widgets::Widget>::render
'a
deps:{"<widgets::canvas::Canvas<'a, F> as widgets::Widget>::render":{"F":["std::marker::Sized","std::ops::Fn"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
candidates:{"<widgets::canvas::Canvas<'a, F> as widgets::Widget>::render":{"F":["bitflags::core::str::IsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","bitflags::core::str::UnsafeBytesToStr","bitflags::core::str::LinesAnyMap","bitflags::core::str::CharEscapeDefault","bitflags::core::str::CharEscapeDebugContinue","bitflags::core::str::IsWhitespace","bitflags::core::slice::ascii::EscapeByte","bitflags::core::str::CharEscapeUnicode","bitflags::core::str::BytesIsNotEmpty","bitflags::core::str::IsAsciiWhitespace","std::boxed::Box<F, A>"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::canvas::Canvas<'a, F>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.render(p1, p2);
+<widgets::canvas::Canvas<'a, F> as widgets::Widget>::render(p0, p1, p2);
+crate::<widgets::canvas::Canvas<'a, F> as widgets::Widget>::render(p0, p1, p2);
+<widgets::canvas::Canvas<'a, F>>::render(p0, p1, p2);
-----------------
src/widgets/chart.rs <widgets::chart::Axis<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::chart::Axis<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::chart::Axis<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::chart::Axis<'a> as std::fmt::Debug>::fmt(p0, p1);
+<widgets::chart::Axis<'a>>::fmt(p0, p1);
-----------------
src/widgets/chart.rs <widgets::chart::Axis<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::chart::Axis<'a>
+p0.clone();
+<widgets::chart::Axis<'a> as std::clone::Clone>::clone(p0);
+crate::<widgets::chart::Axis<'a> as std::clone::Clone>::clone(p0);
+<widgets::chart::Axis<'a>>::clone(p0);
-----------------
src/widgets/chart.rs <widgets::chart::Axis<'a> as std::default::Default>::default
'a
deps:{}
candidates:{}
+<widgets::chart::Axis<'a> as std::default::Default>::default();
+crate::<widgets::chart::Axis<'a> as std::default::Default>::default();
+<widgets::chart::Axis<'a>>::default();
-----------------
src/widgets/chart.rs widgets::chart::Axis::<'a>::title
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"widgets::chart::Axis::<'a>::title":{"T":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"widgets::chart::Axis::<'a>::title":{"T":["<T as std::convert::Into<U>>","std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::chart::Axis<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.title(p1);
+widgets::chart::Axis::<'a>::title(p0, p1);
+crate::widgets::chart::Axis::<'a>::title(p0, p1);
+<widgets::chart::Axis<'a>>::title(p0, p1);
-----------------
src/widgets/chart.rs widgets::chart::Axis::<'a>::title_style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::chart::Axis<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.title_style(p1);
+widgets::chart::Axis::<'a>::title_style(p0, p1);
+crate::widgets::chart::Axis::<'a>::title_style(p0, p1);
+<widgets::chart::Axis<'a>>::title_style(p0, p1);
-----------------
src/widgets/chart.rs widgets::chart::Axis::<'a>::bounds
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::chart::Axis<'a>
let mut p1 = [0f64;1]; // None+[f64; 2]
+p0.bounds(p1);
+widgets::chart::Axis::<'a>::bounds(p0, p1);
+crate::widgets::chart::Axis::<'a>::bounds(p0, p1);
+<widgets::chart::Axis<'a>>::bounds(p0, p1);
-----------------
src/widgets/chart.rs widgets::chart::Axis::<'a>::labels
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::chart::Axis<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // std::vec::Vec<text::Span<'a>>
+p0.labels(p1);
+widgets::chart::Axis::<'a>::labels(p0, p1);
+crate::widgets::chart::Axis::<'a>::labels(p0, p1);
+<widgets::chart::Axis<'a>>::labels(p0, p1);
-----------------
src/widgets/chart.rs widgets::chart::Axis::<'a>::style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::chart::Axis<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.style(p1);
+widgets::chart::Axis::<'a>::style(p0, p1);
+crate::widgets::chart::Axis::<'a>::style(p0, p1);
+<widgets::chart::Axis<'a>>::style(p0, p1);
-----------------
src/widgets/chart.rs <widgets::chart::GraphType as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::chart::GraphType
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::chart::GraphType as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::chart::GraphType as std::fmt::Debug>::fmt(p0, p1);
+<widgets::chart::GraphType>::fmt(p0, p1);
-----------------
src/widgets/chart.rs <widgets::chart::GraphType as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::chart::GraphType
+p0.clone();
+<widgets::chart::GraphType as std::clone::Clone>::clone(p0);
+crate::<widgets::chart::GraphType as std::clone::Clone>::clone(p0);
+<widgets::chart::GraphType>::clone(p0);
-----------------
src/widgets/chart.rs <widgets::chart::Dataset<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::chart::Dataset<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::chart::Dataset<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::chart::Dataset<'a> as std::fmt::Debug>::fmt(p0, p1);
+<widgets::chart::Dataset<'a>>::fmt(p0, p1);
-----------------
src/widgets/chart.rs <widgets::chart::Dataset<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::chart::Dataset<'a>
+p0.clone();
+<widgets::chart::Dataset<'a> as std::clone::Clone>::clone(p0);
+crate::<widgets::chart::Dataset<'a> as std::clone::Clone>::clone(p0);
+<widgets::chart::Dataset<'a>>::clone(p0);
-----------------
src/widgets/chart.rs <widgets::chart::Dataset<'a> as std::default::Default>::default
'a
deps:{}
candidates:{}
+<widgets::chart::Dataset<'a> as std::default::Default>::default();
+crate::<widgets::chart::Dataset<'a> as std::default::Default>::default();
+<widgets::chart::Dataset<'a>>::default();
-----------------
src/widgets/chart.rs widgets::chart::Dataset::<'a>::name
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"widgets::chart::Dataset::<'a>::name":{"S":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"widgets::chart::Dataset::<'a>::name":{"S":["<T as std::convert::Into<U>>","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::chart::Dataset<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.name(p1);
+widgets::chart::Dataset::<'a>::name(p0, p1);
+crate::widgets::chart::Dataset::<'a>::name(p0, p1);
+<widgets::chart::Dataset<'a>>::name(p0, p1);
-----------------
src/widgets/chart.rs widgets::chart::Dataset::<'a>::data
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::chart::Dataset<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // [(f64, f64)]
+p0.data(p1);
+widgets::chart::Dataset::<'a>::data(p0, p1);
+crate::widgets::chart::Dataset::<'a>::data(p0, p1);
+<widgets::chart::Dataset<'a>>::data(p0, p1);
-----------------
src/widgets/chart.rs widgets::chart::Dataset::<'a>::marker
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::chart::Dataset<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // symbols::Marker
+p0.marker(p1);
+widgets::chart::Dataset::<'a>::marker(p0, p1);
+crate::widgets::chart::Dataset::<'a>::marker(p0, p1);
+<widgets::chart::Dataset<'a>>::marker(p0, p1);
-----------------
src/widgets/chart.rs widgets::chart::Dataset::<'a>::graph_type
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::chart::Dataset<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::chart::GraphType
+p0.graph_type(p1);
+widgets::chart::Dataset::<'a>::graph_type(p0, p1);
+crate::widgets::chart::Dataset::<'a>::graph_type(p0, p1);
+<widgets::chart::Dataset<'a>>::graph_type(p0, p1);
-----------------
src/widgets/chart.rs widgets::chart::Dataset::<'a>::style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::chart::Dataset<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.style(p1);
+widgets::chart::Dataset::<'a>::style(p0, p1);
+crate::widgets::chart::Dataset::<'a>::style(p0, p1);
+<widgets::chart::Dataset<'a>>::style(p0, p1);
-----------------
src/widgets/chart.rs <widgets::chart::ChartLayout as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::chart::ChartLayout
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::chart::ChartLayout as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::chart::ChartLayout as std::fmt::Debug>::fmt(p0, p1);
+<widgets::chart::ChartLayout>::fmt(p0, p1);
-----------------
src/widgets/chart.rs <widgets::chart::ChartLayout as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::chart::ChartLayout
+p0.clone();
+<widgets::chart::ChartLayout as std::clone::Clone>::clone(p0);
+crate::<widgets::chart::ChartLayout as std::clone::Clone>::clone(p0);
+<widgets::chart::ChartLayout>::clone(p0);
-----------------
src/widgets/chart.rs <widgets::chart::ChartLayout as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::chart::ChartLayout
let mut p1 = & MaybeUninit::uninit().assume_init(); // widgets::chart::ChartLayout
+p0.eq(p1);
+<widgets::chart::ChartLayout as std::cmp::PartialEq>::eq(p0, p1);
+crate::<widgets::chart::ChartLayout as std::cmp::PartialEq>::eq(p0, p1);
+<widgets::chart::ChartLayout>::eq(p0, p1);
-----------------
src/widgets/chart.rs <widgets::chart::ChartLayout as std::default::Default>::default
deps:{}
candidates:{}
+<widgets::chart::ChartLayout as std::default::Default>::default();
+crate::<widgets::chart::ChartLayout as std::default::Default>::default();
+<widgets::chart::ChartLayout>::default();
-----------------
src/widgets/chart.rs <widgets::chart::Chart<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::chart::Chart<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::chart::Chart<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::chart::Chart<'a> as std::fmt::Debug>::fmt(p0, p1);
+<widgets::chart::Chart<'a>>::fmt(p0, p1);
-----------------
src/widgets/chart.rs <widgets::chart::Chart<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::chart::Chart<'a>
+p0.clone();
+<widgets::chart::Chart<'a> as std::clone::Clone>::clone(p0);
+crate::<widgets::chart::Chart<'a> as std::clone::Clone>::clone(p0);
+<widgets::chart::Chart<'a>>::clone(p0);
-----------------
src/widgets/chart.rs widgets::chart::Chart::<'a>::new
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::vec::Vec<widgets::chart::Dataset<'a>>
+widgets::chart::Chart::<'a>::new(p0);
+crate::widgets::chart::Chart::<'a>::new(p0);
+<widgets::chart::Chart<'a>>::new(p0);
-----------------
src/widgets/chart.rs widgets::chart::Chart::<'a>::block
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::chart::Chart<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
+p0.block(p1);
+widgets::chart::Chart::<'a>::block(p0, p1);
+crate::widgets::chart::Chart::<'a>::block(p0, p1);
+<widgets::chart::Chart<'a>>::block(p0, p1);
-----------------
src/widgets/chart.rs widgets::chart::Chart::<'a>::style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::chart::Chart<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.style(p1);
+widgets::chart::Chart::<'a>::style(p0, p1);
+crate::widgets::chart::Chart::<'a>::style(p0, p1);
+<widgets::chart::Chart<'a>>::style(p0, p1);
-----------------
src/widgets/chart.rs widgets::chart::Chart::<'a>::x_axis
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::chart::Chart<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::chart::Axis<'a>
+p0.x_axis(p1);
+widgets::chart::Chart::<'a>::x_axis(p0, p1);
+crate::widgets::chart::Chart::<'a>::x_axis(p0, p1);
+<widgets::chart::Chart<'a>>::x_axis(p0, p1);
-----------------
src/widgets/chart.rs widgets::chart::Chart::<'a>::y_axis
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::chart::Chart<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::chart::Axis<'a>
+p0.y_axis(p1);
+widgets::chart::Chart::<'a>::y_axis(p0, p1);
+crate::widgets::chart::Chart::<'a>::y_axis(p0, p1);
+<widgets::chart::Chart<'a>>::y_axis(p0, p1);
-----------------
src/widgets/chart.rs widgets::chart::Chart::<'a>::hidden_legend_constraints
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::chart::Chart<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // (layout::Constraint, layout::Constraint)
+p0.hidden_legend_constraints(p1);
+widgets::chart::Chart::<'a>::hidden_legend_constraints(p0, p1);
+crate::widgets::chart::Chart::<'a>::hidden_legend_constraints(p0, p1);
+<widgets::chart::Chart<'a>>::hidden_legend_constraints(p0, p1);
-----------------
src/widgets/chart.rs widgets::chart::Chart::<'a>::layout
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::chart::Chart<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
+p0.layout(p1);
+widgets::chart::Chart::<'a>::layout(p0, p1);
+crate::widgets::chart::Chart::<'a>::layout(p0, p1);
+<widgets::chart::Chart<'a>>::layout(p0, p1);
-----------------
src/widgets/chart.rs <widgets::chart::Chart<'a> as widgets::Widget>::render
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::chart::Chart<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.render(p1, p2);
+<widgets::chart::Chart<'a> as widgets::Widget>::render(p0, p1, p2);
+crate::<widgets::chart::Chart<'a> as widgets::Widget>::render(p0, p1, p2);
+<widgets::chart::Chart<'a>>::render(p0, p1, p2);
-----------------
src/widgets/clear.rs <widgets::clear::Clear as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::clear::Clear
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::clear::Clear as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::clear::Clear as std::fmt::Debug>::fmt(p0, p1);
+<widgets::clear::Clear>::fmt(p0, p1);
-----------------
src/widgets/clear.rs <widgets::clear::Clear as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::clear::Clear
+p0.clone();
+<widgets::clear::Clear as std::clone::Clone>::clone(p0);
+crate::<widgets::clear::Clear as std::clone::Clone>::clone(p0);
+<widgets::clear::Clear>::clone(p0);
-----------------
src/widgets/clear.rs <widgets::clear::Clear as widgets::Widget>::render
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::clear::Clear
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.render(p1, p2);
+<widgets::clear::Clear as widgets::Widget>::render(p0, p1, p2);
+crate::<widgets::clear::Clear as widgets::Widget>::render(p0, p1, p2);
+<widgets::clear::Clear>::render(p0, p1, p2);
-----------------
src/widgets/gauge.rs <widgets::gauge::Gauge<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::gauge::Gauge<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::gauge::Gauge<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::gauge::Gauge<'a> as std::fmt::Debug>::fmt(p0, p1);
+<widgets::gauge::Gauge<'a>>::fmt(p0, p1);
-----------------
src/widgets/gauge.rs <widgets::gauge::Gauge<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::gauge::Gauge<'a>
+p0.clone();
+<widgets::gauge::Gauge<'a> as std::clone::Clone>::clone(p0);
+crate::<widgets::gauge::Gauge<'a> as std::clone::Clone>::clone(p0);
+<widgets::gauge::Gauge<'a>>::clone(p0);
-----------------
src/widgets/gauge.rs <widgets::gauge::Gauge<'a> as std::default::Default>::default
'a
deps:{}
candidates:{}
+<widgets::gauge::Gauge<'a> as std::default::Default>::default();
+crate::<widgets::gauge::Gauge<'a> as std::default::Default>::default();
+<widgets::gauge::Gauge<'a>>::default();
-----------------
src/widgets/gauge.rs widgets::gauge::Gauge::<'a>::block
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::gauge::Gauge<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
+p0.block(p1);
+widgets::gauge::Gauge::<'a>::block(p0, p1);
+crate::widgets::gauge::Gauge::<'a>::block(p0, p1);
+<widgets::gauge::Gauge<'a>>::block(p0, p1);
-----------------
src/widgets/gauge.rs widgets::gauge::Gauge::<'a>::percent
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::gauge::Gauge<'a>
let mut p1 = 0u16; // None+u16
+p0.percent(p1);
+widgets::gauge::Gauge::<'a>::percent(p0, p1);
+crate::widgets::gauge::Gauge::<'a>::percent(p0, p1);
+<widgets::gauge::Gauge<'a>>::percent(p0, p1);
-----------------
src/widgets/gauge.rs widgets::gauge::Gauge::<'a>::ratio
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::gauge::Gauge<'a>
let mut p1 = 0f64; // None+f64
+p0.ratio(p1);
+widgets::gauge::Gauge::<'a>::ratio(p0, p1);
+crate::widgets::gauge::Gauge::<'a>::ratio(p0, p1);
+<widgets::gauge::Gauge<'a>>::ratio(p0, p1);
-----------------
src/widgets/gauge.rs widgets::gauge::Gauge::<'a>::label
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"widgets::gauge::Gauge::<'a>::label":{"T":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"widgets::gauge::Gauge::<'a>::label":{"T":["<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected","std::process::ExitStatusError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::gauge::Gauge<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.label(p1);
+widgets::gauge::Gauge::<'a>::label(p0, p1);
+crate::widgets::gauge::Gauge::<'a>::label(p0, p1);
+<widgets::gauge::Gauge<'a>>::label(p0, p1);
-----------------
src/widgets/gauge.rs widgets::gauge::Gauge::<'a>::style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::gauge::Gauge<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.style(p1);
+widgets::gauge::Gauge::<'a>::style(p0, p1);
+crate::widgets::gauge::Gauge::<'a>::style(p0, p1);
+<widgets::gauge::Gauge<'a>>::style(p0, p1);
-----------------
src/widgets/gauge.rs widgets::gauge::Gauge::<'a>::gauge_style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::gauge::Gauge<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.gauge_style(p1);
+widgets::gauge::Gauge::<'a>::gauge_style(p0, p1);
+crate::widgets::gauge::Gauge::<'a>::gauge_style(p0, p1);
+<widgets::gauge::Gauge<'a>>::gauge_style(p0, p1);
-----------------
src/widgets/gauge.rs <widgets::gauge::Gauge<'a> as widgets::Widget>::render
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::gauge::Gauge<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.render(p1, p2);
+<widgets::gauge::Gauge<'a> as widgets::Widget>::render(p0, p1, p2);
+crate::<widgets::gauge::Gauge<'a> as widgets::Widget>::render(p0, p1, p2);
+<widgets::gauge::Gauge<'a>>::render(p0, p1, p2);
-----------------
src/widgets/gauge.rs <widgets::gauge::LineGauge<'a> as std::default::Default>::default
'a
deps:{}
candidates:{}
+<widgets::gauge::LineGauge<'a> as std::default::Default>::default();
+crate::<widgets::gauge::LineGauge<'a> as std::default::Default>::default();
+<widgets::gauge::LineGauge<'a>>::default();
-----------------
src/widgets/gauge.rs widgets::gauge::LineGauge::<'a>::block
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::gauge::LineGauge<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
+p0.block(p1);
+widgets::gauge::LineGauge::<'a>::block(p0, p1);
+crate::widgets::gauge::LineGauge::<'a>::block(p0, p1);
+<widgets::gauge::LineGauge<'a>>::block(p0, p1);
-----------------
src/widgets/gauge.rs widgets::gauge::LineGauge::<'a>::ratio
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::gauge::LineGauge<'a>
let mut p1 = 0f64; // None+f64
+p0.ratio(p1);
+widgets::gauge::LineGauge::<'a>::ratio(p0, p1);
+crate::widgets::gauge::LineGauge::<'a>::ratio(p0, p1);
+<widgets::gauge::LineGauge<'a>>::ratio(p0, p1);
-----------------
src/widgets/gauge.rs widgets::gauge::LineGauge::<'a>::line_set
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::gauge::LineGauge<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // symbols::line::Set
+p0.line_set(p1);
+widgets::gauge::LineGauge::<'a>::line_set(p0, p1);
+crate::widgets::gauge::LineGauge::<'a>::line_set(p0, p1);
+<widgets::gauge::LineGauge<'a>>::line_set(p0, p1);
-----------------
src/widgets/gauge.rs widgets::gauge::LineGauge::<'a>::label
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"widgets::gauge::LineGauge::<'a>::label":{"T":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"widgets::gauge::LineGauge::<'a>::label":{"T":["<T as std::convert::Into<U>>","std::process::ExitStatusError","std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::gauge::LineGauge<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.label(p1);
+widgets::gauge::LineGauge::<'a>::label(p0, p1);
+crate::widgets::gauge::LineGauge::<'a>::label(p0, p1);
+<widgets::gauge::LineGauge<'a>>::label(p0, p1);
-----------------
src/widgets/gauge.rs widgets::gauge::LineGauge::<'a>::style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::gauge::LineGauge<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.style(p1);
+widgets::gauge::LineGauge::<'a>::style(p0, p1);
+crate::widgets::gauge::LineGauge::<'a>::style(p0, p1);
+<widgets::gauge::LineGauge<'a>>::style(p0, p1);
-----------------
src/widgets/gauge.rs widgets::gauge::LineGauge::<'a>::gauge_style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::gauge::LineGauge<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.gauge_style(p1);
+widgets::gauge::LineGauge::<'a>::gauge_style(p0, p1);
+crate::widgets::gauge::LineGauge::<'a>::gauge_style(p0, p1);
+<widgets::gauge::LineGauge<'a>>::gauge_style(p0, p1);
-----------------
src/widgets/gauge.rs <widgets::gauge::LineGauge<'a> as widgets::Widget>::render
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::gauge::LineGauge<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.render(p1, p2);
+<widgets::gauge::LineGauge<'a> as widgets::Widget>::render(p0, p1, p2);
+crate::<widgets::gauge::LineGauge<'a> as widgets::Widget>::render(p0, p1, p2);
+<widgets::gauge::LineGauge<'a>>::render(p0, p1, p2);
-----------------
src/widgets/list.rs <widgets::list::ListState as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::list::ListState
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::list::ListState as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::list::ListState as std::fmt::Debug>::fmt(p0, p1);
+<widgets::list::ListState>::fmt(p0, p1);
-----------------
src/widgets/list.rs <widgets::list::ListState as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::list::ListState
+p0.clone();
+<widgets::list::ListState as std::clone::Clone>::clone(p0);
+crate::<widgets::list::ListState as std::clone::Clone>::clone(p0);
+<widgets::list::ListState>::clone(p0);
-----------------
src/widgets/list.rs <widgets::list::ListState as std::default::Default>::default
deps:{}
candidates:{}
+<widgets::list::ListState as std::default::Default>::default();
+crate::<widgets::list::ListState as std::default::Default>::default();
+<widgets::list::ListState>::default();
-----------------
src/widgets/list.rs widgets::list::ListState::selected
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::list::ListState
+p0.selected();
+widgets::list::ListState::selected(p0);
+crate::widgets::list::ListState::selected(p0);
+<widgets::list::ListState>::selected(p0);
-----------------
src/widgets/list.rs widgets::list::ListState::select
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::list::ListState
let mut p1 = MaybeUninit::uninit().assume_init(); // std::option::Option<usize>
+p0.select(p1);
+widgets::list::ListState::select(p0, p1);
+crate::widgets::list::ListState::select(p0, p1);
+<widgets::list::ListState>::select(p0, p1);
-----------------
src/widgets/list.rs <widgets::list::ListItem<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::list::ListItem<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::list::ListItem<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::list::ListItem<'a> as std::fmt::Debug>::fmt(p0, p1);
+<widgets::list::ListItem<'a>>::fmt(p0, p1);
-----------------
src/widgets/list.rs <widgets::list::ListItem<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::list::ListItem<'a>
+p0.clone();
+<widgets::list::ListItem<'a> as std::clone::Clone>::clone(p0);
+crate::<widgets::list::ListItem<'a> as std::clone::Clone>::clone(p0);
+<widgets::list::ListItem<'a>>::clone(p0);
-----------------
src/widgets/list.rs <widgets::list::ListItem<'a> as std::cmp::PartialEq>::eq
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::list::ListItem<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // widgets::list::ListItem<'a>
+p0.eq(p1);
+<widgets::list::ListItem<'a> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<widgets::list::ListItem<'a> as std::cmp::PartialEq>::eq(p0, p1);
+<widgets::list::ListItem<'a>>::eq(p0, p1);
-----------------
src/widgets/list.rs widgets::list::ListItem::<'a>::new
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"widgets::list::ListItem::<'a>::new":{"T":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"widgets::list::ListItem::<'a>::new":{"T":["std::process::ExitStatusError","<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+widgets::list::ListItem::<'a>::new(p0);
+crate::widgets::list::ListItem::<'a>::new(p0);
+<widgets::list::ListItem<'a>>::new(p0);
-----------------
src/widgets/list.rs widgets::list::ListItem::<'a>::style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::list::ListItem<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.style(p1);
+widgets::list::ListItem::<'a>::style(p0, p1);
+crate::widgets::list::ListItem::<'a>::style(p0, p1);
+<widgets::list::ListItem<'a>>::style(p0, p1);
-----------------
src/widgets/list.rs widgets::list::ListItem::<'a>::height
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::list::ListItem<'a>
+p0.height();
+widgets::list::ListItem::<'a>::height(p0);
+crate::widgets::list::ListItem::<'a>::height(p0);
+<widgets::list::ListItem<'a>>::height(p0);
-----------------
src/widgets/list.rs <widgets::list::List<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::list::List<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::list::List<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::list::List<'a> as std::fmt::Debug>::fmt(p0, p1);
+<widgets::list::List<'a>>::fmt(p0, p1);
-----------------
src/widgets/list.rs <widgets::list::List<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::list::List<'a>
+p0.clone();
+<widgets::list::List<'a> as std::clone::Clone>::clone(p0);
+crate::<widgets::list::List<'a> as std::clone::Clone>::clone(p0);
+<widgets::list::List<'a>>::clone(p0);
-----------------
src/widgets/list.rs widgets::list::List::<'a>::new
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"widgets::list::List::<'a>::new":{"T":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"widgets::list::List::<'a>::new":{"T":["std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected","std::process::ExitStatusError","<T as std::convert::Into<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+widgets::list::List::<'a>::new(p0);
+crate::widgets::list::List::<'a>::new(p0);
+<widgets::list::List<'a>>::new(p0);
-----------------
src/widgets/list.rs widgets::list::List::<'a>::block
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::list::List<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
+p0.block(p1);
+widgets::list::List::<'a>::block(p0, p1);
+crate::widgets::list::List::<'a>::block(p0, p1);
+<widgets::list::List<'a>>::block(p0, p1);
-----------------
src/widgets/list.rs widgets::list::List::<'a>::style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::list::List<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.style(p1);
+widgets::list::List::<'a>::style(p0, p1);
+crate::widgets::list::List::<'a>::style(p0, p1);
+<widgets::list::List<'a>>::style(p0, p1);
-----------------
src/widgets/list.rs widgets::list::List::<'a>::highlight_symbol
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::list::List<'a>
let mut p1 = "sample"; // None+&str
+p0.highlight_symbol(&p1);
+widgets::list::List::<'a>::highlight_symbol(p0, &p1);
+crate::widgets::list::List::<'a>::highlight_symbol(p0, &p1);
+<widgets::list::List<'a>>::highlight_symbol(p0, &p1);
-----------------
src/widgets/list.rs widgets::list::List::<'a>::highlight_style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::list::List<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.highlight_style(p1);
+widgets::list::List::<'a>::highlight_style(p0, p1);
+crate::widgets::list::List::<'a>::highlight_style(p0, p1);
+<widgets::list::List<'a>>::highlight_style(p0, p1);
-----------------
src/widgets/list.rs widgets::list::List::<'a>::start_corner
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::list::List<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Corner
+p0.start_corner(p1);
+widgets::list::List::<'a>::start_corner(p0, p1);
+crate::widgets::list::List::<'a>::start_corner(p0, p1);
+<widgets::list::List<'a>>::start_corner(p0, p1);
-----------------
src/widgets/list.rs <widgets::list::List<'a> as widgets::StatefulWidget>::render
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::list::List<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p3 = &mut  MaybeUninit::uninit().assume_init(); // <widgets::list::List<'a> as widgets::StatefulWidget>::State
+p0.render(p1, p2, p3);
+<widgets::list::List<'a> as widgets::StatefulWidget>::render(p0, p1, p2, p3);
+crate::<widgets::list::List<'a> as widgets::StatefulWidget>::render(p0, p1, p2, p3);
+<widgets::list::List<'a>>::render(p0, p1, p2, p3);
-----------------
src/widgets/list.rs <widgets::list::List<'a> as widgets::Widget>::render
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::list::List<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.render(p1, p2);
+<widgets::list::List<'a> as widgets::Widget>::render(p0, p1, p2);
+crate::<widgets::list::List<'a> as widgets::Widget>::render(p0, p1, p2);
+<widgets::list::List<'a>>::render(p0, p1, p2);
-----------------
src/widgets/paragraph.rs <widgets::paragraph::Paragraph<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::paragraph::Paragraph<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::paragraph::Paragraph<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::paragraph::Paragraph<'a> as std::fmt::Debug>::fmt(p0, p1);
+<widgets::paragraph::Paragraph<'a>>::fmt(p0, p1);
-----------------
src/widgets/paragraph.rs <widgets::paragraph::Paragraph<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::paragraph::Paragraph<'a>
+p0.clone();
+<widgets::paragraph::Paragraph<'a> as std::clone::Clone>::clone(p0);
+crate::<widgets::paragraph::Paragraph<'a> as std::clone::Clone>::clone(p0);
+<widgets::paragraph::Paragraph<'a>>::clone(p0);
-----------------
src/widgets/paragraph.rs <widgets::paragraph::Wrap as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::paragraph::Wrap
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::paragraph::Wrap as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::paragraph::Wrap as std::fmt::Debug>::fmt(p0, p1);
+<widgets::paragraph::Wrap>::fmt(p0, p1);
-----------------
src/widgets/paragraph.rs <widgets::paragraph::Wrap as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::paragraph::Wrap
+p0.clone();
+<widgets::paragraph::Wrap as std::clone::Clone>::clone(p0);
+crate::<widgets::paragraph::Wrap as std::clone::Clone>::clone(p0);
+<widgets::paragraph::Wrap>::clone(p0);
-----------------
src/widgets/paragraph.rs widgets::paragraph::Paragraph::<'a>::new
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"widgets::paragraph::Paragraph::<'a>::new":{"T":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"widgets::paragraph::Paragraph::<'a>::new":{"T":["std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError","<T as std::convert::Into<U>>","std::process::ExitStatusError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+widgets::paragraph::Paragraph::<'a>::new(p0);
+crate::widgets::paragraph::Paragraph::<'a>::new(p0);
+<widgets::paragraph::Paragraph<'a>>::new(p0);
-----------------
src/widgets/paragraph.rs widgets::paragraph::Paragraph::<'a>::block
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::paragraph::Paragraph<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
+p0.block(p1);
+widgets::paragraph::Paragraph::<'a>::block(p0, p1);
+crate::widgets::paragraph::Paragraph::<'a>::block(p0, p1);
+<widgets::paragraph::Paragraph<'a>>::block(p0, p1);
-----------------
src/widgets/paragraph.rs widgets::paragraph::Paragraph::<'a>::style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::paragraph::Paragraph<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.style(p1);
+widgets::paragraph::Paragraph::<'a>::style(p0, p1);
+crate::widgets::paragraph::Paragraph::<'a>::style(p0, p1);
+<widgets::paragraph::Paragraph<'a>>::style(p0, p1);
-----------------
src/widgets/paragraph.rs widgets::paragraph::Paragraph::<'a>::wrap
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::paragraph::Paragraph<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::paragraph::Wrap
+p0.wrap(p1);
+widgets::paragraph::Paragraph::<'a>::wrap(p0, p1);
+crate::widgets::paragraph::Paragraph::<'a>::wrap(p0, p1);
+<widgets::paragraph::Paragraph<'a>>::wrap(p0, p1);
-----------------
src/widgets/paragraph.rs widgets::paragraph::Paragraph::<'a>::scroll
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::paragraph::Paragraph<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // (u16, u16)
+p0.scroll(p1);
+widgets::paragraph::Paragraph::<'a>::scroll(p0, p1);
+crate::widgets::paragraph::Paragraph::<'a>::scroll(p0, p1);
+<widgets::paragraph::Paragraph<'a>>::scroll(p0, p1);
-----------------
src/widgets/paragraph.rs widgets::paragraph::Paragraph::<'a>::alignment
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::paragraph::Paragraph<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Alignment
+p0.alignment(p1);
+widgets::paragraph::Paragraph::<'a>::alignment(p0, p1);
+crate::widgets::paragraph::Paragraph::<'a>::alignment(p0, p1);
+<widgets::paragraph::Paragraph<'a>>::alignment(p0, p1);
-----------------
src/widgets/paragraph.rs <widgets::paragraph::Paragraph<'a> as widgets::Widget>::render
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::paragraph::Paragraph<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.render(p1, p2);
+<widgets::paragraph::Paragraph<'a> as widgets::Widget>::render(p0, p1, p2);
+crate::<widgets::paragraph::Paragraph<'a> as widgets::Widget>::render(p0, p1, p2);
+<widgets::paragraph::Paragraph<'a>>::render(p0, p1, p2);
-----------------
src/widgets/reflow.rs widgets::reflow::WordWrapper::<'a, 'b>::new
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (dyn std::iter::Iterator<Item = text::StyledGrapheme<'a>> + 'b)
let mut p1 = 0u16; // None+u16
let mut p2 = true; // None+bool
+widgets::reflow::WordWrapper::<'a, 'b>::new(p0, p1, p2);
+crate::widgets::reflow::WordWrapper::<'a, 'b>::new(p0, p1, p2);
+<widgets::reflow::WordWrapper<'a, 'b>>::new(p0, p1, p2);
-----------------
src/widgets/reflow.rs <widgets::reflow::WordWrapper<'a, 'b> as widgets::reflow::LineComposer<'a>>::next_line
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::reflow::WordWrapper<'a, 'b>
+p0.next_line();
+<widgets::reflow::WordWrapper<'a, 'b> as widgets::reflow::LineComposer<'a>>::next_line(p0);
+crate::<widgets::reflow::WordWrapper<'a, 'b> as widgets::reflow::LineComposer<'a>>::next_line(p0);
+<widgets::reflow::WordWrapper<'a, 'b>>::next_line(p0);
-----------------
src/widgets/reflow.rs widgets::reflow::LineTruncator::<'a, 'b>::new
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (dyn std::iter::Iterator<Item = text::StyledGrapheme<'a>> + 'b)
let mut p1 = 0u16; // None+u16
+widgets::reflow::LineTruncator::<'a, 'b>::new(p0, p1);
+crate::widgets::reflow::LineTruncator::<'a, 'b>::new(p0, p1);
+<widgets::reflow::LineTruncator<'a, 'b>>::new(p0, p1);
-----------------
src/widgets/reflow.rs widgets::reflow::LineTruncator::<'a, 'b>::set_horizontal_offset
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::reflow::LineTruncator<'a, 'b>
let mut p1 = 0u16; // None+u16
+p0.set_horizontal_offset(p1);
+widgets::reflow::LineTruncator::<'a, 'b>::set_horizontal_offset(p0, p1);
+crate::widgets::reflow::LineTruncator::<'a, 'b>::set_horizontal_offset(p0, p1);
+<widgets::reflow::LineTruncator<'a, 'b>>::set_horizontal_offset(p0, p1);
-----------------
src/widgets/reflow.rs <widgets::reflow::LineTruncator<'a, 'b> as widgets::reflow::LineComposer<'a>>::next_line
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::reflow::LineTruncator<'a, 'b>
+p0.next_line();
+<widgets::reflow::LineTruncator<'a, 'b> as widgets::reflow::LineComposer<'a>>::next_line(p0);
+crate::<widgets::reflow::LineTruncator<'a, 'b> as widgets::reflow::LineComposer<'a>>::next_line(p0);
+<widgets::reflow::LineTruncator<'a, 'b>>::next_line(p0);
-----------------
src/widgets/sparkline.rs <widgets::sparkline::Sparkline<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::sparkline::Sparkline<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::sparkline::Sparkline<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::sparkline::Sparkline<'a> as std::fmt::Debug>::fmt(p0, p1);
+<widgets::sparkline::Sparkline<'a>>::fmt(p0, p1);
-----------------
src/widgets/sparkline.rs <widgets::sparkline::Sparkline<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::sparkline::Sparkline<'a>
+p0.clone();
+<widgets::sparkline::Sparkline<'a> as std::clone::Clone>::clone(p0);
+crate::<widgets::sparkline::Sparkline<'a> as std::clone::Clone>::clone(p0);
+<widgets::sparkline::Sparkline<'a>>::clone(p0);
-----------------
src/widgets/sparkline.rs <widgets::sparkline::Sparkline<'a> as std::default::Default>::default
'a
deps:{}
candidates:{}
+<widgets::sparkline::Sparkline<'a> as std::default::Default>::default();
+crate::<widgets::sparkline::Sparkline<'a> as std::default::Default>::default();
+<widgets::sparkline::Sparkline<'a>>::default();
-----------------
src/widgets/sparkline.rs widgets::sparkline::Sparkline::<'a>::block
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::sparkline::Sparkline<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
+p0.block(p1);
+widgets::sparkline::Sparkline::<'a>::block(p0, p1);
+crate::widgets::sparkline::Sparkline::<'a>::block(p0, p1);
+<widgets::sparkline::Sparkline<'a>>::block(p0, p1);
-----------------
src/widgets/sparkline.rs widgets::sparkline::Sparkline::<'a>::style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::sparkline::Sparkline<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.style(p1);
+widgets::sparkline::Sparkline::<'a>::style(p0, p1);
+crate::widgets::sparkline::Sparkline::<'a>::style(p0, p1);
+<widgets::sparkline::Sparkline<'a>>::style(p0, p1);
-----------------
src/widgets/sparkline.rs widgets::sparkline::Sparkline::<'a>::data
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::sparkline::Sparkline<'a>
let mut p1 = & [0u64].as_mut_slice(); // None+[u64]
+p0.data(p1);
+widgets::sparkline::Sparkline::<'a>::data(p0, p1);
+crate::widgets::sparkline::Sparkline::<'a>::data(p0, p1);
+<widgets::sparkline::Sparkline<'a>>::data(p0, p1);
-----------------
src/widgets/sparkline.rs widgets::sparkline::Sparkline::<'a>::max
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::sparkline::Sparkline<'a>
let mut p1 = 0u64; // None+u64
+p0.max(p1);
+widgets::sparkline::Sparkline::<'a>::max(p0, p1);
+crate::widgets::sparkline::Sparkline::<'a>::max(p0, p1);
+<widgets::sparkline::Sparkline<'a>>::max(p0, p1);
-----------------
src/widgets/sparkline.rs widgets::sparkline::Sparkline::<'a>::bar_set
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::sparkline::Sparkline<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // symbols::bar::Set
+p0.bar_set(p1);
+widgets::sparkline::Sparkline::<'a>::bar_set(p0, p1);
+crate::widgets::sparkline::Sparkline::<'a>::bar_set(p0, p1);
+<widgets::sparkline::Sparkline<'a>>::bar_set(p0, p1);
-----------------
src/widgets/sparkline.rs <widgets::sparkline::Sparkline<'a> as widgets::Widget>::render
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::sparkline::Sparkline<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.render(p1, p2);
+<widgets::sparkline::Sparkline<'a> as widgets::Widget>::render(p0, p1, p2);
+crate::<widgets::sparkline::Sparkline<'a> as widgets::Widget>::render(p0, p1, p2);
+<widgets::sparkline::Sparkline<'a>>::render(p0, p1, p2);
-----------------
src/widgets/table.rs <widgets::table::TableState as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::table::TableState
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::table::TableState as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::table::TableState as std::fmt::Debug>::fmt(p0, p1);
+<widgets::table::TableState>::fmt(p0, p1);
-----------------
src/widgets/table.rs <widgets::table::TableState as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::table::TableState
+p0.clone();
+<widgets::table::TableState as std::clone::Clone>::clone(p0);
+crate::<widgets::table::TableState as std::clone::Clone>::clone(p0);
+<widgets::table::TableState>::clone(p0);
-----------------
src/widgets/table.rs <widgets::table::TableState as std::default::Default>::default
deps:{}
candidates:{}
+<widgets::table::TableState as std::default::Default>::default();
+crate::<widgets::table::TableState as std::default::Default>::default();
+<widgets::table::TableState>::default();
-----------------
src/widgets/table.rs widgets::table::TableState::selected
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::table::TableState
+p0.selected();
+widgets::table::TableState::selected(p0);
+crate::widgets::table::TableState::selected(p0);
+<widgets::table::TableState>::selected(p0);
-----------------
src/widgets/table.rs widgets::table::TableState::select
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::table::TableState
let mut p1 = MaybeUninit::uninit().assume_init(); // std::option::Option<usize>
+p0.select(p1);
+widgets::table::TableState::select(p0, p1);
+crate::widgets::table::TableState::select(p0, p1);
+<widgets::table::TableState>::select(p0, p1);
-----------------
src/widgets/table.rs <widgets::table::Row<D> as std::fmt::Debug>::fmt
deps:{"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Display>":{},"<widgets::table::Row<D> as std::fmt::Debug>::fmt":{"<D as std::iter::Iterator>::Item":["std::fmt::Display"],"D":["std::fmt::Debug","std::iter::Iterator","std::marker::Sized"]}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Display>":{},"<widgets::table::Row<D> as std::fmt::Debug>::fmt":{"<D as std::iter::Iterator>::Item":["backend::termion::Bg","backend::termion::ModifierDiff","<&mut T as std::fmt::Display>","backend::termion::Fg"],"D":["std::option::IntoIter<A>","std::collections::btree_map::IntoValues<K, V, A>","std::char::ToUppercase","std::iter::adapters::flatten::FlattenCompat<I, U>","std::iter::Take<I>","std::iter::Skip<I>","std::option::Iter<'a, A>","std::slice::ChunksExact<'a, T>","std::option::Item<A>","std::slice::Windows<'a, T>","std::os::unix::net::Incoming<'a>","std::array::IntoIter<T, N>","std::net::IntoIncoming","std::str::LinesAny<'a>","std::iter::Inspect<I, F>","std::collections::hash_map::IntoValues<K, V>","std::collections::btree_map::IntoKeys<K, V, A>","std::collections::binary_heap::IntoIterSorted<T>","std::env::Args","std::str::EscapeDebug<'a>","std::slice::RChunksExact<'a, T>","std::iter::Cycle<I>","std::iter::Scan<I, St, F>","std::iter::Successors<T, F>","std::vec::IntoIter<T, A>","std::str::RSplitTerminator<'a, P>","std::char::ToLowercase","std::str::CharIndices<'a>","std::slice::Chunks<'a, T>","std::iter::FromFn<F>","std::slice::GroupByMut<'a, T, P>","std::str::RMatchIndices<'a, P>","std::slice::RChunksExactMut<'a, T>","std::str::SplitN<'a, P>","std::result::IntoIter<T>","std::slice::ChunksMut<'a, T>","std::collections::btree_map::IntoIter<K, V, A>","std::string::Drain<'_>","std::str::SplitTerminator<'a, P>","std::str::Split<'a, P>","std::collections::binary_heap::IntoIter<T>","std::vec::Drain<'_, T, A>","std::sync::mpsc::Iter<'a, T>","std::str::SplitWhitespace<'a>","std::iter::Empty<T>","std::ops::index_range::IndexRange","std::iter::Map<I, F>","std::iter::Repeat<A>","std::iter::FlatMap<I, U, F>","std::slice::ArrayChunksMut<'a, T, N>","std::sys::unix::fs::ReadDir","std::str::RMatches<'a, P>","std::io::Lines<B>","std::fs::ReadDir","std::str::Matches<'a, P>","std::collections::hash_map::IntoIter<K, V>","std::iter::StepBy<I>","std::collections::hash_map::IntoKeys<K, V>","std::option::IterMut<'a, A>","std::char::EscapeUnicode","std::sync::mpsc::IntoIter<T>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::iter::Flatten<I>","std::iter::Once<T>","std::str::SplitInclusive<'a, P>","std::io::Split<B>","std::ascii::EscapeDefault","std::str::SplitAsciiWhitespace<'a>","std::collections::vec_deque::Drain<'_, T, A>","std::env::ArgsOs","std::result::IterMut<'a, T>","std::collections::linked_list::IntoIter<T>","std::slice::RChunksMut<'a, T>","std::iter::Zip<A, B>","std::iter::FilterMap<I, F>","std::iter::MapWhile<I, P>","std::sync::mpsc::TryIter<'a, T>","std::sys::unix::process::process_common::CommandArgs<'a>","std::str::MatchIndices<'a, P>","std::collections::vec_deque::IntoIter<T, A>","std::iter::OnceWith<F>","std::slice::ChunksExactMut<'a, T>","std::process::CommandArgs<'a>","std::slice::EscapeAscii<'a>","std::str::RSplitN<'a, P>","std::char::EscapeDebug","std::env::VarsOs","std::iter::Cloned<I>","bitflags::core::error::Source<'a>","std::str::RSplit<'a, P>","std::result::Iter<'a, T>","std::iter::ArrayChunks<I, N>","std::net::Incoming<'a>","std::iter::RepeatWith<F>","std::io::Bytes<R>","std::slice::ArrayChunks<'a, T, N>","std::iter::Chain<A, B>","std::char::CaseMappingIter","std::iter::IntersperseWith<I, G>","std::str::Lines<'a>","std::iter::Intersperse<I>","std::iter::TakeWhile<I, P>","std::iter::SkipWhile<I, P>","std::collections::linked_list::DrainFilter<'_, T, F>","std::collections::hash_set::IntoIter<K>","std::str::EscapeDefault<'a>","std::iter::Peekable<I>","std::collections::btree_set::Range<'a, T>","std::slice::ArrayWindows<'a, T, N>","std::sys::unix::args::Args","std::iter::Enumerate<I>","std::str::EscapeUnicode<'a>","std::collections::btree_set::IntoIter<T, A>","std::process::CommandEnvs<'a>","bitflags::core::slice::iter::GenericSplitN<I>","std::iter::Copied<I>","std::char::DecodeUtf16<I>","std::iter::Fuse<I>","std::env::Vars","std::char::EscapeDefault","std::path::Ancestors<'a>","std::iter::Filter<I, P>","std::slice::RChunks<'a, T>","std::iter::RepeatN<A>","std::slice::GroupBy<'a, T, P>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::table::Row<D>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::table::Row<D> as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::table::Row<D> as std::fmt::Debug>::fmt(p0, p1);
+<widgets::table::Row<D>>::fmt(p0, p1);
-----------------
src/widgets/table.rs <widgets::table::Row<D> as std::clone::Clone>::clone
deps:{"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Display>":{},"<widgets::table::Row<D> as std::clone::Clone>::clone":{"<D as std::iter::Iterator>::Item":["std::fmt::Display"],"D":["std::marker::Sized","std::iter::Iterator","std::clone::Clone"]}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Display>":{},"<widgets::table::Row<D> as std::clone::Clone>::clone":{"<D as std::iter::Iterator>::Item":["backend::termion::ModifierDiff","backend::termion::Fg","<&T as std::fmt::Display>","backend::termion::Bg"],"D":["std::str::Chars<'a>","std::iter::RepeatWith<F>","std::str::SplitAsciiWhitespace<'a>","std::str::SplitInclusive<'a, P>","std::str::RMatches<'a, P>","std::iter::Zip<A, B>","std::iter::Successors<T, F>","std::path::Iter<'a>","std::result::IntoIter<T>","std::ascii::EscapeDefault","std::str::SplitN<'a, P>","std::iter::OnceWith<F>","std::str::Lines<'a>","std::iter::Fuse<I>","std::collections::vec_deque::IntoIter<T, A>","std::iter::Empty<T>","std::path::Ancestors<'a>","std::str::EscapeDefault<'a>","std::iter::Chain<A, B>","std::iter::TakeWhile<I, P>","std::str::RSplitN<'a, P>","std::iter::Repeat<A>","std::iter::ArrayChunks<I, N>","std::iter::Cloned<I>","std::str::RMatchIndices<'a, P>","std::collections::binary_heap::IntoIter<T>","std::iter::Skip<I>","std::char::EscapeUnicode","std::vec::IntoIter<T, A>","std::iter::SkipWhile<I, P>","std::slice::RChunksExact<'a, T>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::str::EscapeDebug<'a>","std::iter::Flatten<I>","std::sys_common::wtf8::EncodeWide<'a>","std::iter::Peekable<I>","std::str::Split<'a, P>","std::iter::Map<I, F>","std::option::IntoIter<A>","std::char::EscapeDebug","std::str::RSplitTerminator<'a, P>","std::collections::linked_list::IntoIter<T>","std::iter::FromFn<F>","std::str::Utf8Chunks<'a>","std::str::Matches<'a, P>","std::iter::Inspect<I, F>","std::char::ToLowercase","std::str::CharIndices<'a>","std::str::SplitWhitespace<'a>","std::iter::StepBy<I>","std::iter::FlatMap<I, U, F>","std::str::SplitTerminator<'a, P>","std::str::LinesAny<'a>","std::slice::ArrayWindows<'a, T, N>","std::char::ToUppercase","std::iter::Filter<I, P>","std::iter::Cycle<I>","std::iter::Enumerate<I>","std::option::Item<A>","std::str::RSplit<'a, P>","std::char::DecodeUtf16<I>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::iter::Take<I>","std::path::Components<'a>","std::char::CaseMappingIter","std::iter::FilterMap<I, F>","std::str::EscapeUnicode<'a>","std::iter::Intersperse<I>","bitflags::core::error::Source<'a>","std::iter::IntersperseWith<I, G>","std::iter::Scan<I, St, F>","std::iter::RepeatN<A>","std::char::EscapeDefault","std::collections::binary_heap::IntoIterSorted<T>","std::iter::MapWhile<I, P>","std::slice::EscapeAscii<'a>","std::str::EncodeUtf16<'a>","std::array::IntoIter<T, N>","std::str::MatchIndices<'a, P>","std::ops::index_range::IndexRange","std::iter::Copied<I>","std::iter::Once<T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::table::Row<D>
+p0.clone();
+<widgets::table::Row<D> as std::clone::Clone>::clone(p0);
+crate::<widgets::table::Row<D> as std::clone::Clone>::clone(p0);
+<widgets::table::Row<D>>::clone(p0);
-----------------
src/widgets/table.rs <widgets::table::Table<'a, H, R> as std::fmt::Debug>::fmt
'a
deps:{"<&T as std::fmt::Debug>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<widgets::table::Table<'a, H, R> as std::fmt::Debug>::fmt":{"H":["std::fmt::Debug","std::marker::Sized"],"R":["std::fmt::Debug","std::marker::Sized"]},"terminal::Terminal":{"B":["std::fmt::Debug","std::marker::Sized","backend::Backend"]},"widgets::table::Row":{"<D as std::iter::Iterator>::Item":["std::fmt::Display"],"D":["std::iter::Iterator","std::clone::Clone","std::fmt::Debug","std::marker::Sized"]},"widgets::table::Table":{"H":["std::fmt::Debug","std::marker::Sized","std::default::Default","std::clone::Clone","std::iter::Iterator"],"R":["std::fmt::Debug","std::default::Default","std::marker::Sized","std::iter::Iterator","std::clone::Clone"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<widgets::table::Table<'a, H, R> as std::fmt::Debug>::fmt":{"H":["widgets::chart::Chart","widgets::sparkline::Sparkline","widgets::clear::Clear","terminal::Terminal","widgets::table::TableState","layout::Alignment","widgets::chart::GraphType","widgets::block::BorderType","layout::Corner","style::Color","widgets::canvas::CharGrid","widgets::paragraph::Paragraph","widgets::canvas::points::Points","text::Span","symbols::line::Set","style::Style","<*const T as std::fmt::Debug>","text::StyledGrapheme","widgets::canvas::map::Map","style::Modifier","buffer::Buffer","widgets::gauge::Gauge","layout::Layout","text::Spans","widgets::canvas::Painter","layout::Constraint","terminal::Viewport","widgets::list::ListItem","widgets::block::Block","terminal::ResizeBehavior","widgets::chart::ChartLayout","widgets::chart::Axis","widgets::canvas::map::MapResolution","widgets::Borders","widgets::list::List","widgets::list::ListState","symbols::Marker","text::Text","buffer::Cell","widgets::chart::Dataset","widgets::canvas::rectangle::Rectangle","widgets::table::Row","widgets::canvas::line::Line","widgets::canvas::BrailleGrid","symbols::block::Set","terminal::TerminalOptions","layout::Direction","widgets::paragraph::Wrap","widgets::canvas::Label","layout::Rect","widgets::canvas::Layer","symbols::bar::Set","widgets::barchart::BarChart","backend::test::TestBackend","widgets::canvas::Context","layout::Margin","widgets::table::Table","widgets::tabs::Tabs"],"R":["layout::Direction","widgets::canvas::CharGrid","widgets::block::BorderType","text::StyledGrapheme","buffer::Cell","terminal::ResizeBehavior","widgets::canvas::BrailleGrid","widgets::tabs::Tabs","<*mut T as std::fmt::Debug>","buffer::Buffer","widgets::canvas::map::Map","widgets::table::Table","widgets::table::Row","widgets::paragraph::Paragraph","widgets::list::ListState","widgets::gauge::Gauge","widgets::chart::Axis","widgets::sparkline::Sparkline","text::Spans","widgets::table::TableState","widgets::canvas::Context","widgets::Borders","widgets::barchart::BarChart","layout::Constraint","widgets::paragraph::Wrap","widgets::canvas::Painter","style::Style","layout::Rect","widgets::list::List","text::Span","layout::Margin","widgets::canvas::Label","layout::Layout","style::Color","style::Modifier","widgets::canvas::map::MapResolution","widgets::canvas::rectangle::Rectangle","widgets::chart::Dataset","terminal::Terminal","widgets::list::ListItem","backend::test::TestBackend","text::Text","widgets::chart::GraphType","widgets::canvas::Layer","terminal::TerminalOptions","widgets::block::Block","symbols::line::Set","symbols::block::Set","widgets::clear::Clear","<&T as std::fmt::Debug>","widgets::chart::ChartLayout","layout::Corner","terminal::Viewport","layout::Alignment","widgets::canvas::line::Line","symbols::Marker","widgets::canvas::points::Points","symbols::bar::Set","widgets::chart::Chart"]},"terminal::Terminal":{"B":["backend::test::TestBackend"]},"widgets::table::Row":{"<D as std::iter::Iterator>::Item":["backend::termion::Bg","<&mut T as std::fmt::Display>","backend::termion::ModifierDiff","backend::termion::Fg"],"D":["std::str::Lines<'a>","std::iter::TakeWhile<I, P>","std::str::SplitAsciiWhitespace<'a>","std::iter::Inspect<I, F>","std::ops::index_range::IndexRange","std::array::IntoIter<T, N>","std::iter::OnceWith<F>","std::iter::Filter<I, P>","std::iter::Zip<A, B>","std::iter::Repeat<A>","std::char::EscapeUnicode","std::iter::FromFn<F>","std::collections::vec_deque::IntoIter<T, A>","std::str::RSplitN<'a, P>","std::char::ToLowercase","std::slice::RChunksExact<'a, T>","std::iter::FlatMap<I, U, F>","std::char::ToUppercase","std::iter::Empty<T>","std::ascii::EscapeDefault","std::collections::linked_list::IntoIter<T>","std::vec::IntoIter<T, A>","std::str::SplitInclusive<'a, P>","std::str::EscapeDebug<'a>","std::str::Matches<'a, P>","std::iter::Peekable<I>","std::iter::SkipWhile<I, P>","std::str::SplitTerminator<'a, P>","std::iter::RepeatWith<F>","std::iter::Successors<T, F>","std::iter::Skip<I>","std::iter::Take<I>","std::str::SplitWhitespace<'a>","std::str::MatchIndices<'a, P>","std::iter::Fuse<I>","std::str::EscapeDefault<'a>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::iter::RepeatN<A>","std::iter::IntersperseWith<I, G>","std::iter::Chain<A, B>","std::collections::binary_heap::IntoIter<T>","std::iter::Cycle<I>","std::iter::Map<I, F>","std::iter::Cloned<I>","std::option::Item<A>","std::slice::EscapeAscii<'a>","std::iter::Copied<I>","std::iter::Once<T>","std::str::RSplit<'a, P>","std::result::IntoIter<T>","std::str::RMatchIndices<'a, P>","std::iter::Flatten<I>","std::str::EscapeUnicode<'a>","std::str::LinesAny<'a>","std::char::EscapeDefault","std::slice::ArrayWindows<'a, T, N>","std::iter::Intersperse<I>","std::iter::StepBy<I>","std::iter::Scan<I, St, F>","std::char::DecodeUtf16<I>","std::str::Split<'a, P>","std::char::CaseMappingIter","std::iter::MapWhile<I, P>","std::iter::ArrayChunks<I, N>","std::str::SplitN<'a, P>","std::collections::binary_heap::IntoIterSorted<T>","std::iter::FilterMap<I, F>","std::option::IntoIter<A>","bitflags::core::error::Source<'a>","std::path::Ancestors<'a>","std::str::CharIndices<'a>","std::str::RMatches<'a, P>","std::char::EscapeDebug","std::iter::Enumerate<I>","std::str::RSplitTerminator<'a, P>"]},"widgets::table::Table":{"H":["std::iter::Empty<T>"],"R":["std::iter::Empty<T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::table::Table<'a, H, R>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::table::Table<'a, H, R> as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::table::Table<'a, H, R> as std::fmt::Debug>::fmt(p0, p1);
+<widgets::table::Table<'a, H, R>>::fmt(p0, p1);
-----------------
src/widgets/table.rs <widgets::table::Table<'a, H, R> as std::clone::Clone>::clone
'a
deps:{"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Display>":{},"<widgets::table::Table<'a, H, R> as std::clone::Clone>::clone":{"H":["std::marker::Sized","std::clone::Clone"],"R":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"widgets::table::Row":{"<D as std::iter::Iterator>::Item":["std::fmt::Display"],"D":["std::clone::Clone","std::iter::Iterator","std::marker::Sized","std::fmt::Debug"]},"widgets::table::Table":{"H":["std::clone::Clone","std::default::Default","std::fmt::Debug","std::iter::Iterator","std::marker::Sized"],"R":["std::default::Default","std::iter::Iterator","std::marker::Sized","std::fmt::Debug","std::clone::Clone"]}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Display>":{},"<widgets::table::Table<'a, H, R> as std::clone::Clone>::clone":{"H":["symbols::Marker","widgets::chart::ChartLayout","layout::Alignment","widgets::list::ListItem","widgets::list::List","widgets::table::Table","terminal::Viewport","widgets::chart::Dataset","layout::Direction","text::Text","style::Style","widgets::table::TableState","style::Color","text::Spans","widgets::chart::GraphType","text::Span","buffer::Cell","widgets::canvas::CharGrid","widgets::canvas::Label","widgets::block::Block","widgets::canvas::Layer","widgets::canvas::line::Line","layout::Margin","widgets::barchart::BarChart","widgets::chart::Axis","std::clone::impls::<impl std::clone::Clone for *mut T>","widgets::sparkline::Sparkline","layout::Layout","widgets::gauge::Gauge","symbols::block::Set","terminal::ResizeBehavior","layout::Corner","widgets::list::ListState","widgets::chart::Chart","widgets::tabs::Tabs","widgets::canvas::rectangle::Rectangle","layout::Rect","widgets::table::Row","buffer::Buffer","symbols::line::Set","style::Modifier","widgets::clear::Clear","widgets::canvas::points::Points","widgets::canvas::BrailleGrid","symbols::bar::Set","terminal::TerminalOptions","text::StyledGrapheme","widgets::Borders","widgets::canvas::map::MapResolution","widgets::paragraph::Wrap","widgets::canvas::map::Map","widgets::block::BorderType","widgets::paragraph::Paragraph","layout::Constraint"],"R":["style::Style","widgets::tabs::Tabs","terminal::TerminalOptions","buffer::Cell","widgets::list::ListState","widgets::canvas::map::MapResolution","buffer::Buffer","widgets::canvas::points::Points","terminal::ResizeBehavior","widgets::clear::Clear","layout::Constraint","widgets::list::ListItem","widgets::gauge::Gauge","widgets::table::TableState","widgets::list::List","layout::Corner","style::Modifier","widgets::table::Row","terminal::Viewport","widgets::Borders","symbols::line::Set","widgets::paragraph::Paragraph","widgets::canvas::Layer","layout::Rect","widgets::chart::Axis","style::Color","widgets::chart::GraphType","widgets::block::Block","layout::Direction","text::StyledGrapheme","widgets::chart::Chart","widgets::barchart::BarChart","text::Span","widgets::canvas::CharGrid","widgets::canvas::map::Map","widgets::paragraph::Wrap","widgets::canvas::rectangle::Rectangle","layout::Layout","std::clone::impls::<impl std::clone::Clone for *mut T>","symbols::bar::Set","widgets::canvas::line::Line","widgets::block::BorderType","layout::Margin","widgets::sparkline::Sparkline","std::clone::impls::<impl std::clone::Clone for &mut T>","symbols::Marker","layout::Alignment","widgets::chart::Dataset","widgets::canvas::BrailleGrid","symbols::block::Set","text::Spans","widgets::chart::ChartLayout","text::Text","widgets::table::Table","widgets::canvas::Label"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"widgets::table::Row":{"<D as std::iter::Iterator>::Item":["backend::termion::Fg","backend::termion::Bg","<&mut T as std::fmt::Display>","backend::termion::ModifierDiff"],"D":["std::str::SplitInclusive<'a, P>","std::iter::MapWhile<I, P>","std::vec::IntoIter<T, A>","std::iter::Chain<A, B>","std::iter::OnceWith<F>","std::iter::Flatten<I>","std::iter::RepeatWith<F>","std::char::EscapeDebug","std::option::Item<A>","std::str::EscapeUnicode<'a>","std::ascii::EscapeDefault","std::iter::Map<I, F>","std::iter::Zip<A, B>","std::slice::ArrayWindows<'a, T, N>","std::collections::vec_deque::IntoIter<T, A>","std::iter::Enumerate<I>","std::collections::linked_list::IntoIter<T>","std::ops::index_range::IndexRange","std::iter::RepeatN<A>","std::str::EscapeDefault<'a>","std::iter::Fuse<I>","std::iter::Inspect<I, F>","std::str::RMatches<'a, P>","std::str::Matches<'a, P>","std::str::SplitWhitespace<'a>","std::iter::IntersperseWith<I, G>","std::iter::Cycle<I>","std::str::RMatchIndices<'a, P>","std::iter::FlatMap<I, U, F>","bitflags::core::error::Source<'a>","std::iter::StepBy<I>","std::iter::Empty<T>","std::option::IntoIter<A>","std::iter::Skip<I>","std::iter::Intersperse<I>","std::char::EscapeUnicode","std::str::LinesAny<'a>","std::iter::Copied<I>","std::char::EscapeDefault","std::str::SplitTerminator<'a, P>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::iter::Repeat<A>","std::slice::RChunksExact<'a, T>","std::iter::Peekable<I>","std::str::RSplitTerminator<'a, P>","std::iter::SkipWhile<I, P>","std::iter::Scan<I, St, F>","std::str::EscapeDebug<'a>","std::str::RSplit<'a, P>","std::char::ToLowercase","std::iter::FilterMap<I, F>","std::str::CharIndices<'a>","std::collections::binary_heap::IntoIterSorted<T>","std::iter::Filter<I, P>","std::array::IntoIter<T, N>","std::str::SplitN<'a, P>","std::str::MatchIndices<'a, P>","std::collections::binary_heap::IntoIter<T>","std::str::SplitAsciiWhitespace<'a>","std::iter::TakeWhile<I, P>","std::char::ToUppercase","std::result::IntoIter<T>","std::iter::Successors<T, F>","std::iter::Take<I>","std::str::RSplitN<'a, P>","std::iter::FromFn<F>","std::str::Split<'a, P>","std::char::CaseMappingIter","std::str::Lines<'a>","std::iter::Cloned<I>","std::path::Ancestors<'a>","std::char::DecodeUtf16<I>","std::iter::ArrayChunks<I, N>","std::slice::EscapeAscii<'a>","std::iter::Once<T>"]},"widgets::table::Table":{"H":["std::iter::Empty<T>"],"R":["std::iter::Empty<T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::table::Table<'a, H, R>
+p0.clone();
+<widgets::table::Table<'a, H, R> as std::clone::Clone>::clone(p0);
+crate::<widgets::table::Table<'a, H, R> as std::clone::Clone>::clone(p0);
+<widgets::table::Table<'a, H, R>>::clone(p0);
-----------------
src/widgets/table.rs <widgets::table::Table<'a, H, R> as std::default::Default>::default
'a
deps:{"<widgets::table::Table<'a, H, R> as std::default::Default>::default":{"H":["std::default::Default","std::iter::Iterator","std::marker::Sized"],"R":["std::iter::Iterator","std::marker::Sized","std::default::Default"]}}
candidates:{"<widgets::table::Table<'a, H, R> as std::default::Default>::default":{"H":["std::iter::Empty<T>"],"R":["std::iter::Empty<T>"]}}
+<widgets::table::Table<'a, H, R> as std::default::Default>::default();
+crate::<widgets::table::Table<'a, H, R> as std::default::Default>::default();
+<widgets::table::Table<'a, H, R>>::default();
-----------------
src/widgets/table.rs widgets::table::Table::<'a, H, R>::new
'a
deps:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::new":{"<D as std::iter::Iterator>::Item":["std::fmt::Display"],"D":["std::marker::Sized","std::iter::Iterator"],"H":["std::marker::Sized","std::iter::Iterator"],"R":["std::marker::Sized","std::iter::Iterator"]}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::new":{"<D as std::iter::Iterator>::Item":["backend::termion::ModifierDiff","backend::termion::Bg","<&T as std::fmt::Display>","backend::termion::Fg"],"D":["std::vec::Drain<'_, T, A>","std::sys_common::wstr::WStrUnits<'_>","std::iter::Scan<I, St, F>","std::collections::btree_map::RangeMut<'a, K, V>","std::ops::index_range::IndexRange","std::result::Iter<'a, T>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::slice::RSplitN<'a, T, P>","std::iter::MapWhile<I, P>","std::iter::Copied<I>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::str::SplitN<'a, P>","std::str::Bytes<'_>","std::char::ToLowercase","std::fs::ReadDir","std::collections::hash_map::IntoKeys<K, V>","std::collections::btree_set::Difference<'a, T, A>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::str::Lines<'a>","std::char::EscapeDefault","std::str::RMatches<'a, P>","std::collections::linked_list::IterMut<'a, T>","std::str::EscapeUnicode<'a>","std::str::SplitTerminator<'a, P>","std::option::IterMut<'a, A>","std::slice::Iter<'a, T>","std::collections::hash_map::IterMut<'a, K, V>","bitflags::core::slice::iter::GenericSplitN<I>","std::net::Incoming<'a>","std::char::EscapeDebug","std::collections::binary_heap::IntoIterSorted<T>","std::collections::btree_map::IntoValues<K, V, A>","std::sys::unix::os::SplitPaths<'a>","std::slice::Windows<'a, T>","std::sync::mpsc::TryIter<'a, T>","std::collections::btree_set::SymmetricDifference<'a, T>","std::sys::unix::process::process_common::CommandArgs<'a>","std::collections::btree_set::Range<'a, T>","std::iter::Once<T>","std::iter::TakeWhile<I, P>","std::collections::btree_set::Intersection<'a, T, A>","std::iter::Flatten<I>","std::collections::hash_map::ValuesMut<'a, K, V>","std::vec::Splice<'_, I, A>","std::iter::FilterMap<I, F>","std::os::unix::net::ScmRights<'a>","std::iter::Successors<T, F>","std::iter::Skip<I>","std::slice::SplitMut<'a, T, P>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::result::IntoIter<T>","std::collections::hash_set::IntoIter<K>","std::collections::binary_heap::DrainSorted<'_, T>","std::sync::mpsc::Iter<'a, T>","std::collections::btree_map::Values<'a, K, V>","std::process::CommandEnvs<'a>","std::iter::Map<I, F>","std::path::Iter<'a>","std::iter::Inspect<I, F>","std::collections::hash_set::Union<'a, T, S>","std::collections::btree_map::IntoKeys<K, V, A>","std::str::Matches<'a, P>","std::collections::btree_set::Union<'a, T>","std::str::EscapeDebug<'a>","std::slice::RSplitMut<'a, T, P>","std::iter::StepBy<I>","std::iter::ByRefSized<'_, I>","std::slice::ArrayWindows<'a, T, N>","std::io::Lines<B>","std::slice::SplitInclusive<'a, T, P>","std::vec::DrainFilter<'_, T, F, A>","std::option::IntoIter<A>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::str::CharIndices<'a>","std::collections::hash_map::Values<'a, K, V>","std::iter::Cloned<I>","std::slice::Split<'a, T, P>","std::iter::Filter<I, P>","std::iter::adapters::GenericShunt<'_, I, R>","std::str::Chars<'a>","std::collections::linked_list::Iter<'a, T>","std::slice::Chunks<'a, T>","std::path::Components<'a>","std::iter::SkipWhile<I, P>","std::net::IntoIncoming","std::str::SplitInclusive<'a, P>","std::collections::hash_map::Iter<'a, K, V>","std::char::CaseMappingIter","std::slice::RChunks<'a, T>","std::collections::btree_map::IntoIter<K, V, A>","std::str::RSplit<'a, P>","std::ops::Range<A>","std::collections::vec_deque::Drain<'_, T, A>","<&mut I as std::iter::Iterator>","std::sys::unix::fs::ReadDir","std::string::Drain<'_>","std::ops::RangeInclusive<A>","bitflags::core::error::Source<'a>","std::str::RSplitTerminator<'a, P>","std::collections::vec_deque::IterMut<'a, T>","std::vec::IntoIter<T, A>","std::collections::vec_deque::Iter<'a, T>","std::slice::EscapeAscii<'a>","std::iter::Empty<T>","std::env::Args","std::collections::vec_deque::IntoIter<T, A>","std::str::Utf8Chunks<'a>","std::str::EncodeUtf16<'a>","std::iter::IntersperseWith<I, G>","std::collections::hash_set::Intersection<'a, T, S>","std::slice::GroupByMut<'a, T, P>","std::path::Ancestors<'a>","std::collections::binary_heap::Iter<'a, T>","std::str::SplitWhitespace<'a>","std::collections::btree_set::IntoIter<T, A>","std::slice::SplitInclusiveMut<'a, T, P>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::iter::FlatMap<I, U, F>","std::iter::Chain<A, B>","std::slice::ArrayChunks<'a, T, N>","std::iter::Zip<A, B>","std::env::SplitPaths<'a>","std::slice::SplitN<'a, T, P>","std::slice::RChunksExact<'a, T>","std::slice::ChunksMut<'a, T>","std::iter::sources::from_generator::FromGenerator<G>","std::str::SplitAsciiWhitespace<'a>","std::collections::hash_set::Drain<'a, K>","std::iter::Fuse<I>","std::str::RSplitN<'a, P>","std::collections::btree_map::IterMut<'a, K, V>","std::collections::btree_set::Iter<'a, T>","std::sync::mpsc::IntoIter<T>","std::iter::Cycle<I>","std::iter::OnceWith<F>","std::env::ArgsOs","std::os::unix::net::ScmCredentials<'a>","std::option::Item<A>","std::str::MatchIndices<'a, P>","std::boxed::Box<I, A>","std::ops::RangeFrom<A>","std::sys_common::net::LookupHost","std::collections::btree_map::Iter<'a, K, V>","std::collections::binary_heap::Drain<'_, T>","std::iter::RepeatN<A>","std::iter::RepeatWith<F>","std::str::RMatchIndices<'a, P>","std::iter::ArrayChunks<I, N>","std::collections::binary_heap::IntoIter<T>","std::char::EscapeUnicode","std::env::Vars","std::os::unix::net::Messages<'a>","std::process::CommandArgs<'a>","std::iter::Take<I>","std::str::EscapeDefault<'a>","std::iter::Intersperse<I>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::slice::ChunksExactMut<'a, T>","std::slice::RSplit<'a, T, P>","std::slice::RSplitNMut<'a, T, P>","std::io::Split<B>","std::slice::SplitNMut<'a, T, P>","std::collections::hash_map::IntoIter<K, V>","std::iter::Enumerate<I>","std::slice::IterMut<'a, T>","std::os::unix::net::Incoming<'a>","std::char::ToUppercase","std::collections::hash_set::Iter<'a, K>","std::iter::Repeat<A>","std::slice::GroupBy<'a, T, P>","std::collections::btree_map::Range<'a, K, V>","std::sys::unix::args::Args","std::slice::ChunksExact<'a, T>","std::collections::linked_list::IntoIter<T>","std::array::IntoIter<T, N>","std::slice::RChunksExactMut<'a, T>","std::collections::hash_map::Drain<'a, K, V>","std::collections::hash_set::DrainFilter<'_, K, F>","std::char::DecodeUtf16<I>","std::ascii::EscapeDefault","std::slice::ArrayChunksMut<'a, T, N>","std::sys_common::wtf8::EncodeWide<'a>","std::collections::hash_map::Keys<'a, K, V>","std::collections::hash_set::Difference<'a, T, S>","std::result::IterMut<'a, T>","std::collections::btree_map::ValuesMut<'a, K, V>","std::iter::Peekable<I>","std::collections::hash_map::IntoValues<K, V>","std::slice::RChunksMut<'a, T>","std::str::LinesAny<'a>","std::option::Iter<'a, A>","std::io::Bytes<R>","std::collections::btree_map::Keys<'a, K, V>","std::collections::linked_list::DrainFilter<'_, T, F>","std::env::VarsOs","std::iter::Rev<I>","std::iter::FromFn<F>","std::sys::unix::os::Env","std::str::Split<'a, P>"],"H":["std::array::IntoIter<T, N>","std::collections::btree_map::IterMut<'a, K, V>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::string::Drain<'_>","std::str::RSplitN<'a, P>","std::collections::vec_deque::IterMut<'a, T>","std::iter::Map<I, F>","std::ops::RangeInclusive<A>","std::net::IntoIncoming","std::iter::RepeatN<A>","std::collections::hash_map::ValuesMut<'a, K, V>","std::collections::hash_set::DrainFilter<'_, K, F>","std::fs::ReadDir","std::collections::hash_set::IntoIter<K>","std::collections::hash_map::Iter<'a, K, V>","std::collections::hash_map::IntoKeys<K, V>","std::vec::Splice<'_, I, A>","std::collections::binary_heap::IntoIterSorted<T>","std::slice::RChunksExact<'a, T>","std::str::EscapeUnicode<'a>","std::collections::hash_set::Iter<'a, K>","std::iter::ArrayChunks<I, N>","std::io::Bytes<R>","std::iter::FromFn<F>","std::slice::SplitInclusive<'a, T, P>","std::collections::vec_deque::Iter<'a, T>","std::collections::hash_map::Drain<'a, K, V>","std::slice::SplitInclusiveMut<'a, T, P>","std::slice::ChunksExact<'a, T>","std::collections::btree_map::Range<'a, K, V>","std::iter::Intersperse<I>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::path::Ancestors<'a>","std::ascii::EscapeDefault","std::option::Item<A>","std::str::EscapeDebug<'a>","std::str::SplitTerminator<'a, P>","std::slice::SplitMut<'a, T, P>","std::str::Matches<'a, P>","std::iter::FlatMap<I, U, F>","std::collections::binary_heap::Drain<'_, T>","std::slice::Iter<'a, T>","std::iter::Cycle<I>","std::slice::ArrayWindows<'a, T, N>","std::collections::btree_map::ValuesMut<'a, K, V>","std::iter::Inspect<I, F>","std::os::unix::net::ScmRights<'a>","std::slice::Chunks<'a, T>","std::iter::adapters::GenericShunt<'_, I, R>","std::str::SplitAsciiWhitespace<'a>","std::collections::btree_map::IntoValues<K, V, A>","std::sys::unix::args::Args","std::iter::adapters::flatten::FlattenCompat<I, U>","std::iter::Peekable<I>","std::slice::EscapeAscii<'a>","std::sys::unix::fs::ReadDir","std::char::EscapeDebug","std::collections::btree_set::Intersection<'a, T, A>","std::sys::unix::os::Env","std::slice::RChunks<'a, T>","std::slice::ArrayChunks<'a, T, N>","std::collections::btree_set::Union<'a, T>","std::collections::btree_map::IntoIter<K, V, A>","std::char::CaseMappingIter","std::collections::linked_list::IterMut<'a, T>","std::net::Incoming<'a>","std::iter::MapWhile<I, P>","std::slice::GroupByMut<'a, T, P>","std::str::RMatchIndices<'a, P>","std::sync::mpsc::IntoIter<T>","std::sync::mpsc::Iter<'a, T>","std::iter::FilterMap<I, F>","std::iter::sources::from_generator::FromGenerator<G>","std::option::IterMut<'a, A>","std::collections::binary_heap::Iter<'a, T>","std::vec::IntoIter<T, A>","std::char::EscapeUnicode","std::str::EncodeUtf16<'a>","std::collections::btree_map::RangeMut<'a, K, V>","std::io::Lines<B>","std::collections::btree_set::IntoIter<T, A>","std::str::SplitInclusive<'a, P>","std::str::SplitN<'a, P>","std::result::Iter<'a, T>","std::slice::RSplitN<'a, T, P>","std::str::Chars<'a>","std::process::CommandArgs<'a>","std::iter::Chain<A, B>","std::str::MatchIndices<'a, P>","std::slice::IterMut<'a, T>","std::collections::hash_set::Drain<'a, K>","std::ops::index_range::IndexRange","std::iter::IntersperseWith<I, G>","std::os::unix::net::Messages<'a>","std::slice::Windows<'a, T>","std::collections::linked_list::IntoIter<T>","std::iter::Repeat<A>","std::collections::btree_set::SymmetricDifference<'a, T>","std::str::Utf8Chunks<'a>","std::collections::hash_map::IntoIter<K, V>","std::iter::SkipWhile<I, P>","std::char::DecodeUtf16<I>","std::sys::unix::os::SplitPaths<'a>","std::iter::RepeatWith<F>","std::ops::RangeFrom<A>","std::slice::ChunksMut<'a, T>","std::iter::Once<T>","std::iter::Enumerate<I>","std::env::ArgsOs","std::iter::Zip<A, B>","std::iter::Filter<I, P>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::hash_set::Difference<'a, T, S>","std::iter::StepBy<I>","std::iter::Scan<I, St, F>","std::str::RSplit<'a, P>","std::str::Split<'a, P>","std::vec::DrainFilter<'_, T, F, A>","std::slice::ChunksExactMut<'a, T>","std::slice::SplitNMut<'a, T, P>","std::option::Iter<'a, A>","std::collections::hash_map::Values<'a, K, V>","std::collections::btree_map::Keys<'a, K, V>","std::collections::btree_set::Difference<'a, T, A>","std::slice::ArrayChunksMut<'a, T, N>","std::ops::Range<A>","std::char::ToUppercase","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::slice::RChunksExactMut<'a, T>","std::str::LinesAny<'a>","std::str::Bytes<'_>","std::result::IterMut<'a, T>","std::os::unix::net::ScmCredentials<'a>","std::iter::Cloned<I>","std::iter::Copied<I>","bitflags::core::slice::iter::GenericSplitN<I>","std::collections::binary_heap::IntoIter<T>","std::iter::Take<I>","std::path::Iter<'a>","std::str::RMatches<'a, P>","std::slice::GroupBy<'a, T, P>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::collections::hash_set::Union<'a, T, S>","bitflags::core::error::Source<'a>","std::iter::ByRefSized<'_, I>","std::collections::linked_list::Iter<'a, T>","std::process::CommandEnvs<'a>","std::collections::btree_set::Range<'a, T>","std::iter::Fuse<I>","std::slice::Split<'a, T, P>","std::iter::Skip<I>","std::iter::Successors<T, F>","std::iter::Flatten<I>","std::env::VarsOs","std::slice::RChunksMut<'a, T>","std::sync::mpsc::TryIter<'a, T>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::env::Vars","std::char::EscapeDefault","std::iter::TakeWhile<I, P>","std::char::ToLowercase","std::env::SplitPaths<'a>","std::str::Lines<'a>","std::collections::linked_list::DrainFilter<'_, T, F>","std::sys_common::net::LookupHost","std::iter::Rev<I>","std::io::Split<B>","std::sys::unix::process::process_common::CommandArgs<'a>","std::iter::Empty<T>","std::collections::hash_map::IterMut<'a, K, V>","std::iter::OnceWith<F>","std::collections::btree_set::Iter<'a, T>","std::collections::hash_set::Intersection<'a, T, S>","std::option::IntoIter<A>","std::str::CharIndices<'a>","std::collections::hash_map::IntoValues<K, V>","std::slice::RSplitNMut<'a, T, P>","std::str::EscapeDefault<'a>","std::str::RSplitTerminator<'a, P>","std::sys_common::wtf8::EncodeWide<'a>","std::slice::RSplit<'a, T, P>","std::slice::SplitN<'a, T, P>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::str::SplitWhitespace<'a>","std::collections::btree_map::Iter<'a, K, V>","std::sys_common::wstr::WStrUnits<'_>","std::collections::btree_map::IntoKeys<K, V, A>","std::slice::RSplitMut<'a, T, P>","std::vec::Drain<'_, T, A>","std::collections::binary_heap::DrainSorted<'_, T>","std::collections::btree_map::Values<'a, K, V>","std::collections::hash_map::Keys<'a, K, V>","std::path::Components<'a>","std::env::Args","std::collections::vec_deque::IntoIter<T, A>","std::os::unix::net::Incoming<'a>","<&mut I as std::iter::Iterator>","std::boxed::Box<I, A>","std::result::IntoIter<T>"],"R":["std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::ops::RangeInclusive<A>","std::collections::btree_map::IntoIter<K, V, A>","std::option::IntoIter<A>","std::env::Vars","std::vec::Splice<'_, I, A>","std::slice::Split<'a, T, P>","std::collections::hash_map::IntoValues<K, V>","std::collections::hash_set::Iter<'a, K>","std::os::unix::net::ScmCredentials<'a>","std::vec::Drain<'_, T, A>","std::collections::btree_map::IterMut<'a, K, V>","std::sys::unix::args::Args","std::slice::RSplitNMut<'a, T, P>","std::result::Iter<'a, T>","std::slice::GroupByMut<'a, T, P>","std::str::EscapeUnicode<'a>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::str::CharIndices<'a>","std::str::EscapeDebug<'a>","std::char::EscapeUnicode","std::iter::Cloned<I>","std::slice::RChunks<'a, T>","std::iter::FromFn<F>","std::sync::mpsc::Iter<'a, T>","std::iter::OnceWith<F>","std::collections::hash_map::IterMut<'a, K, V>","std::collections::btree_map::IntoValues<K, V, A>","std::iter::Copied<I>","std::collections::binary_heap::Drain<'_, T>","std::collections::btree_set::Union<'a, T>","std::slice::RSplit<'a, T, P>","std::os::unix::net::ScmRights<'a>","std::str::Split<'a, P>","std::slice::ChunksMut<'a, T>","std::sys::unix::os::SplitPaths<'a>","std::env::ArgsOs","std::iter::adapters::flatten::FlattenCompat<I, U>","std::slice::ArrayChunksMut<'a, T, N>","std::iter::Skip<I>","std::sys_common::net::LookupHost","std::string::Drain<'_>","std::collections::btree_map::ValuesMut<'a, K, V>","std::io::Lines<B>","std::collections::hash_set::DrainFilter<'_, K, F>","std::iter::FlatMap<I, U, F>","std::slice::IterMut<'a, T>","std::iter::Once<T>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::collections::hash_map::Iter<'a, K, V>","std::str::RSplit<'a, P>","std::iter::Scan<I, St, F>","std::slice::SplitN<'a, T, P>","std::result::IterMut<'a, T>","std::collections::binary_heap::Iter<'a, T>","std::ops::RangeFrom<A>","std::iter::RepeatN<A>","std::collections::hash_map::Values<'a, K, V>","std::collections::vec_deque::IntoIter<T, A>","std::slice::ChunksExactMut<'a, T>","std::slice::RChunksMut<'a, T>","std::collections::btree_set::Iter<'a, T>","std::char::EscapeDebug","std::ops::Range<A>","std::iter::StepBy<I>","std::collections::btree_map::RangeMut<'a, K, V>","std::slice::RSplitN<'a, T, P>","std::sys_common::wtf8::EncodeWide<'a>","std::iter::Map<I, F>","std::collections::btree_map::Iter<'a, K, V>","std::collections::hash_map::IntoKeys<K, V>","std::path::Iter<'a>","std::sys_common::wstr::WStrUnits<'_>","std::slice::RChunksExact<'a, T>","std::sys::unix::os::Env","std::iter::Zip<A, B>","std::iter::Empty<T>","std::collections::btree_map::Keys<'a, K, V>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::char::CaseMappingIter","std::collections::hash_map::IntoIter<K, V>","std::str::RMatchIndices<'a, P>","std::process::CommandArgs<'a>","std::collections::linked_list::Iter<'a, T>","std::iter::Repeat<A>","std::collections::binary_heap::DrainSorted<'_, T>","std::iter::Take<I>","std::iter::TakeWhile<I, P>","std::slice::Windows<'a, T>","std::collections::linked_list::DrainFilter<'_, T, F>","std::str::Lines<'a>","std::collections::btree_set::SymmetricDifference<'a, T>","std::option::IterMut<'a, A>","std::vec::DrainFilter<'_, T, F, A>","std::slice::SplitInclusive<'a, T, P>","std::iter::Peekable<I>","std::collections::binary_heap::IntoIterSorted<T>","std::iter::Cycle<I>","std::iter::Rev<I>","std::io::Bytes<R>","std::net::IntoIncoming","std::char::DecodeUtf16<I>","std::sync::mpsc::TryIter<'a, T>","std::collections::btree_map::Values<'a, K, V>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::process::CommandEnvs<'a>","std::slice::RChunksExactMut<'a, T>","std::iter::Enumerate<I>","std::iter::MapWhile<I, P>","std::iter::FilterMap<I, F>","std::option::Item<A>","std::str::Matches<'a, P>","std::sys::unix::fs::ReadDir","std::iter::Fuse<I>","std::collections::btree_map::IntoKeys<K, V, A>","std::iter::ArrayChunks<I, N>","std::env::SplitPaths<'a>","std::collections::linked_list::IterMut<'a, T>","std::env::VarsOs","std::collections::hash_set::Union<'a, T, S>","std::collections::hash_set::IntoIter<K>","std::slice::SplitInclusiveMut<'a, T, P>","std::char::ToLowercase","std::slice::RSplitMut<'a, T, P>","std::collections::hash_map::ValuesMut<'a, K, V>","bitflags::core::error::Source<'a>","std::iter::sources::from_generator::FromGenerator<G>","std::iter::ByRefSized<'_, I>","std::collections::btree_set::Intersection<'a, T, A>","std::net::Incoming<'a>","std::ops::index_range::IndexRange","std::collections::btree_set::Range<'a, T>","std::slice::EscapeAscii<'a>","std::slice::Chunks<'a, T>","std::iter::Inspect<I, F>","std::iter::SkipWhile<I, P>","std::iter::Intersperse<I>","std::collections::vec_deque::Drain<'_, T, A>","std::slice::SplitNMut<'a, T, P>","std::iter::Chain<A, B>","std::collections::binary_heap::IntoIter<T>","std::collections::linked_list::IntoIter<T>","std::env::Args","std::iter::Successors<T, F>","std::str::SplitAsciiWhitespace<'a>","std::collections::vec_deque::IterMut<'a, T>","std::str::RSplitTerminator<'a, P>","std::str::SplitInclusive<'a, P>","std::str::Bytes<'_>","std::char::ToUppercase","std::array::IntoIter<T, N>","std::str::SplitWhitespace<'a>","std::vec::IntoIter<T, A>","std::collections::hash_map::Keys<'a, K, V>","std::iter::IntersperseWith<I, G>","std::slice::SplitMut<'a, T, P>","std::iter::Filter<I, P>","std::slice::ChunksExact<'a, T>","std::result::IntoIter<T>","std::iter::adapters::GenericShunt<'_, I, R>","std::str::RMatches<'a, P>","std::os::unix::net::Incoming<'a>","std::boxed::Box<I, A>","std::collections::hash_set::Drain<'a, K>","std::sys::unix::process::process_common::CommandArgs<'a>","std::collections::hash_map::Drain<'a, K, V>","std::str::EscapeDefault<'a>","std::collections::hash_set::Difference<'a, T, S>","std::slice::ArrayChunks<'a, T, N>","std::ascii::EscapeDefault","std::str::LinesAny<'a>","std::str::SplitTerminator<'a, P>","std::iter::Flatten<I>","std::str::EncodeUtf16<'a>","std::io::Split<B>","std::fs::ReadDir","std::char::EscapeDefault","bitflags::core::slice::iter::GenericSplitN<I>","std::str::Utf8Chunks<'a>","std::collections::btree_set::IntoIter<T, A>","std::option::Iter<'a, A>","std::sync::mpsc::IntoIter<T>","std::os::unix::net::Messages<'a>","std::path::Ancestors<'a>","std::str::SplitN<'a, P>","std::path::Components<'a>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::collections::btree_map::Range<'a, K, V>","std::iter::RepeatWith<F>","std::str::RSplitN<'a, P>","std::collections::vec_deque::Iter<'a, T>","std::slice::GroupBy<'a, T, P>","std::slice::Iter<'a, T>","std::str::Chars<'a>","std::slice::ArrayWindows<'a, T, N>","<&mut I as std::iter::Iterator>","std::collections::btree_set::Difference<'a, T, A>","std::str::MatchIndices<'a, P>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // H
let mut p1 = MaybeUninit::uninit().assume_init(); // R
+widgets::table::Table::<'a, H, R>::new(p0, p1);
+crate::widgets::table::Table::<'a, H, R>::new(p0, p1);
+<widgets::table::Table<'a, H, R>>::new(p0, p1);
-----------------
src/widgets/table.rs widgets::table::Table::<'a, H, R>::block
'a
deps:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::block":{"<D as std::iter::Iterator>::Item":["std::fmt::Display"],"D":["std::iter::Iterator","std::marker::Sized"],"H":["std::iter::Iterator","std::marker::Sized"],"R":["std::marker::Sized","std::iter::Iterator"]}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::block":{"<D as std::iter::Iterator>::Item":["backend::termion::ModifierDiff","backend::termion::Fg","backend::termion::Bg","<&mut T as std::fmt::Display>"],"D":["std::char::ToLowercase","std::collections::btree_map::Keys<'a, K, V>","std::sync::mpsc::IntoIter<T>","std::collections::binary_heap::IntoIterSorted<T>","std::option::IntoIter<A>","std::slice::RChunksExact<'a, T>","std::slice::Chunks<'a, T>","std::slice::SplitNMut<'a, T, P>","std::iter::ByRefSized<'_, I>","std::char::EscapeDebug","std::collections::hash_map::IntoIter<K, V>","std::env::Args","std::collections::vec_deque::Iter<'a, T>","std::collections::btree_map::IntoIter<K, V, A>","std::collections::hash_set::Iter<'a, K>","std::iter::IntersperseWith<I, G>","std::str::RSplitTerminator<'a, P>","std::char::CaseMappingIter","std::collections::hash_set::Drain<'a, K>","std::collections::btree_set::Union<'a, T>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::env::Vars","std::sys::unix::fs::ReadDir","std::os::unix::net::Incoming<'a>","std::io::Bytes<R>","std::slice::EscapeAscii<'a>","std::ops::index_range::IndexRange","std::iter::adapters::GenericShunt<'_, I, R>","std::collections::btree_map::RangeMut<'a, K, V>","std::iter::Chain<A, B>","std::slice::Iter<'a, T>","std::option::Iter<'a, A>","std::slice::IterMut<'a, T>","std::str::EncodeUtf16<'a>","std::str::EscapeUnicode<'a>","std::collections::vec_deque::Drain<'_, T, A>","std::slice::RSplitN<'a, T, P>","std::collections::btree_set::IntoIter<T, A>","std::option::Item<A>","std::fs::ReadDir","std::str::LinesAny<'a>","std::collections::btree_map::IntoKeys<K, V, A>","std::os::unix::net::Messages<'a>","std::result::IntoIter<T>","std::collections::btree_map::IterMut<'a, K, V>","std::iter::MapWhile<I, P>","std::str::MatchIndices<'a, P>","std::iter::SkipWhile<I, P>","std::slice::RChunksExactMut<'a, T>","std::iter::Enumerate<I>","std::sys_common::net::LookupHost","std::slice::GroupBy<'a, T, P>","std::sys_common::wstr::WStrUnits<'_>","std::sys::unix::os::SplitPaths<'a>","std::collections::hash_set::Union<'a, T, S>","std::collections::btree_map::Values<'a, K, V>","std::collections::btree_set::Range<'a, T>","std::env::VarsOs","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::collections::hash_map::Drain<'a, K, V>","std::iter::FlatMap<I, U, F>","std::iter::Intersperse<I>","std::env::SplitPaths<'a>","std::os::unix::net::ScmRights<'a>","std::iter::Map<I, F>","bitflags::core::error::Source<'a>","std::slice::Windows<'a, T>","std::str::SplitInclusive<'a, P>","std::str::SplitTerminator<'a, P>","std::sync::mpsc::Iter<'a, T>","std::collections::hash_map::IntoKeys<K, V>","std::iter::Cycle<I>","std::str::SplitN<'a, P>","std::str::RSplitN<'a, P>","std::collections::hash_set::DrainFilter<'_, K, F>","std::vec::Splice<'_, I, A>","std::str::EscapeDebug<'a>","std::str::SplitAsciiWhitespace<'a>","std::collections::btree_map::ValuesMut<'a, K, V>","std::str::Bytes<'_>","std::sys_common::wtf8::EncodeWide<'a>","<&mut I as std::iter::Iterator>","std::collections::binary_heap::DrainSorted<'_, T>","std::sys::unix::process::process_common::CommandArgs<'a>","std::collections::btree_map::IntoValues<K, V, A>","std::slice::SplitMut<'a, T, P>","std::sys::unix::os::Env","std::slice::RChunks<'a, T>","std::iter::ArrayChunks<I, N>","std::collections::vec_deque::IntoIter<T, A>","std::str::RSplit<'a, P>","std::iter::Rev<I>","std::iter::Once<T>","std::ops::RangeInclusive<A>","std::iter::Fuse<I>","std::char::DecodeUtf16<I>","std::string::Drain<'_>","std::iter::FilterMap<I, F>","std::collections::hash_map::IterMut<'a, K, V>","std::iter::Scan<I, St, F>","std::slice::SplitInclusiveMut<'a, T, P>","std::iter::RepeatWith<F>","std::net::IntoIncoming","std::iter::Successors<T, F>","std::collections::binary_heap::Drain<'_, T>","std::str::RMatchIndices<'a, P>","std::iter::Copied<I>","std::iter::Repeat<A>","std::str::Chars<'a>","std::collections::binary_heap::Iter<'a, T>","std::array::IntoIter<T, N>","std::slice::SplitInclusive<'a, T, P>","std::sync::mpsc::TryIter<'a, T>","std::collections::binary_heap::IntoIter<T>","std::slice::RSplitMut<'a, T, P>","std::iter::TakeWhile<I, P>","std::slice::ArrayChunks<'a, T, N>","std::collections::btree_set::SymmetricDifference<'a, T>","std::path::Components<'a>","std::iter::Skip<I>","std::iter::Take<I>","std::vec::DrainFilter<'_, T, F, A>","std::str::SplitWhitespace<'a>","std::path::Ancestors<'a>","std::collections::hash_map::IntoValues<K, V>","std::collections::btree_set::Intersection<'a, T, A>","std::iter::FromFn<F>","std::slice::ArrayChunksMut<'a, T, N>","std::str::RMatches<'a, P>","std::slice::ArrayWindows<'a, T, N>","std::collections::hash_set::Intersection<'a, T, S>","std::iter::Cloned<I>","std::str::Lines<'a>","std::collections::hash_map::Keys<'a, K, V>","std::process::CommandEnvs<'a>","std::iter::StepBy<I>","std::slice::RSplitNMut<'a, T, P>","std::collections::hash_set::Difference<'a, T, S>","std::collections::btree_map::Iter<'a, K, V>","std::collections::hash_map::Values<'a, K, V>","std::slice::ChunksExactMut<'a, T>","std::ops::RangeFrom<A>","std::char::ToUppercase","std::collections::linked_list::IntoIter<T>","std::collections::hash_set::IntoIter<K>","std::iter::Flatten<I>","std::process::CommandArgs<'a>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::collections::btree_set::Difference<'a, T, A>","std::iter::Peekable<I>","std::iter::Empty<T>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","bitflags::core::slice::iter::GenericSplitN<I>","std::collections::vec_deque::IterMut<'a, T>","std::iter::RepeatN<A>","std::iter::Filter<I, P>","std::vec::Drain<'_, T, A>","std::slice::ChunksExact<'a, T>","std::slice::GroupByMut<'a, T, P>","std::collections::btree_set::Iter<'a, T>","std::str::Utf8Chunks<'a>","std::collections::linked_list::DrainFilter<'_, T, F>","std::collections::hash_map::ValuesMut<'a, K, V>","std::vec::IntoIter<T, A>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::collections::hash_map::Iter<'a, K, V>","std::collections::btree_map::Range<'a, K, V>","std::result::Iter<'a, T>","std::os::unix::net::ScmCredentials<'a>","std::str::CharIndices<'a>","std::slice::Split<'a, T, P>","std::iter::Zip<A, B>","std::collections::linked_list::IterMut<'a, T>","std::ascii::EscapeDefault","std::char::EscapeDefault","std::iter::Inspect<I, F>","std::path::Iter<'a>","std::net::Incoming<'a>","std::slice::RChunksMut<'a, T>","std::str::Matches<'a, P>","std::iter::sources::from_generator::FromGenerator<G>","std::char::EscapeUnicode","std::env::ArgsOs","std::result::IterMut<'a, T>","std::option::IterMut<'a, A>","std::ops::Range<A>","std::boxed::Box<I, A>","std::str::Split<'a, P>","std::str::EscapeDefault<'a>","std::iter::OnceWith<F>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::slice::RSplit<'a, T, P>","std::slice::ChunksMut<'a, T>","std::collections::linked_list::Iter<'a, T>","std::io::Lines<B>","std::sys::unix::args::Args","std::io::Split<B>","std::slice::SplitN<'a, T, P>"],"H":["std::str::Bytes<'_>","std::collections::hash_map::Drain<'a, K, V>","std::slice::SplitNMut<'a, T, P>","std::str::EscapeDebug<'a>","std::string::Drain<'_>","std::path::Components<'a>","std::sync::mpsc::Iter<'a, T>","std::str::RSplitTerminator<'a, P>","std::collections::binary_heap::Drain<'_, T>","std::sys_common::wstr::WStrUnits<'_>","std::sys::unix::process::process_common::CommandArgs<'a>","std::iter::adapters::GenericShunt<'_, I, R>","std::collections::hash_map::Values<'a, K, V>","std::iter::ByRefSized<'_, I>","std::str::SplitN<'a, P>","std::iter::Skip<I>","std::collections::linked_list::Iter<'a, T>","std::os::unix::net::ScmCredentials<'a>","std::net::IntoIncoming","std::process::CommandArgs<'a>","std::option::Iter<'a, A>","std::io::Bytes<R>","std::str::MatchIndices<'a, P>","std::iter::FlatMap<I, U, F>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::collections::hash_map::ValuesMut<'a, K, V>","std::str::Utf8Chunks<'a>","std::slice::GroupByMut<'a, T, P>","std::collections::btree_map::IterMut<'a, K, V>","std::io::Lines<B>","std::collections::vec_deque::Iter<'a, T>","std::option::Item<A>","std::str::EncodeUtf16<'a>","std::collections::btree_set::Intersection<'a, T, A>","std::os::unix::net::Messages<'a>","std::collections::btree_map::Iter<'a, K, V>","std::str::Split<'a, P>","std::vec::Drain<'_, T, A>","std::collections::vec_deque::IterMut<'a, T>","std::collections::btree_set::Iter<'a, T>","std::slice::ArrayChunks<'a, T, N>","std::sys::unix::os::Env","std::iter::MapWhile<I, P>","std::env::ArgsOs","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::collections::binary_heap::DrainSorted<'_, T>","std::vec::Splice<'_, I, A>","std::iter::Repeat<A>","std::iter::SkipWhile<I, P>","std::collections::btree_set::IntoIter<T, A>","std::slice::IterMut<'a, T>","std::str::EscapeUnicode<'a>","std::iter::Successors<T, F>","std::iter::RepeatN<A>","std::slice::ChunksExact<'a, T>","std::str::SplitInclusive<'a, P>","std::iter::FromFn<F>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::iter::FilterMap<I, F>","std::collections::hash_map::IntoKeys<K, V>","std::collections::vec_deque::IntoIter<T, A>","<&mut I as std::iter::Iterator>","std::slice::RSplitMut<'a, T, P>","std::sync::mpsc::IntoIter<T>","std::str::SplitTerminator<'a, P>","std::iter::sources::from_generator::FromGenerator<G>","std::collections::hash_set::DrainFilter<'_, K, F>","std::iter::Rev<I>","std::result::Iter<'a, T>","std::ops::RangeFrom<A>","std::slice::RSplitNMut<'a, T, P>","std::slice::RSplit<'a, T, P>","std::char::DecodeUtf16<I>","std::iter::Copied<I>","std::slice::ArrayChunksMut<'a, T, N>","std::char::CaseMappingIter","std::slice::Windows<'a, T>","std::sys::unix::fs::ReadDir","std::str::CharIndices<'a>","std::iter::Take<I>","std::sys::unix::os::SplitPaths<'a>","std::collections::binary_heap::IntoIterSorted<T>","std::collections::btree_map::IntoValues<K, V, A>","std::collections::hash_map::IntoIter<K, V>","std::str::RSplit<'a, P>","std::iter::Empty<T>","std::slice::ChunksMut<'a, T>","std::iter::TakeWhile<I, P>","std::path::Iter<'a>","std::str::Chars<'a>","std::collections::btree_map::Values<'a, K, V>","std::collections::linked_list::IterMut<'a, T>","std::collections::binary_heap::Iter<'a, T>","std::iter::Scan<I, St, F>","std::str::SplitAsciiWhitespace<'a>","std::collections::hash_map::Keys<'a, K, V>","std::slice::Iter<'a, T>","std::collections::btree_map::IntoKeys<K, V, A>","std::net::Incoming<'a>","std::str::RMatchIndices<'a, P>","std::env::SplitPaths<'a>","std::str::EscapeDefault<'a>","std::collections::btree_map::IntoIter<K, V, A>","std::collections::btree_map::RangeMut<'a, K, V>","std::collections::btree_set::Difference<'a, T, A>","std::collections::btree_set::Range<'a, T>","std::collections::btree_set::SymmetricDifference<'a, T>","std::char::ToLowercase","std::result::IntoIter<T>","std::collections::hash_map::Iter<'a, K, V>","std::ops::Range<A>","std::option::IntoIter<A>","std::str::Lines<'a>","std::char::EscapeUnicode","std::iter::Peekable<I>","std::collections::linked_list::DrainFilter<'_, T, F>","std::slice::RSplitN<'a, T, P>","std::char::ToUppercase","std::slice::SplitInclusiveMut<'a, T, P>","std::collections::hash_set::Difference<'a, T, S>","std::slice::ArrayWindows<'a, T, N>","std::process::CommandEnvs<'a>","std::io::Split<B>","std::iter::Cycle<I>","std::slice::ChunksExactMut<'a, T>","bitflags::core::error::Source<'a>","std::iter::Enumerate<I>","bitflags::core::slice::iter::GenericSplitN<I>","std::iter::Chain<A, B>","std::iter::Intersperse<I>","std::ascii::EscapeDefault","std::vec::IntoIter<T, A>","std::collections::hash_set::Intersection<'a, T, S>","std::env::Vars","std::collections::hash_set::IntoIter<K>","std::iter::IntersperseWith<I, G>","std::sys::unix::args::Args","std::option::IterMut<'a, A>","std::iter::RepeatWith<F>","std::iter::ArrayChunks<I, N>","std::os::unix::net::Incoming<'a>","std::collections::hash_map::IterMut<'a, K, V>","std::array::IntoIter<T, N>","std::slice::SplitInclusive<'a, T, P>","std::slice::RChunksMut<'a, T>","std::str::SplitWhitespace<'a>","std::sys_common::net::LookupHost","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::ops::RangeInclusive<A>","std::ops::index_range::IndexRange","std::collections::hash_set::Union<'a, T, S>","std::char::EscapeDebug","std::iter::Zip<A, B>","std::slice::SplitN<'a, T, P>","std::collections::linked_list::IntoIter<T>","std::path::Ancestors<'a>","std::slice::Split<'a, T, P>","std::slice::RChunks<'a, T>","std::collections::btree_set::Union<'a, T>","std::slice::Chunks<'a, T>","std::boxed::Box<I, A>","std::slice::SplitMut<'a, T, P>","std::collections::hash_map::IntoValues<K, V>","std::collections::btree_map::Keys<'a, K, V>","std::str::RMatches<'a, P>","std::iter::Map<I, F>","std::iter::Inspect<I, F>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::vec::DrainFilter<'_, T, F, A>","std::os::unix::net::ScmRights<'a>","std::str::Matches<'a, P>","std::iter::Once<T>","std::slice::EscapeAscii<'a>","std::iter::StepBy<I>","std::iter::Flatten<I>","std::collections::btree_map::Range<'a, K, V>","std::fs::ReadDir","std::char::EscapeDefault","std::env::VarsOs","std::env::Args","std::collections::btree_map::ValuesMut<'a, K, V>","std::iter::Cloned<I>","std::slice::GroupBy<'a, T, P>","std::iter::Filter<I, P>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::hash_set::Iter<'a, K>","std::collections::hash_set::Drain<'a, K>","std::str::LinesAny<'a>","std::sys_common::wtf8::EncodeWide<'a>","std::result::IterMut<'a, T>","std::iter::OnceWith<F>","std::iter::Fuse<I>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::collections::binary_heap::IntoIter<T>","std::slice::RChunksExactMut<'a, T>","std::str::RSplitN<'a, P>","std::sync::mpsc::TryIter<'a, T>","std::slice::RChunksExact<'a, T>"],"R":["std::iter::ArrayChunks<I, N>","bitflags::core::slice::iter::GenericSplitN<I>","std::str::EscapeDebug<'a>","std::collections::linked_list::IterMut<'a, T>","std::net::Incoming<'a>","std::sync::mpsc::TryIter<'a, T>","std::collections::binary_heap::Iter<'a, T>","std::str::SplitN<'a, P>","std::char::EscapeDefault","std::io::Bytes<R>","std::collections::btree_map::IntoKeys<K, V, A>","std::env::VarsOs","std::fs::ReadDir","std::iter::RepeatWith<F>","std::os::unix::net::ScmCredentials<'a>","std::iter::Cloned<I>","std::slice::RSplitNMut<'a, T, P>","std::ascii::EscapeDefault","std::ops::RangeFrom<A>","std::iter::Peekable<I>","std::str::SplitAsciiWhitespace<'a>","std::env::Vars","std::slice::RSplitMut<'a, T, P>","std::collections::btree_map::IntoIter<K, V, A>","std::collections::btree_map::Range<'a, K, V>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::hash_map::ValuesMut<'a, K, V>","std::process::CommandEnvs<'a>","std::vec::Splice<'_, I, A>","std::collections::btree_map::IntoValues<K, V, A>","std::str::SplitInclusive<'a, P>","std::iter::Inspect<I, F>","std::vec::DrainFilter<'_, T, F, A>","std::iter::Flatten<I>","std::str::EscapeUnicode<'a>","std::slice::SplitNMut<'a, T, P>","std::iter::Successors<T, F>","std::collections::hash_set::Union<'a, T, S>","std::os::unix::net::ScmRights<'a>","std::collections::hash_set::Iter<'a, K>","std::collections::hash_map::IntoIter<K, V>","bitflags::core::error::Source<'a>","std::iter::SkipWhile<I, P>","std::slice::Windows<'a, T>","std::sys::unix::os::SplitPaths<'a>","std::slice::IterMut<'a, T>","std::ops::Range<A>","<&mut I as std::iter::Iterator>","std::collections::binary_heap::Drain<'_, T>","std::io::Split<B>","std::iter::Filter<I, P>","std::collections::hash_set::Intersection<'a, T, S>","std::str::SplitTerminator<'a, P>","std::char::ToUppercase","std::collections::linked_list::Iter<'a, T>","std::slice::ChunksMut<'a, T>","std::iter::Zip<A, B>","std::option::Item<A>","std::str::RMatches<'a, P>","std::slice::ChunksExactMut<'a, T>","std::collections::btree_map::IterMut<'a, K, V>","std::slice::SplitN<'a, T, P>","std::iter::StepBy<I>","std::str::CharIndices<'a>","std::slice::Split<'a, T, P>","std::slice::GroupBy<'a, T, P>","std::sys::unix::args::Args","std::collections::btree_set::Difference<'a, T, A>","std::option::Iter<'a, A>","std::slice::RChunks<'a, T>","std::iter::FromFn<F>","std::collections::hash_map::Drain<'a, K, V>","std::collections::linked_list::IntoIter<T>","std::iter::Cycle<I>","std::iter::FilterMap<I, F>","std::collections::vec_deque::IntoIter<T, A>","std::result::IterMut<'a, T>","std::collections::hash_map::Values<'a, K, V>","std::iter::Once<T>","std::collections::hash_map::Iter<'a, K, V>","std::iter::Empty<T>","std::iter::MapWhile<I, P>","std::iter::RepeatN<A>","std::slice::RChunksExact<'a, T>","std::str::RMatchIndices<'a, P>","std::str::Chars<'a>","std::slice::SplitInclusive<'a, T, P>","std::slice::ArrayWindows<'a, T, N>","std::result::Iter<'a, T>","std::io::Lines<B>","std::char::DecodeUtf16<I>","std::char::EscapeDebug","std::net::IntoIncoming","std::iter::Skip<I>","std::process::CommandArgs<'a>","std::slice::RSplitN<'a, T, P>","std::iter::Scan<I, St, F>","std::vec::IntoIter<T, A>","std::iter::Map<I, F>","std::sys_common::wstr::WStrUnits<'_>","std::char::EscapeUnicode","std::collections::btree_map::Keys<'a, K, V>","std::os::unix::net::Incoming<'a>","std::array::IntoIter<T, N>","std::path::Components<'a>","std::iter::Rev<I>","std::iter::Take<I>","std::slice::ChunksExact<'a, T>","std::result::IntoIter<T>","std::sync::mpsc::IntoIter<T>","std::slice::EscapeAscii<'a>","std::iter::FlatMap<I, U, F>","std::collections::btree_map::Values<'a, K, V>","std::collections::linked_list::DrainFilter<'_, T, F>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::collections::vec_deque::Iter<'a, T>","std::sys::unix::fs::ReadDir","std::collections::binary_heap::IntoIter<T>","std::collections::hash_map::IntoKeys<K, V>","std::slice::GroupByMut<'a, T, P>","std::iter::IntersperseWith<I, G>","std::collections::binary_heap::IntoIterSorted<T>","std::sync::mpsc::Iter<'a, T>","std::ops::index_range::IndexRange","std::collections::btree_set::Union<'a, T>","std::collections::binary_heap::DrainSorted<'_, T>","std::collections::hash_set::IntoIter<K>","std::collections::btree_set::Iter<'a, T>","std::env::Args","std::sys_common::wtf8::EncodeWide<'a>","std::str::MatchIndices<'a, P>","std::collections::hash_set::Difference<'a, T, S>","std::string::Drain<'_>","std::iter::Chain<A, B>","std::slice::SplitInclusiveMut<'a, T, P>","std::iter::sources::from_generator::FromGenerator<G>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::sys::unix::process::process_common::CommandArgs<'a>","std::collections::hash_set::DrainFilter<'_, K, F>","std::collections::hash_map::IntoValues<K, V>","std::boxed::Box<I, A>","std::iter::OnceWith<F>","std::str::EscapeDefault<'a>","std::str::Bytes<'_>","std::collections::btree_map::ValuesMut<'a, K, V>","std::char::CaseMappingIter","std::str::SplitWhitespace<'a>","std::iter::Intersperse<I>","std::slice::ArrayChunksMut<'a, T, N>","std::str::EncodeUtf16<'a>","std::collections::btree_map::RangeMut<'a, K, V>","std::slice::SplitMut<'a, T, P>","std::sys_common::net::LookupHost","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::iter::ByRefSized<'_, I>","std::vec::Drain<'_, T, A>","std::str::Lines<'a>","std::iter::adapters::GenericShunt<'_, I, R>","std::iter::Enumerate<I>","std::collections::hash_set::Drain<'a, K>","std::iter::Repeat<A>","std::iter::Fuse<I>","std::str::RSplitN<'a, P>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::iter::TakeWhile<I, P>","std::option::IntoIter<A>","std::collections::hash_map::Keys<'a, K, V>","std::collections::btree_map::Iter<'a, K, V>","std::collections::btree_set::IntoIter<T, A>","std::str::Utf8Chunks<'a>","std::str::Matches<'a, P>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::slice::RChunksExactMut<'a, T>","std::env::ArgsOs","std::slice::Iter<'a, T>","std::sys::unix::os::Env","std::ops::RangeInclusive<A>","std::char::ToLowercase","std::env::SplitPaths<'a>","std::str::Split<'a, P>","std::str::LinesAny<'a>","std::option::IterMut<'a, A>","std::slice::ArrayChunks<'a, T, N>","std::slice::RSplit<'a, T, P>","std::path::Ancestors<'a>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::slice::Chunks<'a, T>","std::collections::vec_deque::IterMut<'a, T>","std::collections::btree_set::Intersection<'a, T, A>","std::os::unix::net::Messages<'a>","std::path::Iter<'a>","std::str::RSplitTerminator<'a, P>","std::slice::RChunksMut<'a, T>","std::iter::Copied<I>","std::collections::btree_set::Range<'a, T>","std::collections::hash_map::IterMut<'a, K, V>","std::str::RSplit<'a, P>","std::collections::btree_set::SymmetricDifference<'a, T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::table::Table<'a, H, R>
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
+p0.block(p1);
+widgets::table::Table::<'a, H, R>::block(p0, p1);
+crate::widgets::table::Table::<'a, H, R>::block(p0, p1);
+<widgets::table::Table<'a, H, R>>::block(p0, p1);
-----------------
src/widgets/table.rs widgets::table::Table::<'a, H, R>::header
'a
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"widgets::table::Table::<'a, H, R>::header":{"<D as std::iter::Iterator>::Item":["std::fmt::Display"],"D":["std::marker::Sized","std::iter::Iterator"],"H":["std::marker::Sized","std::iter::Iterator"],"II":["std::iter::IntoIterator","std::marker::Sized"],"R":["std::iter::Iterator","std::marker::Sized"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"<I as std::iter::IntoIterator>":{"I":["std::char::CaseMappingIter","std::fs::ReadDir","std::collections::hash_map::ValuesMut<'a, K, V>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::path::Ancestors<'a>","std::str::LinesAny<'a>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::slice::RChunks<'a, T>","std::io::Split<B>","std::iter::Chain<A, B>","std::sys_common::wstr::WStrUnits<'_>","std::str::Bytes<'_>","std::slice::RSplit<'a, T, P>","std::sync::mpsc::TryIter<'a, T>","std::char::ToLowercase","std::sys::unix::os::SplitPaths<'a>","std::collections::btree_map::Range<'a, K, V>","std::str::EscapeUnicode<'a>","std::slice::SplitInclusive<'a, T, P>","std::str::Lines<'a>","std::iter::Scan<I, St, F>","std::iter::Rev<I>","std::os::unix::net::ScmCredentials<'a>","std::collections::hash_map::Iter<'a, K, V>","std::slice::RSplitNMut<'a, T, P>","std::collections::linked_list::IterMut<'a, T>","std::str::SplitInclusive<'a, P>","std::slice::GroupBy<'a, T, P>","std::collections::binary_heap::Iter<'a, T>","std::iter::Map<I, F>","std::slice::ArrayChunks<'a, T, N>","std::iter::Zip<A, B>","std::iter::Cloned<I>","std::iter::Skip<I>","std::str::RMatches<'a, P>","std::collections::hash_set::Difference<'a, T, S>","std::iter::RepeatN<A>","std::str::EscapeDefault<'a>","std::str::EscapeDebug<'a>","std::vec::DrainFilter<'_, T, F, A>","std::collections::btree_map::Keys<'a, K, V>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::os::unix::net::ScmRights<'a>","std::slice::ChunksExactMut<'a, T>","std::iter::SkipWhile<I, P>","std::result::IterMut<'a, T>","std::slice::SplitMut<'a, T, P>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::btree_map::IterMut<'a, K, V>","std::iter::FlatMap<I, U, F>","std::collections::btree_map::IntoValues<K, V, A>","std::slice::RChunksExactMut<'a, T>","std::vec::IntoIter<T, A>","std::collections::hash_set::Union<'a, T, S>","std::string::Drain<'_>","std::iter::sources::from_generator::FromGenerator<G>","std::collections::hash_map::IntoIter<K, V>","std::collections::hash_set::DrainFilter<'_, K, F>","std::str::Chars<'a>","std::collections::vec_deque::Iter<'a, T>","std::collections::btree_set::SymmetricDifference<'a, T>","std::str::RMatchIndices<'a, P>","std::char::ToUppercase","std::sys::unix::process::process_common::CommandArgs<'a>","std::path::Iter<'a>","std::iter::Once<T>","std::collections::btree_set::IntoIter<T, A>","std::iter::OnceWith<F>","bitflags::core::slice::iter::GenericSplitN<I>","std::env::Vars","std::sync::mpsc::Iter<'a, T>","std::slice::Split<'a, T, P>","std::collections::hash_set::IntoIter<K>","std::collections::btree_set::Iter<'a, T>","std::ops::index_range::IndexRange","std::env::ArgsOs","std::collections::binary_heap::Drain<'_, T>","std::vec::Splice<'_, I, A>","std::env::SplitPaths<'a>","std::option::Iter<'a, A>","std::char::EscapeUnicode","std::slice::EscapeAscii<'a>","std::str::Split<'a, P>","std::slice::ChunksMut<'a, T>","std::slice::ChunksExact<'a, T>","std::sys::unix::os::Env","std::path::Components<'a>","std::iter::Peekable<I>","std::str::Utf8Chunks<'a>","std::collections::hash_map::IterMut<'a, K, V>","std::os::unix::net::Incoming<'a>","std::slice::ArrayChunksMut<'a, T, N>","std::char::EscapeDebug","std::iter::Copied<I>","std::collections::binary_heap::IntoIterSorted<T>","std::collections::linked_list::Iter<'a, T>","std::iter::ByRefSized<'_, I>","std::slice::Windows<'a, T>","std::collections::hash_map::Keys<'a, K, V>","std::slice::RChunksMut<'a, T>","std::process::CommandArgs<'a>","std::ops::RangeInclusive<A>","std::boxed::Box<I, A>","std::slice::RSplitMut<'a, T, P>","std::result::Iter<'a, T>","std::io::Lines<B>","std::collections::hash_map::Drain<'a, K, V>","std::slice::SplitNMut<'a, T, P>","std::str::CharIndices<'a>","std::iter::Intersperse<I>","std::option::Item<A>","std::iter::Take<I>","std::collections::hash_set::Iter<'a, K>","std::option::IntoIter<A>","std::ops::RangeFrom<A>","std::collections::btree_map::IntoIter<K, V, A>","std::vec::Drain<'_, T, A>","std::array::IntoIter<T, N>","std::collections::btree_map::Values<'a, K, V>","std::str::SplitTerminator<'a, P>","std::iter::TakeWhile<I, P>","std::str::Matches<'a, P>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::slice::Chunks<'a, T>","std::collections::vec_deque::IntoIter<T, A>","std::iter::MapWhile<I, P>","std::str::MatchIndices<'a, P>","std::slice::SplitInclusiveMut<'a, T, P>","std::iter::Enumerate<I>","std::iter::Cycle<I>","std::collections::btree_set::Range<'a, T>","std::slice::RChunksExact<'a, T>","std::collections::btree_map::RangeMut<'a, K, V>","std::collections::btree_set::Intersection<'a, T, A>","std::env::Args","std::str::RSplitTerminator<'a, P>","std::str::RSplit<'a, P>","std::collections::linked_list::IntoIter<T>","std::iter::Flatten<I>","bitflags::core::error::Source<'a>","std::str::RSplitN<'a, P>","std::char::DecodeUtf16<I>","std::iter::StepBy<I>","std::ops::Range<A>","std::process::CommandEnvs<'a>","std::str::SplitAsciiWhitespace<'a>","std::iter::FromFn<F>","std::collections::binary_heap::DrainSorted<'_, T>","std::str::SplitWhitespace<'a>","std::os::unix::net::Messages<'a>","std::collections::btree_map::Iter<'a, K, V>","std::net::IntoIncoming","std::char::EscapeDefault","std::option::IterMut<'a, A>","std::env::VarsOs","std::io::Bytes<R>","std::slice::GroupByMut<'a, T, P>","std::collections::btree_set::Difference<'a, T, A>","std::collections::linked_list::DrainFilter<'_, T, F>","std::slice::IterMut<'a, T>","std::sys_common::wtf8::EncodeWide<'a>","std::iter::RepeatWith<F>","<&mut I as std::iter::Iterator>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::sys::unix::fs::ReadDir","std::slice::ArrayWindows<'a, T, N>","std::iter::Inspect<I, F>","std::iter::IntersperseWith<I, G>","std::sync::mpsc::IntoIter<T>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::collections::vec_deque::IterMut<'a, T>","std::str::EncodeUtf16<'a>","std::iter::Filter<I, P>","std::str::SplitN<'a, P>","std::collections::hash_map::Values<'a, K, V>","std::slice::RSplitN<'a, T, P>","std::iter::Empty<T>","std::collections::btree_map::ValuesMut<'a, K, V>","std::iter::ArrayChunks<I, N>","std::ascii::EscapeDefault","std::collections::hash_map::IntoKeys<K, V>","std::slice::SplitN<'a, T, P>","std::collections::btree_set::Union<'a, T>","std::iter::Successors<T, F>","std::collections::hash_set::Drain<'a, K>","std::collections::binary_heap::IntoIter<T>","std::iter::Repeat<A>","std::result::IntoIter<T>","std::collections::btree_map::IntoKeys<K, V, A>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::collections::vec_deque::Drain<'_, T, A>","std::slice::Iter<'a, T>","std::iter::FilterMap<I, F>","std::iter::adapters::GenericShunt<'_, I, R>","std::iter::Fuse<I>","std::collections::hash_map::IntoValues<K, V>","std::sys::unix::args::Args","std::sys_common::net::LookupHost","std::net::Incoming<'a>"]},"widgets::table::Table::<'a, H, R>::header":{"<D as std::iter::Iterator>::Item":["backend::termion::Bg","backend::termion::Fg","backend::termion::ModifierDiff","<&T as std::fmt::Display>"],"D":["std::env::VarsOs","std::fs::ReadDir","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::slice::RChunksMut<'a, T>","std::iter::RepeatWith<F>","std::slice::Iter<'a, T>","std::slice::SplitMut<'a, T, P>","std::slice::SplitInclusiveMut<'a, T, P>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::collections::btree_set::Difference<'a, T, A>","std::collections::binary_heap::Drain<'_, T>","std::collections::hash_map::IntoIter<K, V>","std::slice::GroupByMut<'a, T, P>","std::collections::btree_map::IntoKeys<K, V, A>","std::str::SplitN<'a, P>","std::sys::unix::args::Args","std::str::Utf8Chunks<'a>","std::slice::RChunks<'a, T>","std::slice::GroupBy<'a, T, P>","std::iter::Rev<I>","std::iter::adapters::GenericShunt<'_, I, R>","std::slice::ChunksExactMut<'a, T>","std::io::Lines<B>","std::collections::linked_list::Iter<'a, T>","bitflags::core::slice::iter::GenericSplitN<I>","std::collections::hash_map::Iter<'a, K, V>","std::char::DecodeUtf16<I>","std::collections::hash_map::IntoKeys<K, V>","std::collections::binary_heap::DrainSorted<'_, T>","std::str::SplitTerminator<'a, P>","std::array::IntoIter<T, N>","std::sync::mpsc::Iter<'a, T>","std::collections::hash_map::Drain<'a, K, V>","std::result::IntoIter<T>","std::iter::Empty<T>","std::iter::ByRefSized<'_, I>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::iter::Inspect<I, F>","std::slice::SplitInclusive<'a, T, P>","std::iter::OnceWith<F>","std::iter::Cycle<I>","std::collections::btree_map::Values<'a, K, V>","std::char::CaseMappingIter","std::path::Ancestors<'a>","std::char::EscapeDefault","std::vec::Splice<'_, I, A>","bitflags::core::error::Source<'a>","std::iter::MapWhile<I, P>","std::collections::binary_heap::IntoIter<T>","std::str::RSplitN<'a, P>","std::iter::Chain<A, B>","std::io::Split<B>","std::option::IntoIter<A>","std::sys_common::net::LookupHost","std::env::SplitPaths<'a>","std::iter::ArrayChunks<I, N>","std::str::SplitWhitespace<'a>","std::str::LinesAny<'a>","std::collections::btree_map::Range<'a, K, V>","std::vec::Drain<'_, T, A>","std::collections::binary_heap::IntoIterSorted<T>","std::collections::hash_set::Drain<'a, K>","std::iter::Successors<T, F>","std::option::IterMut<'a, A>","std::iter::Flatten<I>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::slice::IterMut<'a, T>","std::iter::FromFn<F>","std::str::EncodeUtf16<'a>","std::collections::btree_map::ValuesMut<'a, K, V>","std::collections::hash_map::Values<'a, K, V>","std::sys::unix::fs::ReadDir","std::slice::RSplitN<'a, T, P>","std::str::SplitInclusive<'a, P>","std::iter::SkipWhile<I, P>","std::boxed::Box<I, A>","std::slice::ArrayChunksMut<'a, T, N>","std::process::CommandArgs<'a>","std::vec::IntoIter<T, A>","std::iter::TakeWhile<I, P>","std::slice::Split<'a, T, P>","std::collections::btree_set::SymmetricDifference<'a, T>","std::vec::DrainFilter<'_, T, F, A>","std::string::Drain<'_>","std::slice::EscapeAscii<'a>","std::process::CommandEnvs<'a>","std::iter::IntersperseWith<I, G>","std::str::EscapeDebug<'a>","std::slice::Windows<'a, T>","std::os::unix::net::ScmCredentials<'a>","std::ops::Range<A>","std::slice::SplitNMut<'a, T, P>","std::sys::unix::os::Env","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::collections::hash_set::IntoIter<K>","std::collections::vec_deque::IntoIter<T, A>","std::ops::RangeInclusive<A>","std::sys::unix::process::process_common::CommandArgs<'a>","std::collections::hash_set::Intersection<'a, T, S>","std::slice::ChunksMut<'a, T>","std::iter::RepeatN<A>","std::str::RSplitTerminator<'a, P>","std::iter::Skip<I>","std::iter::sources::from_generator::FromGenerator<G>","std::collections::vec_deque::Drain<'_, T, A>","std::char::ToUppercase","std::net::Incoming<'a>","std::collections::vec_deque::IterMut<'a, T>","std::iter::Enumerate<I>","std::ops::RangeFrom<A>","std::slice::Chunks<'a, T>","std::slice::RSplit<'a, T, P>","std::iter::Fuse<I>","std::collections::btree_set::Range<'a, T>","std::collections::hash_map::IntoValues<K, V>","std::collections::hash_set::Union<'a, T, S>","std::slice::RSplitMut<'a, T, P>","std::iter::Once<T>","std::collections::btree_map::RangeMut<'a, K, V>","std::slice::RChunksExactMut<'a, T>","std::env::ArgsOs","std::iter::Intersperse<I>","std::io::Bytes<R>","std::collections::hash_map::Keys<'a, K, V>","std::iter::Map<I, F>","std::collections::hash_set::Iter<'a, K>","std::sync::mpsc::IntoIter<T>","std::sync::mpsc::TryIter<'a, T>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::sys::unix::os::SplitPaths<'a>","std::path::Iter<'a>","std::iter::Copied<I>","std::slice::RSplitNMut<'a, T, P>","std::str::MatchIndices<'a, P>","std::collections::btree_map::IterMut<'a, K, V>","std::char::EscapeUnicode","std::str::Split<'a, P>","std::str::CharIndices<'a>","std::collections::vec_deque::Iter<'a, T>","std::iter::Take<I>","std::str::Chars<'a>","std::slice::ArrayWindows<'a, T, N>","std::iter::Peekable<I>","std::str::RSplit<'a, P>","std::slice::ArrayChunks<'a, T, N>","std::sys_common::wtf8::EncodeWide<'a>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::str::Lines<'a>","std::collections::btree_map::Keys<'a, K, V>","std::str::Matches<'a, P>","std::ops::index_range::IndexRange","std::collections::btree_set::Union<'a, T>","std::result::Iter<'a, T>","std::ascii::EscapeDefault","std::str::EscapeDefault<'a>","std::collections::btree_map::Iter<'a, K, V>","std::str::RMatches<'a, P>","std::slice::ChunksExact<'a, T>","std::slice::SplitN<'a, T, P>","std::os::unix::net::ScmRights<'a>","std::char::ToLowercase","std::iter::FilterMap<I, F>","std::slice::RChunksExact<'a, T>","std::char::EscapeDebug","std::env::Args","std::str::SplitAsciiWhitespace<'a>","std::collections::hash_set::DrainFilter<'_, K, F>","std::iter::FlatMap<I, U, F>","std::collections::binary_heap::Iter<'a, T>","std::result::IterMut<'a, T>","std::iter::Zip<A, B>","std::collections::linked_list::IterMut<'a, T>","std::net::IntoIncoming","std::collections::btree_map::IntoValues<K, V, A>","std::collections::btree_set::Iter<'a, T>","std::collections::linked_list::IntoIter<T>","std::sys_common::wstr::WStrUnits<'_>","std::iter::Scan<I, St, F>","std::iter::Cloned<I>","std::option::Iter<'a, A>","std::collections::btree_set::IntoIter<T, A>","std::collections::btree_set::Intersection<'a, T, A>","std::str::EscapeUnicode<'a>","std::path::Components<'a>","std::iter::StepBy<I>","std::collections::hash_map::IterMut<'a, K, V>","std::iter::Filter<I, P>","std::os::unix::net::Messages<'a>","std::option::Item<A>","std::env::Vars","std::collections::hash_set::Difference<'a, T, S>","std::iter::Repeat<A>","std::collections::btree_map::IntoIter<K, V, A>","std::os::unix::net::Incoming<'a>","std::collections::hash_map::ValuesMut<'a, K, V>","std::str::RMatchIndices<'a, P>","std::collections::linked_list::DrainFilter<'_, T, F>","std::str::Bytes<'_>","<&mut I as std::iter::Iterator>"],"H":["std::ops::RangeFrom<A>","std::net::IntoIncoming","std::iter::FlatMap<I, U, F>","std::slice::Split<'a, T, P>","std::iter::Enumerate<I>","std::iter::Empty<T>","std::collections::hash_set::DrainFilter<'_, K, F>","std::iter::Skip<I>","std::fs::ReadDir","std::io::Split<B>","std::str::CharIndices<'a>","std::sys::unix::fs::ReadDir","std::str::SplitAsciiWhitespace<'a>","std::char::ToUppercase","std::slice::RSplitN<'a, T, P>","std::iter::adapters::GenericShunt<'_, I, R>","bitflags::core::error::Source<'a>","std::vec::Drain<'_, T, A>","std::iter::Repeat<A>","std::iter::RepeatN<A>","std::ops::RangeInclusive<A>","std::result::IterMut<'a, T>","std::slice::ArrayWindows<'a, T, N>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::iter::FromFn<F>","std::iter::Intersperse<I>","std::os::unix::net::Messages<'a>","std::collections::btree_set::Intersection<'a, T, A>","std::iter::Successors<T, F>","std::slice::ArrayChunksMut<'a, T, N>","std::str::RSplitTerminator<'a, P>","std::sys::unix::process::process_common::CommandArgs<'a>","std::collections::btree_set::IntoIter<T, A>","std::path::Iter<'a>","std::collections::hash_set::Intersection<'a, T, S>","std::ascii::EscapeDefault","std::str::Chars<'a>","std::path::Components<'a>","std::slice::Iter<'a, T>","std::str::Bytes<'_>","std::slice::RSplit<'a, T, P>","std::slice::SplitNMut<'a, T, P>","std::vec::Splice<'_, I, A>","std::sys::unix::os::SplitPaths<'a>","std::collections::btree_set::SymmetricDifference<'a, T>","std::sync::mpsc::IntoIter<T>","std::collections::vec_deque::Iter<'a, T>","std::slice::EscapeAscii<'a>","std::collections::vec_deque::IterMut<'a, T>","std::collections::btree_set::Union<'a, T>","std::slice::ChunksExact<'a, T>","std::str::EscapeDefault<'a>","std::collections::hash_map::Iter<'a, K, V>","std::iter::Map<I, F>","std::collections::btree_map::IntoIter<K, V, A>","std::vec::DrainFilter<'_, T, F, A>","std::slice::GroupBy<'a, T, P>","std::collections::btree_map::ValuesMut<'a, K, V>","std::sync::mpsc::Iter<'a, T>","std::collections::binary_heap::Drain<'_, T>","std::collections::binary_heap::Iter<'a, T>","std::slice::RChunksExactMut<'a, T>","std::collections::hash_map::Values<'a, K, V>","std::char::DecodeUtf16<I>","std::slice::IterMut<'a, T>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::sys_common::wtf8::EncodeWide<'a>","std::slice::Windows<'a, T>","std::collections::btree_map::IterMut<'a, K, V>","std::option::Item<A>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::btree_map::RangeMut<'a, K, V>","std::iter::MapWhile<I, P>","std::iter::Take<I>","std::os::unix::net::ScmRights<'a>","std::str::RMatches<'a, P>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::sys_common::wstr::WStrUnits<'_>","std::collections::hash_map::IntoValues<K, V>","std::iter::Fuse<I>","std::str::Split<'a, P>","std::slice::RSplitMut<'a, T, P>","std::iter::Inspect<I, F>","std::env::VarsOs","std::os::unix::net::ScmCredentials<'a>","std::char::ToLowercase","std::collections::hash_set::Union<'a, T, S>","std::collections::hash_set::Difference<'a, T, S>","std::slice::RChunks<'a, T>","std::str::EscapeDebug<'a>","std::io::Bytes<R>","std::env::ArgsOs","std::iter::ArrayChunks<I, N>","std::ops::index_range::IndexRange","std::iter::Zip<A, B>","std::collections::binary_heap::DrainSorted<'_, T>","std::str::EncodeUtf16<'a>","std::collections::btree_set::Range<'a, T>","std::slice::SplitInclusiveMut<'a, T, P>","std::option::IntoIter<A>","std::collections::hash_map::IntoKeys<K, V>","std::str::Matches<'a, P>","std::iter::Flatten<I>","std::env::Args","std::char::CaseMappingIter","std::iter::Copied<I>","std::slice::SplitMut<'a, T, P>","std::slice::GroupByMut<'a, T, P>","std::iter::Scan<I, St, F>","std::ops::Range<A>","std::slice::ChunksExactMut<'a, T>","std::iter::SkipWhile<I, P>","std::collections::btree_map::IntoValues<K, V, A>","std::slice::ArrayChunks<'a, T, N>","std::option::Iter<'a, A>","std::iter::ByRefSized<'_, I>","std::slice::RSplitNMut<'a, T, P>","std::iter::OnceWith<F>","std::collections::btree_map::Keys<'a, K, V>","std::iter::Once<T>","std::collections::hash_set::IntoIter<K>","std::sys::unix::os::Env","std::str::LinesAny<'a>","std::collections::btree_map::IntoKeys<K, V, A>","std::slice::SplitN<'a, T, P>","std::option::IterMut<'a, A>","std::str::Utf8Chunks<'a>","std::array::IntoIter<T, N>","std::process::CommandArgs<'a>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::str::SplitTerminator<'a, P>","std::iter::TakeWhile<I, P>","std::boxed::Box<I, A>","std::iter::Peekable<I>","std::collections::linked_list::IterMut<'a, T>","std::collections::btree_set::Difference<'a, T, A>","std::slice::Chunks<'a, T>","std::collections::hash_map::Drain<'a, K, V>","std::process::CommandEnvs<'a>","std::slice::RChunksMut<'a, T>","std::char::EscapeDefault","std::str::RSplitN<'a, P>","std::char::EscapeDebug","std::collections::btree_map::Range<'a, K, V>","std::collections::linked_list::Iter<'a, T>","std::vec::IntoIter<T, A>","std::slice::SplitInclusive<'a, T, P>","std::str::SplitInclusive<'a, P>","std::collections::hash_map::IterMut<'a, K, V>","std::iter::FilterMap<I, F>","std::sys::unix::args::Args","std::collections::btree_set::Iter<'a, T>","std::char::EscapeUnicode","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::collections::hash_set::Iter<'a, K>","std::str::EscapeUnicode<'a>","std::path::Ancestors<'a>","std::collections::hash_map::ValuesMut<'a, K, V>","std::sync::mpsc::TryIter<'a, T>","std::iter::Cloned<I>","std::net::Incoming<'a>","std::str::SplitWhitespace<'a>","std::collections::hash_map::IntoIter<K, V>","std::collections::hash_set::Drain<'a, K>","std::iter::RepeatWith<F>","std::str::Lines<'a>","std::os::unix::net::Incoming<'a>","std::collections::binary_heap::IntoIter<T>","std::slice::ChunksMut<'a, T>","std::str::SplitN<'a, P>","bitflags::core::slice::iter::GenericSplitN<I>","std::str::RMatchIndices<'a, P>","std::io::Lines<B>","std::iter::StepBy<I>","std::string::Drain<'_>","std::iter::IntersperseWith<I, G>","std::iter::Chain<A, B>","std::collections::hash_map::Keys<'a, K, V>","std::collections::linked_list::DrainFilter<'_, T, F>","std::slice::RChunksExact<'a, T>","<&mut I as std::iter::Iterator>","std::iter::Cycle<I>","std::env::Vars","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::result::IntoIter<T>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::str::MatchIndices<'a, P>","std::collections::btree_map::Iter<'a, K, V>","std::sys_common::net::LookupHost","std::env::SplitPaths<'a>","std::collections::linked_list::IntoIter<T>","std::collections::btree_map::Values<'a, K, V>","std::iter::sources::from_generator::FromGenerator<G>","std::collections::binary_heap::IntoIterSorted<T>","std::str::RSplit<'a, P>","std::result::Iter<'a, T>","std::iter::Filter<I, P>","std::collections::vec_deque::IntoIter<T, A>","std::iter::Rev<I>"],"II":["text::Text","<&'a std::result::Result<T, E> as std::iter::IntoIterator>","<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>"],"R":["std::slice::Split<'a, T, P>","std::sys_common::net::LookupHost","std::collections::btree_set::Iter<'a, T>","std::iter::StepBy<I>","std::process::CommandArgs<'a>","std::result::Iter<'a, T>","std::collections::hash_set::IntoIter<K>","std::iter::FromFn<F>","std::collections::btree_set::Intersection<'a, T, A>","std::iter::MapWhile<I, P>","std::str::Chars<'a>","std::iter::Skip<I>","std::char::EscapeUnicode","std::iter::adapters::flatten::FlattenCompat<I, U>","std::ops::Range<A>","std::collections::hash_map::IntoKeys<K, V>","std::vec::IntoIter<T, A>","std::slice::SplitInclusive<'a, T, P>","std::slice::RSplitN<'a, T, P>","std::collections::btree_map::IntoValues<K, V, A>","std::str::RMatchIndices<'a, P>","std::iter::RepeatN<A>","std::iter::Repeat<A>","std::collections::linked_list::Iter<'a, T>","std::slice::IterMut<'a, T>","std::str::RMatches<'a, P>","std::collections::hash_set::Difference<'a, T, S>","std::option::IterMut<'a, A>","std::slice::Iter<'a, T>","std::iter::ArrayChunks<I, N>","std::env::Vars","std::net::Incoming<'a>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::collections::btree_set::SymmetricDifference<'a, T>","std::io::Lines<B>","std::str::Matches<'a, P>","std::vec::Drain<'_, T, A>","std::collections::hash_set::Drain<'a, K>","std::env::SplitPaths<'a>","std::os::unix::net::ScmRights<'a>","std::slice::ChunksExactMut<'a, T>","std::collections::btree_set::Range<'a, T>","std::slice::ChunksMut<'a, T>","std::slice::SplitMut<'a, T, P>","std::sys::unix::os::Env","std::slice::SplitInclusiveMut<'a, T, P>","std::collections::hash_map::Keys<'a, K, V>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::btree_set::Difference<'a, T, A>","std::env::VarsOs","std::iter::SkipWhile<I, P>","std::fs::ReadDir","std::slice::RSplit<'a, T, P>","std::collections::btree_map::Iter<'a, K, V>","std::slice::RSplitNMut<'a, T, P>","std::char::DecodeUtf16<I>","std::collections::btree_map::IntoIter<K, V, A>","std::char::EscapeDebug","std::collections::btree_set::IntoIter<T, A>","std::collections::linked_list::IntoIter<T>","std::sync::mpsc::TryIter<'a, T>","std::slice::ArrayWindows<'a, T, N>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::str::SplitInclusive<'a, P>","std::str::SplitTerminator<'a, P>","std::collections::btree_map::IntoKeys<K, V, A>","std::iter::Inspect<I, F>","std::iter::FlatMap<I, U, F>","std::iter::adapters::GenericShunt<'_, I, R>","std::collections::vec_deque::IntoIter<T, A>","std::collections::btree_map::ValuesMut<'a, K, V>","std::iter::OnceWith<F>","std::str::MatchIndices<'a, P>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::slice::RChunksMut<'a, T>","std::result::IntoIter<T>","std::iter::Copied<I>","std::io::Bytes<R>","std::collections::hash_map::Values<'a, K, V>","std::path::Iter<'a>","std::iter::Enumerate<I>","std::iter::Successors<T, F>","std::str::SplitWhitespace<'a>","std::collections::btree_map::Values<'a, K, V>","std::iter::TakeWhile<I, P>","std::collections::btree_map::RangeMut<'a, K, V>","std::slice::SplitNMut<'a, T, P>","std::collections::binary_heap::DrainSorted<'_, T>","std::env::ArgsOs","std::slice::RChunksExact<'a, T>","std::str::RSplit<'a, P>","std::sys::unix::fs::ReadDir","std::collections::binary_heap::IntoIterSorted<T>","std::slice::GroupByMut<'a, T, P>","std::char::ToLowercase","std::collections::hash_set::Iter<'a, K>","std::str::Split<'a, P>","std::collections::btree_set::Union<'a, T>","std::str::LinesAny<'a>","std::string::Drain<'_>","std::slice::EscapeAscii<'a>","std::collections::hash_map::Iter<'a, K, V>","std::collections::vec_deque::Iter<'a, T>","std::char::ToUppercase","std::sync::mpsc::Iter<'a, T>","std::collections::binary_heap::IntoIter<T>","std::iter::Cloned<I>","std::ops::RangeFrom<A>","std::collections::hash_map::IntoIter<K, V>","std::str::SplitN<'a, P>","std::collections::hash_map::Drain<'a, K, V>","std::option::IntoIter<A>","bitflags::core::error::Source<'a>","std::net::IntoIncoming","std::iter::Take<I>","std::sys::unix::args::Args","std::slice::Chunks<'a, T>","std::collections::linked_list::DrainFilter<'_, T, F>","std::ops::RangeInclusive<A>","std::iter::sources::from_generator::FromGenerator<G>","std::collections::btree_map::IterMut<'a, K, V>","std::iter::Intersperse<I>","std::collections::binary_heap::Drain<'_, T>","std::iter::Empty<T>","std::iter::Once<T>","std::iter::Map<I, F>","std::sync::mpsc::IntoIter<T>","std::env::Args","std::collections::hash_set::Union<'a, T, S>","std::str::EscapeDefault<'a>","std::char::CaseMappingIter","std::iter::Filter<I, P>","std::sys_common::wtf8::EncodeWide<'a>","std::path::Components<'a>","std::option::Iter<'a, A>","std::str::RSplitN<'a, P>","std::str::EncodeUtf16<'a>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::vec::Splice<'_, I, A>","std::os::unix::net::Messages<'a>","std::os::unix::net::Incoming<'a>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::collections::hash_map::IterMut<'a, K, V>","std::collections::hash_map::IntoValues<K, V>","std::path::Ancestors<'a>","<&mut I as std::iter::Iterator>","std::slice::RChunks<'a, T>","std::str::CharIndices<'a>","std::ascii::EscapeDefault","std::collections::vec_deque::Drain<'_, T, A>","std::iter::Zip<A, B>","std::str::RSplitTerminator<'a, P>","std::str::EscapeDebug<'a>","std::collections::linked_list::IterMut<'a, T>","std::array::IntoIter<T, N>","std::collections::btree_map::Keys<'a, K, V>","std::slice::ChunksExact<'a, T>","std::iter::Chain<A, B>","std::iter::FilterMap<I, F>","std::slice::Windows<'a, T>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::iter::Rev<I>","std::ops::index_range::IndexRange","std::option::Item<A>","bitflags::core::slice::iter::GenericSplitN<I>","std::collections::vec_deque::IterMut<'a, T>","std::slice::SplitN<'a, T, P>","std::sys_common::wstr::WStrUnits<'_>","std::iter::IntersperseWith<I, G>","std::process::CommandEnvs<'a>","std::os::unix::net::ScmCredentials<'a>","std::slice::ArrayChunks<'a, T, N>","std::str::Utf8Chunks<'a>","std::sys::unix::process::process_common::CommandArgs<'a>","std::str::SplitAsciiWhitespace<'a>","std::iter::Peekable<I>","std::iter::Scan<I, St, F>","std::collections::btree_map::Range<'a, K, V>","std::str::Lines<'a>","std::io::Split<B>","std::sys::unix::os::SplitPaths<'a>","std::slice::RSplitMut<'a, T, P>","std::collections::hash_set::DrainFilter<'_, K, F>","std::iter::Cycle<I>","std::slice::GroupBy<'a, T, P>","std::collections::hash_map::ValuesMut<'a, K, V>","std::str::EscapeUnicode<'a>","std::vec::DrainFilter<'_, T, F, A>","std::boxed::Box<I, A>","std::slice::RChunksExactMut<'a, T>","std::slice::ArrayChunksMut<'a, T, N>","std::iter::Fuse<I>","std::iter::ByRefSized<'_, I>","std::iter::Flatten<I>","std::iter::RepeatWith<F>","std::str::Bytes<'_>","std::char::EscapeDefault","std::result::IterMut<'a, T>","std::collections::binary_heap::Iter<'a, T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::table::Table<'a, H, R>
let mut p1 = MaybeUninit::uninit().assume_init(); // II
+p0.header(p1);
+widgets::table::Table::<'a, H, R>::header(p0, p1);
+crate::widgets::table::Table::<'a, H, R>::header(p0, p1);
+<widgets::table::Table<'a, H, R>>::header(p0, p1);
-----------------
src/widgets/table.rs widgets::table::Table::<'a, H, R>::header_style
'a
deps:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::header_style":{"<D as std::iter::Iterator>::Item":["std::fmt::Display"],"D":["std::iter::Iterator","std::marker::Sized"],"H":["std::marker::Sized","std::iter::Iterator"],"R":["std::marker::Sized","std::iter::Iterator"]}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::header_style":{"<D as std::iter::Iterator>::Item":["<&T as std::fmt::Display>","backend::termion::ModifierDiff","backend::termion::Fg","backend::termion::Bg"],"D":["std::iter::RepeatWith<F>","std::str::EncodeUtf16<'a>","std::iter::ByRefSized<'_, I>","std::iter::Rev<I>","std::str::SplitTerminator<'a, P>","bitflags::core::slice::iter::GenericSplitN<I>","std::collections::hash_set::Drain<'a, K>","std::os::unix::net::ScmRights<'a>","std::env::SplitPaths<'a>","std::option::IntoIter<A>","std::slice::GroupByMut<'a, T, P>","std::iter::FlatMap<I, U, F>","std::slice::RChunksMut<'a, T>","std::string::Drain<'_>","std::slice::ArrayChunksMut<'a, T, N>","std::str::LinesAny<'a>","std::slice::RSplitNMut<'a, T, P>","std::str::SplitWhitespace<'a>","std::str::Utf8Chunks<'a>","std::collections::hash_map::Drain<'a, K, V>","std::iter::Successors<T, F>","std::iter::adapters::GenericShunt<'_, I, R>","std::iter::Intersperse<I>","std::collections::btree_map::Values<'a, K, V>","std::iter::Copied<I>","std::collections::binary_heap::DrainSorted<'_, T>","std::collections::hash_set::Intersection<'a, T, S>","std::iter::Filter<I, P>","std::iter::Take<I>","std::iter::Map<I, F>","std::slice::SplitN<'a, T, P>","std::slice::Chunks<'a, T>","std::str::Matches<'a, P>","std::str::Split<'a, P>","std::char::EscapeDebug","std::collections::btree_map::IntoValues<K, V, A>","std::path::Components<'a>","std::collections::btree_map::RangeMut<'a, K, V>","std::iter::MapWhile<I, P>","std::str::RSplitN<'a, P>","std::char::ToLowercase","std::collections::btree_set::Iter<'a, T>","std::slice::RChunks<'a, T>","std::slice::RSplitMut<'a, T, P>","std::collections::hash_set::DrainFilter<'_, K, F>","std::char::CaseMappingIter","std::collections::hash_set::Union<'a, T, S>","std::str::MatchIndices<'a, P>","std::sync::mpsc::Iter<'a, T>","std::iter::Zip<A, B>","std::fs::ReadDir","std::str::CharIndices<'a>","std::slice::ChunksExact<'a, T>","std::iter::OnceWith<F>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::str::Lines<'a>","std::collections::linked_list::IntoIter<T>","std::iter::Chain<A, B>","std::slice::ChunksMut<'a, T>","std::os::unix::net::Incoming<'a>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::collections::vec_deque::Iter<'a, T>","std::vec::DrainFilter<'_, T, F, A>","std::slice::RChunksExact<'a, T>","std::collections::binary_heap::IntoIter<T>","std::net::IntoIncoming","std::env::Args","std::io::Lines<B>","std::collections::hash_map::IntoValues<K, V>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::collections::btree_map::IntoIter<K, V, A>","std::collections::btree_map::Keys<'a, K, V>","std::collections::hash_map::Values<'a, K, V>","std::collections::binary_heap::Drain<'_, T>","std::boxed::Box<I, A>","std::result::IntoIter<T>","std::str::Chars<'a>","std::iter::Skip<I>","std::iter::sources::from_generator::FromGenerator<G>","std::ops::RangeFrom<A>","std::collections::linked_list::IterMut<'a, T>","std::collections::btree_map::IntoKeys<K, V, A>","std::sys_common::wtf8::EncodeWide<'a>","std::io::Bytes<R>","std::str::EscapeDefault<'a>","std::collections::linked_list::Iter<'a, T>","std::iter::SkipWhile<I, P>","std::iter::FilterMap<I, F>","std::iter::Flatten<I>","std::slice::SplitInclusiveMut<'a, T, P>","std::char::EscapeUnicode","std::collections::btree_set::Intersection<'a, T, A>","std::path::Ancestors<'a>","std::slice::ArrayChunks<'a, T, N>","std::str::SplitAsciiWhitespace<'a>","std::iter::Empty<T>","std::collections::hash_set::Difference<'a, T, S>","std::slice::RSplit<'a, T, P>","std::collections::vec_deque::IntoIter<T, A>","std::process::CommandArgs<'a>","std::env::VarsOs","<&mut I as std::iter::Iterator>","std::iter::TakeWhile<I, P>","std::iter::Peekable<I>","std::slice::Windows<'a, T>","std::str::RMatches<'a, P>","std::sys::unix::process::process_common::CommandArgs<'a>","std::slice::ArrayWindows<'a, T, N>","std::collections::hash_map::IterMut<'a, K, V>","std::char::DecodeUtf16<I>","std::iter::Enumerate<I>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::slice::Iter<'a, T>","std::iter::ArrayChunks<I, N>","std::os::unix::net::Messages<'a>","std::iter::Inspect<I, F>","std::io::Split<B>","std::collections::hash_map::ValuesMut<'a, K, V>","std::slice::SplitInclusive<'a, T, P>","std::collections::btree_map::IterMut<'a, K, V>","std::slice::Split<'a, T, P>","std::iter::StepBy<I>","std::slice::ChunksExactMut<'a, T>","bitflags::core::error::Source<'a>","std::vec::Drain<'_, T, A>","std::collections::hash_map::IntoIter<K, V>","std::sys::unix::os::Env","std::result::Iter<'a, T>","std::path::Iter<'a>","std::slice::RChunksExactMut<'a, T>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::collections::btree_map::Range<'a, K, V>","std::iter::Fuse<I>","std::collections::hash_set::IntoIter<K>","std::slice::EscapeAscii<'a>","std::env::ArgsOs","std::iter::Once<T>","std::iter::IntersperseWith<I, G>","std::sync::mpsc::IntoIter<T>","std::str::EscapeDebug<'a>","std::ops::RangeInclusive<A>","std::collections::hash_map::Iter<'a, K, V>","std::sys_common::net::LookupHost","std::net::Incoming<'a>","std::str::RSplit<'a, P>","std::option::Item<A>","std::sys_common::wstr::WStrUnits<'_>","std::os::unix::net::ScmCredentials<'a>","std::collections::btree_map::ValuesMut<'a, K, V>","std::iter::FromFn<F>","std::slice::SplitMut<'a, T, P>","std::array::IntoIter<T, N>","std::iter::Cycle<I>","std::sys::unix::args::Args","std::slice::GroupBy<'a, T, P>","std::collections::vec_deque::Drain<'_, T, A>","std::slice::RSplitN<'a, T, P>","std::iter::Cloned<I>","std::process::CommandEnvs<'a>","std::str::RMatchIndices<'a, P>","std::collections::btree_set::Difference<'a, T, A>","std::collections::btree_set::SymmetricDifference<'a, T>","std::str::EscapeUnicode<'a>","std::sys::unix::os::SplitPaths<'a>","std::ascii::EscapeDefault","std::slice::SplitNMut<'a, T, P>","std::collections::hash_map::IntoKeys<K, V>","std::iter::Scan<I, St, F>","std::collections::btree_map::Iter<'a, K, V>","std::char::ToUppercase","std::collections::btree_set::IntoIter<T, A>","std::ops::Range<A>","std::collections::btree_set::Range<'a, T>","std::collections::hash_map::Keys<'a, K, V>","std::iter::RepeatN<A>","std::vec::IntoIter<T, A>","std::result::IterMut<'a, T>","std::collections::vec_deque::IterMut<'a, T>","std::slice::IterMut<'a, T>","std::str::RSplitTerminator<'a, P>","std::iter::Repeat<A>","std::ops::index_range::IndexRange","std::collections::linked_list::DrainFilter<'_, T, F>","std::char::EscapeDefault","std::env::Vars","std::option::Iter<'a, A>","std::collections::binary_heap::Iter<'a, T>","std::sys::unix::fs::ReadDir","std::str::SplitN<'a, P>","std::collections::btree_set::Union<'a, T>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::option::IterMut<'a, A>","std::sync::mpsc::TryIter<'a, T>","std::collections::binary_heap::IntoIterSorted<T>","std::vec::Splice<'_, I, A>","std::str::Bytes<'_>","std::str::SplitInclusive<'a, P>","std::collections::hash_set::Iter<'a, K>"],"H":["std::str::RMatches<'a, P>","std::fs::ReadDir","std::collections::hash_map::IterMut<'a, K, V>","std::iter::ByRefSized<'_, I>","std::slice::GroupByMut<'a, T, P>","std::str::RSplit<'a, P>","std::sys_common::wstr::WStrUnits<'_>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::str::EscapeDefault<'a>","std::collections::btree_map::Iter<'a, K, V>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::slice::SplitMut<'a, T, P>","<&mut I as std::iter::Iterator>","std::collections::hash_set::DrainFilter<'_, K, F>","std::str::Utf8Chunks<'a>","std::env::Vars","std::sync::mpsc::IntoIter<T>","std::collections::btree_set::SymmetricDifference<'a, T>","std::slice::RChunks<'a, T>","std::str::RMatchIndices<'a, P>","std::slice::RChunksExactMut<'a, T>","std::sys::unix::os::SplitPaths<'a>","std::iter::adapters::GenericShunt<'_, I, R>","std::iter::OnceWith<F>","std::str::EscapeUnicode<'a>","std::env::VarsOs","std::iter::Inspect<I, F>","std::path::Iter<'a>","std::slice::SplitInclusiveMut<'a, T, P>","std::slice::RChunksExact<'a, T>","std::slice::RSplitNMut<'a, T, P>","std::slice::SplitInclusive<'a, T, P>","std::iter::FlatMap<I, U, F>","std::option::Item<A>","std::str::RSplitN<'a, P>","std::collections::hash_map::Values<'a, K, V>","std::iter::RepeatN<A>","std::str::LinesAny<'a>","std::collections::hash_map::IntoKeys<K, V>","std::ops::RangeFrom<A>","std::char::DecodeUtf16<I>","std::iter::IntersperseWith<I, G>","std::env::ArgsOs","std::collections::hash_map::Drain<'a, K, V>","std::collections::hash_set::Union<'a, T, S>","std::collections::vec_deque::Drain<'_, T, A>","std::iter::RepeatWith<F>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::collections::btree_set::Iter<'a, T>","std::result::IterMut<'a, T>","std::collections::vec_deque::IterMut<'a, T>","std::iter::Copied<I>","std::os::unix::net::ScmCredentials<'a>","std::net::IntoIncoming","std::collections::linked_list::IntoIter<T>","std::slice::RChunksMut<'a, T>","std::collections::btree_set::Difference<'a, T, A>","std::iter::Skip<I>","std::slice::SplitN<'a, T, P>","std::collections::btree_set::Intersection<'a, T, A>","std::collections::btree_set::Union<'a, T>","std::str::Split<'a, P>","std::io::Lines<B>","std::env::SplitPaths<'a>","std::slice::GroupBy<'a, T, P>","std::collections::hash_map::IntoValues<K, V>","std::option::IterMut<'a, A>","std::iter::FromFn<F>","std::str::SplitN<'a, P>","std::collections::linked_list::IterMut<'a, T>","std::collections::hash_map::Iter<'a, K, V>","std::char::CaseMappingIter","std::iter::Cycle<I>","std::str::EncodeUtf16<'a>","std::option::Iter<'a, A>","std::iter::MapWhile<I, P>","std::result::Iter<'a, T>","std::char::EscapeDebug","std::result::IntoIter<T>","std::collections::btree_map::IntoValues<K, V, A>","std::iter::Repeat<A>","std::iter::Rev<I>","std::collections::btree_map::ValuesMut<'a, K, V>","std::collections::linked_list::DrainFilter<'_, T, F>","std::collections::hash_map::IntoIter<K, V>","std::sys_common::wtf8::EncodeWide<'a>","std::option::IntoIter<A>","std::env::Args","std::iter::Zip<A, B>","std::vec::DrainFilter<'_, T, F, A>","std::collections::binary_heap::Drain<'_, T>","std::path::Ancestors<'a>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","bitflags::core::slice::iter::GenericSplitN<I>","std::slice::ArrayChunksMut<'a, T, N>","std::iter::Flatten<I>","std::slice::ChunksMut<'a, T>","std::iter::Intersperse<I>","std::collections::binary_heap::IntoIterSorted<T>","std::str::Chars<'a>","std::slice::RSplitMut<'a, T, P>","std::ops::index_range::IndexRange","std::collections::btree_map::Keys<'a, K, V>","std::slice::IterMut<'a, T>","std::collections::hash_set::Iter<'a, K>","std::str::Matches<'a, P>","std::iter::TakeWhile<I, P>","std::iter::Enumerate<I>","std::sys::unix::fs::ReadDir","std::collections::binary_heap::Iter<'a, T>","std::os::unix::net::Messages<'a>","std::str::SplitAsciiWhitespace<'a>","std::collections::btree_set::IntoIter<T, A>","std::os::unix::net::ScmRights<'a>","std::iter::StepBy<I>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::vec::Splice<'_, I, A>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::btree_map::Range<'a, K, V>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::char::EscapeUnicode","std::process::CommandArgs<'a>","std::sync::mpsc::Iter<'a, T>","std::ops::RangeInclusive<A>","std::str::Lines<'a>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::slice::ChunksExactMut<'a, T>","std::collections::hash_set::Difference<'a, T, S>","std::iter::FilterMap<I, F>","std::collections::btree_map::IntoKeys<K, V, A>","std::vec::IntoIter<T, A>","std::io::Bytes<R>","std::string::Drain<'_>","std::sys_common::net::LookupHost","std::os::unix::net::Incoming<'a>","std::collections::hash_set::IntoIter<K>","std::iter::Peekable<I>","std::str::SplitInclusive<'a, P>","std::slice::ChunksExact<'a, T>","std::str::RSplitTerminator<'a, P>","std::path::Components<'a>","std::iter::Fuse<I>","std::ops::Range<A>","std::collections::vec_deque::Iter<'a, T>","std::iter::Scan<I, St, F>","std::io::Split<B>","std::slice::Split<'a, T, P>","std::slice::RSplitN<'a, T, P>","std::iter::ArrayChunks<I, N>","std::str::MatchIndices<'a, P>","std::iter::sources::from_generator::FromGenerator<G>","std::str::SplitTerminator<'a, P>","std::sync::mpsc::TryIter<'a, T>","std::collections::btree_map::RangeMut<'a, K, V>","std::collections::linked_list::Iter<'a, T>","std::char::EscapeDefault","std::slice::Iter<'a, T>","std::str::Bytes<'_>","std::boxed::Box<I, A>","std::slice::Windows<'a, T>","bitflags::core::error::Source<'a>","std::iter::Empty<T>","std::char::ToUppercase","std::ascii::EscapeDefault","std::collections::vec_deque::IntoIter<T, A>","std::collections::btree_map::IterMut<'a, K, V>","std::collections::btree_set::Range<'a, T>","std::collections::btree_map::Values<'a, K, V>","std::str::SplitWhitespace<'a>","std::slice::RSplit<'a, T, P>","std::slice::ArrayChunks<'a, T, N>","std::process::CommandEnvs<'a>","std::collections::hash_map::Keys<'a, K, V>","std::vec::Drain<'_, T, A>","std::iter::Successors<T, F>","std::collections::binary_heap::DrainSorted<'_, T>","std::slice::ArrayWindows<'a, T, N>","std::iter::Once<T>","std::collections::btree_map::IntoIter<K, V, A>","std::collections::binary_heap::IntoIter<T>","std::collections::hash_set::Drain<'a, K>","std::slice::EscapeAscii<'a>","std::slice::Chunks<'a, T>","std::sys::unix::args::Args","std::iter::SkipWhile<I, P>","std::iter::Chain<A, B>","std::iter::Cloned<I>","std::collections::hash_map::ValuesMut<'a, K, V>","std::iter::Map<I, F>","std::net::Incoming<'a>","std::char::ToLowercase","std::sys::unix::os::Env","std::iter::Take<I>","std::array::IntoIter<T, N>","std::str::EscapeDebug<'a>","std::sys::unix::process::process_common::CommandArgs<'a>","std::iter::Filter<I, P>","std::str::CharIndices<'a>","std::slice::SplitNMut<'a, T, P>"],"R":["std::slice::RSplit<'a, T, P>","std::collections::hash_set::Difference<'a, T, S>","std::char::ToLowercase","std::iter::SkipWhile<I, P>","std::slice::GroupByMut<'a, T, P>","std::collections::btree_set::SymmetricDifference<'a, T>","std::vec::Drain<'_, T, A>","std::iter::FlatMap<I, U, F>","std::iter::Enumerate<I>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::iter::adapters::GenericShunt<'_, I, R>","std::iter::StepBy<I>","std::slice::IterMut<'a, T>","std::slice::Windows<'a, T>","std::path::Ancestors<'a>","std::collections::hash_set::Drain<'a, K>","std::path::Iter<'a>","std::env::Args","std::str::Split<'a, P>","std::net::IntoIncoming","bitflags::core::error::Source<'a>","std::collections::btree_map::Values<'a, K, V>","std::option::Iter<'a, A>","std::collections::btree_map::RangeMut<'a, K, V>","std::slice::Iter<'a, T>","std::slice::RSplitN<'a, T, P>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::collections::vec_deque::Drain<'_, T, A>","std::slice::ArrayWindows<'a, T, N>","std::str::SplitInclusive<'a, P>","std::collections::btree_map::Iter<'a, K, V>","std::iter::FilterMap<I, F>","std::iter::Take<I>","std::str::MatchIndices<'a, P>","std::collections::binary_heap::DrainSorted<'_, T>","std::collections::hash_set::IntoIter<K>","std::collections::hash_map::IterMut<'a, K, V>","std::slice::ArrayChunksMut<'a, T, N>","std::str::SplitWhitespace<'a>","std::env::Vars","std::sys::unix::os::Env","std::collections::vec_deque::IterMut<'a, T>","std::iter::IntersperseWith<I, G>","std::str::EscapeDebug<'a>","std::str::EncodeUtf16<'a>","std::env::SplitPaths<'a>","std::option::IntoIter<A>","std::os::unix::net::Incoming<'a>","std::str::RSplit<'a, P>","std::iter::MapWhile<I, P>","std::collections::btree_map::IntoKeys<K, V, A>","std::iter::Scan<I, St, F>","std::collections::btree_set::Iter<'a, T>","std::os::unix::net::Messages<'a>","std::slice::Chunks<'a, T>","std::iter::FromFn<F>","std::ops::RangeFrom<A>","std::sync::mpsc::IntoIter<T>","std::str::EscapeDefault<'a>","std::slice::ArrayChunks<'a, T, N>","std::sync::mpsc::TryIter<'a, T>","std::slice::SplitN<'a, T, P>","std::iter::Skip<I>","std::sync::mpsc::Iter<'a, T>","std::slice::ChunksExactMut<'a, T>","std::char::EscapeDebug","std::collections::hash_set::DrainFilter<'_, K, F>","std::str::CharIndices<'a>","std::sys::unix::process::process_common::CommandArgs<'a>","std::sys::unix::os::SplitPaths<'a>","std::boxed::Box<I, A>","std::ops::RangeInclusive<A>","std::str::SplitTerminator<'a, P>","std::slice::RChunksExactMut<'a, T>","std::result::IntoIter<T>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::result::Iter<'a, T>","std::char::ToUppercase","std::env::VarsOs","std::iter::Successors<T, F>","std::str::Chars<'a>","std::iter::Once<T>","std::str::SplitN<'a, P>","std::str::RSplitN<'a, P>","std::collections::hash_map::Keys<'a, K, V>","std::array::IntoIter<T, N>","std::iter::Peekable<I>","std::iter::RepeatN<A>","std::iter::Inspect<I, F>","std::sys::unix::args::Args","std::collections::btree_set::Intersection<'a, T, A>","std::io::Lines<B>","std::char::EscapeUnicode","std::slice::RSplitMut<'a, T, P>","std::iter::OnceWith<F>","std::collections::linked_list::DrainFilter<'_, T, F>","std::iter::Empty<T>","std::str::RMatches<'a, P>","std::process::CommandEnvs<'a>","std::collections::btree_map::IntoValues<K, V, A>","std::slice::RChunksExact<'a, T>","std::collections::btree_map::IntoIter<K, V, A>","std::collections::binary_heap::IntoIterSorted<T>","std::vec::Splice<'_, I, A>","std::sys::unix::fs::ReadDir","std::iter::TakeWhile<I, P>","std::collections::btree_set::Union<'a, T>","std::fs::ReadDir","std::os::unix::net::ScmCredentials<'a>","std::collections::hash_set::Iter<'a, K>","std::iter::Rev<I>","std::slice::SplitNMut<'a, T, P>","std::collections::btree_map::Keys<'a, K, V>","std::str::Lines<'a>","std::collections::binary_heap::Drain<'_, T>","std::slice::EscapeAscii<'a>","std::iter::Flatten<I>","std::str::RSplitTerminator<'a, P>","std::ascii::EscapeDefault","std::iter::Chain<A, B>","std::collections::hash_map::IntoIter<K, V>","std::iter::RepeatWith<F>","std::collections::hash_map::Drain<'a, K, V>","std::result::IterMut<'a, T>","std::sys_common::net::LookupHost","std::collections::linked_list::Iter<'a, T>","std::env::ArgsOs","std::net::Incoming<'a>","std::iter::Intersperse<I>","std::slice::ChunksMut<'a, T>","std::sys_common::wtf8::EncodeWide<'a>","std::vec::DrainFilter<'_, T, F, A>","bitflags::core::slice::iter::GenericSplitN<I>","std::str::Bytes<'_>","std::collections::hash_map::IntoValues<K, V>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::iter::Map<I, F>","std::str::Matches<'a, P>","std::collections::btree_map::IterMut<'a, K, V>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::slice::SplitMut<'a, T, P>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::iter::Zip<A, B>","std::str::EscapeUnicode<'a>","std::io::Split<B>","std::io::Bytes<R>","std::char::EscapeDefault","std::collections::hash_set::Intersection<'a, T, S>","std::iter::Cloned<I>","std::ops::index_range::IndexRange","std::slice::SplitInclusiveMut<'a, T, P>","std::option::IterMut<'a, A>","std::iter::sources::from_generator::FromGenerator<G>","std::str::Utf8Chunks<'a>","std::slice::RChunksMut<'a, T>","std::char::CaseMappingIter","std::slice::ChunksExact<'a, T>","std::collections::binary_heap::Iter<'a, T>","std::vec::IntoIter<T, A>","std::slice::Split<'a, T, P>","std::collections::hash_set::Union<'a, T, S>","std::collections::hash_map::Iter<'a, K, V>","std::iter::Filter<I, P>","std::collections::btree_map::ValuesMut<'a, K, V>","std::iter::Cycle<I>","std::option::Item<A>","std::collections::btree_set::IntoIter<T, A>","std::slice::RSplitNMut<'a, T, P>","std::str::LinesAny<'a>","<&mut I as std::iter::Iterator>","std::collections::hash_map::Values<'a, K, V>","std::sys_common::wstr::WStrUnits<'_>","std::str::RMatchIndices<'a, P>","std::str::SplitAsciiWhitespace<'a>","std::collections::vec_deque::IntoIter<T, A>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::slice::GroupBy<'a, T, P>","std::string::Drain<'_>","std::collections::linked_list::IntoIter<T>","std::slice::RChunks<'a, T>","std::iter::Repeat<A>","std::path::Components<'a>","std::process::CommandArgs<'a>","std::iter::Fuse<I>","std::ops::Range<A>","std::collections::btree_map::Range<'a, K, V>","std::collections::btree_set::Range<'a, T>","std::collections::binary_heap::IntoIter<T>","std::collections::btree_set::Difference<'a, T, A>","std::iter::Copied<I>","std::iter::ArrayChunks<I, N>","std::char::DecodeUtf16<I>","std::iter::ByRefSized<'_, I>","std::os::unix::net::ScmRights<'a>","std::collections::hash_map::IntoKeys<K, V>","std::collections::linked_list::IterMut<'a, T>","std::collections::vec_deque::Iter<'a, T>","std::slice::SplitInclusive<'a, T, P>","std::collections::hash_map::ValuesMut<'a, K, V>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::table::Table<'a, H, R>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.header_style(p1);
+widgets::table::Table::<'a, H, R>::header_style(p0, p1);
+crate::widgets::table::Table::<'a, H, R>::header_style(p0, p1);
+<widgets::table::Table<'a, H, R>>::header_style(p0, p1);
-----------------
src/widgets/table.rs widgets::table::Table::<'a, H, R>::widths
'a
deps:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::widths":{"<D as std::iter::Iterator>::Item":["std::fmt::Display"],"D":["std::marker::Sized","std::iter::Iterator"],"H":["std::iter::Iterator","std::marker::Sized"],"R":["std::marker::Sized","std::iter::Iterator"]}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::widths":{"<D as std::iter::Iterator>::Item":["backend::termion::ModifierDiff","backend::termion::Fg","<&T as std::fmt::Display>","backend::termion::Bg"],"D":["std::iter::Intersperse<I>","std::slice::ChunksExact<'a, T>","std::str::RSplitTerminator<'a, P>","std::collections::btree_map::IntoKeys<K, V, A>","std::process::CommandArgs<'a>","std::collections::btree_map::Values<'a, K, V>","std::slice::RSplit<'a, T, P>","std::iter::IntersperseWith<I, G>","std::str::SplitAsciiWhitespace<'a>","std::char::ToLowercase","std::str::EscapeDebug<'a>","std::iter::Repeat<A>","std::slice::RChunks<'a, T>","std::str::SplitInclusive<'a, P>","std::sys_common::wtf8::EncodeWide<'a>","std::collections::hash_set::Union<'a, T, S>","std::boxed::Box<I, A>","std::result::IterMut<'a, T>","std::iter::Cycle<I>","std::slice::ChunksMut<'a, T>","std::collections::hash_map::Iter<'a, K, V>","std::slice::IterMut<'a, T>","std::str::RMatchIndices<'a, P>","std::iter::ByRefSized<'_, I>","std::iter::Enumerate<I>","std::sys::unix::fs::ReadDir","std::iter::Fuse<I>","std::slice::Windows<'a, T>","std::collections::hash_map::ValuesMut<'a, K, V>","std::option::Item<A>","std::net::Incoming<'a>","std::iter::MapWhile<I, P>","std::io::Bytes<R>","std::collections::hash_map::Keys<'a, K, V>","std::collections::btree_map::IntoIter<K, V, A>","std::sync::mpsc::Iter<'a, T>","std::slice::GroupBy<'a, T, P>","std::collections::hash_set::Drain<'a, K>","std::slice::ChunksExactMut<'a, T>","std::io::Lines<B>","std::env::ArgsOs","std::collections::vec_deque::IterMut<'a, T>","std::slice::Iter<'a, T>","std::vec::IntoIter<T, A>","std::collections::btree_set::Difference<'a, T, A>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::iter::Copied<I>","std::env::VarsOs","std::str::EncodeUtf16<'a>","std::collections::binary_heap::DrainSorted<'_, T>","std::iter::Zip<A, B>","std::result::Iter<'a, T>","std::str::Bytes<'_>","std::iter::Take<I>","std::str::SplitTerminator<'a, P>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::iter::FromFn<F>","std::iter::FlatMap<I, U, F>","std::collections::vec_deque::IntoIter<T, A>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::iter::SkipWhile<I, P>","std::sync::mpsc::IntoIter<T>","std::collections::hash_set::DrainFilter<'_, K, F>","<&mut I as std::iter::Iterator>","std::collections::btree_map::Range<'a, K, V>","std::collections::binary_heap::IntoIter<T>","std::str::LinesAny<'a>","std::collections::hash_map::Values<'a, K, V>","std::str::RMatches<'a, P>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::iter::StepBy<I>","std::fs::ReadDir","std::slice::RChunksMut<'a, T>","std::ops::Range<A>","std::str::RSplit<'a, P>","std::slice::SplitN<'a, T, P>","std::slice::SplitInclusive<'a, T, P>","std::collections::linked_list::DrainFilter<'_, T, F>","std::str::MatchIndices<'a, P>","std::iter::Inspect<I, F>","std::collections::binary_heap::Drain<'_, T>","std::str::Utf8Chunks<'a>","std::ascii::EscapeDefault","std::os::unix::net::Messages<'a>","std::vec::Drain<'_, T, A>","std::iter::ArrayChunks<I, N>","std::path::Iter<'a>","std::collections::btree_set::SymmetricDifference<'a, T>","std::slice::SplitNMut<'a, T, P>","std::iter::TakeWhile<I, P>","std::slice::SplitInclusiveMut<'a, T, P>","std::sys::unix::args::Args","std::option::IterMut<'a, A>","std::collections::linked_list::IterMut<'a, T>","std::iter::Chain<A, B>","std::char::EscapeDefault","std::sys::unix::os::SplitPaths<'a>","std::os::unix::net::ScmRights<'a>","std::slice::ArrayChunksMut<'a, T, N>","std::slice::ArrayWindows<'a, T, N>","std::iter::Rev<I>","std::slice::Split<'a, T, P>","std::iter::Empty<T>","std::iter::Once<T>","std::slice::Chunks<'a, T>","std::vec::DrainFilter<'_, T, F, A>","std::iter::Cloned<I>","std::collections::btree_set::Range<'a, T>","std::iter::FilterMap<I, F>","std::path::Components<'a>","std::sys::unix::os::Env","std::vec::Splice<'_, I, A>","std::collections::binary_heap::Iter<'a, T>","std::collections::hash_map::IterMut<'a, K, V>","std::path::Ancestors<'a>","std::ops::RangeFrom<A>","std::str::CharIndices<'a>","std::collections::btree_map::IntoValues<K, V, A>","std::env::SplitPaths<'a>","std::char::DecodeUtf16<I>","std::sys_common::wstr::WStrUnits<'_>","std::slice::GroupByMut<'a, T, P>","bitflags::core::error::Source<'a>","std::process::CommandEnvs<'a>","std::str::EscapeDefault<'a>","std::slice::ArrayChunks<'a, T, N>","std::collections::hash_map::Drain<'a, K, V>","std::iter::adapters::GenericShunt<'_, I, R>","std::collections::btree_map::ValuesMut<'a, K, V>","std::option::IntoIter<A>","std::collections::btree_set::Iter<'a, T>","std::collections::btree_map::Iter<'a, K, V>","std::collections::hash_map::IntoIter<K, V>","std::os::unix::net::ScmCredentials<'a>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::net::IntoIncoming","std::iter::Scan<I, St, F>","std::iter::RepeatWith<F>","std::slice::RChunksExactMut<'a, T>","std::iter::Skip<I>","std::str::Chars<'a>","std::str::Matches<'a, P>","std::ops::RangeInclusive<A>","std::option::Iter<'a, A>","std::slice::SplitMut<'a, T, P>","std::slice::RSplitMut<'a, T, P>","std::char::ToUppercase","std::string::Drain<'_>","std::collections::btree_map::Keys<'a, K, V>","std::collections::vec_deque::Iter<'a, T>","std::iter::Flatten<I>","std::slice::EscapeAscii<'a>","std::sys::unix::process::process_common::CommandArgs<'a>","std::slice::RSplitNMut<'a, T, P>","std::collections::btree_map::RangeMut<'a, K, V>","std::collections::hash_set::Difference<'a, T, S>","std::iter::OnceWith<F>","std::collections::hash_set::Iter<'a, K>","std::result::IntoIter<T>","std::collections::binary_heap::IntoIterSorted<T>","std::str::Split<'a, P>","std::iter::Successors<T, F>","std::str::EscapeUnicode<'a>","bitflags::core::slice::iter::GenericSplitN<I>","std::iter::Filter<I, P>","std::array::IntoIter<T, N>","std::char::EscapeUnicode","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::sys_common::net::LookupHost","std::io::Split<B>","std::collections::vec_deque::Drain<'_, T, A>","std::iter::sources::from_generator::FromGenerator<G>","std::collections::linked_list::IntoIter<T>","std::collections::linked_list::Iter<'a, T>","std::str::SplitWhitespace<'a>","std::collections::btree_set::IntoIter<T, A>","std::env::Vars","std::str::Lines<'a>","std::collections::btree_set::Union<'a, T>","std::iter::RepeatN<A>","std::char::EscapeDebug","std::str::SplitN<'a, P>","std::iter::Peekable<I>","std::collections::btree_map::IterMut<'a, K, V>","std::slice::RSplitN<'a, T, P>","std::sync::mpsc::TryIter<'a, T>","std::os::unix::net::Incoming<'a>","std::collections::hash_map::IntoValues<K, V>","std::env::Args","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::iter::Map<I, F>","std::collections::hash_map::IntoKeys<K, V>","std::slice::RChunksExact<'a, T>","std::str::RSplitN<'a, P>","std::collections::hash_set::IntoIter<K>","std::collections::btree_set::Intersection<'a, T, A>","std::ops::index_range::IndexRange","std::char::CaseMappingIter","std::collections::hash_set::Intersection<'a, T, S>"],"H":["std::collections::hash_set::IntoIter<K>","std::collections::hash_map::Drain<'a, K, V>","std::collections::btree_map::Iter<'a, K, V>","std::option::IterMut<'a, A>","std::sys_common::net::LookupHost","bitflags::core::slice::iter::GenericSplitN<I>","std::ops::RangeFrom<A>","std::iter::Copied<I>","std::os::unix::net::Messages<'a>","std::collections::binary_heap::Drain<'_, T>","std::slice::RSplitNMut<'a, T, P>","std::slice::SplitInclusiveMut<'a, T, P>","std::collections::hash_map::IterMut<'a, K, V>","std::collections::hash_map::Keys<'a, K, V>","std::str::Split<'a, P>","std::ops::Range<A>","std::slice::RSplitMut<'a, T, P>","std::slice::ChunksMut<'a, T>","std::iter::Filter<I, P>","std::str::MatchIndices<'a, P>","std::sys_common::wtf8::EncodeWide<'a>","std::iter::Once<T>","std::iter::Chain<A, B>","std::sync::mpsc::TryIter<'a, T>","std::iter::SkipWhile<I, P>","std::slice::Split<'a, T, P>","std::str::Bytes<'_>","std::collections::btree_map::IntoValues<K, V, A>","std::collections::binary_heap::IntoIterSorted<T>","std::io::Split<B>","std::net::Incoming<'a>","std::slice::RChunksMut<'a, T>","std::slice::ChunksExactMut<'a, T>","std::iter::Enumerate<I>","std::sys::unix::args::Args","std::slice::ArrayChunks<'a, T, N>","std::iter::Cycle<I>","std::collections::hash_set::Difference<'a, T, S>","std::os::unix::net::ScmCredentials<'a>","std::io::Bytes<R>","std::collections::hash_set::DrainFilter<'_, K, F>","std::collections::linked_list::IterMut<'a, T>","std::str::RMatchIndices<'a, P>","std::slice::SplitMut<'a, T, P>","std::char::ToLowercase","std::char::EscapeDefault","std::iter::Empty<T>","std::vec::IntoIter<T, A>","std::iter::Map<I, F>","std::os::unix::net::Incoming<'a>","std::collections::linked_list::Iter<'a, T>","std::net::IntoIncoming","std::fs::ReadDir","std::str::Lines<'a>","std::iter::Skip<I>","std::env::ArgsOs","std::iter::TakeWhile<I, P>","std::vec::DrainFilter<'_, T, F, A>","std::collections::hash_set::Drain<'a, K>","std::collections::btree_map::Values<'a, K, V>","std::ops::index_range::IndexRange","std::collections::linked_list::DrainFilter<'_, T, F>","std::io::Lines<B>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::iter::FlatMap<I, U, F>","std::collections::btree_map::RangeMut<'a, K, V>","bitflags::core::error::Source<'a>","std::str::RSplitTerminator<'a, P>","std::iter::FromFn<F>","std::result::IntoIter<T>","std::collections::hash_set::Iter<'a, K>","std::slice::Chunks<'a, T>","std::collections::btree_set::Iter<'a, T>","std::collections::btree_set::Intersection<'a, T, A>","std::sys::unix::os::Env","std::iter::Rev<I>","std::slice::RSplitN<'a, T, P>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::iter::Cloned<I>","std::path::Components<'a>","std::str::CharIndices<'a>","std::result::Iter<'a, T>","std::iter::OnceWith<F>","std::collections::vec_deque::Drain<'_, T, A>","std::process::CommandEnvs<'a>","std::collections::hash_map::IntoValues<K, V>","std::iter::Repeat<A>","std::array::IntoIter<T, N>","std::collections::linked_list::IntoIter<T>","std::iter::Fuse<I>","std::iter::Take<I>","std::collections::vec_deque::IntoIter<T, A>","std::slice::RChunksExact<'a, T>","std::sys::unix::process::process_common::CommandArgs<'a>","std::slice::SplitNMut<'a, T, P>","std::option::IntoIter<A>","std::slice::GroupByMut<'a, T, P>","std::collections::vec_deque::Iter<'a, T>","std::iter::Inspect<I, F>","std::boxed::Box<I, A>","std::iter::StepBy<I>","std::ops::RangeInclusive<A>","std::str::SplitWhitespace<'a>","std::str::Utf8Chunks<'a>","std::env::Args","std::str::EncodeUtf16<'a>","std::process::CommandArgs<'a>","std::option::Iter<'a, A>","std::collections::btree_map::ValuesMut<'a, K, V>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::path::Iter<'a>","std::slice::ChunksExact<'a, T>","std::slice::RSplit<'a, T, P>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::collections::hash_set::Intersection<'a, T, S>","std::iter::Zip<A, B>","std::os::unix::net::ScmRights<'a>","std::str::EscapeDebug<'a>","std::iter::ArrayChunks<I, N>","std::char::ToUppercase","std::str::SplitTerminator<'a, P>","std::slice::GroupBy<'a, T, P>","std::collections::binary_heap::IntoIter<T>","std::iter::adapters::GenericShunt<'_, I, R>","std::collections::btree_set::Range<'a, T>","std::result::IterMut<'a, T>","std::iter::RepeatN<A>","std::collections::btree_map::IntoKeys<K, V, A>","std::slice::SplitN<'a, T, P>","std::iter::FilterMap<I, F>","std::vec::Splice<'_, I, A>","std::sync::mpsc::IntoIter<T>","<&mut I as std::iter::Iterator>","std::sys::unix::os::SplitPaths<'a>","std::string::Drain<'_>","std::sys::unix::fs::ReadDir","std::collections::btree_set::IntoIter<T, A>","std::slice::IterMut<'a, T>","std::slice::RChunks<'a, T>","std::collections::vec_deque::IterMut<'a, T>","std::slice::Iter<'a, T>","std::collections::btree_map::Range<'a, K, V>","std::option::Item<A>","std::collections::binary_heap::DrainSorted<'_, T>","std::iter::IntersperseWith<I, G>","std::iter::Peekable<I>","std::collections::btree_map::IntoIter<K, V, A>","std::collections::hash_set::Union<'a, T, S>","std::str::SplitAsciiWhitespace<'a>","std::str::RSplit<'a, P>","std::str::Chars<'a>","std::env::VarsOs","std::collections::btree_map::IterMut<'a, K, V>","std::collections::binary_heap::Iter<'a, T>","std::iter::Flatten<I>","std::str::EscapeDefault<'a>","std::str::EscapeUnicode<'a>","std::collections::hash_map::IntoKeys<K, V>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::iter::ByRefSized<'_, I>","std::collections::hash_map::IntoIter<K, V>","std::slice::Windows<'a, T>","std::collections::btree_set::Union<'a, T>","std::collections::hash_map::ValuesMut<'a, K, V>","std::slice::SplitInclusive<'a, T, P>","std::sync::mpsc::Iter<'a, T>","std::str::LinesAny<'a>","std::char::EscapeUnicode","std::str::RMatches<'a, P>","std::vec::Drain<'_, T, A>","std::collections::btree_set::SymmetricDifference<'a, T>","std::char::DecodeUtf16<I>","std::collections::hash_map::Values<'a, K, V>","std::ascii::EscapeDefault","std::sys_common::wstr::WStrUnits<'_>","std::slice::ArrayChunksMut<'a, T, N>","std::collections::btree_map::Keys<'a, K, V>","std::slice::RChunksExactMut<'a, T>","std::iter::MapWhile<I, P>","std::iter::RepeatWith<F>","std::env::Vars","std::char::EscapeDebug","std::str::SplitN<'a, P>","std::iter::Scan<I, St, F>","std::str::RSplitN<'a, P>","std::collections::btree_set::Difference<'a, T, A>","std::slice::ArrayWindows<'a, T, N>","std::iter::Successors<T, F>","std::char::CaseMappingIter","std::collections::hash_map::Iter<'a, K, V>","std::env::SplitPaths<'a>","std::path::Ancestors<'a>","std::str::Matches<'a, P>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::iter::Intersperse<I>","std::str::SplitInclusive<'a, P>","std::slice::EscapeAscii<'a>","std::iter::sources::from_generator::FromGenerator<G>"],"R":["std::collections::binary_heap::IntoIterSorted<T>","std::str::Split<'a, P>","std::iter::Peekable<I>","std::str::SplitInclusive<'a, P>","std::env::ArgsOs","std::slice::ArrayChunks<'a, T, N>","std::ops::index_range::IndexRange","std::slice::SplitInclusive<'a, T, P>","std::vec::IntoIter<T, A>","std::option::Iter<'a, A>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::collections::hash_map::IterMut<'a, K, V>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::ops::Range<A>","std::collections::binary_heap::Drain<'_, T>","std::iter::Enumerate<I>","std::iter::TakeWhile<I, P>","std::collections::hash_map::Keys<'a, K, V>","std::iter::Flatten<I>","std::slice::RChunksExact<'a, T>","std::collections::vec_deque::Drain<'_, T, A>","std::iter::RepeatN<A>","std::str::CharIndices<'a>","std::iter::ArrayChunks<I, N>","std::str::MatchIndices<'a, P>","std::iter::SkipWhile<I, P>","std::collections::btree_set::Iter<'a, T>","std::slice::GroupByMut<'a, T, P>","std::str::Chars<'a>","std::iter::Intersperse<I>","std::iter::FromFn<F>","std::str::SplitAsciiWhitespace<'a>","std::sys::unix::process::process_common::CommandArgs<'a>","std::collections::linked_list::IterMut<'a, T>","std::collections::btree_set::Difference<'a, T, A>","std::os::unix::net::ScmRights<'a>","std::option::Item<A>","std::str::SplitWhitespace<'a>","std::env::VarsOs","std::collections::vec_deque::Iter<'a, T>","std::collections::hash_set::Iter<'a, K>","std::iter::Cycle<I>","std::collections::hash_set::Drain<'a, K>","std::collections::btree_map::IterMut<'a, K, V>","std::slice::RChunksExactMut<'a, T>","std::str::Lines<'a>","std::io::Bytes<R>","std::str::Bytes<'_>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::iter::MapWhile<I, P>","std::iter::Empty<T>","std::collections::hash_map::Values<'a, K, V>","std::sync::mpsc::IntoIter<T>","std::collections::hash_set::Union<'a, T, S>","std::char::EscapeUnicode","std::collections::btree_map::Values<'a, K, V>","std::iter::Rev<I>","std::path::Components<'a>","std::option::IntoIter<A>","std::collections::btree_map::ValuesMut<'a, K, V>","std::collections::btree_set::SymmetricDifference<'a, T>","std::collections::hash_map::IntoIter<K, V>","std::slice::ArrayChunksMut<'a, T, N>","std::slice::RSplitMut<'a, T, P>","std::collections::vec_deque::IterMut<'a, T>","std::str::EscapeUnicode<'a>","std::sync::mpsc::TryIter<'a, T>","std::iter::StepBy<I>","std::iter::Copied<I>","std::str::EncodeUtf16<'a>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::slice::ChunksMut<'a, T>","std::io::Lines<B>","std::collections::btree_set::Range<'a, T>","std::iter::Take<I>","std::path::Ancestors<'a>","std::slice::Windows<'a, T>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::hash_set::Difference<'a, T, S>","std::slice::SplitMut<'a, T, P>","std::iter::Skip<I>","std::os::unix::net::Messages<'a>","std::os::unix::net::ScmCredentials<'a>","bitflags::core::error::Source<'a>","std::collections::btree_map::Range<'a, K, V>","std::path::Iter<'a>","std::slice::SplitN<'a, T, P>","std::collections::btree_map::IntoIter<K, V, A>","std::boxed::Box<I, A>","std::slice::RChunks<'a, T>","std::collections::hash_map::IntoKeys<K, V>","std::collections::vec_deque::IntoIter<T, A>","std::string::Drain<'_>","std::collections::linked_list::Iter<'a, T>","std::collections::linked_list::DrainFilter<'_, T, F>","std::str::RMatches<'a, P>","std::env::Vars","std::vec::Drain<'_, T, A>","std::iter::adapters::GenericShunt<'_, I, R>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::slice::Iter<'a, T>","std::char::ToUppercase","std::sync::mpsc::Iter<'a, T>","std::sys::unix::os::Env","std::collections::btree_map::Iter<'a, K, V>","std::process::CommandEnvs<'a>","std::slice::RChunksMut<'a, T>","std::collections::hash_map::Drain<'a, K, V>","std::collections::btree_map::RangeMut<'a, K, V>","bitflags::core::slice::iter::GenericSplitN<I>","std::collections::hash_map::IntoValues<K, V>","std::sys_common::wstr::WStrUnits<'_>","std::char::ToLowercase","std::env::Args","std::io::Split<B>","std::env::SplitPaths<'a>","std::collections::btree_set::IntoIter<T, A>","std::process::CommandArgs<'a>","std::iter::RepeatWith<F>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::slice::IterMut<'a, T>","std::iter::Successors<T, F>","std::str::RMatchIndices<'a, P>","std::os::unix::net::Incoming<'a>","std::sys::unix::os::SplitPaths<'a>","std::str::EscapeDebug<'a>","std::result::Iter<'a, T>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::sys::unix::args::Args","std::collections::binary_heap::Iter<'a, T>","std::iter::Zip<A, B>","std::iter::Filter<I, P>","std::str::Utf8Chunks<'a>","std::iter::Cloned<I>","std::str::SplitTerminator<'a, P>","std::ops::RangeInclusive<A>","std::array::IntoIter<T, N>","std::slice::SplitNMut<'a, T, P>","std::collections::hash_set::IntoIter<K>","std::option::IterMut<'a, A>","std::collections::btree_map::IntoValues<K, V, A>","std::ascii::EscapeDefault","std::slice::RSplit<'a, T, P>","std::net::Incoming<'a>","std::sys_common::wtf8::EncodeWide<'a>","std::str::EscapeDefault<'a>","std::iter::Chain<A, B>","std::iter::FilterMap<I, F>","std::sys_common::net::LookupHost","std::collections::btree_set::Union<'a, T>","std::char::EscapeDebug","std::collections::hash_map::ValuesMut<'a, K, V>","std::collections::btree_set::Intersection<'a, T, A>","std::slice::ArrayWindows<'a, T, N>","std::iter::sources::from_generator::FromGenerator<G>","std::str::Matches<'a, P>","std::iter::Scan<I, St, F>","std::collections::binary_heap::IntoIter<T>","std::iter::Repeat<A>","std::char::DecodeUtf16<I>","std::iter::Inspect<I, F>","std::slice::SplitInclusiveMut<'a, T, P>","std::char::EscapeDefault","std::iter::FlatMap<I, U, F>","std::slice::EscapeAscii<'a>","std::iter::Fuse<I>","std::iter::IntersperseWith<I, G>","std::slice::ChunksExactMut<'a, T>","std::collections::btree_map::IntoKeys<K, V, A>","std::net::IntoIncoming","std::collections::hash_map::Iter<'a, K, V>","std::str::RSplit<'a, P>","std::collections::hash_set::DrainFilter<'_, K, F>","std::slice::RSplitN<'a, T, P>","std::str::LinesAny<'a>","std::vec::DrainFilter<'_, T, F, A>","std::char::CaseMappingIter","std::slice::RSplitNMut<'a, T, P>","std::str::SplitN<'a, P>","std::slice::GroupBy<'a, T, P>","std::collections::btree_map::Keys<'a, K, V>","std::result::IterMut<'a, T>","std::slice::ChunksExact<'a, T>","std::iter::Map<I, F>","std::str::RSplitTerminator<'a, P>","std::sys::unix::fs::ReadDir","std::str::RSplitN<'a, P>","std::vec::Splice<'_, I, A>","std::iter::Once<T>","std::result::IntoIter<T>","std::ops::RangeFrom<A>","std::fs::ReadDir","std::collections::linked_list::IntoIter<T>","std::slice::Split<'a, T, P>","std::slice::Chunks<'a, T>","std::iter::ByRefSized<'_, I>","std::collections::binary_heap::DrainSorted<'_, T>","std::iter::OnceWith<F>","<&mut I as std::iter::Iterator>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::table::Table<'a, H, R>
let mut p1 = & MaybeUninit::uninit().assume_init(); // [layout::Constraint]
+p0.widths(p1);
+widgets::table::Table::<'a, H, R>::widths(p0, p1);
+crate::widgets::table::Table::<'a, H, R>::widths(p0, p1);
+<widgets::table::Table<'a, H, R>>::widths(p0, p1);
-----------------
src/widgets/table.rs widgets::table::Table::<'a, H, R>::rows
'a
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"widgets::table::Table::<'a, H, R>::rows":{"<D as std::iter::Iterator>::Item":["std::fmt::Display"],"D":["std::iter::Iterator","std::marker::Sized"],"H":["std::marker::Sized","std::iter::Iterator"],"II":["std::marker::Sized","std::iter::IntoIterator"],"R":["std::marker::Sized","std::iter::Iterator"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"<I as std::iter::IntoIterator>":{"I":["std::vec::Splice<'_, I, A>","std::str::CharIndices<'a>","std::env::Vars","std::option::Item<A>","std::iter::ArrayChunks<I, N>","std::collections::hash_map::Drain<'a, K, V>","bitflags::core::slice::iter::GenericSplitN<I>","std::sync::mpsc::Iter<'a, T>","std::process::CommandArgs<'a>","std::slice::GroupByMut<'a, T, P>","std::iter::Flatten<I>","std::io::Bytes<R>","std::iter::adapters::GenericShunt<'_, I, R>","std::slice::RChunksMut<'a, T>","std::collections::vec_deque::Iter<'a, T>","std::collections::btree_set::Range<'a, T>","std::str::EscapeDebug<'a>","std::str::RSplitN<'a, P>","std::process::CommandEnvs<'a>","std::collections::btree_map::Keys<'a, K, V>","std::str::EscapeUnicode<'a>","std::slice::Windows<'a, T>","std::slice::GroupBy<'a, T, P>","std::sys_common::wstr::WStrUnits<'_>","std::char::DecodeUtf16<I>","std::ops::index_range::IndexRange","std::collections::btree_set::IntoIter<T, A>","std::vec::IntoIter<T, A>","std::path::Iter<'a>","std::slice::ChunksExact<'a, T>","std::iter::Successors<T, F>","std::slice::ArrayChunks<'a, T, N>","std::slice::RSplitMut<'a, T, P>","std::str::RSplit<'a, P>","std::iter::sources::from_generator::FromGenerator<G>","std::iter::StepBy<I>","std::option::Iter<'a, A>","std::collections::hash_map::IntoIter<K, V>","std::str::MatchIndices<'a, P>","std::collections::btree_map::Range<'a, K, V>","std::option::IntoIter<A>","std::iter::ByRefSized<'_, I>","std::string::Drain<'_>","std::collections::vec_deque::IntoIter<T, A>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::ops::Range<A>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::collections::hash_map::IterMut<'a, K, V>","std::collections::btree_set::SymmetricDifference<'a, T>","std::collections::hash_set::Union<'a, T, S>","std::str::EncodeUtf16<'a>","std::io::Split<B>","std::env::VarsOs","std::str::Chars<'a>","std::slice::IterMut<'a, T>","std::collections::hash_map::ValuesMut<'a, K, V>","std::collections::linked_list::Iter<'a, T>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::hash_map::Values<'a, K, V>","std::os::unix::net::ScmCredentials<'a>","std::slice::ChunksMut<'a, T>","std::fs::ReadDir","std::collections::binary_heap::DrainSorted<'_, T>","std::iter::Empty<T>","std::slice::RSplitN<'a, T, P>","std::collections::binary_heap::Drain<'_, T>","std::iter::Scan<I, St, F>","std::iter::Map<I, F>","std::collections::hash_map::Iter<'a, K, V>","std::sys::unix::fs::ReadDir","std::path::Ancestors<'a>","std::iter::Rev<I>","std::net::Incoming<'a>","std::collections::btree_map::IntoKeys<K, V, A>","std::collections::binary_heap::IntoIterSorted<T>","std::str::LinesAny<'a>","std::str::RMatches<'a, P>","std::collections::btree_map::Values<'a, K, V>","std::collections::btree_set::Union<'a, T>","std::iter::Intersperse<I>","<&mut I as std::iter::Iterator>","std::iter::IntersperseWith<I, G>","std::result::Iter<'a, T>","std::collections::hash_set::IntoIter<K>","std::iter::RepeatN<A>","std::collections::linked_list::IntoIter<T>","std::sync::mpsc::TryIter<'a, T>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::str::RSplitTerminator<'a, P>","std::iter::Once<T>","std::sys_common::net::LookupHost","std::slice::ArrayChunksMut<'a, T, N>","std::slice::RChunksExact<'a, T>","std::collections::btree_map::IntoValues<K, V, A>","std::iter::Inspect<I, F>","std::collections::linked_list::DrainFilter<'_, T, F>","std::io::Lines<B>","std::os::unix::net::Incoming<'a>","std::collections::btree_map::ValuesMut<'a, K, V>","std::slice::SplitN<'a, T, P>","std::iter::Take<I>","std::slice::RSplitNMut<'a, T, P>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::char::CaseMappingIter","std::sys_common::wtf8::EncodeWide<'a>","std::iter::Filter<I, P>","std::char::EscapeDefault","std::collections::vec_deque::Drain<'_, T, A>","std::collections::btree_set::Intersection<'a, T, A>","std::sys::unix::args::Args","std::sys::unix::process::process_common::CommandArgs<'a>","std::iter::Cloned<I>","std::iter::Zip<A, B>","std::collections::hash_map::IntoKeys<K, V>","std::collections::btree_map::RangeMut<'a, K, V>","std::str::Bytes<'_>","std::iter::FromFn<F>","std::slice::SplitNMut<'a, T, P>","std::iter::Copied<I>","std::iter::FilterMap<I, F>","std::vec::DrainFilter<'_, T, F, A>","std::collections::btree_set::Iter<'a, T>","std::char::ToLowercase","std::collections::hash_set::Difference<'a, T, S>","std::ops::RangeInclusive<A>","std::iter::Skip<I>","std::path::Components<'a>","std::collections::btree_map::IterMut<'a, K, V>","std::slice::RSplit<'a, T, P>","std::iter::MapWhile<I, P>","std::boxed::Box<I, A>","std::collections::hash_map::Keys<'a, K, V>","std::os::unix::net::ScmRights<'a>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::iter::RepeatWith<F>","std::slice::ArrayWindows<'a, T, N>","std::array::IntoIter<T, N>","std::sync::mpsc::IntoIter<T>","std::collections::btree_map::Iter<'a, K, V>","std::ascii::EscapeDefault","std::str::Matches<'a, P>","std::ops::RangeFrom<A>","std::slice::EscapeAscii<'a>","std::collections::hash_set::Iter<'a, K>","std::sys::unix::os::SplitPaths<'a>","std::str::RMatchIndices<'a, P>","std::iter::SkipWhile<I, P>","std::net::IntoIncoming","std::char::ToUppercase","std::slice::Chunks<'a, T>","std::collections::hash_set::DrainFilter<'_, K, F>","std::iter::Repeat<A>","std::slice::RChunks<'a, T>","std::str::EscapeDefault<'a>","std::result::IntoIter<T>","std::slice::SplitInclusive<'a, T, P>","std::env::ArgsOs","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::collections::vec_deque::IterMut<'a, T>","std::iter::Cycle<I>","std::str::SplitWhitespace<'a>","bitflags::core::error::Source<'a>","std::iter::Fuse<I>","std::str::SplitN<'a, P>","std::str::Lines<'a>","std::iter::Peekable<I>","std::option::IterMut<'a, A>","std::slice::Iter<'a, T>","std::collections::btree_set::Difference<'a, T, A>","std::str::SplitInclusive<'a, P>","std::os::unix::net::Messages<'a>","std::slice::RChunksExactMut<'a, T>","std::iter::TakeWhile<I, P>","std::str::Utf8Chunks<'a>","std::collections::binary_heap::IntoIter<T>","std::slice::Split<'a, T, P>","std::collections::hash_map::IntoValues<K, V>","std::result::IterMut<'a, T>","std::iter::Chain<A, B>","std::collections::btree_map::IntoIter<K, V, A>","std::iter::OnceWith<F>","std::str::Split<'a, P>","std::iter::FlatMap<I, U, F>","std::slice::ChunksExactMut<'a, T>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::sys::unix::os::Env","std::collections::linked_list::IterMut<'a, T>","std::slice::SplitInclusiveMut<'a, T, P>","std::str::SplitAsciiWhitespace<'a>","std::env::SplitPaths<'a>","std::env::Args","std::vec::Drain<'_, T, A>","std::collections::binary_heap::Iter<'a, T>","std::char::EscapeUnicode","std::str::SplitTerminator<'a, P>","std::slice::SplitMut<'a, T, P>","std::char::EscapeDebug","std::iter::Enumerate<I>","std::collections::hash_set::Drain<'a, K>"]},"widgets::table::Table::<'a, H, R>::rows":{"<D as std::iter::Iterator>::Item":["backend::termion::Bg","backend::termion::Fg","backend::termion::ModifierDiff","<&mut T as std::fmt::Display>"],"D":["std::sys::unix::args::Args","std::fs::ReadDir","<&mut I as std::iter::Iterator>","std::iter::sources::from_generator::FromGenerator<G>","std::env::Args","std::iter::Chain<A, B>","std::collections::vec_deque::Drain<'_, T, A>","std::str::CharIndices<'a>","std::iter::OnceWith<F>","std::io::Split<B>","std::char::ToUppercase","std::process::CommandEnvs<'a>","std::net::IntoIncoming","std::str::SplitWhitespace<'a>","std::collections::linked_list::Iter<'a, T>","std::vec::Drain<'_, T, A>","std::iter::Copied<I>","std::char::CaseMappingIter","std::option::Item<A>","std::collections::hash_set::IntoIter<K>","std::collections::btree_map::Keys<'a, K, V>","std::slice::ChunksExact<'a, T>","std::net::Incoming<'a>","std::iter::FlatMap<I, U, F>","std::iter::Map<I, F>","std::collections::btree_set::Intersection<'a, T, A>","std::iter::Repeat<A>","std::process::CommandArgs<'a>","std::str::Split<'a, P>","std::slice::SplitInclusiveMut<'a, T, P>","std::collections::vec_deque::Iter<'a, T>","std::iter::Zip<A, B>","std::iter::Once<T>","std::sync::mpsc::TryIter<'a, T>","std::sys_common::net::LookupHost","std::path::Components<'a>","std::char::DecodeUtf16<I>","std::iter::Inspect<I, F>","std::iter::MapWhile<I, P>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::collections::btree_set::SymmetricDifference<'a, T>","std::env::VarsOs","std::string::Drain<'_>","std::iter::Peekable<I>","std::iter::Flatten<I>","std::slice::SplitNMut<'a, T, P>","std::slice::Windows<'a, T>","std::collections::btree_set::Range<'a, T>","std::collections::binary_heap::IntoIterSorted<T>","std::collections::hash_map::Keys<'a, K, V>","std::iter::Rev<I>","std::str::Bytes<'_>","std::str::EscapeUnicode<'a>","std::iter::Scan<I, St, F>","std::iter::Fuse<I>","std::iter::Enumerate<I>","std::array::IntoIter<T, N>","std::collections::btree_map::Range<'a, K, V>","bitflags::core::slice::iter::GenericSplitN<I>","std::iter::StepBy<I>","std::collections::hash_map::IntoKeys<K, V>","std::collections::hash_map::Iter<'a, K, V>","std::slice::Split<'a, T, P>","std::str::LinesAny<'a>","std::iter::Intersperse<I>","std::iter::Successors<T, F>","std::collections::btree_map::IntoValues<K, V, A>","std::iter::ByRefSized<'_, I>","std::boxed::Box<I, A>","std::str::RSplit<'a, P>","std::sys::unix::fs::ReadDir","std::slice::Chunks<'a, T>","std::sys::unix::process::process_common::CommandArgs<'a>","std::result::Iter<'a, T>","std::env::ArgsOs","std::slice::ChunksExactMut<'a, T>","std::collections::btree_set::Difference<'a, T, A>","std::collections::hash_map::Values<'a, K, V>","std::collections::hash_map::IterMut<'a, K, V>","std::slice::RChunksExact<'a, T>","std::collections::btree_set::Iter<'a, T>","std::collections::linked_list::IntoIter<T>","std::str::SplitN<'a, P>","std::str::SplitAsciiWhitespace<'a>","std::str::EscapeDebug<'a>","std::collections::binary_heap::Iter<'a, T>","std::collections::hash_set::Union<'a, T, S>","std::collections::hash_set::Intersection<'a, T, S>","std::slice::GroupByMut<'a, T, P>","std::sys::unix::os::Env","std::vec::DrainFilter<'_, T, F, A>","std::collections::binary_heap::Drain<'_, T>","std::iter::RepeatWith<F>","std::iter::FilterMap<I, F>","std::slice::RChunksExactMut<'a, T>","std::str::RMatchIndices<'a, P>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","bitflags::core::error::Source<'a>","std::slice::RSplit<'a, T, P>","std::slice::SplitMut<'a, T, P>","std::vec::Splice<'_, I, A>","std::collections::hash_map::IntoIter<K, V>","std::os::unix::net::ScmCredentials<'a>","std::str::RSplitN<'a, P>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::slice::SplitN<'a, T, P>","std::slice::SplitInclusive<'a, T, P>","std::os::unix::net::ScmRights<'a>","std::str::RSplitTerminator<'a, P>","std::collections::btree_map::IntoIter<K, V, A>","std::str::Lines<'a>","std::os::unix::net::Messages<'a>","std::collections::vec_deque::IterMut<'a, T>","std::slice::RSplitMut<'a, T, P>","std::iter::adapters::GenericShunt<'_, I, R>","std::sys_common::wtf8::EncodeWide<'a>","std::slice::RChunks<'a, T>","std::collections::hash_map::IntoValues<K, V>","std::iter::TakeWhile<I, P>","std::char::ToLowercase","std::str::EncodeUtf16<'a>","std::collections::hash_map::Drain<'a, K, V>","std::collections::hash_set::DrainFilter<'_, K, F>","std::str::Utf8Chunks<'a>","std::sync::mpsc::IntoIter<T>","std::collections::btree_map::Iter<'a, K, V>","std::path::Iter<'a>","std::collections::btree_set::Union<'a, T>","std::env::SplitPaths<'a>","std::collections::btree_map::ValuesMut<'a, K, V>","std::iter::Filter<I, P>","std::option::Iter<'a, A>","std::char::EscapeDefault","std::slice::ArrayChunks<'a, T, N>","std::ops::RangeFrom<A>","std::str::SplitTerminator<'a, P>","std::sys_common::wstr::WStrUnits<'_>","std::ops::RangeInclusive<A>","std::ops::index_range::IndexRange","std::str::Matches<'a, P>","std::collections::hash_set::Iter<'a, K>","std::str::EscapeDefault<'a>","std::iter::RepeatN<A>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::option::IterMut<'a, A>","std::collections::btree_map::IterMut<'a, K, V>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::os::unix::net::Incoming<'a>","std::collections::btree_map::Values<'a, K, V>","std::slice::ArrayWindows<'a, T, N>","std::io::Lines<B>","std::iter::ArrayChunks<I, N>","std::char::EscapeDebug","std::iter::SkipWhile<I, P>","std::slice::RSplitNMut<'a, T, P>","std::sys::unix::os::SplitPaths<'a>","std::slice::Iter<'a, T>","std::slice::EscapeAscii<'a>","std::sync::mpsc::Iter<'a, T>","std::result::IntoIter<T>","std::iter::Cycle<I>","std::str::RMatches<'a, P>","std::collections::linked_list::IterMut<'a, T>","std::slice::ArrayChunksMut<'a, T, N>","std::ascii::EscapeDefault","std::collections::hash_set::Difference<'a, T, S>","std::collections::binary_heap::IntoIter<T>","std::iter::Skip<I>","std::iter::Cloned<I>","std::slice::IterMut<'a, T>","std::slice::RSplitN<'a, T, P>","std::slice::ChunksMut<'a, T>","std::str::SplitInclusive<'a, P>","std::collections::hash_set::Drain<'a, K>","std::ops::Range<A>","std::path::Ancestors<'a>","std::result::IterMut<'a, T>","std::vec::IntoIter<T, A>","std::iter::FromFn<F>","std::iter::Empty<T>","std::env::Vars","std::iter::IntersperseWith<I, G>","std::slice::GroupBy<'a, T, P>","std::option::IntoIter<A>","std::collections::binary_heap::DrainSorted<'_, T>","std::collections::btree_map::RangeMut<'a, K, V>","std::slice::RChunksMut<'a, T>","std::io::Bytes<R>","std::collections::btree_map::IntoKeys<K, V, A>","std::str::Chars<'a>","std::str::MatchIndices<'a, P>","std::iter::Take<I>","std::collections::btree_set::IntoIter<T, A>","std::collections::linked_list::DrainFilter<'_, T, F>","std::collections::hash_map::ValuesMut<'a, K, V>","std::collections::vec_deque::IntoIter<T, A>","std::char::EscapeUnicode"],"H":["std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::collections::vec_deque::IntoIter<T, A>","std::result::IterMut<'a, T>","std::str::Lines<'a>","std::slice::EscapeAscii<'a>","std::iter::Map<I, F>","std::iter::Skip<I>","std::str::RSplitTerminator<'a, P>","std::collections::hash_set::Union<'a, T, S>","std::collections::btree_map::IntoKeys<K, V, A>","std::option::Item<A>","std::iter::Take<I>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::option::Iter<'a, A>","std::slice::Chunks<'a, T>","std::iter::Intersperse<I>","std::char::DecodeUtf16<I>","std::collections::hash_map::Iter<'a, K, V>","std::str::SplitInclusive<'a, P>","std::slice::ArrayWindows<'a, T, N>","std::slice::GroupByMut<'a, T, P>","std::char::ToLowercase","std::option::IntoIter<A>","std::collections::btree_map::IntoValues<K, V, A>","std::sys::unix::os::SplitPaths<'a>","std::str::MatchIndices<'a, P>","std::iter::MapWhile<I, P>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::collections::btree_map::RangeMut<'a, K, V>","std::io::Lines<B>","std::path::Components<'a>","std::slice::GroupBy<'a, T, P>","std::vec::Splice<'_, I, A>","bitflags::core::slice::iter::GenericSplitN<I>","std::iter::ByRefSized<'_, I>","std::sys::unix::process::process_common::CommandArgs<'a>","std::collections::btree_map::IntoIter<K, V, A>","std::collections::btree_set::Range<'a, T>","std::net::Incoming<'a>","std::iter::OnceWith<F>","std::io::Bytes<R>","<&mut I as std::iter::Iterator>","std::str::EscapeUnicode<'a>","std::collections::binary_heap::IntoIterSorted<T>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::slice::Split<'a, T, P>","std::env::Args","std::net::IntoIncoming","std::iter::Once<T>","std::collections::hash_map::Values<'a, K, V>","std::slice::RChunksMut<'a, T>","std::collections::binary_heap::DrainSorted<'_, T>","std::slice::RSplitN<'a, T, P>","std::iter::Cloned<I>","std::iter::Scan<I, St, F>","std::str::EncodeUtf16<'a>","std::str::CharIndices<'a>","std::iter::FlatMap<I, U, F>","std::collections::binary_heap::IntoIter<T>","std::sys::unix::fs::ReadDir","std::ascii::EscapeDefault","std::char::CaseMappingIter","std::iter::Rev<I>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::sys::unix::args::Args","std::slice::SplitMut<'a, T, P>","std::collections::hash_set::IntoIter<K>","std::sys_common::wstr::WStrUnits<'_>","std::collections::hash_map::IntoIter<K, V>","std::collections::linked_list::IntoIter<T>","std::env::SplitPaths<'a>","std::iter::ArrayChunks<I, N>","std::slice::Iter<'a, T>","std::str::SplitTerminator<'a, P>","std::collections::binary_heap::Iter<'a, T>","std::iter::SkipWhile<I, P>","std::env::ArgsOs","std::slice::RSplitNMut<'a, T, P>","std::collections::btree_map::Range<'a, K, V>","std::vec::IntoIter<T, A>","bitflags::core::error::Source<'a>","std::slice::IterMut<'a, T>","std::iter::Fuse<I>","std::str::Split<'a, P>","std::collections::btree_set::Intersection<'a, T, A>","std::slice::RSplit<'a, T, P>","std::collections::linked_list::Iter<'a, T>","std::collections::hash_map::IntoValues<K, V>","std::slice::ArrayChunks<'a, T, N>","std::collections::hash_map::Drain<'a, K, V>","std::iter::FromFn<F>","std::collections::binary_heap::Drain<'_, T>","std::slice::RChunks<'a, T>","std::slice::ChunksExact<'a, T>","std::char::EscapeDebug","std::iter::RepeatN<A>","std::collections::btree_map::ValuesMut<'a, K, V>","std::collections::btree_set::IntoIter<T, A>","std::slice::ArrayChunksMut<'a, T, N>","std::collections::btree_map::Values<'a, K, V>","std::iter::Enumerate<I>","std::slice::Windows<'a, T>","std::collections::hash_map::Keys<'a, K, V>","std::os::unix::net::ScmCredentials<'a>","std::result::Iter<'a, T>","std::io::Split<B>","std::char::EscapeUnicode","std::slice::SplitN<'a, T, P>","std::str::LinesAny<'a>","std::result::IntoIter<T>","std::collections::linked_list::DrainFilter<'_, T, F>","std::collections::linked_list::IterMut<'a, T>","std::sys::unix::os::Env","std::slice::RChunksExact<'a, T>","std::char::ToUppercase","std::collections::btree_set::Iter<'a, T>","std::collections::btree_set::SymmetricDifference<'a, T>","std::ops::RangeFrom<A>","std::str::SplitWhitespace<'a>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::iter::IntersperseWith<I, G>","std::ops::index_range::IndexRange","std::str::RMatches<'a, P>","std::collections::hash_map::ValuesMut<'a, K, V>","std::iter::Peekable<I>","std::char::EscapeDefault","std::str::Bytes<'_>","std::slice::RSplitMut<'a, T, P>","std::env::Vars","std::str::RSplit<'a, P>","std::iter::Inspect<I, F>","std::iter::Empty<T>","std::str::SplitN<'a, P>","std::collections::hash_set::Difference<'a, T, S>","std::collections::vec_deque::Drain<'_, T, A>","std::iter::StepBy<I>","std::collections::hash_set::Drain<'a, K>","std::collections::hash_set::Intersection<'a, T, S>","std::os::unix::net::ScmRights<'a>","std::array::IntoIter<T, N>","std::iter::adapters::GenericShunt<'_, I, R>","std::fs::ReadDir","std::str::Utf8Chunks<'a>","std::process::CommandArgs<'a>","std::ops::RangeInclusive<A>","std::iter::Filter<I, P>","std::iter::FilterMap<I, F>","std::path::Iter<'a>","std::os::unix::net::Messages<'a>","std::iter::TakeWhile<I, P>","std::iter::Flatten<I>","std::collections::vec_deque::Iter<'a, T>","std::ops::Range<A>","std::iter::Chain<A, B>","std::collections::hash_map::IntoKeys<K, V>","std::iter::Repeat<A>","std::sync::mpsc::TryIter<'a, T>","std::process::CommandEnvs<'a>","std::str::SplitAsciiWhitespace<'a>","std::slice::SplitNMut<'a, T, P>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::iter::sources::from_generator::FromGenerator<G>","std::str::Chars<'a>","std::slice::ChunksExactMut<'a, T>","std::str::EscapeDefault<'a>","std::collections::btree_map::Iter<'a, K, V>","std::path::Ancestors<'a>","std::collections::hash_set::DrainFilter<'_, K, F>","std::slice::SplitInclusive<'a, T, P>","std::boxed::Box<I, A>","std::option::IterMut<'a, A>","std::string::Drain<'_>","std::collections::btree_map::IterMut<'a, K, V>","std::collections::btree_set::Difference<'a, T, A>","std::env::VarsOs","std::slice::ChunksMut<'a, T>","std::str::RMatchIndices<'a, P>","std::sys_common::net::LookupHost","std::slice::RChunksExactMut<'a, T>","std::sys_common::wtf8::EncodeWide<'a>","std::sync::mpsc::Iter<'a, T>","std::iter::Cycle<I>","std::collections::hash_map::IterMut<'a, K, V>","std::collections::btree_map::Keys<'a, K, V>","std::str::EscapeDebug<'a>","std::str::RSplitN<'a, P>","std::iter::RepeatWith<F>","std::iter::Successors<T, F>","std::vec::DrainFilter<'_, T, F, A>","std::collections::hash_set::Iter<'a, K>","std::collections::vec_deque::IterMut<'a, T>","std::slice::SplitInclusiveMut<'a, T, P>","std::collections::btree_set::Union<'a, T>","std::iter::Copied<I>","std::iter::Zip<A, B>","std::sync::mpsc::IntoIter<T>","std::str::Matches<'a, P>","std::vec::Drain<'_, T, A>","std::os::unix::net::Incoming<'a>"],"II":["<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>","<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>","text::Text"],"R":["std::iter::RepeatN<A>","std::collections::binary_heap::Drain<'_, T>","std::iter::adapters::GenericShunt<'_, I, R>","std::str::Matches<'a, P>","bitflags::core::error::Source<'a>","std::option::IterMut<'a, A>","std::iter::Chain<A, B>","std::option::Item<A>","std::path::Components<'a>","std::ops::Range<A>","std::collections::hash_set::Iter<'a, K>","std::env::SplitPaths<'a>","std::ops::RangeInclusive<A>","std::array::IntoIter<T, N>","std::str::Chars<'a>","std::io::Bytes<R>","std::iter::Zip<A, B>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::iter::Cycle<I>","std::slice::RSplitMut<'a, T, P>","std::str::EncodeUtf16<'a>","std::str::LinesAny<'a>","std::collections::hash_map::IntoIter<K, V>","std::iter::SkipWhile<I, P>","std::vec::IntoIter<T, A>","std::collections::btree_map::Iter<'a, K, V>","std::str::EscapeDebug<'a>","std::env::ArgsOs","std::slice::SplitInclusive<'a, T, P>","std::slice::RChunks<'a, T>","std::collections::hash_map::IntoKeys<K, V>","std::collections::binary_heap::DrainSorted<'_, T>","std::collections::btree_set::Difference<'a, T, A>","std::collections::btree_set::Intersection<'a, T, A>","std::iter::Repeat<A>","std::str::RSplitTerminator<'a, P>","std::slice::SplitN<'a, T, P>","std::sys_common::wstr::WStrUnits<'_>","std::iter::Cloned<I>","std::collections::binary_heap::IntoIter<T>","std::collections::btree_map::IntoKeys<K, V, A>","std::collections::hash_map::Drain<'a, K, V>","std::ascii::EscapeDefault","std::collections::btree_set::Iter<'a, T>","std::result::IterMut<'a, T>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::collections::linked_list::Iter<'a, T>","std::collections::hash_set::Difference<'a, T, S>","std::iter::Enumerate<I>","std::iter::MapWhile<I, P>","std::process::CommandEnvs<'a>","std::char::ToUppercase","std::slice::RChunksExact<'a, T>","std::collections::btree_map::Values<'a, K, V>","std::collections::btree_map::IterMut<'a, K, V>","std::ops::RangeFrom<A>","std::boxed::Box<I, A>","std::os::unix::net::Incoming<'a>","std::os::unix::net::ScmCredentials<'a>","std::sys::unix::fs::ReadDir","std::collections::vec_deque::IterMut<'a, T>","std::collections::btree_set::Range<'a, T>","std::collections::hash_set::Drain<'a, K>","<&mut I as std::iter::Iterator>","std::collections::btree_map::IntoValues<K, V, A>","std::slice::RSplitNMut<'a, T, P>","std::collections::hash_set::IntoIter<K>","std::slice::EscapeAscii<'a>","std::iter::Once<T>","std::iter::TakeWhile<I, P>","std::string::Drain<'_>","std::collections::btree_set::Union<'a, T>","std::sys::unix::args::Args","std::collections::btree_set::SymmetricDifference<'a, T>","std::str::EscapeUnicode<'a>","std::sync::mpsc::Iter<'a, T>","std::slice::RSplitN<'a, T, P>","std::str::SplitWhitespace<'a>","std::collections::hash_set::DrainFilter<'_, K, F>","std::collections::linked_list::IntoIter<T>","std::env::Vars","std::slice::GroupBy<'a, T, P>","std::fs::ReadDir","std::str::Lines<'a>","std::io::Lines<B>","std::iter::Filter<I, P>","std::collections::btree_map::ValuesMut<'a, K, V>","std::slice::ChunksMut<'a, T>","std::slice::RChunksExactMut<'a, T>","std::iter::ArrayChunks<I, N>","std::env::VarsOs","std::env::Args","std::slice::SplitInclusiveMut<'a, T, P>","std::slice::GroupByMut<'a, T, P>","std::collections::hash_map::Keys<'a, K, V>","std::collections::hash_map::IterMut<'a, K, V>","std::iter::Skip<I>","std::net::IntoIncoming","std::iter::Intersperse<I>","std::iter::Flatten<I>","std::collections::btree_set::IntoIter<T, A>","std::str::Split<'a, P>","std::slice::Chunks<'a, T>","std::collections::linked_list::IterMut<'a, T>","std::str::SplitN<'a, P>","std::char::EscapeDebug","std::collections::vec_deque::IntoIter<T, A>","std::collections::vec_deque::Iter<'a, T>","std::collections::vec_deque::Drain<'_, T, A>","std::option::IntoIter<A>","std::iter::Inspect<I, F>","std::iter::Fuse<I>","std::result::Iter<'a, T>","std::collections::hash_map::Values<'a, K, V>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::char::CaseMappingIter","std::os::unix::net::ScmRights<'a>","std::io::Split<B>","std::iter::Copied<I>","std::collections::binary_heap::Iter<'a, T>","std::sync::mpsc::TryIter<'a, T>","std::collections::hash_map::ValuesMut<'a, K, V>","std::slice::ArrayChunksMut<'a, T, N>","std::iter::ByRefSized<'_, I>","std::option::Iter<'a, A>","std::collections::hash_set::Union<'a, T, S>","std::slice::SplitMut<'a, T, P>","std::collections::linked_list::DrainFilter<'_, T, F>","std::iter::Empty<T>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::process::CommandArgs<'a>","std::vec::Splice<'_, I, A>","std::iter::StepBy<I>","std::char::ToLowercase","std::net::Incoming<'a>","std::iter::Peekable<I>","std::char::EscapeUnicode","std::iter::FromFn<F>","std::iter::RepeatWith<F>","std::slice::RChunksMut<'a, T>","std::slice::ChunksExactMut<'a, T>","std::iter::sources::from_generator::FromGenerator<G>","std::str::SplitInclusive<'a, P>","std::str::RMatches<'a, P>","std::slice::ChunksExact<'a, T>","std::vec::Drain<'_, T, A>","std::str::RMatchIndices<'a, P>","std::str::MatchIndices<'a, P>","std::slice::ArrayChunks<'a, T, N>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::collections::btree_map::Keys<'a, K, V>","std::collections::hash_map::IntoValues<K, V>","std::iter::FilterMap<I, F>","std::slice::Split<'a, T, P>","std::sys::unix::os::SplitPaths<'a>","std::char::DecodeUtf16<I>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::btree_map::IntoIter<K, V, A>","std::slice::SplitNMut<'a, T, P>","std::collections::binary_heap::IntoIterSorted<T>","std::sys_common::net::LookupHost","std::str::CharIndices<'a>","std::iter::Scan<I, St, F>","std::str::SplitTerminator<'a, P>","std::result::IntoIter<T>","std::collections::btree_map::Range<'a, K, V>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::str::Bytes<'_>","std::str::SplitAsciiWhitespace<'a>","std::slice::Iter<'a, T>","std::sys::unix::os::Env","std::iter::FlatMap<I, U, F>","std::slice::RSplit<'a, T, P>","std::iter::OnceWith<F>","std::str::Utf8Chunks<'a>","std::sync::mpsc::IntoIter<T>","bitflags::core::slice::iter::GenericSplitN<I>","std::str::RSplit<'a, P>","std::os::unix::net::Messages<'a>","std::slice::ArrayWindows<'a, T, N>","std::slice::IterMut<'a, T>","std::sys_common::wtf8::EncodeWide<'a>","std::iter::Successors<T, F>","std::collections::btree_map::RangeMut<'a, K, V>","std::path::Ancestors<'a>","std::char::EscapeDefault","std::collections::hash_map::Iter<'a, K, V>","std::iter::Rev<I>","std::sys::unix::process::process_common::CommandArgs<'a>","std::vec::DrainFilter<'_, T, F, A>","std::ops::index_range::IndexRange","std::iter::Take<I>","std::slice::Windows<'a, T>","std::iter::IntersperseWith<I, G>","std::str::RSplitN<'a, P>","std::path::Iter<'a>","std::str::EscapeDefault<'a>","std::iter::Map<I, F>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::table::Table<'a, H, R>
let mut p1 = MaybeUninit::uninit().assume_init(); // II
+p0.rows(p1);
+widgets::table::Table::<'a, H, R>::rows(p0, p1);
+crate::widgets::table::Table::<'a, H, R>::rows(p0, p1);
+<widgets::table::Table<'a, H, R>>::rows(p0, p1);
-----------------
src/widgets/table.rs widgets::table::Table::<'a, H, R>::style
'a
deps:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::style":{"<D as std::iter::Iterator>::Item":["std::fmt::Display"],"D":["std::marker::Sized","std::iter::Iterator"],"H":["std::iter::Iterator","std::marker::Sized"],"R":["std::iter::Iterator","std::marker::Sized"]}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::style":{"<D as std::iter::Iterator>::Item":["<&T as std::fmt::Display>","backend::termion::Fg","backend::termion::Bg","backend::termion::ModifierDiff"],"D":["std::collections::hash_map::IntoIter<K, V>","std::result::Iter<'a, T>","std::str::SplitN<'a, P>","std::iter::SkipWhile<I, P>","std::slice::ChunksMut<'a, T>","std::collections::hash_map::Drain<'a, K, V>","std::ops::RangeInclusive<A>","std::str::Utf8Chunks<'a>","std::sys::unix::os::SplitPaths<'a>","std::collections::linked_list::IterMut<'a, T>","std::collections::btree_map::Values<'a, K, V>","std::slice::SplitN<'a, T, P>","std::slice::SplitInclusive<'a, T, P>","std::iter::ArrayChunks<I, N>","std::os::unix::net::Incoming<'a>","std::char::CaseMappingIter","std::slice::IterMut<'a, T>","std::slice::Windows<'a, T>","std::ops::index_range::IndexRange","std::iter::ByRefSized<'_, I>","std::slice::Split<'a, T, P>","std::str::SplitWhitespace<'a>","std::slice::GroupBy<'a, T, P>","std::slice::ChunksExact<'a, T>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::str::RSplitTerminator<'a, P>","std::option::IntoIter<A>","std::iter::Cycle<I>","std::collections::btree_map::ValuesMut<'a, K, V>","std::slice::RSplit<'a, T, P>","std::char::DecodeUtf16<I>","std::collections::binary_heap::IntoIter<T>","std::vec::DrainFilter<'_, T, F, A>","std::iter::RepeatN<A>","std::option::Item<A>","std::str::RMatches<'a, P>","std::slice::RChunks<'a, T>","std::str::Bytes<'_>","std::slice::ArrayWindows<'a, T, N>","std::collections::btree_map::IntoValues<K, V, A>","std::str::Lines<'a>","std::collections::vec_deque::IntoIter<T, A>","std::iter::Scan<I, St, F>","std::slice::RChunksExact<'a, T>","std::char::EscapeDebug","std::slice::EscapeAscii<'a>","std::collections::btree_map::Range<'a, K, V>","std::collections::btree_map::IterMut<'a, K, V>","std::iter::adapters::GenericShunt<'_, I, R>","std::slice::ArrayChunksMut<'a, T, N>","std::path::Components<'a>","std::collections::btree_set::Intersection<'a, T, A>","std::slice::Chunks<'a, T>","std::collections::hash_set::Intersection<'a, T, S>","std::os::unix::net::ScmRights<'a>","std::char::EscapeUnicode","std::iter::Rev<I>","std::iter::Flatten<I>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::iter::FromFn<F>","std::env::Args","std::char::ToUppercase","std::slice::Iter<'a, T>","std::char::ToLowercase","std::collections::linked_list::IntoIter<T>","std::str::SplitInclusive<'a, P>","std::iter::RepeatWith<F>","std::collections::hash_set::Difference<'a, T, S>","std::env::SplitPaths<'a>","std::vec::Splice<'_, I, A>","std::iter::Inspect<I, F>","std::sys_common::wstr::WStrUnits<'_>","std::str::Matches<'a, P>","std::collections::btree_map::IntoKeys<K, V, A>","std::env::Vars","std::str::EncodeUtf16<'a>","std::collections::hash_set::IntoIter<K>","std::collections::btree_set::Iter<'a, T>","std::collections::hash_set::Iter<'a, K>","std::vec::Drain<'_, T, A>","std::collections::hash_map::IterMut<'a, K, V>","std::collections::linked_list::DrainFilter<'_, T, F>","std::collections::binary_heap::Iter<'a, T>","bitflags::core::slice::iter::GenericSplitN<I>","std::str::LinesAny<'a>","std::option::Iter<'a, A>","std::array::IntoIter<T, N>","std::result::IterMut<'a, T>","std::iter::IntersperseWith<I, G>","std::iter::Repeat<A>","std::str::SplitAsciiWhitespace<'a>","std::iter::Zip<A, B>","std::iter::MapWhile<I, P>","std::sys_common::wtf8::EncodeWide<'a>","std::iter::sources::from_generator::FromGenerator<G>","std::sys_common::net::LookupHost","std::env::VarsOs","std::iter::Take<I>","std::slice::SplitMut<'a, T, P>","std::io::Bytes<R>","std::slice::SplitInclusiveMut<'a, T, P>","std::sys::unix::fs::ReadDir","std::path::Iter<'a>","std::string::Drain<'_>","std::collections::vec_deque::Iter<'a, T>","std::collections::btree_map::IntoIter<K, V, A>","std::collections::btree_map::Iter<'a, K, V>","std::collections::hash_set::DrainFilter<'_, K, F>","std::collections::btree_set::SymmetricDifference<'a, T>","std::sync::mpsc::TryIter<'a, T>","std::sys::unix::os::Env","std::collections::hash_map::Values<'a, K, V>","std::str::EscapeDebug<'a>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::sys::unix::args::Args","std::collections::hash_set::Drain<'a, K>","std::process::CommandArgs<'a>","std::iter::Successors<T, F>","std::collections::hash_map::Keys<'a, K, V>","std::char::EscapeDefault","std::slice::RChunksExactMut<'a, T>","std::os::unix::net::ScmCredentials<'a>","std::collections::btree_map::RangeMut<'a, K, V>","std::result::IntoIter<T>","std::env::ArgsOs","std::iter::FilterMap<I, F>","std::iter::Once<T>","std::collections::btree_set::Difference<'a, T, A>","std::ops::Range<A>","std::slice::ArrayChunks<'a, T, N>","std::str::EscapeUnicode<'a>","std::iter::Empty<T>","std::collections::linked_list::Iter<'a, T>","std::collections::binary_heap::IntoIterSorted<T>","std::collections::btree_set::Range<'a, T>","std::iter::OnceWith<F>","std::boxed::Box<I, A>","std::slice::RChunksMut<'a, T>","std::io::Lines<B>","std::str::EscapeDefault<'a>","std::slice::GroupByMut<'a, T, P>","std::str::CharIndices<'a>","std::iter::Chain<A, B>","std::str::RSplit<'a, P>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::str::Chars<'a>","std::option::IterMut<'a, A>","std::iter::Map<I, F>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::slice::ChunksExactMut<'a, T>","std::ascii::EscapeDefault","std::iter::Skip<I>","std::process::CommandEnvs<'a>","std::iter::FlatMap<I, U, F>","std::ops::RangeFrom<A>","std::fs::ReadDir","std::collections::hash_map::IntoValues<K, V>","std::iter::Peekable<I>","std::str::RMatchIndices<'a, P>","std::iter::StepBy<I>","std::iter::Copied<I>","std::sys::unix::process::process_common::CommandArgs<'a>","std::collections::binary_heap::DrainSorted<'_, T>","std::collections::hash_map::Iter<'a, K, V>","std::collections::btree_set::Union<'a, T>","std::sync::mpsc::Iter<'a, T>","std::iter::Filter<I, P>","std::os::unix::net::Messages<'a>","std::collections::hash_map::ValuesMut<'a, K, V>","std::collections::vec_deque::IterMut<'a, T>","std::slice::RSplitNMut<'a, T, P>","std::slice::SplitNMut<'a, T, P>","std::str::MatchIndices<'a, P>","std::collections::btree_set::IntoIter<T, A>","std::net::IntoIncoming","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::collections::binary_heap::Drain<'_, T>","bitflags::core::error::Source<'a>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::collections::hash_map::IntoKeys<K, V>","std::str::RSplitN<'a, P>","std::str::Split<'a, P>","std::sync::mpsc::IntoIter<T>","std::vec::IntoIter<T, A>","std::slice::RSplitN<'a, T, P>","std::iter::Fuse<I>","std::iter::Enumerate<I>","std::net::Incoming<'a>","<&mut I as std::iter::Iterator>","std::io::Split<B>","std::iter::Intersperse<I>","std::slice::RSplitMut<'a, T, P>","std::str::SplitTerminator<'a, P>","std::collections::hash_set::Union<'a, T, S>","std::collections::btree_map::Keys<'a, K, V>","std::path::Ancestors<'a>","std::iter::Cloned<I>","std::iter::TakeWhile<I, P>"],"H":["bitflags::core::error::Source<'a>","std::ops::index_range::IndexRange","std::str::RMatchIndices<'a, P>","std::iter::Intersperse<I>","std::collections::btree_set::Difference<'a, T, A>","std::env::SplitPaths<'a>","std::path::Components<'a>","std::collections::btree_map::ValuesMut<'a, K, V>","std::str::RSplitN<'a, P>","std::option::IterMut<'a, A>","std::collections::hash_map::Values<'a, K, V>","std::char::ToUppercase","std::ascii::EscapeDefault","std::collections::btree_map::Iter<'a, K, V>","std::env::ArgsOs","std::str::EscapeUnicode<'a>","std::iter::Peekable<I>","std::char::EscapeUnicode","std::iter::FromFn<F>","std::collections::binary_heap::IntoIterSorted<T>","std::iter::FlatMap<I, U, F>","std::slice::RSplitN<'a, T, P>","std::result::IntoIter<T>","std::collections::linked_list::IterMut<'a, T>","std::slice::RSplitMut<'a, T, P>","std::collections::binary_heap::IntoIter<T>","std::iter::Filter<I, P>","std::collections::hash_map::Keys<'a, K, V>","std::io::Lines<B>","std::collections::hash_map::Drain<'a, K, V>","std::ops::Range<A>","std::iter::FilterMap<I, F>","std::collections::btree_map::RangeMut<'a, K, V>","std::collections::linked_list::Iter<'a, T>","std::str::SplitWhitespace<'a>","std::collections::hash_set::Union<'a, T, S>","std::iter::Copied<I>","std::iter::OnceWith<F>","std::str::Bytes<'_>","std::iter::Map<I, F>","std::str::EscapeDefault<'a>","std::collections::btree_set::Iter<'a, T>","std::iter::SkipWhile<I, P>","std::sys_common::wstr::WStrUnits<'_>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::collections::binary_heap::Drain<'_, T>","std::slice::SplitNMut<'a, T, P>","std::slice::ArrayChunks<'a, T, N>","std::str::SplitTerminator<'a, P>","std::slice::SplitN<'a, T, P>","std::option::Item<A>","std::collections::hash_map::ValuesMut<'a, K, V>","std::os::unix::net::ScmRights<'a>","std::slice::Iter<'a, T>","std::iter::Successors<T, F>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::slice::ChunksExactMut<'a, T>","std::vec::DrainFilter<'_, T, F, A>","std::slice::SplitMut<'a, T, P>","std::iter::RepeatN<A>","std::str::EscapeDebug<'a>","std::collections::btree_set::IntoIter<T, A>","std::collections::linked_list::DrainFilter<'_, T, F>","std::slice::Windows<'a, T>","std::str::RSplit<'a, P>","std::slice::RChunksExactMut<'a, T>","std::collections::linked_list::IntoIter<T>","std::collections::hash_set::DrainFilter<'_, K, F>","std::str::MatchIndices<'a, P>","std::collections::btree_map::Range<'a, K, V>","std::iter::Fuse<I>","std::str::Matches<'a, P>","std::iter::Repeat<A>","std::iter::RepeatWith<F>","std::sys::unix::process::process_common::CommandArgs<'a>","std::slice::EscapeAscii<'a>","std::os::unix::net::ScmCredentials<'a>","std::collections::vec_deque::IntoIter<T, A>","std::io::Split<B>","std::char::EscapeDebug","std::string::Drain<'_>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::os::unix::net::Incoming<'a>","std::str::SplitInclusive<'a, P>","std::env::Vars","std::slice::SplitInclusiveMut<'a, T, P>","std::iter::Cloned<I>","std::slice::GroupByMut<'a, T, P>","std::str::Lines<'a>","std::collections::btree_set::Range<'a, T>","std::char::DecodeUtf16<I>","std::collections::btree_map::Keys<'a, K, V>","std::path::Iter<'a>","std::slice::GroupBy<'a, T, P>","std::slice::Chunks<'a, T>","std::net::Incoming<'a>","std::option::Iter<'a, A>","std::iter::adapters::GenericShunt<'_, I, R>","std::os::unix::net::Messages<'a>","std::iter::Zip<A, B>","std::collections::btree_map::IntoValues<K, V, A>","std::collections::vec_deque::Drain<'_, T, A>","std::str::CharIndices<'a>","<&mut I as std::iter::Iterator>","std::char::CaseMappingIter","std::sys::unix::os::SplitPaths<'a>","std::vec::IntoIter<T, A>","std::sys::unix::fs::ReadDir","std::iter::sources::from_generator::FromGenerator<G>","std::slice::Split<'a, T, P>","std::str::LinesAny<'a>","std::fs::ReadDir","std::boxed::Box<I, A>","std::slice::RSplitNMut<'a, T, P>","std::option::IntoIter<A>","std::vec::Splice<'_, I, A>","std::iter::TakeWhile<I, P>","std::iter::Enumerate<I>","std::collections::hash_set::Iter<'a, K>","std::iter::IntersperseWith<I, G>","std::collections::btree_map::IntoIter<K, V, A>","std::sys_common::wtf8::EncodeWide<'a>","std::str::SplitN<'a, P>","std::slice::RSplit<'a, T, P>","std::result::Iter<'a, T>","std::collections::btree_set::Union<'a, T>","std::sys::unix::os::Env","std::collections::binary_heap::DrainSorted<'_, T>","std::result::IterMut<'a, T>","std::slice::ChunksExact<'a, T>","std::iter::Cycle<I>","std::sync::mpsc::Iter<'a, T>","std::str::Split<'a, P>","std::slice::ArrayWindows<'a, T, N>","std::iter::StepBy<I>","std::iter::Take<I>","std::iter::Skip<I>","std::path::Ancestors<'a>","std::ops::RangeFrom<A>","std::collections::hash_map::IntoValues<K, V>","std::iter::Empty<T>","std::iter::ByRefSized<'_, I>","std::iter::MapWhile<I, P>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::collections::hash_map::Iter<'a, K, V>","std::vec::Drain<'_, T, A>","std::collections::btree_set::Intersection<'a, T, A>","std::str::Utf8Chunks<'a>","std::iter::Flatten<I>","std::io::Bytes<R>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::hash_set::Drain<'a, K>","std::sync::mpsc::IntoIter<T>","bitflags::core::slice::iter::GenericSplitN<I>","std::collections::btree_map::Values<'a, K, V>","std::process::CommandArgs<'a>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::collections::hash_map::IntoKeys<K, V>","std::slice::SplitInclusive<'a, T, P>","std::env::Args","std::process::CommandEnvs<'a>","std::iter::Scan<I, St, F>","std::slice::ArrayChunksMut<'a, T, N>","std::iter::ArrayChunks<I, N>","std::iter::Chain<A, B>","std::sync::mpsc::TryIter<'a, T>","std::slice::RChunksMut<'a, T>","std::iter::Once<T>","std::env::VarsOs","std::collections::btree_map::IntoKeys<K, V, A>","std::slice::ChunksMut<'a, T>","std::collections::vec_deque::IterMut<'a, T>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::char::ToLowercase","std::array::IntoIter<T, N>","std::str::Chars<'a>","std::collections::btree_set::SymmetricDifference<'a, T>","std::collections::hash_map::IntoIter<K, V>","std::collections::vec_deque::Iter<'a, T>","std::slice::IterMut<'a, T>","std::sys_common::net::LookupHost","std::collections::btree_map::IterMut<'a, K, V>","std::ops::RangeInclusive<A>","std::str::RMatches<'a, P>","std::collections::binary_heap::Iter<'a, T>","std::collections::hash_map::IterMut<'a, K, V>","std::slice::RChunksExact<'a, T>","std::collections::hash_set::Difference<'a, T, S>","std::iter::Rev<I>","std::str::RSplitTerminator<'a, P>","std::sys::unix::args::Args","std::str::SplitAsciiWhitespace<'a>","std::collections::hash_set::IntoIter<K>","std::net::IntoIncoming","std::str::EncodeUtf16<'a>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::iter::Inspect<I, F>","std::slice::RChunks<'a, T>","std::char::EscapeDefault"],"R":["std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::ops::index_range::IndexRange","std::vec::DrainFilter<'_, T, F, A>","std::iter::Once<T>","std::slice::GroupByMut<'a, T, P>","std::iter::Rev<I>","std::array::IntoIter<T, N>","std::iter::Take<I>","std::collections::hash_set::Drain<'a, K>","std::result::Iter<'a, T>","std::collections::btree_set::Union<'a, T>","std::slice::RChunks<'a, T>","std::iter::FlatMap<I, U, F>","std::iter::Inspect<I, F>","std::io::Bytes<R>","std::iter::Cloned<I>","std::sys_common::wstr::WStrUnits<'_>","std::slice::SplitInclusiveMut<'a, T, P>","std::str::MatchIndices<'a, P>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::slice::ArrayChunksMut<'a, T, N>","std::collections::binary_heap::IntoIter<T>","std::ascii::EscapeDefault","std::collections::hash_set::Union<'a, T, S>","std::sys::unix::process::process_common::CommandArgs<'a>","std::iter::StepBy<I>","std::iter::Empty<T>","std::slice::RChunksMut<'a, T>","std::iter::FromFn<F>","std::char::DecodeUtf16<I>","std::env::SplitPaths<'a>","std::result::IntoIter<T>","std::ops::RangeInclusive<A>","std::option::IntoIter<A>","std::iter::Zip<A, B>","std::str::RMatchIndices<'a, P>","std::str::EncodeUtf16<'a>","std::char::ToUppercase","std::iter::MapWhile<I, P>","std::iter::Chain<A, B>","std::slice::SplitNMut<'a, T, P>","std::slice::SplitInclusive<'a, T, P>","std::slice::GroupBy<'a, T, P>","std::option::IterMut<'a, A>","std::iter::OnceWith<F>","std::str::Split<'a, P>","std::slice::SplitMut<'a, T, P>","std::iter::sources::from_generator::FromGenerator<G>","std::str::RMatches<'a, P>","std::iter::Map<I, F>","std::slice::RSplitN<'a, T, P>","std::collections::hash_set::Iter<'a, K>","std::result::IterMut<'a, T>","std::collections::hash_map::Iter<'a, K, V>","std::process::CommandArgs<'a>","std::slice::RSplit<'a, T, P>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::iter::Intersperse<I>","std::str::EscapeDefault<'a>","std::collections::binary_heap::DrainSorted<'_, T>","std::str::SplitN<'a, P>","bitflags::core::error::Source<'a>","std::os::unix::net::Messages<'a>","std::iter::ArrayChunks<I, N>","std::str::SplitAsciiWhitespace<'a>","std::sync::mpsc::TryIter<'a, T>","std::char::ToLowercase","std::slice::ArrayWindows<'a, T, N>","std::str::EscapeUnicode<'a>","std::str::EscapeDebug<'a>","std::option::Item<A>","std::slice::SplitN<'a, T, P>","std::iter::Flatten<I>","std::str::Matches<'a, P>","<&mut I as std::iter::Iterator>","std::collections::hash_set::DrainFilter<'_, K, F>","std::slice::IterMut<'a, T>","std::vec::Splice<'_, I, A>","std::slice::ChunksMut<'a, T>","std::path::Iter<'a>","std::collections::btree_map::Iter<'a, K, V>","std::collections::vec_deque::IntoIter<T, A>","std::env::Vars","std::net::Incoming<'a>","std::iter::FilterMap<I, F>","std::iter::SkipWhile<I, P>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::collections::btree_map::Range<'a, K, V>","std::collections::btree_map::ValuesMut<'a, K, V>","std::slice::Chunks<'a, T>","std::collections::hash_map::IterMut<'a, K, V>","std::sys_common::wtf8::EncodeWide<'a>","std::collections::hash_map::ValuesMut<'a, K, V>","std::collections::vec_deque::Iter<'a, T>","std::str::SplitTerminator<'a, P>","std::collections::btree_map::IntoKeys<K, V, A>","std::sys::unix::os::Env","std::collections::hash_map::Drain<'a, K, V>","std::os::unix::net::ScmCredentials<'a>","std::slice::Split<'a, T, P>","std::iter::Filter<I, P>","std::char::EscapeDebug","std::iter::Repeat<A>","std::sync::mpsc::Iter<'a, T>","std::collections::btree_map::Values<'a, K, V>","std::ops::RangeFrom<A>","std::str::Bytes<'_>","std::collections::btree_set::Intersection<'a, T, A>","std::str::LinesAny<'a>","std::iter::RepeatN<A>","std::char::CaseMappingIter","std::str::RSplitN<'a, P>","std::collections::hash_map::IntoKeys<K, V>","std::slice::RSplitMut<'a, T, P>","std::iter::Cycle<I>","std::collections::linked_list::IntoIter<T>","std::collections::btree_map::RangeMut<'a, K, V>","std::slice::ArrayChunks<'a, T, N>","std::str::RSplitTerminator<'a, P>","std::os::unix::net::Incoming<'a>","std::collections::binary_heap::Drain<'_, T>","std::str::Chars<'a>","std::collections::hash_set::IntoIter<K>","std::collections::btree_set::DrainFilter<'_, T, F, A>","bitflags::core::slice::iter::GenericSplitN<I>","std::collections::btree_map::IntoIter<K, V, A>","std::slice::RChunksExactMut<'a, T>","std::sys::unix::fs::ReadDir","std::vec::Drain<'_, T, A>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::env::ArgsOs","std::collections::btree_set::SymmetricDifference<'a, T>","std::slice::ChunksExactMut<'a, T>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::iter::ByRefSized<'_, I>","std::slice::RChunksExact<'a, T>","std::iter::Peekable<I>","std::collections::linked_list::IterMut<'a, T>","std::slice::EscapeAscii<'a>","std::char::EscapeUnicode","std::collections::hash_map::IntoValues<K, V>","std::io::Lines<B>","std::slice::RSplitNMut<'a, T, P>","std::collections::hash_set::Difference<'a, T, S>","std::iter::IntersperseWith<I, G>","std::iter::Fuse<I>","std::str::CharIndices<'a>","std::collections::binary_heap::IntoIterSorted<T>","std::iter::Enumerate<I>","std::collections::linked_list::Iter<'a, T>","std::str::SplitInclusive<'a, P>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::hash_map::IntoIter<K, V>","std::string::Drain<'_>","std::path::Ancestors<'a>","std::env::VarsOs","std::char::EscapeDefault","std::sys::unix::args::Args","std::collections::binary_heap::Iter<'a, T>","std::io::Split<B>","std::collections::btree_set::Difference<'a, T, A>","std::os::unix::net::ScmRights<'a>","std::fs::ReadDir","std::iter::adapters::GenericShunt<'_, I, R>","std::str::SplitWhitespace<'a>","std::iter::TakeWhile<I, P>","std::str::Lines<'a>","std::str::Utf8Chunks<'a>","std::net::IntoIncoming","std::path::Components<'a>","std::iter::Copied<I>","std::str::RSplit<'a, P>","std::slice::Iter<'a, T>","std::collections::btree_set::Iter<'a, T>","std::iter::Successors<T, F>","std::collections::btree_map::IntoValues<K, V, A>","std::sync::mpsc::IntoIter<T>","std::collections::hash_map::Keys<'a, K, V>","std::collections::btree_set::Range<'a, T>","std::option::Iter<'a, A>","std::iter::Skip<I>","std::sys_common::net::LookupHost","std::sys::unix::os::SplitPaths<'a>","std::boxed::Box<I, A>","std::collections::linked_list::DrainFilter<'_, T, F>","std::collections::hash_map::Values<'a, K, V>","std::collections::vec_deque::IterMut<'a, T>","std::iter::RepeatWith<F>","std::collections::hash_set::Intersection<'a, T, S>","std::ops::Range<A>","std::collections::btree_set::IntoIter<T, A>","std::slice::ChunksExact<'a, T>","std::iter::Scan<I, St, F>","std::collections::btree_map::Keys<'a, K, V>","std::vec::IntoIter<T, A>","std::env::Args","std::process::CommandEnvs<'a>","std::collections::btree_map::IterMut<'a, K, V>","std::slice::Windows<'a, T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::table::Table<'a, H, R>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.style(p1);
+widgets::table::Table::<'a, H, R>::style(p0, p1);
+crate::widgets::table::Table::<'a, H, R>::style(p0, p1);
+<widgets::table::Table<'a, H, R>>::style(p0, p1);
-----------------
src/widgets/table.rs widgets::table::Table::<'a, H, R>::highlight_symbol
'a
deps:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::highlight_symbol":{"<D as std::iter::Iterator>::Item":["std::fmt::Display"],"D":["std::marker::Sized","std::iter::Iterator"],"H":["std::iter::Iterator","std::marker::Sized"],"R":["std::iter::Iterator","std::marker::Sized"]}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::highlight_symbol":{"<D as std::iter::Iterator>::Item":["backend::termion::Bg","backend::termion::ModifierDiff","<&T as std::fmt::Display>","backend::termion::Fg"],"D":["std::str::EscapeDefault<'a>","std::str::EscapeDebug<'a>","std::sys_common::wtf8::EncodeWide<'a>","std::collections::hash_map::Iter<'a, K, V>","std::iter::adapters::GenericShunt<'_, I, R>","std::sys::unix::os::Env","std::iter::OnceWith<F>","std::iter::ByRefSized<'_, I>","std::slice::Iter<'a, T>","std::slice::Windows<'a, T>","std::io::Split<B>","std::boxed::Box<I, A>","std::collections::binary_heap::IntoIter<T>","std::str::SplitInclusive<'a, P>","std::collections::hash_set::IntoIter<K>","std::str::SplitTerminator<'a, P>","std::iter::SkipWhile<I, P>","std::collections::hash_set::Iter<'a, K>","std::slice::Chunks<'a, T>","std::iter::IntersperseWith<I, G>","std::iter::Take<I>","std::collections::btree_set::IntoIter<T, A>","std::collections::hash_map::IntoKeys<K, V>","std::collections::linked_list::IterMut<'a, T>","std::net::IntoIncoming","std::io::Bytes<R>","std::process::CommandArgs<'a>","std::char::CaseMappingIter","std::str::Chars<'a>","std::collections::hash_set::DrainFilter<'_, K, F>","std::collections::hash_map::IntoValues<K, V>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::sync::mpsc::TryIter<'a, T>","std::collections::btree_map::IntoValues<K, V, A>","std::slice::ArrayChunksMut<'a, T, N>","std::iter::Copied<I>","std::ops::Range<A>","std::iter::Chain<A, B>","std::str::SplitWhitespace<'a>","std::collections::binary_heap::IntoIterSorted<T>","std::str::RSplitN<'a, P>","std::ascii::EscapeDefault","std::iter::Zip<A, B>","std::env::ArgsOs","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::collections::btree_map::IntoIter<K, V, A>","std::collections::btree_set::Iter<'a, T>","std::collections::binary_heap::DrainSorted<'_, T>","std::collections::hash_map::Keys<'a, K, V>","std::iter::Successors<T, F>","std::collections::binary_heap::Iter<'a, T>","std::option::IterMut<'a, A>","std::path::Iter<'a>","std::collections::btree_set::Difference<'a, T, A>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::process::CommandEnvs<'a>","std::collections::vec_deque::Iter<'a, T>","std::iter::Once<T>","std::slice::IterMut<'a, T>","std::slice::RChunksExact<'a, T>","std::char::ToLowercase","std::slice::Split<'a, T, P>","std::sync::mpsc::IntoIter<T>","std::str::Bytes<'_>","std::collections::hash_set::Difference<'a, T, S>","std::collections::btree_set::Intersection<'a, T, A>","std::vec::DrainFilter<'_, T, F, A>","std::iter::Enumerate<I>","std::collections::hash_set::Union<'a, T, S>","std::str::LinesAny<'a>","std::str::RMatches<'a, P>","std::net::Incoming<'a>","std::str::RSplitTerminator<'a, P>","std::vec::IntoIter<T, A>","std::str::Split<'a, P>","std::env::Args","std::iter::Rev<I>","std::ops::index_range::IndexRange","std::slice::RChunksExactMut<'a, T>","std::iter::Intersperse<I>","std::fs::ReadDir","std::iter::Filter<I, P>","std::slice::ChunksExactMut<'a, T>","std::iter::Cycle<I>","std::collections::btree_map::Keys<'a, K, V>","std::iter::RepeatWith<F>","std::char::EscapeUnicode","std::option::Iter<'a, A>","std::collections::linked_list::DrainFilter<'_, T, F>","std::ops::RangeInclusive<A>","std::option::IntoIter<A>","std::collections::hash_set::Intersection<'a, T, S>","std::str::EncodeUtf16<'a>","std::env::Vars","std::slice::EscapeAscii<'a>","std::os::unix::net::ScmCredentials<'a>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::vec::Splice<'_, I, A>","std::str::Lines<'a>","std::collections::btree_map::Range<'a, K, V>","std::sys::unix::args::Args","std::str::SplitN<'a, P>","std::iter::Repeat<A>","std::collections::btree_set::Range<'a, T>","std::iter::TakeWhile<I, P>","std::collections::btree_map::IntoKeys<K, V, A>","std::collections::linked_list::Iter<'a, T>","std::iter::FilterMap<I, F>","std::iter::Peekable<I>","std::slice::ChunksMut<'a, T>","std::iter::Skip<I>","std::str::Matches<'a, P>","std::slice::ArrayChunks<'a, T, N>","std::slice::RSplitNMut<'a, T, P>","std::collections::btree_set::SymmetricDifference<'a, T>","std::sys_common::wstr::WStrUnits<'_>","std::array::IntoIter<T, N>","std::iter::Map<I, F>","std::slice::SplitN<'a, T, P>","std::env::SplitPaths<'a>","std::sys::unix::process::process_common::CommandArgs<'a>","std::sys_common::wtf8::Wtf8CodePoints<'a>","bitflags::core::slice::iter::GenericSplitN<I>","std::slice::ArrayWindows<'a, T, N>","std::os::unix::net::Incoming<'a>","std::slice::SplitNMut<'a, T, P>","std::iter::Inspect<I, F>","std::slice::RChunksMut<'a, T>","std::collections::hash_map::IntoIter<K, V>","std::slice::GroupByMut<'a, T, P>","std::collections::btree_map::RangeMut<'a, K, V>","std::char::DecodeUtf16<I>","std::slice::SplitInclusiveMut<'a, T, P>","std::path::Components<'a>","std::iter::Fuse<I>","std::slice::RSplitN<'a, T, P>","std::slice::ChunksExact<'a, T>","std::os::unix::net::Messages<'a>","std::slice::GroupBy<'a, T, P>","std::collections::hash_map::ValuesMut<'a, K, V>","std::str::SplitAsciiWhitespace<'a>","std::slice::SplitInclusive<'a, T, P>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::sys::unix::fs::ReadDir","std::collections::binary_heap::Drain<'_, T>","std::sys_common::net::LookupHost","std::str::CharIndices<'a>","std::iter::StepBy<I>","std::io::Lines<B>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::str::MatchIndices<'a, P>","std::str::RSplit<'a, P>","std::collections::hash_map::IterMut<'a, K, V>","std::collections::btree_set::Union<'a, T>","std::collections::vec_deque::Drain<'_, T, A>","std::iter::MapWhile<I, P>","std::iter::Scan<I, St, F>","std::os::unix::net::ScmRights<'a>","std::result::Iter<'a, T>","std::vec::Drain<'_, T, A>","std::sync::mpsc::Iter<'a, T>","std::char::EscapeDebug","std::collections::btree_map::Values<'a, K, V>","std::str::RMatchIndices<'a, P>","std::slice::RSplitMut<'a, T, P>","std::collections::btree_map::ValuesMut<'a, K, V>","std::collections::hash_set::Drain<'a, K>","std::slice::SplitMut<'a, T, P>","std::collections::linked_list::IntoIter<T>","std::collections::btree_map::Iter<'a, K, V>","std::env::VarsOs","std::collections::hash_map::Values<'a, K, V>","std::str::EscapeUnicode<'a>","<&mut I as std::iter::Iterator>","std::collections::vec_deque::IntoIter<T, A>","std::iter::Flatten<I>","std::path::Ancestors<'a>","std::iter::Cloned<I>","std::slice::RSplit<'a, T, P>","std::str::Utf8Chunks<'a>","std::iter::sources::from_generator::FromGenerator<G>","std::iter::FlatMap<I, U, F>","std::iter::RepeatN<A>","std::iter::FromFn<F>","std::option::Item<A>","std::string::Drain<'_>","std::iter::Empty<T>","std::char::EscapeDefault","std::collections::hash_map::Drain<'a, K, V>","std::slice::RChunks<'a, T>","std::collections::btree_map::IterMut<'a, K, V>","std::ops::RangeFrom<A>","std::char::ToUppercase","std::result::IterMut<'a, T>","std::collections::vec_deque::IterMut<'a, T>","std::iter::ArrayChunks<I, N>","bitflags::core::error::Source<'a>","std::result::IntoIter<T>","std::sys::unix::os::SplitPaths<'a>"],"H":["std::os::unix::net::ScmRights<'a>","std::iter::MapWhile<I, P>","std::str::MatchIndices<'a, P>","std::iter::Skip<I>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::collections::hash_map::IntoIter<K, V>","std::iter::Take<I>","std::slice::Split<'a, T, P>","std::char::ToUppercase","std::collections::hash_set::Drain<'a, K>","std::iter::Inspect<I, F>","std::net::Incoming<'a>","std::env::Vars","std::ops::index_range::IndexRange","std::slice::Chunks<'a, T>","std::collections::btree_set::Difference<'a, T, A>","std::str::RMatchIndices<'a, P>","std::str::SplitN<'a, P>","std::char::ToLowercase","std::iter::Scan<I, St, F>","std::str::Matches<'a, P>","std::result::Iter<'a, T>","std::str::RMatches<'a, P>","std::iter::Once<T>","<&mut I as std::iter::Iterator>","std::iter::Filter<I, P>","std::slice::ArrayChunksMut<'a, T, N>","std::slice::ArrayWindows<'a, T, N>","std::iter::RepeatWith<F>","std::collections::hash_map::Iter<'a, K, V>","std::collections::btree_map::IntoKeys<K, V, A>","std::path::Components<'a>","std::collections::btree_map::Range<'a, K, V>","std::slice::GroupBy<'a, T, P>","std::env::Args","std::slice::Iter<'a, T>","std::env::VarsOs","std::sys_common::net::LookupHost","std::slice::ChunksExactMut<'a, T>","std::slice::RSplitMut<'a, T, P>","std::collections::hash_map::Drain<'a, K, V>","std::collections::binary_heap::Iter<'a, T>","std::iter::OnceWith<F>","std::result::IterMut<'a, T>","std::ops::RangeFrom<A>","bitflags::core::slice::iter::GenericSplitN<I>","std::collections::linked_list::DrainFilter<'_, T, F>","std::collections::hash_set::Iter<'a, K>","std::str::Bytes<'_>","std::iter::adapters::GenericShunt<'_, I, R>","std::collections::btree_map::IterMut<'a, K, V>","std::iter::Chain<A, B>","std::iter::IntersperseWith<I, G>","std::iter::Flatten<I>","std::collections::btree_map::IntoValues<K, V, A>","std::ops::RangeInclusive<A>","std::collections::btree_map::RangeMut<'a, K, V>","std::collections::hash_map::Values<'a, K, V>","std::os::unix::net::Incoming<'a>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::slice::RSplitNMut<'a, T, P>","std::str::Split<'a, P>","std::str::RSplit<'a, P>","std::iter::Zip<A, B>","std::str::SplitTerminator<'a, P>","std::slice::SplitNMut<'a, T, P>","std::collections::hash_set::Difference<'a, T, S>","std::collections::btree_map::Keys<'a, K, V>","std::sys::unix::process::process_common::CommandArgs<'a>","std::option::IntoIter<A>","std::collections::vec_deque::Iter<'a, T>","std::iter::Copied<I>","std::collections::btree_map::IntoIter<K, V, A>","std::iter::Successors<T, F>","std::ascii::EscapeDefault","std::str::EscapeDefault<'a>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::path::Iter<'a>","std::slice::RChunks<'a, T>","std::process::CommandArgs<'a>","std::vec::DrainFilter<'_, T, F, A>","std::process::CommandEnvs<'a>","std::collections::linked_list::IterMut<'a, T>","std::slice::RChunksExact<'a, T>","std::collections::hash_map::IntoValues<K, V>","std::string::Drain<'_>","std::collections::btree_map::Iter<'a, K, V>","std::collections::btree_set::Intersection<'a, T, A>","std::slice::SplitMut<'a, T, P>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::char::EscapeDebug","std::iter::Cloned<I>","std::fs::ReadDir","std::collections::vec_deque::Drain<'_, T, A>","std::collections::hash_set::IntoIter<K>","std::slice::EscapeAscii<'a>","std::boxed::Box<I, A>","std::str::RSplitN<'a, P>","std::slice::SplitN<'a, T, P>","std::collections::hash_set::DrainFilter<'_, K, F>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::collections::binary_heap::Drain<'_, T>","std::slice::RSplit<'a, T, P>","std::collections::vec_deque::IntoIter<T, A>","std::collections::btree_set::IntoIter<T, A>","std::iter::FromFn<F>","std::str::LinesAny<'a>","std::env::ArgsOs","std::result::IntoIter<T>","std::iter::Fuse<I>","std::slice::RChunksExactMut<'a, T>","std::iter::ByRefSized<'_, I>","std::slice::IterMut<'a, T>","std::slice::ArrayChunks<'a, T, N>","std::collections::btree_map::ValuesMut<'a, K, V>","std::collections::hash_map::IntoKeys<K, V>","std::iter::Map<I, F>","std::collections::btree_set::Range<'a, T>","std::str::EncodeUtf16<'a>","std::iter::ArrayChunks<I, N>","std::str::Utf8Chunks<'a>","std::collections::binary_heap::IntoIterSorted<T>","std::slice::ChunksMut<'a, T>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::vec::Drain<'_, T, A>","std::collections::btree_set::Union<'a, T>","std::iter::FilterMap<I, F>","std::char::EscapeUnicode","std::iter::sources::from_generator::FromGenerator<G>","std::iter::Peekable<I>","std::collections::hash_set::Union<'a, T, S>","std::vec::Splice<'_, I, A>","std::iter::Empty<T>","std::collections::linked_list::IntoIter<T>","std::os::unix::net::ScmCredentials<'a>","std::char::CaseMappingIter","std::iter::TakeWhile<I, P>","std::str::EscapeDebug<'a>","std::collections::binary_heap::DrainSorted<'_, T>","std::iter::Rev<I>","std::str::SplitInclusive<'a, P>","std::iter::RepeatN<A>","std::collections::linked_list::Iter<'a, T>","std::slice::RChunksMut<'a, T>","std::iter::Repeat<A>","std::iter::StepBy<I>","std::iter::Intersperse<I>","std::char::DecodeUtf16<I>","std::sync::mpsc::TryIter<'a, T>","std::sys::unix::os::Env","std::ops::Range<A>","std::option::IterMut<'a, A>","std::collections::hash_map::Keys<'a, K, V>","std::char::EscapeDefault","std::str::RSplitTerminator<'a, P>","std::iter::Cycle<I>","std::sys::unix::args::Args","std::collections::hash_map::IterMut<'a, K, V>","std::io::Bytes<R>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::sync::mpsc::Iter<'a, T>","std::collections::btree_set::Iter<'a, T>","std::slice::SplitInclusive<'a, T, P>","std::sys_common::wstr::WStrUnits<'_>","std::collections::binary_heap::IntoIter<T>","std::slice::Windows<'a, T>","std::path::Ancestors<'a>","bitflags::core::error::Source<'a>","std::collections::btree_map::Values<'a, K, V>","std::slice::ChunksExact<'a, T>","std::sys_common::wtf8::EncodeWide<'a>","std::iter::FlatMap<I, U, F>","std::env::SplitPaths<'a>","std::vec::IntoIter<T, A>","std::collections::hash_map::ValuesMut<'a, K, V>","std::str::EscapeUnicode<'a>","std::io::Split<B>","std::slice::RSplitN<'a, T, P>","std::str::SplitWhitespace<'a>","std::iter::Enumerate<I>","std::str::CharIndices<'a>","std::sys::unix::fs::ReadDir","std::collections::vec_deque::IterMut<'a, T>","std::io::Lines<B>","std::iter::SkipWhile<I, P>","std::option::Item<A>","std::slice::GroupByMut<'a, T, P>","std::str::Lines<'a>","std::str::Chars<'a>","std::array::IntoIter<T, N>","std::slice::SplitInclusiveMut<'a, T, P>","std::net::IntoIncoming","std::sync::mpsc::IntoIter<T>","std::collections::btree_set::SymmetricDifference<'a, T>","std::os::unix::net::Messages<'a>","std::option::Iter<'a, A>","std::str::SplitAsciiWhitespace<'a>","std::collections::hash_set::Intersection<'a, T, S>","std::sys::unix::os::SplitPaths<'a>"],"R":["std::collections::hash_map::Drain<'a, K, V>","std::iter::Take<I>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::iter::FilterMap<I, F>","std::slice::RChunksExact<'a, T>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::iter::Cloned<I>","std::collections::binary_heap::IntoIterSorted<T>","std::str::Split<'a, P>","std::option::IterMut<'a, A>","std::collections::btree_map::RangeMut<'a, K, V>","std::iter::IntersperseWith<I, G>","std::process::CommandEnvs<'a>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::sync::mpsc::Iter<'a, T>","std::iter::Skip<I>","std::slice::ChunksExactMut<'a, T>","bitflags::core::error::Source<'a>","std::collections::btree_map::Range<'a, K, V>","std::str::SplitN<'a, P>","std::str::EscapeDefault<'a>","std::sys::unix::process::process_common::CommandArgs<'a>","std::option::Item<A>","std::str::LinesAny<'a>","std::iter::Chain<A, B>","std::collections::binary_heap::Iter<'a, T>","std::slice::SplitN<'a, T, P>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::str::EscapeDebug<'a>","std::sys::unix::os::SplitPaths<'a>","std::process::CommandArgs<'a>","std::os::unix::net::ScmRights<'a>","std::collections::btree_set::Union<'a, T>","std::char::EscapeDefault","std::string::Drain<'_>","std::sys::unix::args::Args","std::str::CharIndices<'a>","std::str::SplitWhitespace<'a>","std::collections::hash_map::IterMut<'a, K, V>","std::ascii::EscapeDefault","std::iter::FlatMap<I, U, F>","std::collections::binary_heap::DrainSorted<'_, T>","std::str::RSplitN<'a, P>","std::slice::GroupBy<'a, T, P>","std::collections::btree_map::Iter<'a, K, V>","std::collections::linked_list::IterMut<'a, T>","std::str::SplitInclusive<'a, P>","std::sync::mpsc::IntoIter<T>","std::slice::GroupByMut<'a, T, P>","std::collections::hash_set::IntoIter<K>","std::char::DecodeUtf16<I>","std::str::EscapeUnicode<'a>","std::ops::Range<A>","std::collections::linked_list::Iter<'a, T>","std::io::Lines<B>","std::slice::IterMut<'a, T>","std::collections::hash_map::IntoIter<K, V>","std::str::Chars<'a>","std::slice::RSplitN<'a, T, P>","std::slice::SplitMut<'a, T, P>","std::collections::hash_map::Values<'a, K, V>","std::slice::RChunks<'a, T>","std::sys_common::wtf8::EncodeWide<'a>","std::collections::linked_list::IntoIter<T>","std::collections::btree_map::IntoIter<K, V, A>","std::collections::btree_map::ValuesMut<'a, K, V>","std::sys::unix::fs::ReadDir","std::result::Iter<'a, T>","std::env::ArgsOs","std::iter::Once<T>","std::iter::ArrayChunks<I, N>","std::result::IntoIter<T>","std::net::IntoIncoming","std::slice::Split<'a, T, P>","std::iter::Map<I, F>","std::collections::linked_list::DrainFilter<'_, T, F>","std::sys_common::wstr::WStrUnits<'_>","std::iter::Inspect<I, F>","std::iter::Empty<T>","std::slice::Windows<'a, T>","std::str::Matches<'a, P>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::btree_map::Values<'a, K, V>","std::collections::hash_map::ValuesMut<'a, K, V>","std::iter::OnceWith<F>","std::str::RMatchIndices<'a, P>","std::collections::vec_deque::Iter<'a, T>","std::iter::Successors<T, F>","std::vec::IntoIter<T, A>","std::collections::btree_set::Intersection<'a, T, A>","std::collections::hash_set::DrainFilter<'_, K, F>","std::env::VarsOs","std::sys_common::net::LookupHost","std::iter::Intersperse<I>","std::iter::Copied<I>","std::collections::btree_map::IntoKeys<K, V, A>","std::iter::Enumerate<I>","std::path::Iter<'a>","std::collections::hash_map::Keys<'a, K, V>","std::io::Split<B>","std::str::Bytes<'_>","std::collections::hash_set::Iter<'a, K>","std::slice::ArrayChunksMut<'a, T, N>","std::collections::btree_map::Keys<'a, K, V>","std::ops::RangeInclusive<A>","std::collections::vec_deque::IntoIter<T, A>","std::slice::RSplitNMut<'a, T, P>","std::array::IntoIter<T, N>","std::iter::Flatten<I>","std::str::MatchIndices<'a, P>","std::char::ToUppercase","std::ops::RangeFrom<A>","std::collections::hash_set::Union<'a, T, S>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::sys::unix::os::Env","std::slice::SplitInclusiveMut<'a, T, P>","std::ops::index_range::IndexRange","std::vec::Drain<'_, T, A>","std::result::IterMut<'a, T>","std::iter::sources::from_generator::FromGenerator<G>","std::option::IntoIter<A>","std::iter::adapters::GenericShunt<'_, I, R>","std::slice::ArrayChunks<'a, T, N>","std::slice::RChunksMut<'a, T>","std::char::EscapeDebug","std::collections::hash_set::Difference<'a, T, S>","std::collections::btree_set::SymmetricDifference<'a, T>","std::collections::btree_map::IntoValues<K, V, A>","std::os::unix::net::Messages<'a>","std::slice::ChunksMut<'a, T>","std::os::unix::net::Incoming<'a>","std::slice::RSplitMut<'a, T, P>","std::slice::SplitInclusive<'a, T, P>","std::iter::Cycle<I>","std::vec::Splice<'_, I, A>","std::iter::Peekable<I>","std::collections::hash_set::Drain<'a, K>","std::slice::RChunksExactMut<'a, T>","std::iter::RepeatN<A>","std::env::Args","std::os::unix::net::ScmCredentials<'a>","std::collections::vec_deque::IterMut<'a, T>","std::collections::binary_heap::IntoIter<T>","std::iter::StepBy<I>","std::char::ToLowercase","std::collections::btree_set::Iter<'a, T>","std::slice::Chunks<'a, T>","std::sync::mpsc::TryIter<'a, T>","std::iter::Repeat<A>","std::str::Lines<'a>","std::collections::hash_map::IntoKeys<K, V>","std::collections::hash_set::Intersection<'a, T, S>","std::str::RMatches<'a, P>","std::slice::RSplit<'a, T, P>","std::iter::MapWhile<I, P>","std::net::Incoming<'a>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::iter::TakeWhile<I, P>","std::iter::Zip<A, B>","std::collections::hash_map::IntoValues<K, V>","std::vec::DrainFilter<'_, T, F, A>","std::collections::hash_map::Iter<'a, K, V>","std::slice::SplitNMut<'a, T, P>","std::option::Iter<'a, A>","std::iter::Scan<I, St, F>","bitflags::core::slice::iter::GenericSplitN<I>","std::iter::Fuse<I>","std::str::RSplitTerminator<'a, P>","std::iter::Filter<I, P>","std::str::SplitAsciiWhitespace<'a>","std::char::EscapeUnicode","std::str::EncodeUtf16<'a>","std::collections::btree_set::Range<'a, T>","std::boxed::Box<I, A>","std::iter::SkipWhile<I, P>","std::io::Bytes<R>","std::collections::binary_heap::Drain<'_, T>","std::str::Utf8Chunks<'a>","std::iter::FromFn<F>","std::str::RSplit<'a, P>","std::env::Vars","std::slice::EscapeAscii<'a>","std::char::CaseMappingIter","std::slice::ChunksExact<'a, T>","std::collections::btree_map::IterMut<'a, K, V>","std::path::Components<'a>","std::slice::Iter<'a, T>","std::str::SplitTerminator<'a, P>","std::fs::ReadDir","std::collections::btree_set::IntoIter<T, A>","std::collections::btree_set::Difference<'a, T, A>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::iter::ByRefSized<'_, I>","<&mut I as std::iter::Iterator>","std::env::SplitPaths<'a>","std::iter::RepeatWith<F>","std::slice::ArrayWindows<'a, T, N>","std::iter::Rev<I>","std::path::Ancestors<'a>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::table::Table<'a, H, R>
let mut p1 = "sample"; // None+&str
+p0.highlight_symbol(&p1);
+widgets::table::Table::<'a, H, R>::highlight_symbol(p0, &p1);
+crate::widgets::table::Table::<'a, H, R>::highlight_symbol(p0, &p1);
+<widgets::table::Table<'a, H, R>>::highlight_symbol(p0, &p1);
-----------------
src/widgets/table.rs widgets::table::Table::<'a, H, R>::highlight_style
'a
deps:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::highlight_style":{"<D as std::iter::Iterator>::Item":["std::fmt::Display"],"D":["std::marker::Sized","std::iter::Iterator"],"H":["std::marker::Sized","std::iter::Iterator"],"R":["std::marker::Sized","std::iter::Iterator"]}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::highlight_style":{"<D as std::iter::Iterator>::Item":["backend::termion::ModifierDiff","backend::termion::Fg","<&T as std::fmt::Display>","backend::termion::Bg"],"D":["std::iter::Peekable<I>","std::char::ToUppercase","std::iter::Scan<I, St, F>","std::iter::Map<I, F>","std::collections::linked_list::IntoIter<T>","std::slice::Windows<'a, T>","std::io::Bytes<R>","std::iter::Skip<I>","std::char::EscapeUnicode","std::str::RMatchIndices<'a, P>","std::sys_common::net::LookupHost","std::slice::RChunksMut<'a, T>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::hash_map::ValuesMut<'a, K, V>","std::ops::Range<A>","std::result::IntoIter<T>","std::collections::hash_set::Iter<'a, K>","std::sys::unix::args::Args","std::collections::btree_set::Union<'a, T>","std::collections::binary_heap::Iter<'a, T>","std::str::RSplitTerminator<'a, P>","std::char::EscapeDefault","std::os::unix::net::Messages<'a>","std::io::Lines<B>","std::option::Item<A>","std::result::IterMut<'a, T>","std::slice::SplitMut<'a, T, P>","std::slice::ChunksExact<'a, T>","std::slice::RSplitNMut<'a, T, P>","std::iter::OnceWith<F>","std::collections::hash_set::Union<'a, T, S>","std::str::RSplit<'a, P>","std::collections::hash_set::Intersection<'a, T, S>","std::iter::TakeWhile<I, P>","std::sync::mpsc::IntoIter<T>","std::slice::SplitNMut<'a, T, P>","std::vec::Drain<'_, T, A>","std::collections::btree_set::Iter<'a, T>","std::iter::FromFn<F>","std::ops::RangeFrom<A>","std::iter::Cycle<I>","std::str::Utf8Chunks<'a>","std::env::Vars","std::iter::ByRefSized<'_, I>","std::collections::linked_list::DrainFilter<'_, T, F>","std::collections::btree_set::IntoIter<T, A>","std::str::MatchIndices<'a, P>","std::slice::SplitN<'a, T, P>","std::result::Iter<'a, T>","std::path::Iter<'a>","std::iter::SkipWhile<I, P>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::env::VarsOs","std::slice::ChunksExactMut<'a, T>","std::ascii::EscapeDefault","std::collections::hash_map::Drain<'a, K, V>","std::net::IntoIncoming","std::slice::RChunksExactMut<'a, T>","std::iter::adapters::GenericShunt<'_, I, R>","std::iter::Flatten<I>","std::iter::Take<I>","std::slice::SplitInclusiveMut<'a, T, P>","std::collections::btree_map::Values<'a, K, V>","std::path::Components<'a>","std::str::Lines<'a>","std::collections::btree_map::ValuesMut<'a, K, V>","std::sync::mpsc::Iter<'a, T>","std::collections::hash_map::IntoValues<K, V>","std::slice::RChunks<'a, T>","std::ops::index_range::IndexRange","std::collections::btree_map::IterMut<'a, K, V>","std::str::Split<'a, P>","std::collections::hash_map::IntoKeys<K, V>","std::iter::RepeatWith<F>","std::iter::Zip<A, B>","<&mut I as std::iter::Iterator>","std::slice::ArrayChunksMut<'a, T, N>","std::collections::btree_set::Intersection<'a, T, A>","std::str::RSplitN<'a, P>","std::env::ArgsOs","std::process::CommandEnvs<'a>","std::slice::RSplitMut<'a, T, P>","std::slice::Chunks<'a, T>","std::collections::hash_map::Iter<'a, K, V>","std::slice::Iter<'a, T>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::str::EscapeDefault<'a>","std::iter::Rev<I>","std::collections::btree_set::Difference<'a, T, A>","bitflags::core::slice::iter::GenericSplitN<I>","std::str::Matches<'a, P>","std::iter::Once<T>","std::collections::hash_set::DrainFilter<'_, K, F>","std::str::CharIndices<'a>","std::vec::Splice<'_, I, A>","std::collections::btree_map::RangeMut<'a, K, V>","std::str::SplitInclusive<'a, P>","std::str::Bytes<'_>","std::option::IterMut<'a, A>","std::iter::Fuse<I>","std::sys::unix::fs::ReadDir","std::iter::Inspect<I, F>","std::iter::IntersperseWith<I, G>","std::slice::RSplitN<'a, T, P>","std::collections::btree_map::Keys<'a, K, V>","std::option::IntoIter<A>","std::slice::ArrayWindows<'a, T, N>","std::net::Incoming<'a>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::iter::MapWhile<I, P>","std::sys::unix::os::SplitPaths<'a>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::str::SplitTerminator<'a, P>","std::slice::EscapeAscii<'a>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::fs::ReadDir","std::boxed::Box<I, A>","std::str::RMatches<'a, P>","std::iter::Enumerate<I>","std::slice::IterMut<'a, T>","std::char::DecodeUtf16<I>","std::str::SplitWhitespace<'a>","std::slice::ArrayChunks<'a, T, N>","std::iter::StepBy<I>","std::str::EncodeUtf16<'a>","std::sys::unix::os::Env","std::option::Iter<'a, A>","bitflags::core::error::Source<'a>","std::collections::hash_set::Drain<'a, K>","std::slice::ChunksMut<'a, T>","std::os::unix::net::Incoming<'a>","std::sync::mpsc::TryIter<'a, T>","std::sys_common::wstr::WStrUnits<'_>","std::iter::Filter<I, P>","std::str::EscapeUnicode<'a>","std::collections::hash_map::IntoIter<K, V>","std::vec::DrainFilter<'_, T, F, A>","std::str::SplitN<'a, P>","std::collections::vec_deque::Iter<'a, T>","std::os::unix::net::ScmRights<'a>","std::collections::btree_map::IntoValues<K, V, A>","std::env::Args","std::iter::Repeat<A>","std::collections::btree_set::SymmetricDifference<'a, T>","std::iter::Empty<T>","std::string::Drain<'_>","std::slice::RChunksExact<'a, T>","std::collections::hash_map::Values<'a, K, V>","std::process::CommandArgs<'a>","std::collections::hash_set::IntoIter<K>","std::collections::hash_set::Difference<'a, T, S>","std::collections::linked_list::Iter<'a, T>","std::collections::binary_heap::DrainSorted<'_, T>","std::iter::Successors<T, F>","std::collections::btree_set::Range<'a, T>","std::str::Chars<'a>","std::char::CaseMappingIter","std::collections::hash_map::Keys<'a, K, V>","std::collections::btree_map::IntoKeys<K, V, A>","std::path::Ancestors<'a>","std::collections::hash_map::IterMut<'a, K, V>","std::collections::binary_heap::IntoIter<T>","std::str::EscapeDebug<'a>","std::iter::RepeatN<A>","std::ops::RangeInclusive<A>","std::io::Split<B>","std::iter::Chain<A, B>","std::str::SplitAsciiWhitespace<'a>","std::iter::sources::from_generator::FromGenerator<G>","std::collections::btree_map::IntoIter<K, V, A>","std::vec::IntoIter<T, A>","std::collections::linked_list::IterMut<'a, T>","std::collections::binary_heap::IntoIterSorted<T>","std::iter::ArrayChunks<I, N>","std::collections::vec_deque::IntoIter<T, A>","std::str::LinesAny<'a>","std::collections::vec_deque::IterMut<'a, T>","std::collections::btree_map::Iter<'a, K, V>","std::slice::Split<'a, T, P>","std::slice::SplitInclusive<'a, T, P>","std::env::SplitPaths<'a>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::collections::binary_heap::Drain<'_, T>","std::char::ToLowercase","std::slice::GroupByMut<'a, T, P>","std::slice::RSplit<'a, T, P>","std::iter::Copied<I>","std::sys_common::wtf8::EncodeWide<'a>","std::sys::unix::process::process_common::CommandArgs<'a>","std::iter::Cloned<I>","std::iter::Intersperse<I>","std::iter::FilterMap<I, F>","std::char::EscapeDebug","std::iter::FlatMap<I, U, F>","std::collections::btree_map::Range<'a, K, V>","std::os::unix::net::ScmCredentials<'a>","std::array::IntoIter<T, N>","std::slice::GroupBy<'a, T, P>"],"H":["std::collections::vec_deque::Iter<'a, T>","std::vec::DrainFilter<'_, T, F, A>","std::iter::Chain<A, B>","std::ops::Range<A>","std::str::Bytes<'_>","std::string::Drain<'_>","std::collections::btree_map::Keys<'a, K, V>","std::iter::Peekable<I>","std::iter::FromFn<F>","std::char::EscapeDebug","std::collections::hash_set::Union<'a, T, S>","std::slice::ChunksMut<'a, T>","std::slice::ArrayChunksMut<'a, T, N>","std::str::MatchIndices<'a, P>","std::collections::vec_deque::Drain<'_, T, A>","std::iter::Filter<I, P>","std::sys::unix::fs::ReadDir","std::iter::Cycle<I>","std::slice::GroupByMut<'a, T, P>","std::collections::btree_map::Range<'a, K, V>","std::option::Iter<'a, A>","std::char::ToUppercase","std::slice::RSplitMut<'a, T, P>","std::iter::SkipWhile<I, P>","std::str::RMatchIndices<'a, P>","std::result::IntoIter<T>","std::slice::ArrayChunks<'a, T, N>","std::collections::hash_set::Difference<'a, T, S>","std::str::EscapeUnicode<'a>","std::option::IntoIter<A>","std::str::SplitTerminator<'a, P>","std::collections::linked_list::IntoIter<T>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::collections::btree_set::Difference<'a, T, A>","std::path::Iter<'a>","std::net::IntoIncoming","std::collections::linked_list::DrainFilter<'_, T, F>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::boxed::Box<I, A>","std::ops::index_range::IndexRange","std::str::Matches<'a, P>","std::iter::Fuse<I>","std::sync::mpsc::IntoIter<T>","std::slice::EscapeAscii<'a>","bitflags::core::slice::iter::GenericSplitN<I>","std::str::CharIndices<'a>","std::vec::Splice<'_, I, A>","std::collections::hash_set::Drain<'a, K>","std::iter::Copied<I>","std::collections::binary_heap::DrainSorted<'_, T>","std::iter::FlatMap<I, U, F>","std::env::SplitPaths<'a>","bitflags::core::error::Source<'a>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::hash_map::IntoIter<K, V>","std::slice::RChunksExact<'a, T>","std::os::unix::net::ScmCredentials<'a>","std::sys_common::wstr::WStrUnits<'_>","std::iter::Zip<A, B>","std::str::SplitWhitespace<'a>","std::fs::ReadDir","std::collections::btree_set::Intersection<'a, T, A>","std::str::RSplitTerminator<'a, P>","std::collections::btree_set::Range<'a, T>","std::sync::mpsc::Iter<'a, T>","std::collections::btree_map::IterMut<'a, K, V>","std::sys_common::wtf8::EncodeWide<'a>","std::slice::IterMut<'a, T>","std::iter::OnceWith<F>","std::collections::linked_list::Iter<'a, T>","std::str::EncodeUtf16<'a>","std::char::CaseMappingIter","std::str::Utf8Chunks<'a>","std::slice::RChunksMut<'a, T>","std::collections::btree_map::RangeMut<'a, K, V>","std::env::Args","std::iter::StepBy<I>","std::iter::Take<I>","std::collections::hash_map::Values<'a, K, V>","std::collections::btree_map::IntoIter<K, V, A>","std::slice::SplitNMut<'a, T, P>","std::slice::SplitInclusive<'a, T, P>","std::collections::hash_map::IterMut<'a, K, V>","std::collections::hash_map::IntoValues<K, V>","std::collections::binary_heap::IntoIterSorted<T>","std::collections::btree_set::SymmetricDifference<'a, T>","std::iter::Successors<T, F>","std::iter::RepeatWith<F>","std::path::Components<'a>","std::str::Chars<'a>","std::iter::Repeat<A>","std::slice::GroupBy<'a, T, P>","std::vec::Drain<'_, T, A>","<&mut I as std::iter::Iterator>","std::iter::IntersperseWith<I, G>","std::io::Lines<B>","std::iter::Cloned<I>","std::slice::Windows<'a, T>","std::slice::ChunksExact<'a, T>","std::slice::SplitMut<'a, T, P>","std::str::EscapeDebug<'a>","std::collections::hash_set::Iter<'a, K>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::str::SplitN<'a, P>","std::iter::Rev<I>","std::iter::Skip<I>","std::array::IntoIter<T, N>","std::str::SplitAsciiWhitespace<'a>","std::sys::unix::os::SplitPaths<'a>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::iter::RepeatN<A>","std::result::IterMut<'a, T>","std::os::unix::net::ScmRights<'a>","std::iter::Intersperse<I>","std::char::ToLowercase","std::sys::unix::process::process_common::CommandArgs<'a>","std::iter::TakeWhile<I, P>","std::slice::ArrayWindows<'a, T, N>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::collections::vec_deque::IterMut<'a, T>","std::collections::btree_set::IntoIter<T, A>","std::collections::hash_map::ValuesMut<'a, K, V>","std::slice::RChunks<'a, T>","std::vec::IntoIter<T, A>","std::slice::RSplit<'a, T, P>","std::iter::Enumerate<I>","std::collections::hash_set::IntoIter<K>","std::iter::MapWhile<I, P>","std::collections::btree_map::IntoValues<K, V, A>","std::collections::btree_map::Iter<'a, K, V>","std::str::RSplit<'a, P>","std::char::EscapeUnicode","std::str::LinesAny<'a>","std::collections::btree_map::Values<'a, K, V>","std::collections::linked_list::IterMut<'a, T>","std::str::RMatches<'a, P>","std::slice::SplitInclusiveMut<'a, T, P>","std::process::CommandArgs<'a>","std::sys_common::net::LookupHost","std::sync::mpsc::TryIter<'a, T>","std::sys::unix::args::Args","std::slice::Split<'a, T, P>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::slice::SplitN<'a, T, P>","std::iter::Inspect<I, F>","std::slice::RChunksExactMut<'a, T>","std::collections::binary_heap::Drain<'_, T>","std::iter::adapters::GenericShunt<'_, I, R>","std::ascii::EscapeDefault","std::env::ArgsOs","std::env::VarsOs","std::collections::btree_set::Iter<'a, T>","std::slice::Iter<'a, T>","std::iter::ByRefSized<'_, I>","std::collections::hash_map::Iter<'a, K, V>","std::iter::Scan<I, St, F>","std::collections::hash_map::Keys<'a, K, V>","std::collections::btree_set::Union<'a, T>","std::iter::Empty<T>","std::str::RSplitN<'a, P>","std::result::Iter<'a, T>","std::sys::unix::os::Env","std::iter::sources::from_generator::FromGenerator<G>","std::collections::btree_map::IntoKeys<K, V, A>","std::str::Split<'a, P>","std::iter::FilterMap<I, F>","std::io::Bytes<R>","std::slice::RSplitNMut<'a, T, P>","std::option::Item<A>","std::char::EscapeDefault","std::iter::Once<T>","std::char::DecodeUtf16<I>","std::iter::ArrayChunks<I, N>","std::slice::RSplitN<'a, T, P>","std::net::Incoming<'a>","std::str::Lines<'a>","std::env::Vars","std::iter::Flatten<I>","std::collections::hash_map::Drain<'a, K, V>","std::collections::hash_map::IntoKeys<K, V>","std::path::Ancestors<'a>","std::ops::RangeInclusive<A>","std::os::unix::net::Incoming<'a>","std::collections::hash_set::DrainFilter<'_, K, F>","std::os::unix::net::Messages<'a>","std::io::Split<B>","std::collections::btree_map::ValuesMut<'a, K, V>","std::slice::Chunks<'a, T>","std::option::IterMut<'a, A>","std::str::EscapeDefault<'a>","std::ops::RangeFrom<A>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::process::CommandEnvs<'a>","std::collections::binary_heap::IntoIter<T>","std::collections::vec_deque::IntoIter<T, A>","std::str::SplitInclusive<'a, P>","std::iter::Map<I, F>","std::collections::binary_heap::Iter<'a, T>","std::slice::ChunksExactMut<'a, T>"],"R":["std::sys::unix::os::Env","std::vec::DrainFilter<'_, T, F, A>","std::collections::btree_map::Keys<'a, K, V>","std::str::Chars<'a>","std::collections::btree_map::Iter<'a, K, V>","std::collections::binary_heap::Iter<'a, T>","std::str::EscapeUnicode<'a>","std::char::EscapeDefault","std::env::VarsOs","std::collections::btree_map::IntoKeys<K, V, A>","std::collections::btree_set::Range<'a, T>","std::slice::GroupByMut<'a, T, P>","std::slice::EscapeAscii<'a>","std::vec::Splice<'_, I, A>","std::slice::RChunksExact<'a, T>","std::option::Iter<'a, A>","std::collections::binary_heap::Drain<'_, T>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::binary_heap::IntoIter<T>","std::slice::SplitN<'a, T, P>","std::iter::Skip<I>","std::collections::hash_map::ValuesMut<'a, K, V>","std::collections::linked_list::IntoIter<T>","std::slice::RChunksExactMut<'a, T>","std::process::CommandEnvs<'a>","std::iter::MapWhile<I, P>","std::ops::Range<A>","std::iter::Chain<A, B>","std::collections::hash_map::IterMut<'a, K, V>","std::iter::Filter<I, P>","std::slice::ArrayChunksMut<'a, T, N>","std::collections::hash_set::DrainFilter<'_, K, F>","std::slice::GroupBy<'a, T, P>","std::str::Matches<'a, P>","std::string::Drain<'_>","std::collections::linked_list::IterMut<'a, T>","std::boxed::Box<I, A>","std::iter::Fuse<I>","std::ops::RangeInclusive<A>","std::vec::IntoIter<T, A>","std::collections::hash_map::Drain<'a, K, V>","std::collections::vec_deque::Iter<'a, T>","std::os::unix::net::ScmCredentials<'a>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::sys::unix::fs::ReadDir","std::str::Bytes<'_>","std::slice::SplitMut<'a, T, P>","std::iter::Flatten<I>","std::str::LinesAny<'a>","std::ascii::EscapeDefault","std::collections::vec_deque::IterMut<'a, T>","std::slice::RSplitMut<'a, T, P>","std::collections::btree_map::Range<'a, K, V>","std::collections::hash_map::IntoValues<K, V>","std::os::unix::net::Incoming<'a>","std::slice::SplitInclusive<'a, T, P>","std::str::SplitWhitespace<'a>","std::iter::Rev<I>","std::collections::btree_set::SymmetricDifference<'a, T>","std::str::SplitAsciiWhitespace<'a>","std::char::CaseMappingIter","std::str::Lines<'a>","std::slice::ChunksMut<'a, T>","bitflags::core::error::Source<'a>","std::result::IterMut<'a, T>","std::collections::linked_list::Iter<'a, T>","std::sync::mpsc::Iter<'a, T>","std::iter::FilterMap<I, F>","std::option::IntoIter<A>","std::char::ToLowercase","std::ops::RangeFrom<A>","std::collections::btree_map::Values<'a, K, V>","std::collections::hash_map::Values<'a, K, V>","std::iter::TakeWhile<I, P>","std::iter::Take<I>","std::slice::ChunksExactMut<'a, T>","std::collections::hash_map::Keys<'a, K, V>","std::collections::hash_map::IntoKeys<K, V>","std::str::RSplit<'a, P>","std::iter::Peekable<I>","std::collections::binary_heap::DrainSorted<'_, T>","std::slice::Chunks<'a, T>","std::option::IterMut<'a, A>","std::result::IntoIter<T>","std::str::CharIndices<'a>","std::vec::Drain<'_, T, A>","std::net::IntoIncoming","std::collections::hash_set::IntoIter<K>","std::str::MatchIndices<'a, P>","std::sys_common::wstr::WStrUnits<'_>","std::iter::Once<T>","std::slice::Windows<'a, T>","std::str::Utf8Chunks<'a>","std::result::Iter<'a, T>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::iter::FlatMap<I, U, F>","std::collections::hash_set::Difference<'a, T, S>","std::char::ToUppercase","std::str::RMatchIndices<'a, P>","std::path::Iter<'a>","std::collections::hash_set::Iter<'a, K>","std::slice::RSplitNMut<'a, T, P>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::str::Split<'a, P>","std::str::EncodeUtf16<'a>","std::slice::RSplitN<'a, T, P>","std::env::ArgsOs","std::collections::vec_deque::IntoIter<T, A>","std::iter::ArrayChunks<I, N>","std::slice::Iter<'a, T>","std::path::Ancestors<'a>","std::str::RMatches<'a, P>","<&mut I as std::iter::Iterator>","std::path::Components<'a>","std::iter::Successors<T, F>","std::collections::hash_map::IntoIter<K, V>","std::iter::IntersperseWith<I, G>","std::iter::RepeatWith<F>","std::sys::unix::process::process_common::CommandArgs<'a>","std::slice::SplitInclusiveMut<'a, T, P>","std::collections::btree_set::Union<'a, T>","std::str::EscapeDebug<'a>","std::env::SplitPaths<'a>","std::io::Split<B>","std::slice::ArrayWindows<'a, T, N>","std::str::EscapeDefault<'a>","std::net::Incoming<'a>","std::str::SplitTerminator<'a, P>","std::io::Lines<B>","std::slice::RChunksMut<'a, T>","std::iter::Cloned<I>","std::iter::Map<I, F>","std::os::unix::net::ScmRights<'a>","std::collections::vec_deque::Drain<'_, T, A>","std::iter::Empty<T>","std::collections::hash_set::Union<'a, T, S>","std::array::IntoIter<T, N>","std::collections::btree_map::RangeMut<'a, K, V>","std::slice::Split<'a, T, P>","std::slice::RSplit<'a, T, P>","std::iter::ByRefSized<'_, I>","std::iter::StepBy<I>","std::collections::btree_map::IntoValues<K, V, A>","std::iter::Enumerate<I>","std::sync::mpsc::IntoIter<T>","std::sys::unix::os::SplitPaths<'a>","std::iter::FromFn<F>","std::str::RSplitN<'a, P>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::iter::sources::from_generator::FromGenerator<G>","std::iter::Copied<I>","std::process::CommandArgs<'a>","std::env::Vars","std::iter::Scan<I, St, F>","std::collections::binary_heap::IntoIterSorted<T>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::iter::Repeat<A>","std::collections::hash_set::Drain<'a, K>","std::collections::btree_map::IntoIter<K, V, A>","std::collections::btree_set::Iter<'a, T>","std::iter::SkipWhile<I, P>","std::collections::hash_map::Iter<'a, K, V>","std::env::Args","std::fs::ReadDir","std::char::EscapeDebug","std::iter::Zip<A, B>","std::collections::btree_map::ValuesMut<'a, K, V>","std::os::unix::net::Messages<'a>","std::sys_common::net::LookupHost","std::sys_common::wtf8::EncodeWide<'a>","std::iter::RepeatN<A>","std::char::DecodeUtf16<I>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::collections::linked_list::DrainFilter<'_, T, F>","std::slice::ArrayChunks<'a, T, N>","std::iter::adapters::GenericShunt<'_, I, R>","std::str::RSplitTerminator<'a, P>","std::collections::btree_set::IntoIter<T, A>","std::io::Bytes<R>","std::option::Item<A>","std::collections::btree_map::IterMut<'a, K, V>","std::iter::Intersperse<I>","std::str::SplitInclusive<'a, P>","std::iter::OnceWith<F>","std::sync::mpsc::TryIter<'a, T>","std::ops::index_range::IndexRange","std::slice::ChunksExact<'a, T>","std::sys::unix::args::Args","std::iter::Cycle<I>","std::collections::btree_set::Difference<'a, T, A>","bitflags::core::slice::iter::GenericSplitN<I>","std::collections::btree_set::Intersection<'a, T, A>","std::iter::Inspect<I, F>","std::slice::RChunks<'a, T>","std::char::EscapeUnicode","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::slice::IterMut<'a, T>","std::str::SplitN<'a, P>","std::slice::SplitNMut<'a, T, P>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::table::Table<'a, H, R>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.highlight_style(p1);
+widgets::table::Table::<'a, H, R>::highlight_style(p0, p1);
+crate::widgets::table::Table::<'a, H, R>::highlight_style(p0, p1);
+<widgets::table::Table<'a, H, R>>::highlight_style(p0, p1);
-----------------
src/widgets/table.rs widgets::table::Table::<'a, H, R>::column_spacing
'a
deps:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::column_spacing":{"<D as std::iter::Iterator>::Item":["std::fmt::Display"],"D":["std::iter::Iterator","std::marker::Sized"],"H":["std::marker::Sized","std::iter::Iterator"],"R":["std::marker::Sized","std::iter::Iterator"]}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::column_spacing":{"<D as std::iter::Iterator>::Item":["backend::termion::Fg","<&T as std::fmt::Display>","backend::termion::ModifierDiff","backend::termion::Bg"],"D":["std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::str::EscapeUnicode<'a>","std::iter::FilterMap<I, F>","std::char::EscapeUnicode","std::iter::Enumerate<I>","std::collections::binary_heap::IntoIter<T>","std::iter::Skip<I>","std::collections::btree_set::IntoIter<T, A>","std::str::SplitN<'a, P>","std::str::SplitWhitespace<'a>","std::iter::IntersperseWith<I, G>","std::ops::Range<A>","std::collections::btree_map::IterMut<'a, K, V>","bitflags::core::error::Source<'a>","std::slice::Iter<'a, T>","std::collections::vec_deque::IntoIter<T, A>","std::iter::Flatten<I>","std::path::Components<'a>","std::str::EscapeDebug<'a>","std::ops::RangeFrom<A>","std::slice::SplitNMut<'a, T, P>","std::collections::btree_map::IntoIter<K, V, A>","std::slice::RSplitNMut<'a, T, P>","std::fs::ReadDir","std::string::Drain<'_>","std::net::Incoming<'a>","std::collections::linked_list::IntoIter<T>","std::iter::Inspect<I, F>","std::collections::linked_list::IterMut<'a, T>","std::sys::unix::args::Args","std::env::SplitPaths<'a>","std::slice::GroupBy<'a, T, P>","std::slice::SplitN<'a, T, P>","std::iter::Chain<A, B>","std::collections::hash_map::IntoKeys<K, V>","std::ops::index_range::IndexRange","std::str::CharIndices<'a>","std::collections::binary_heap::DrainSorted<'_, T>","std::slice::EscapeAscii<'a>","std::io::Lines<B>","std::sync::mpsc::Iter<'a, T>","std::str::EncodeUtf16<'a>","std::iter::MapWhile<I, P>","std::iter::adapters::GenericShunt<'_, I, R>","std::char::ToUppercase","std::option::Iter<'a, A>","std::slice::RChunksExact<'a, T>","std::net::IntoIncoming","std::slice::ArrayChunks<'a, T, N>","std::slice::ChunksExact<'a, T>","std::iter::sources::from_generator::FromGenerator<G>","std::iter::Filter<I, P>","std::io::Split<B>","std::slice::RChunksMut<'a, T>","std::slice::ArrayChunksMut<'a, T, N>","std::result::Iter<'a, T>","std::iter::RepeatN<A>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::vec::Drain<'_, T, A>","std::iter::StepBy<I>","std::os::unix::net::Messages<'a>","std::char::DecodeUtf16<I>","std::iter::SkipWhile<I, P>","std::sys::unix::fs::ReadDir","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::str::Split<'a, P>","std::collections::hash_set::IntoIter<K>","std::iter::RepeatWith<F>","std::collections::btree_map::IntoKeys<K, V, A>","std::collections::btree_map::Keys<'a, K, V>","std::char::EscapeDefault","std::str::RSplit<'a, P>","std::sys::unix::os::Env","std::collections::hash_map::Iter<'a, K, V>","std::iter::Rev<I>","std::collections::btree_map::Values<'a, K, V>","std::collections::vec_deque::Iter<'a, T>","std::iter::TakeWhile<I, P>","std::sys::unix::process::process_common::CommandArgs<'a>","std::collections::btree_set::Difference<'a, T, A>","std::slice::SplitInclusiveMut<'a, T, P>","std::collections::hash_map::IntoIter<K, V>","std::collections::btree_map::Iter<'a, K, V>","std::str::Matches<'a, P>","std::iter::FromFn<F>","std::iter::ArrayChunks<I, N>","std::collections::hash_set::Iter<'a, K>","std::sys::unix::os::SplitPaths<'a>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::iter::FlatMap<I, U, F>","std::char::EscapeDebug","std::slice::GroupByMut<'a, T, P>","std::result::IterMut<'a, T>","std::collections::linked_list::DrainFilter<'_, T, F>","std::path::Iter<'a>","std::iter::ByRefSized<'_, I>","std::boxed::Box<I, A>","std::slice::Chunks<'a, T>","std::str::RSplitTerminator<'a, P>","std::io::Bytes<R>","std::str::LinesAny<'a>","std::iter::Empty<T>","std::collections::btree_set::SymmetricDifference<'a, T>","std::iter::OnceWith<F>","std::str::RSplitN<'a, P>","std::collections::hash_set::Difference<'a, T, S>","std::collections::hash_set::Intersection<'a, T, S>","<&mut I as std::iter::Iterator>","std::iter::Cycle<I>","std::iter::Peekable<I>","std::str::Lines<'a>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::sync::mpsc::TryIter<'a, T>","std::iter::Repeat<A>","std::slice::RSplitMut<'a, T, P>","std::slice::SplitInclusive<'a, T, P>","std::collections::binary_heap::Drain<'_, T>","std::str::Utf8Chunks<'a>","std::env::Vars","std::sys_common::wtf8::EncodeWide<'a>","std::slice::RSplit<'a, T, P>","std::slice::Windows<'a, T>","std::slice::ChunksExactMut<'a, T>","std::slice::RChunks<'a, T>","std::str::Chars<'a>","std::str::RMatches<'a, P>","std::path::Ancestors<'a>","std::char::ToLowercase","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::iter::Intersperse<I>","std::str::RMatchIndices<'a, P>","std::collections::linked_list::Iter<'a, T>","std::collections::vec_deque::Drain<'_, T, A>","std::slice::ChunksMut<'a, T>","std::collections::hash_set::DrainFilter<'_, K, F>","std::process::CommandArgs<'a>","std::env::VarsOs","std::env::ArgsOs","std::slice::RSplitN<'a, T, P>","std::env::Args","std::iter::Scan<I, St, F>","std::process::CommandEnvs<'a>","std::collections::btree_set::Iter<'a, T>","std::option::IntoIter<A>","std::str::SplitInclusive<'a, P>","std::sync::mpsc::IntoIter<T>","std::iter::Successors<T, F>","std::iter::Zip<A, B>","std::collections::hash_set::Union<'a, T, S>","std::iter::Copied<I>","std::collections::hash_map::IntoValues<K, V>","std::collections::binary_heap::Iter<'a, T>","std::option::Item<A>","std::collections::btree_map::Range<'a, K, V>","std::str::Bytes<'_>","std::collections::btree_set::Intersection<'a, T, A>","std::ascii::EscapeDefault","std::char::CaseMappingIter","std::collections::hash_map::Values<'a, K, V>","std::collections::btree_set::Range<'a, T>","std::option::IterMut<'a, A>","std::sys_common::net::LookupHost","std::os::unix::net::Incoming<'a>","std::os::unix::net::ScmCredentials<'a>","std::iter::Take<I>","std::collections::hash_map::IterMut<'a, K, V>","std::collections::binary_heap::IntoIterSorted<T>","std::str::SplitTerminator<'a, P>","std::str::MatchIndices<'a, P>","std::slice::ArrayWindows<'a, T, N>","std::collections::btree_map::IntoValues<K, V, A>","std::ops::RangeInclusive<A>","std::array::IntoIter<T, N>","std::slice::IterMut<'a, T>","std::collections::btree_map::ValuesMut<'a, K, V>","std::collections::btree_map::RangeMut<'a, K, V>","std::collections::hash_set::Drain<'a, K>","std::iter::Fuse<I>","std::sys_common::wstr::WStrUnits<'_>","std::collections::hash_map::Keys<'a, K, V>","std::iter::Map<I, F>","std::collections::hash_map::ValuesMut<'a, K, V>","std::os::unix::net::ScmRights<'a>","std::slice::Split<'a, T, P>","std::collections::vec_deque::IterMut<'a, T>","std::collections::hash_map::Drain<'a, K, V>","std::iter::Once<T>","std::str::SplitAsciiWhitespace<'a>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::vec::DrainFilter<'_, T, F, A>","std::iter::Cloned<I>","std::vec::IntoIter<T, A>","std::collections::btree_set::Union<'a, T>","std::slice::SplitMut<'a, T, P>","std::result::IntoIter<T>","std::vec::Splice<'_, I, A>","std::slice::RChunksExactMut<'a, T>","bitflags::core::slice::iter::GenericSplitN<I>","std::str::EscapeDefault<'a>"],"H":["std::iter::sources::from_generator::FromGenerator<G>","std::iter::Cycle<I>","std::slice::SplitMut<'a, T, P>","std::iter::Map<I, F>","std::iter::Flatten<I>","std::net::IntoIncoming","std::sys::unix::process::process_common::CommandArgs<'a>","std::collections::btree_map::ValuesMut<'a, K, V>","std::collections::hash_set::Drain<'a, K>","std::slice::SplitN<'a, T, P>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::iter::Take<I>","std::iter::adapters::GenericShunt<'_, I, R>","std::array::IntoIter<T, N>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::char::EscapeDebug","std::iter::OnceWith<F>","std::collections::btree_map::Iter<'a, K, V>","std::str::MatchIndices<'a, P>","std::slice::RChunksMut<'a, T>","std::iter::MapWhile<I, P>","std::option::Iter<'a, A>","std::collections::hash_set::Iter<'a, K>","std::io::Split<B>","<&mut I as std::iter::Iterator>","std::iter::Cloned<I>","std::collections::hash_map::IntoValues<K, V>","std::collections::vec_deque::IterMut<'a, T>","std::collections::binary_heap::Iter<'a, T>","std::iter::StepBy<I>","std::iter::ArrayChunks<I, N>","std::slice::GroupByMut<'a, T, P>","std::sync::mpsc::TryIter<'a, T>","std::str::RSplit<'a, P>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::collections::binary_heap::Drain<'_, T>","std::env::VarsOs","std::collections::vec_deque::Iter<'a, T>","std::fs::ReadDir","std::char::DecodeUtf16<I>","std::iter::FlatMap<I, U, F>","std::os::unix::net::ScmCredentials<'a>","std::slice::RSplitNMut<'a, T, P>","std::iter::Once<T>","bitflags::core::error::Source<'a>","std::slice::GroupBy<'a, T, P>","std::vec::IntoIter<T, A>","std::sync::mpsc::Iter<'a, T>","std::os::unix::net::Incoming<'a>","std::collections::btree_map::IntoIter<K, V, A>","std::sys::unix::args::Args","std::path::Iter<'a>","std::env::ArgsOs","std::slice::ArrayChunks<'a, T, N>","std::slice::Chunks<'a, T>","std::str::EncodeUtf16<'a>","std::ops::Range<A>","std::iter::TakeWhile<I, P>","std::iter::Skip<I>","std::io::Lines<B>","std::result::IntoIter<T>","std::iter::Chain<A, B>","std::slice::SplitNMut<'a, T, P>","std::collections::vec_deque::IntoIter<T, A>","std::iter::FilterMap<I, F>","std::slice::Windows<'a, T>","std::collections::linked_list::DrainFilter<'_, T, F>","std::path::Ancestors<'a>","std::slice::Split<'a, T, P>","std::collections::hash_set::Union<'a, T, S>","std::collections::linked_list::IntoIter<T>","std::collections::linked_list::IterMut<'a, T>","std::iter::Successors<T, F>","std::iter::RepeatWith<F>","std::collections::hash_map::Keys<'a, K, V>","std::str::CharIndices<'a>","std::collections::btree_map::RangeMut<'a, K, V>","std::slice::RSplit<'a, T, P>","std::str::RSplitTerminator<'a, P>","std::sys_common::net::LookupHost","std::collections::linked_list::Iter<'a, T>","std::iter::Zip<A, B>","std::slice::IterMut<'a, T>","std::slice::SplitInclusive<'a, T, P>","std::str::RMatchIndices<'a, P>","std::collections::hash_map::Iter<'a, K, V>","std::ops::RangeInclusive<A>","std::str::RSplitN<'a, P>","std::path::Components<'a>","std::iter::RepeatN<A>","std::collections::btree_map::IntoKeys<K, V, A>","std::vec::Drain<'_, T, A>","std::sys::unix::os::Env","std::collections::btree_set::SymmetricDifference<'a, T>","std::slice::ArrayChunksMut<'a, T, N>","std::collections::binary_heap::DrainSorted<'_, T>","std::collections::btree_map::IntoValues<K, V, A>","std::str::RMatches<'a, P>","std::str::LinesAny<'a>","std::slice::ChunksExact<'a, T>","std::collections::hash_set::DrainFilter<'_, K, F>","std::collections::btree_map::IterMut<'a, K, V>","std::iter::Scan<I, St, F>","std::char::ToUppercase","std::env::Args","std::slice::RChunks<'a, T>","std::collections::btree_set::Union<'a, T>","bitflags::core::slice::iter::GenericSplitN<I>","std::str::Chars<'a>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::sys_common::wstr::WStrUnits<'_>","std::slice::RChunksExactMut<'a, T>","std::slice::RChunksExact<'a, T>","std::collections::btree_set::Intersection<'a, T, A>","std::vec::Splice<'_, I, A>","std::collections::hash_map::IterMut<'a, K, V>","std::result::Iter<'a, T>","std::slice::RSplitMut<'a, T, P>","std::char::CaseMappingIter","std::collections::hash_map::IntoIter<K, V>","std::iter::Fuse<I>","std::str::Lines<'a>","std::iter::Intersperse<I>","std::iter::Peekable<I>","std::slice::SplitInclusiveMut<'a, T, P>","std::slice::ChunksExactMut<'a, T>","std::collections::btree_map::Keys<'a, K, V>","std::str::EscapeDebug<'a>","std::str::EscapeUnicode<'a>","std::option::IterMut<'a, A>","std::ops::index_range::IndexRange","std::iter::Enumerate<I>","std::str::Utf8Chunks<'a>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::binary_heap::IntoIterSorted<T>","std::process::CommandArgs<'a>","std::option::IntoIter<A>","std::char::ToLowercase","std::slice::RSplitN<'a, T, P>","std::boxed::Box<I, A>","std::result::IterMut<'a, T>","std::collections::hash_set::Difference<'a, T, S>","std::collections::btree_map::Values<'a, K, V>","std::env::SplitPaths<'a>","std::os::unix::net::Messages<'a>","std::iter::Copied<I>","std::iter::SkipWhile<I, P>","std::slice::ChunksMut<'a, T>","std::str::SplitAsciiWhitespace<'a>","std::collections::hash_set::IntoIter<K>","std::iter::Filter<I, P>","std::env::Vars","std::iter::IntersperseWith<I, G>","std::option::Item<A>","std::str::Matches<'a, P>","std::iter::Rev<I>","std::slice::Iter<'a, T>","std::sys::unix::os::SplitPaths<'a>","std::process::CommandEnvs<'a>","std::io::Bytes<R>","std::collections::hash_map::Drain<'a, K, V>","std::vec::DrainFilter<'_, T, F, A>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::str::SplitN<'a, P>","std::os::unix::net::ScmRights<'a>","std::iter::Inspect<I, F>","std::iter::FromFn<F>","std::iter::Repeat<A>","std::collections::binary_heap::IntoIter<T>","std::str::Split<'a, P>","std::sys_common::wtf8::EncodeWide<'a>","std::str::SplitTerminator<'a, P>","std::ascii::EscapeDefault","std::collections::hash_map::IntoKeys<K, V>","std::net::Incoming<'a>","std::sys::unix::fs::ReadDir","std::ops::RangeFrom<A>","std::collections::btree_set::Iter<'a, T>","std::collections::hash_map::ValuesMut<'a, K, V>","std::iter::Empty<T>","std::collections::btree_set::Difference<'a, T, A>","std::slice::EscapeAscii<'a>","std::sync::mpsc::IntoIter<T>","std::iter::ByRefSized<'_, I>","std::collections::btree_map::Range<'a, K, V>","std::str::Bytes<'_>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::collections::hash_map::Values<'a, K, V>","std::collections::btree_set::IntoIter<T, A>","std::collections::btree_set::Range<'a, T>","std::str::EscapeDefault<'a>","std::str::SplitInclusive<'a, P>","std::collections::hash_set::Intersection<'a, T, S>","std::string::Drain<'_>","std::char::EscapeDefault","std::slice::ArrayWindows<'a, T, N>","std::str::SplitWhitespace<'a>","std::char::EscapeUnicode"],"R":["std::slice::SplitN<'a, T, P>","std::collections::btree_set::SymmetricDifference<'a, T>","std::str::Chars<'a>","std::io::Bytes<R>","std::path::Iter<'a>","std::iter::FromFn<F>","std::option::IntoIter<A>","std::iter::Fuse<I>","std::iter::Map<I, F>","std::sync::mpsc::TryIter<'a, T>","std::collections::btree_set::Difference<'a, T, A>","std::process::CommandEnvs<'a>","std::os::unix::net::Messages<'a>","std::slice::EscapeAscii<'a>","std::str::Utf8Chunks<'a>","bitflags::core::error::Source<'a>","std::env::VarsOs","std::str::EncodeUtf16<'a>","std::slice::RChunksExact<'a, T>","std::sys_common::wstr::WStrUnits<'_>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::iter::IntersperseWith<I, G>","std::collections::binary_heap::DrainSorted<'_, T>","std::collections::btree_map::Keys<'a, K, V>","std::slice::Windows<'a, T>","std::collections::hash_map::Keys<'a, K, V>","std::sys::unix::fs::ReadDir","std::slice::ChunksMut<'a, T>","std::char::EscapeDebug","std::str::Matches<'a, P>","std::str::MatchIndices<'a, P>","std::option::IterMut<'a, A>","std::collections::btree_map::IntoIter<K, V, A>","std::str::SplitN<'a, P>","std::iter::Take<I>","std::slice::SplitNMut<'a, T, P>","std::iter::Skip<I>","std::char::EscapeDefault","std::collections::hash_set::Intersection<'a, T, S>","std::option::Iter<'a, A>","std::collections::btree_map::IterMut<'a, K, V>","std::iter::StepBy<I>","std::env::SplitPaths<'a>","std::sys::unix::args::Args","std::sys_common::net::LookupHost","std::collections::linked_list::IterMut<'a, T>","std::str::RMatches<'a, P>","std::slice::SplitInclusiveMut<'a, T, P>","std::env::Args","std::io::Split<B>","std::collections::hash_map::IntoKeys<K, V>","std::sync::mpsc::Iter<'a, T>","std::collections::hash_map::IntoIter<K, V>","std::collections::hash_map::Iter<'a, K, V>","std::char::CaseMappingIter","std::sync::mpsc::IntoIter<T>","std::os::unix::net::Incoming<'a>","std::char::EscapeUnicode","std::str::Lines<'a>","std::str::SplitWhitespace<'a>","std::iter::Intersperse<I>","std::iter::Copied<I>","std::str::EscapeDefault<'a>","std::collections::btree_map::IntoValues<K, V, A>","std::iter::adapters::GenericShunt<'_, I, R>","std::result::IntoIter<T>","std::fs::ReadDir","std::iter::Flatten<I>","std::collections::vec_deque::IterMut<'a, T>","std::collections::linked_list::Iter<'a, T>","std::iter::TakeWhile<I, P>","std::slice::Chunks<'a, T>","std::array::IntoIter<T, N>","std::iter::Successors<T, F>","std::slice::SplitMut<'a, T, P>","std::collections::vec_deque::Iter<'a, T>","std::str::RSplitN<'a, P>","std::slice::RSplit<'a, T, P>","std::iter::Rev<I>","std::sys::unix::os::Env","std::collections::hash_map::Values<'a, K, V>","std::collections::linked_list::IntoIter<T>","std::env::Vars","std::sys_common::wtf8::EncodeWide<'a>","std::iter::RepeatN<A>","std::iter::Enumerate<I>","std::net::IntoIncoming","std::net::Incoming<'a>","std::iter::SkipWhile<I, P>","<&mut I as std::iter::Iterator>","std::slice::RSplitMut<'a, T, P>","std::str::CharIndices<'a>","std::iter::OnceWith<F>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::vec::IntoIter<T, A>","std::collections::btree_set::IntoIter<T, A>","std::slice::GroupBy<'a, T, P>","std::str::RMatchIndices<'a, P>","std::collections::btree_set::Iter<'a, T>","std::path::Ancestors<'a>","std::slice::SplitInclusive<'a, T, P>","std::collections::hash_map::IntoValues<K, V>","std::collections::hash_set::Difference<'a, T, S>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::string::Drain<'_>","std::slice::RChunksExactMut<'a, T>","std::iter::Chain<A, B>","std::iter::Cycle<I>","std::result::IterMut<'a, T>","bitflags::core::slice::iter::GenericSplitN<I>","std::ops::RangeInclusive<A>","std::iter::Once<T>","std::collections::binary_heap::Drain<'_, T>","std::str::Split<'a, P>","std::iter::ArrayChunks<I, N>","std::iter::Peekable<I>","std::collections::btree_map::RangeMut<'a, K, V>","std::collections::hash_set::IntoIter<K>","std::slice::ChunksExactMut<'a, T>","std::iter::FlatMap<I, U, F>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::str::Bytes<'_>","std::iter::Scan<I, St, F>","std::iter::Inspect<I, F>","std::collections::vec_deque::IntoIter<T, A>","std::collections::btree_map::Iter<'a, K, V>","std::iter::FilterMap<I, F>","std::iter::Filter<I, P>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::slice::RSplitN<'a, T, P>","std::ops::index_range::IndexRange","std::result::Iter<'a, T>","std::collections::btree_map::Values<'a, K, V>","std::collections::hash_map::IterMut<'a, K, V>","std::slice::RChunks<'a, T>","std::env::ArgsOs","std::char::DecodeUtf16<I>","std::slice::IterMut<'a, T>","std::process::CommandArgs<'a>","std::collections::btree_map::Range<'a, K, V>","std::path::Components<'a>","std::os::unix::net::ScmRights<'a>","std::option::Item<A>","std::ascii::EscapeDefault","std::os::unix::net::ScmCredentials<'a>","std::io::Lines<B>","std::collections::hash_set::DrainFilter<'_, K, F>","std::collections::hash_set::Iter<'a, K>","std::collections::linked_list::DrainFilter<'_, T, F>","std::collections::btree_set::Intersection<'a, T, A>","std::slice::RChunksMut<'a, T>","std::sys::unix::process::process_common::CommandArgs<'a>","std::ops::Range<A>","std::collections::hash_map::ValuesMut<'a, K, V>","std::char::ToLowercase","std::iter::Cloned<I>","std::vec::Drain<'_, T, A>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::collections::binary_heap::IntoIter<T>","std::iter::Empty<T>","std::iter::Repeat<A>","std::str::SplitAsciiWhitespace<'a>","std::slice::ArrayWindows<'a, T, N>","std::str::RSplitTerminator<'a, P>","std::str::EscapeUnicode<'a>","std::collections::hash_map::Drain<'a, K, V>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::collections::btree_map::IntoKeys<K, V, A>","std::boxed::Box<I, A>","std::iter::sources::from_generator::FromGenerator<G>","std::iter::RepeatWith<F>","std::sys::unix::os::SplitPaths<'a>","std::collections::btree_set::Range<'a, T>","std::str::RSplit<'a, P>","std::vec::DrainFilter<'_, T, F, A>","std::str::SplitInclusive<'a, P>","std::iter::Zip<A, B>","std::slice::ArrayChunksMut<'a, T, N>","std::collections::binary_heap::IntoIterSorted<T>","std::slice::Iter<'a, T>","std::char::ToUppercase","std::vec::Splice<'_, I, A>","std::iter::ByRefSized<'_, I>","std::slice::Split<'a, T, P>","std::slice::GroupByMut<'a, T, P>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::btree_set::Union<'a, T>","std::str::EscapeDebug<'a>","std::collections::btree_map::ValuesMut<'a, K, V>","std::ops::RangeFrom<A>","std::collections::hash_set::Drain<'a, K>","std::collections::hash_set::Union<'a, T, S>","std::str::LinesAny<'a>","std::str::SplitTerminator<'a, P>","std::collections::binary_heap::Iter<'a, T>","std::slice::ChunksExact<'a, T>","std::slice::ArrayChunks<'a, T, N>","std::slice::RSplitNMut<'a, T, P>","std::iter::MapWhile<I, P>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::table::Table<'a, H, R>
let mut p1 = 0u16; // None+u16
+p0.column_spacing(p1);
+widgets::table::Table::<'a, H, R>::column_spacing(p0, p1);
+crate::widgets::table::Table::<'a, H, R>::column_spacing(p0, p1);
+<widgets::table::Table<'a, H, R>>::column_spacing(p0, p1);
-----------------
src/widgets/table.rs widgets::table::Table::<'a, H, R>::header_gap
'a
deps:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::header_gap":{"<D as std::iter::Iterator>::Item":["std::fmt::Display"],"D":["std::iter::Iterator","std::marker::Sized"],"H":["std::marker::Sized","std::iter::Iterator"],"R":["std::marker::Sized","std::iter::Iterator"]}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"widgets::table::Table::<'a, H, R>::header_gap":{"<D as std::iter::Iterator>::Item":["backend::termion::ModifierDiff","backend::termion::Bg","backend::termion::Fg","<&T as std::fmt::Display>"],"D":["std::iter::FromFn<F>","std::collections::hash_set::IntoIter<K>","std::os::unix::net::ScmCredentials<'a>","std::slice::EscapeAscii<'a>","std::char::ToLowercase","std::iter::FilterMap<I, F>","std::slice::RChunksMut<'a, T>","std::iter::Copied<I>","std::process::CommandEnvs<'a>","std::str::SplitAsciiWhitespace<'a>","std::collections::hash_map::IntoKeys<K, V>","std::char::EscapeDebug","std::iter::Zip<A, B>","std::str::EscapeDefault<'a>","std::env::ArgsOs","std::collections::hash_map::IntoIter<K, V>","std::collections::hash_set::Difference<'a, T, S>","std::collections::btree_map::Keys<'a, K, V>","std::char::ToUppercase","std::sync::mpsc::IntoIter<T>","std::collections::linked_list::Iter<'a, T>","std::collections::btree_map::IntoIter<K, V, A>","std::collections::binary_heap::IntoIterSorted<T>","std::slice::RSplitMut<'a, T, P>","std::iter::Cloned<I>","std::ascii::EscapeDefault","std::slice::SplitInclusive<'a, T, P>","std::result::IntoIter<T>","std::path::Iter<'a>","std::slice::Windows<'a, T>","std::str::Bytes<'_>","std::str::SplitInclusive<'a, P>","std::slice::ChunksExact<'a, T>","std::collections::hash_map::IntoValues<K, V>","std::collections::binary_heap::DrainSorted<'_, T>","std::iter::ByRefSized<'_, I>","std::collections::btree_set::IntoIter<T, A>","std::str::SplitTerminator<'a, P>","bitflags::core::slice::iter::GenericSplitN<I>","std::collections::btree_map::Range<'a, K, V>","std::iter::Enumerate<I>","std::iter::Flatten<I>","std::vec::DrainFilter<'_, T, F, A>","std::slice::RSplitNMut<'a, T, P>","std::str::EscapeDebug<'a>","std::iter::IntersperseWith<I, G>","std::slice::RSplit<'a, T, P>","std::str::Split<'a, P>","std::collections::btree_set::Difference<'a, T, A>","std::collections::hash_map::Drain<'a, K, V>","std::iter::Chain<A, B>","std::sys::unix::process::process_common::CommandArgs<'a>","std::collections::hash_map::Values<'a, K, V>","std::str::EncodeUtf16<'a>","std::collections::btree_set::Union<'a, T>","std::iter::Intersperse<I>","std::iter::Successors<T, F>","std::collections::linked_list::DrainFilter<'_, T, F>","std::iter::RepeatN<A>","std::collections::hash_map::IterMut<'a, K, V>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::hash_map::Iter<'a, K, V>","std::collections::btree_set::SymmetricDifference<'a, T>","std::slice::ArrayChunksMut<'a, T, N>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::collections::btree_set::Iter<'a, T>","std::result::IterMut<'a, T>","std::option::Item<A>","std::collections::btree_map::IterMut<'a, K, V>","std::iter::Fuse<I>","std::option::Iter<'a, A>","std::sys::unix::os::Env","std::ops::index_range::IndexRange","std::collections::linked_list::IterMut<'a, T>","std::collections::hash_set::Union<'a, T, S>","std::str::SplitN<'a, P>","std::io::Lines<B>","std::os::unix::net::Incoming<'a>","std::collections::btree_map::ValuesMut<'a, K, V>","std::iter::sources::from_generator::FromGenerator<G>","std::sys::unix::os::SplitPaths<'a>","std::iter::RepeatWith<F>","std::fs::ReadDir","std::vec::IntoIter<T, A>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::slice::ArrayWindows<'a, T, N>","std::iter::Map<I, F>","std::os::unix::net::Messages<'a>","std::slice::ArrayChunks<'a, T, N>","std::env::SplitPaths<'a>","std::collections::vec_deque::IntoIter<T, A>","std::iter::OnceWith<F>","std::str::Utf8Chunks<'a>","std::slice::SplitN<'a, T, P>","std::str::RSplit<'a, P>","std::slice::ChunksMut<'a, T>","std::iter::FlatMap<I, U, F>","std::collections::linked_list::IntoIter<T>","std::vec::Splice<'_, I, A>","std::collections::btree_map::Iter<'a, K, V>","std::collections::hash_set::DrainFilter<'_, K, F>","bitflags::core::error::Source<'a>","std::slice::Split<'a, T, P>","std::collections::vec_deque::Drain<'_, T, A>","<&mut I as std::iter::Iterator>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::slice::RChunksExactMut<'a, T>","std::result::Iter<'a, T>","std::collections::binary_heap::Drain<'_, T>","std::collections::binary_heap::Iter<'a, T>","std::iter::Filter<I, P>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::env::Args","std::str::EscapeUnicode<'a>","std::ops::RangeFrom<A>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::collections::vec_deque::Iter<'a, T>","std::sys::unix::fs::ReadDir","std::collections::hash_set::Iter<'a, K>","std::slice::Chunks<'a, T>","std::path::Ancestors<'a>","std::iter::ArrayChunks<I, N>","std::iter::Once<T>","std::str::MatchIndices<'a, P>","std::collections::btree_set::Intersection<'a, T, A>","std::slice::IterMut<'a, T>","std::iter::Empty<T>","std::collections::btree_map::RangeMut<'a, K, V>","std::str::RSplitTerminator<'a, P>","std::slice::RChunks<'a, T>","std::str::RMatches<'a, P>","std::slice::GroupByMut<'a, T, P>","std::iter::TakeWhile<I, P>","std::slice::RSplitN<'a, T, P>","std::sync::mpsc::Iter<'a, T>","std::vec::Drain<'_, T, A>","std::slice::SplitMut<'a, T, P>","std::str::RMatchIndices<'a, P>","std::str::Lines<'a>","std::str::SplitWhitespace<'a>","std::sync::mpsc::TryIter<'a, T>","std::char::DecodeUtf16<I>","std::option::IntoIter<A>","std::char::EscapeUnicode","std::option::IterMut<'a, A>","std::str::Chars<'a>","std::iter::Inspect<I, F>","std::iter::SkipWhile<I, P>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::iter::Rev<I>","std::net::Incoming<'a>","std::sys_common::net::LookupHost","std::boxed::Box<I, A>","std::sys_common::wstr::WStrUnits<'_>","std::iter::Repeat<A>","std::iter::Scan<I, St, F>","std::ops::Range<A>","std::collections::btree_set::Range<'a, T>","std::iter::Take<I>","std::iter::MapWhile<I, P>","std::iter::Skip<I>","std::collections::btree_map::IntoKeys<K, V, A>","std::slice::SplitInclusiveMut<'a, T, P>","std::slice::RChunksExact<'a, T>","std::collections::hash_map::ValuesMut<'a, K, V>","std::collections::btree_map::Values<'a, K, V>","std::slice::ChunksExactMut<'a, T>","std::iter::adapters::GenericShunt<'_, I, R>","std::collections::btree_map::IntoValues<K, V, A>","std::io::Bytes<R>","std::ops::RangeInclusive<A>","std::collections::hash_map::Keys<'a, K, V>","std::str::RSplitN<'a, P>","std::str::Matches<'a, P>","std::slice::Iter<'a, T>","std::env::VarsOs","std::iter::StepBy<I>","std::str::CharIndices<'a>","std::path::Components<'a>","std::char::EscapeDefault","std::slice::GroupBy<'a, T, P>","std::str::LinesAny<'a>","std::env::Vars","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::net::IntoIncoming","std::string::Drain<'_>","std::array::IntoIter<T, N>","std::sys_common::wtf8::EncodeWide<'a>","std::collections::vec_deque::IterMut<'a, T>","std::collections::binary_heap::IntoIter<T>","std::os::unix::net::ScmRights<'a>","std::collections::hash_set::Drain<'a, K>","std::io::Split<B>","std::sys::unix::args::Args","std::process::CommandArgs<'a>","std::iter::Cycle<I>","std::iter::Peekable<I>","std::slice::SplitNMut<'a, T, P>","std::char::CaseMappingIter"],"H":["std::slice::ChunksMut<'a, T>","std::collections::btree_map::IterMut<'a, K, V>","std::collections::binary_heap::Iter<'a, T>","std::ops::RangeInclusive<A>","std::str::SplitAsciiWhitespace<'a>","std::collections::hash_set::Iter<'a, K>","std::char::ToUppercase","std::slice::RChunksExact<'a, T>","std::collections::hash_map::IntoKeys<K, V>","std::vec::IntoIter<T, A>","std::collections::btree_set::Range<'a, T>","std::iter::Filter<I, P>","std::slice::RChunks<'a, T>","std::str::RSplitN<'a, P>","std::str::RMatches<'a, P>","std::collections::vec_deque::IntoIter<T, A>","std::sys::unix::fs::ReadDir","std::iter::Enumerate<I>","std::collections::hash_map::Keys<'a, K, V>","std::iter::Map<I, F>","std::collections::btree_set::Iter<'a, T>","std::os::unix::net::Incoming<'a>","std::ascii::EscapeDefault","std::char::CaseMappingIter","std::str::MatchIndices<'a, P>","std::iter::Empty<T>","bitflags::core::error::Source<'a>","std::sys_common::wtf8::EncodeWide<'a>","std::slice::RSplitMut<'a, T, P>","std::iter::IntersperseWith<I, G>","std::slice::Iter<'a, T>","std::net::Incoming<'a>","std::slice::SplitInclusive<'a, T, P>","std::slice::Split<'a, T, P>","std::str::SplitTerminator<'a, P>","std::collections::vec_deque::Iter<'a, T>","std::iter::Repeat<A>","std::iter::FromFn<F>","std::collections::linked_list::DrainFilter<'_, T, F>","std::str::Utf8Chunks<'a>","<&mut I as std::iter::Iterator>","std::process::CommandArgs<'a>","std::collections::btree_map::Keys<'a, K, V>","std::str::Bytes<'_>","std::option::IterMut<'a, A>","std::collections::hash_map::IntoIter<K, V>","std::collections::btree_map::IntoValues<K, V, A>","std::iter::sources::from_generator::FromGenerator<G>","std::iter::RepeatWith<F>","std::str::EscapeDefault<'a>","std::slice::RChunksExactMut<'a, T>","bitflags::core::slice::iter::GenericSplitN<I>","std::collections::btree_set::IntoIter<T, A>","std::slice::ArrayChunks<'a, T, N>","std::iter::FlatMap<I, U, F>","std::result::Iter<'a, T>","std::io::Lines<B>","std::path::Iter<'a>","std::slice::IterMut<'a, T>","std::slice::SplitN<'a, T, P>","std::sys::unix::process::process_common::CommandArgs<'a>","std::collections::btree_set::Union<'a, T>","std::sys::unix::os::SplitPaths<'a>","std::collections::binary_heap::DrainSorted<'_, T>","std::char::EscapeDebug","std::collections::hash_map::ValuesMut<'a, K, V>","std::collections::hash_set::Drain<'a, K>","std::collections::binary_heap::IntoIterSorted<T>","std::iter::Intersperse<I>","std::iter::ByRefSized<'_, I>","std::str::Split<'a, P>","std::iter::SkipWhile<I, P>","std::collections::hash_map::IntoValues<K, V>","std::str::SplitWhitespace<'a>","std::str::Lines<'a>","std::str::EncodeUtf16<'a>","std::slice::RSplitN<'a, T, P>","std::option::IntoIter<A>","std::char::ToLowercase","std::collections::hash_set::Union<'a, T, S>","std::result::IntoIter<T>","std::iter::FilterMap<I, F>","std::str::RMatchIndices<'a, P>","std::iter::OnceWith<F>","std::vec::DrainFilter<'_, T, F, A>","std::str::SplitN<'a, P>","std::iter::Peekable<I>","std::str::CharIndices<'a>","std::str::EscapeDebug<'a>","std::collections::hash_set::IntoIter<K>","std::str::LinesAny<'a>","std::collections::linked_list::IterMut<'a, T>","std::path::Components<'a>","std::collections::btree_map::ValuesMut<'a, K, V>","std::process::CommandEnvs<'a>","std::io::Bytes<R>","std::iter::adapters::GenericShunt<'_, I, R>","std::collections::hash_map::Drain<'a, K, V>","std::collections::hash_map::IterMut<'a, K, V>","std::str::RSplitTerminator<'a, P>","std::iter::Take<I>","std::slice::Windows<'a, T>","std::collections::binary_heap::IntoIter<T>","std::result::IterMut<'a, T>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::collections::hash_set::DrainFilter<'_, K, F>","std::str::Matches<'a, P>","std::boxed::Box<I, A>","std::iter::Copied<I>","std::string::Drain<'_>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::iter::StepBy<I>","std::iter::Successors<T, F>","std::path::Ancestors<'a>","std::slice::EscapeAscii<'a>","std::sync::mpsc::TryIter<'a, T>","std::iter::Fuse<I>","std::collections::btree_set::Intersection<'a, T, A>","std::str::SplitInclusive<'a, P>","std::vec::Drain<'_, T, A>","std::slice::RSplit<'a, T, P>","std::char::EscapeDefault","std::os::unix::net::ScmRights<'a>","std::env::Args","std::option::Item<A>","std::iter::TakeWhile<I, P>","std::collections::btree_set::SymmetricDifference<'a, T>","std::slice::RChunksMut<'a, T>","std::env::Vars","std::slice::ArrayWindows<'a, T, N>","std::collections::btree_map::Values<'a, K, V>","std::os::unix::net::Messages<'a>","std::net::IntoIncoming","std::os::unix::net::ScmCredentials<'a>","std::env::VarsOs","std::slice::SplitInclusiveMut<'a, T, P>","std::iter::Chain<A, B>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::collections::btree_map::IntoIter<K, V, A>","std::slice::RSplitNMut<'a, T, P>","std::slice::ChunksExact<'a, T>","std::collections::binary_heap::Drain<'_, T>","std::collections::hash_set::Intersection<'a, T, S>","std::slice::Chunks<'a, T>","std::vec::Splice<'_, I, A>","std::sync::mpsc::IntoIter<T>","std::env::ArgsOs","std::iter::Zip<A, B>","std::iter::Cloned<I>","std::iter::Inspect<I, F>","std::iter::Scan<I, St, F>","std::sync::mpsc::Iter<'a, T>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::slice::ArrayChunksMut<'a, T, N>","std::collections::hash_set::Difference<'a, T, S>","std::slice::ChunksExactMut<'a, T>","std::iter::RepeatN<A>","std::ops::Range<A>","std::iter::Skip<I>","std::iter::Flatten<I>","std::sys_common::wstr::WStrUnits<'_>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::str::Chars<'a>","std::collections::btree_set::Difference<'a, T, A>","std::collections::btree_map::IntoKeys<K, V, A>","std::collections::linked_list::Iter<'a, T>","std::char::EscapeUnicode","std::array::IntoIter<T, N>","std::slice::SplitMut<'a, T, P>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::collections::btree_map::Iter<'a, K, V>","std::sys::unix::args::Args","std::collections::hash_map::Values<'a, K, V>","std::slice::SplitNMut<'a, T, P>","std::iter::MapWhile<I, P>","std::iter::Rev<I>","std::slice::GroupBy<'a, T, P>","std::ops::index_range::IndexRange","std::iter::ArrayChunks<I, N>","std::collections::vec_deque::IterMut<'a, T>","std::option::Iter<'a, A>","std::sys::unix::os::Env","std::fs::ReadDir","std::env::SplitPaths<'a>","std::sys_common::net::LookupHost","std::collections::vec_deque::Drain<'_, T, A>","std::io::Split<B>","std::ops::RangeFrom<A>","std::iter::Cycle<I>","std::str::EscapeUnicode<'a>","std::iter::Once<T>","std::collections::btree_map::Range<'a, K, V>","std::slice::GroupByMut<'a, T, P>","std::collections::btree_map::RangeMut<'a, K, V>","std::collections::linked_list::IntoIter<T>","std::str::RSplit<'a, P>","std::char::DecodeUtf16<I>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::collections::hash_map::Iter<'a, K, V>"],"R":["std::slice::SplitMut<'a, T, P>","std::collections::hash_map::Keys<'a, K, V>","std::vec::Splice<'_, I, A>","std::str::EscapeDefault<'a>","std::result::Iter<'a, T>","std::str::SplitN<'a, P>","std::str::RSplit<'a, P>","std::str::Split<'a, P>","std::slice::SplitInclusive<'a, T, P>","std::iter::StepBy<I>","std::iter::Take<I>","std::collections::hash_map::Values<'a, K, V>","std::iter::OnceWith<F>","std::str::EscapeDebug<'a>","std::process::CommandArgs<'a>","std::collections::vec_deque::Iter<'a, T>","std::path::Iter<'a>","std::collections::hash_set::Intersection<'a, T, S>","std::str::Matches<'a, P>","std::vec::Drain<'_, T, A>","std::collections::linked_list::DrainFilter<'_, T, F>","std::collections::binary_heap::Iter<'a, T>","std::sync::mpsc::TryIter<'a, T>","std::collections::btree_map::ValuesMut<'a, K, V>","bitflags::core::slice::iter::GenericSplitN<I>","std::slice::Chunks<'a, T>","std::char::CaseMappingIter","std::str::LinesAny<'a>","std::sync::mpsc::IntoIter<T>","std::slice::ChunksMut<'a, T>","std::collections::linked_list::Iter<'a, T>","std::iter::MapWhile<I, P>","std::slice::ArrayChunksMut<'a, T, N>","std::str::SplitInclusive<'a, P>","std::slice::ArrayChunks<'a, T, N>","std::collections::btree_map::RangeMut<'a, K, V>","std::collections::btree_map::IterMut<'a, K, V>","std::char::ToLowercase","std::iter::Fuse<I>","std::os::unix::net::ScmRights<'a>","std::collections::hash_map::IntoKeys<K, V>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::slice::IterMut<'a, T>","std::iter::Chain<A, B>","std::ops::RangeInclusive<A>","std::io::Split<B>","std::path::Components<'a>","std::result::IterMut<'a, T>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::str::CharIndices<'a>","std::os::unix::net::Incoming<'a>","std::collections::hash_set::IntoIter<K>","std::iter::Enumerate<I>","std::sys::unix::os::SplitPaths<'a>","std::iter::Successors<T, F>","std::str::Chars<'a>","std::os::unix::net::Messages<'a>","std::iter::Map<I, F>","std::env::Vars","std::slice::ChunksExactMut<'a, T>","std::collections::hash_map::Drain<'a, K, V>","std::str::Bytes<'_>","std::slice::RSplitNMut<'a, T, P>","std::char::EscapeUnicode","std::collections::binary_heap::DrainSorted<'_, T>","std::iter::Once<T>","std::boxed::Box<I, A>","std::slice::RChunksExactMut<'a, T>","std::iter::Repeat<A>","std::collections::vec_deque::IterMut<'a, T>","std::ascii::EscapeDefault","std::str::MatchIndices<'a, P>","std::collections::btree_set::Iter<'a, T>","std::collections::binary_heap::IntoIterSorted<T>","std::slice::RSplitMut<'a, T, P>","std::collections::hash_map::Iter<'a, K, V>","std::string::Drain<'_>","std::io::Lines<B>","std::iter::TakeWhile<I, P>","std::str::EncodeUtf16<'a>","std::collections::btree_map::Range<'a, K, V>","std::collections::hash_set::Difference<'a, T, S>","std::slice::RSplit<'a, T, P>","std::slice::ChunksExact<'a, T>","std::collections::hash_set::DrainFilter<'_, K, F>","std::iter::FlatMap<I, U, F>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::slice::SplitInclusiveMut<'a, T, P>","std::env::VarsOs","std::ops::RangeFrom<A>","std::slice::RChunks<'a, T>","std::str::Lines<'a>","std::iter::RepeatN<A>","std::iter::SkipWhile<I, P>","std::iter::IntersperseWith<I, G>","std::ops::Range<A>","std::sys::unix::args::Args","std::str::SplitTerminator<'a, P>","std::iter::Skip<I>","std::slice::EscapeAscii<'a>","std::vec::DrainFilter<'_, T, F, A>","std::collections::linked_list::IntoIter<T>","std::collections::hash_map::IntoIter<K, V>","std::iter::Cloned<I>","std::ops::index_range::IndexRange","std::str::RMatchIndices<'a, P>","std::iter::Flatten<I>","std::slice::RChunksMut<'a, T>","std::option::IntoIter<A>","std::collections::btree_map::IntoValues<K, V, A>","std::fs::ReadDir","std::collections::btree_map::IntoIter<K, V, A>","std::slice::Split<'a, T, P>","std::slice::RSplitN<'a, T, P>","std::array::IntoIter<T, N>","std::os::unix::net::ScmCredentials<'a>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::slice::Windows<'a, T>","<&mut I as std::iter::Iterator>","std::collections::btree_set::IntoIter<T, A>","std::option::Iter<'a, A>","std::iter::Intersperse<I>","std::collections::hash_map::ValuesMut<'a, K, V>","std::collections::linked_list::IterMut<'a, T>","std::env::ArgsOs","std::collections::btree_map::IntoKeys<K, V, A>","std::iter::Empty<T>","std::process::CommandEnvs<'a>","std::collections::hash_set::Iter<'a, K>","std::net::Incoming<'a>","std::slice::Iter<'a, T>","std::collections::hash_map::IterMut<'a, K, V>","std::collections::vec_deque::Drain<'_, T, A>","std::iter::Inspect<I, F>","std::collections::binary_heap::IntoIter<T>","std::io::Bytes<R>","std::iter::Cycle<I>","std::collections::btree_set::Difference<'a, T, A>","std::iter::Scan<I, St, F>","std::iter::ByRefSized<'_, I>","std::str::Utf8Chunks<'a>","std::iter::FilterMap<I, F>","std::vec::IntoIter<T, A>","std::str::SplitWhitespace<'a>","std::str::RSplitTerminator<'a, P>","std::iter::RepeatWith<F>","std::char::EscapeDefault","std::str::SplitAsciiWhitespace<'a>","std::iter::Filter<I, P>","std::collections::btree_set::Union<'a, T>","std::sys::unix::fs::ReadDir","std::collections::btree_set::SymmetricDifference<'a, T>","std::iter::sources::from_generator::FromGenerator<G>","std::collections::vec_deque::IntoIter<T, A>","std::iter::Peekable<I>","std::slice::SplitN<'a, T, P>","std::sys_common::wstr::WStrUnits<'_>","std::option::Item<A>","std::env::SplitPaths<'a>","std::collections::binary_heap::Drain<'_, T>","std::collections::btree_map::Iter<'a, K, V>","std::slice::ArrayWindows<'a, T, N>","std::str::EscapeUnicode<'a>","std::iter::Zip<A, B>","std::net::IntoIncoming","std::char::DecodeUtf16<I>","std::iter::Rev<I>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::collections::btree_map::Values<'a, K, V>","std::sys::unix::process::process_common::CommandArgs<'a>","std::slice::GroupBy<'a, T, P>","std::path::Ancestors<'a>","std::sys_common::net::LookupHost","std::iter::FromFn<F>","std::collections::hash_set::Union<'a, T, S>","std::collections::hash_map::IntoValues<K, V>","std::iter::Copied<I>","std::collections::hash_set::Drain<'a, K>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::slice::SplitNMut<'a, T, P>","std::iter::adapters::GenericShunt<'_, I, R>","std::option::IterMut<'a, A>","std::iter::ArrayChunks<I, N>","std::slice::RChunksExact<'a, T>","std::collections::btree_map::Keys<'a, K, V>","std::collections::btree_set::Intersection<'a, T, A>","std::sys::unix::os::Env","std::collections::btree_set::Range<'a, T>","std::slice::GroupByMut<'a, T, P>","std::sys_common::wtf8::EncodeWide<'a>","std::char::ToUppercase","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::result::IntoIter<T>","std::env::Args","std::str::RMatches<'a, P>","std::str::RSplitN<'a, P>","bitflags::core::error::Source<'a>","std::sync::mpsc::Iter<'a, T>","std::char::EscapeDebug"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::table::Table<'a, H, R>
let mut p1 = 0u16; // None+u16
+p0.header_gap(p1);
+widgets::table::Table::<'a, H, R>::header_gap(p0, p1);
+crate::widgets::table::Table::<'a, H, R>::header_gap(p0, p1);
+<widgets::table::Table<'a, H, R>>::header_gap(p0, p1);
-----------------
src/widgets/table.rs <widgets::table::Table<'a, H, R> as widgets::StatefulWidget>::render
'a
deps:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"<widgets::table::Table<'a, H, R> as widgets::StatefulWidget>::render":{"<D as std::iter::Iterator>::Item":["std::fmt::Display"],"<H as std::iter::Iterator>::Item":["std::fmt::Display"],"D":["std::iter::Iterator","std::marker::Sized"],"H":["std::iter::Iterator","std::marker::Sized"],"R":["std::marker::Sized","std::iter::Iterator"]}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"<widgets::table::Table<'a, H, R> as widgets::StatefulWidget>::render":{"<D as std::iter::Iterator>::Item":["backend::termion::Bg","backend::termion::ModifierDiff","<&mut T as std::fmt::Display>","backend::termion::Fg"],"<H as std::iter::Iterator>::Item":["<&T as std::fmt::Display>","backend::termion::Bg","backend::termion::Fg","backend::termion::ModifierDiff"],"D":["std::collections::hash_map::Iter<'a, K, V>","std::net::Incoming<'a>","std::collections::hash_map::ValuesMut<'a, K, V>","std::iter::Repeat<A>","std::slice::IterMut<'a, T>","std::collections::hash_map::Values<'a, K, V>","std::option::Item<A>","std::slice::ChunksExactMut<'a, T>","std::collections::btree_set::Intersection<'a, T, A>","std::collections::btree_map::Keys<'a, K, V>","std::collections::linked_list::IntoIter<T>","std::collections::binary_heap::Iter<'a, T>","std::slice::GroupByMut<'a, T, P>","std::os::unix::net::ScmRights<'a>","std::slice::RSplitMut<'a, T, P>","std::str::LinesAny<'a>","std::sync::mpsc::TryIter<'a, T>","std::env::VarsOs","std::iter::IntersperseWith<I, G>","std::sync::mpsc::Iter<'a, T>","std::iter::Map<I, F>","std::collections::btree_map::Range<'a, K, V>","std::char::EscapeDebug","std::slice::ArrayChunks<'a, T, N>","std::iter::TakeWhile<I, P>","std::collections::hash_set::Iter<'a, K>","std::iter::ArrayChunks<I, N>","std::slice::RChunksMut<'a, T>","std::ops::index_range::IndexRange","std::str::MatchIndices<'a, P>","std::result::Iter<'a, T>","std::str::Utf8Chunks<'a>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::collections::btree_map::Values<'a, K, V>","std::option::Iter<'a, A>","std::collections::hash_map::IntoKeys<K, V>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::iter::FromFn<F>","std::collections::btree_map::Iter<'a, K, V>","std::result::IterMut<'a, T>","std::collections::binary_heap::Drain<'_, T>","std::collections::hash_set::Intersection<'a, T, S>","std::ops::Range<A>","std::env::ArgsOs","std::string::Drain<'_>","std::slice::SplitN<'a, T, P>","std::str::CharIndices<'a>","std::collections::binary_heap::DrainSorted<'_, T>","std::str::EncodeUtf16<'a>","std::iter::Cycle<I>","std::collections::hash_set::IntoIter<K>","std::collections::linked_list::IterMut<'a, T>","std::slice::SplitNMut<'a, T, P>","std::slice::SplitInclusiveMut<'a, T, P>","std::slice::SplitMut<'a, T, P>","std::iter::StepBy<I>","std::collections::hash_set::Union<'a, T, S>","std::env::Vars","std::slice::SplitInclusive<'a, T, P>","std::iter::Inspect<I, F>","std::sys::unix::fs::ReadDir","std::slice::Iter<'a, T>","std::collections::hash_set::Drain<'a, K>","std::os::unix::net::Incoming<'a>","std::collections::btree_set::IntoIter<T, A>","std::collections::btree_map::RangeMut<'a, K, V>","std::boxed::Box<I, A>","std::collections::btree_set::SymmetricDifference<'a, T>","std::vec::Splice<'_, I, A>","std::collections::btree_map::ValuesMut<'a, K, V>","std::env::Args","std::slice::RChunksExactMut<'a, T>","std::iter::ByRefSized<'_, I>","std::iter::Flatten<I>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::iter::Intersperse<I>","std::slice::EscapeAscii<'a>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::vec::Drain<'_, T, A>","std::str::EscapeDebug<'a>","std::slice::RSplitNMut<'a, T, P>","std::collections::btree_set::Difference<'a, T, A>","std::array::IntoIter<T, N>","std::str::RSplitTerminator<'a, P>","std::process::CommandArgs<'a>","std::sys_common::wstr::WStrUnits<'_>","std::str::SplitAsciiWhitespace<'a>","bitflags::core::slice::iter::GenericSplitN<I>","std::collections::hash_map::IntoValues<K, V>","std::os::unix::net::ScmCredentials<'a>","std::option::IterMut<'a, A>","std::collections::btree_set::Iter<'a, T>","std::str::Chars<'a>","std::str::SplitWhitespace<'a>","std::str::Matches<'a, P>","std::str::Split<'a, P>","std::char::EscapeUnicode","std::sys_common::net::LookupHost","std::iter::FlatMap<I, U, F>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::collections::btree_map::IntoValues<K, V, A>","std::slice::GroupBy<'a, T, P>","std::iter::Chain<A, B>","std::str::EscapeUnicode<'a>","std::iter::Cloned<I>","std::slice::Split<'a, T, P>","std::str::RSplitN<'a, P>","std::iter::Rev<I>","std::net::IntoIncoming","std::str::Bytes<'_>","std::slice::RChunks<'a, T>","std::io::Split<B>","std::char::ToLowercase","std::char::ToUppercase","std::path::Components<'a>","std::slice::Chunks<'a, T>","std::fs::ReadDir","std::collections::linked_list::DrainFilter<'_, T, F>","std::os::unix::net::Messages<'a>","std::sys::unix::args::Args","std::slice::ChunksExact<'a, T>","std::iter::Scan<I, St, F>","std::collections::hash_map::IntoIter<K, V>","std::iter::Skip<I>","std::slice::RSplitN<'a, T, P>","std::iter::Once<T>","std::slice::RSplit<'a, T, P>","std::collections::hash_map::Keys<'a, K, V>","std::iter::RepeatWith<F>","std::str::SplitTerminator<'a, P>","std::collections::vec_deque::Iter<'a, T>","std::sys::unix::os::SplitPaths<'a>","std::collections::linked_list::Iter<'a, T>","std::collections::btree_map::IterMut<'a, K, V>","std::slice::RChunksExact<'a, T>","std::slice::ChunksMut<'a, T>","std::iter::Fuse<I>","std::slice::ArrayChunksMut<'a, T, N>","std::collections::btree_set::Range<'a, T>","std::iter::Successors<T, F>","std::str::SplitN<'a, P>","std::str::EscapeDefault<'a>","std::iter::Take<I>","std::char::EscapeDefault","std::collections::btree_map::IntoIter<K, V, A>","std::slice::ArrayWindows<'a, T, N>","std::collections::vec_deque::IntoIter<T, A>","std::iter::Empty<T>","std::iter::adapters::GenericShunt<'_, I, R>","std::collections::btree_set::Union<'a, T>","std::sync::mpsc::IntoIter<T>","std::process::CommandEnvs<'a>","std::iter::RepeatN<A>","std::collections::hash_set::Difference<'a, T, S>","std::collections::hash_map::Drain<'a, K, V>","std::collections::binary_heap::IntoIterSorted<T>","std::char::CaseMappingIter","std::path::Ancestors<'a>","std::ops::RangeFrom<A>","std::sys::unix::process::process_common::CommandArgs<'a>","std::collections::hash_map::IterMut<'a, K, V>","std::str::RMatchIndices<'a, P>","std::slice::Windows<'a, T>","std::iter::sources::from_generator::FromGenerator<G>","std::char::DecodeUtf16<I>","std::ascii::EscapeDefault","std::io::Lines<B>","bitflags::core::error::Source<'a>","std::iter::OnceWith<F>","std::iter::Filter<I, P>","std::iter::FilterMap<I, F>","std::collections::btree_map::IntoKeys<K, V, A>","std::str::RMatches<'a, P>","std::collections::binary_heap::IntoIter<T>","std::iter::MapWhile<I, P>","std::env::SplitPaths<'a>","std::iter::Peekable<I>","std::sys::unix::os::Env","std::path::Iter<'a>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::str::Lines<'a>","std::iter::Zip<A, B>","std::vec::IntoIter<T, A>","std::option::IntoIter<A>","std::str::RSplit<'a, P>","<&mut I as std::iter::Iterator>","std::iter::Enumerate<I>","std::collections::hash_set::DrainFilter<'_, K, F>","std::iter::SkipWhile<I, P>","std::result::IntoIter<T>","std::collections::vec_deque::IterMut<'a, T>","std::vec::DrainFilter<'_, T, F, A>","std::collections::vec_deque::Drain<'_, T, A>","std::str::SplitInclusive<'a, P>","std::io::Bytes<R>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::sys_common::wtf8::EncodeWide<'a>","std::ops::RangeInclusive<A>","std::iter::Copied<I>"],"H":["std::iter::Enumerate<I>","std::os::unix::net::Messages<'a>","std::str::Split<'a, P>","std::slice::RChunksExactMut<'a, T>","std::slice::SplitInclusive<'a, T, P>","std::collections::btree_map::Range<'a, K, V>","std::collections::hash_set::Drain<'a, K>","std::collections::vec_deque::IterMut<'a, T>","std::iter::sources::from_generator::FromGenerator<G>","std::env::SplitPaths<'a>","std::str::MatchIndices<'a, P>","std::collections::btree_map::IntoValues<K, V, A>","std::iter::Repeat<A>","std::collections::vec_deque::Drain<'_, T, A>","std::result::IterMut<'a, T>","std::path::Components<'a>","std::sync::mpsc::TryIter<'a, T>","std::collections::hash_map::ValuesMut<'a, K, V>","std::iter::Map<I, F>","std::iter::Rev<I>","std::slice::ArrayWindows<'a, T, N>","std::iter::FromFn<F>","std::collections::btree_map::IntoIter<K, V, A>","std::iter::RepeatN<A>","std::slice::ArrayChunks<'a, T, N>","std::iter::Scan<I, St, F>","std::vec::IntoIter<T, A>","std::str::EscapeUnicode<'a>","std::sync::mpsc::Iter<'a, T>","std::env::Vars","std::ops::index_range::IndexRange","std::sys::unix::os::SplitPaths<'a>","std::slice::RSplitN<'a, T, P>","std::iter::StepBy<I>","std::collections::hash_map::IntoIter<K, V>","std::collections::hash_set::Union<'a, T, S>","std::collections::hash_set::Iter<'a, K>","std::char::EscapeUnicode","std::collections::btree_set::Iter<'a, T>","std::collections::vec_deque::IntoIter<T, A>","std::boxed::Box<I, A>","std::char::ToUppercase","std::slice::Chunks<'a, T>","std::str::LinesAny<'a>","std::slice::SplitInclusiveMut<'a, T, P>","std::slice::RChunksExact<'a, T>","std::slice::SplitN<'a, T, P>","std::slice::ChunksExact<'a, T>","std::collections::hash_set::IntoIter<K>","std::char::EscapeDebug","std::sys::unix::args::Args","std::slice::ArrayChunksMut<'a, T, N>","std::collections::btree_map::Keys<'a, K, V>","std::sync::mpsc::IntoIter<T>","std::slice::GroupByMut<'a, T, P>","std::iter::SkipWhile<I, P>","std::net::Incoming<'a>","std::iter::ArrayChunks<I, N>","std::str::RSplit<'a, P>","std::option::Iter<'a, A>","std::env::Args","std::env::VarsOs","std::slice::Split<'a, T, P>","std::iter::Intersperse<I>","std::collections::linked_list::Iter<'a, T>","std::str::RMatches<'a, P>","std::collections::vec_deque::Iter<'a, T>","bitflags::core::slice::iter::GenericSplitN<I>","std::collections::btree_map::Iter<'a, K, V>","std::vec::Drain<'_, T, A>","std::collections::binary_heap::IntoIter<T>","std::sys::unix::fs::ReadDir","std::vec::DrainFilter<'_, T, F, A>","std::collections::btree_map::IntoKeys<K, V, A>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::iter::Successors<T, F>","std::iter::adapters::GenericShunt<'_, I, R>","std::str::SplitInclusive<'a, P>","std::collections::hash_map::Values<'a, K, V>","std::io::Bytes<R>","std::process::CommandEnvs<'a>","std::collections::hash_map::IntoValues<K, V>","std::iter::Inspect<I, F>","std::collections::linked_list::IterMut<'a, T>","std::os::unix::net::Incoming<'a>","std::path::Ancestors<'a>","std::io::Split<B>","std::net::IntoIncoming","std::slice::RChunksMut<'a, T>","std::iter::Flatten<I>","std::sys::unix::process::process_common::CommandArgs<'a>","std::str::EscapeDefault<'a>","std::str::CharIndices<'a>","std::collections::hash_map::Drain<'a, K, V>","<&mut I as std::iter::Iterator>","std::collections::btree_map::IterMut<'a, K, V>","std::str::RMatchIndices<'a, P>","std::iter::Once<T>","std::fs::ReadDir","std::collections::btree_set::SymmetricDifference<'a, T>","std::str::Chars<'a>","std::path::Iter<'a>","std::collections::btree_map::Values<'a, K, V>","std::ascii::EscapeDefault","std::collections::btree_map::RangeMut<'a, K, V>","std::collections::binary_heap::Drain<'_, T>","std::iter::Take<I>","std::iter::Skip<I>","std::collections::btree_set::IntoIter<T, A>","std::ops::RangeInclusive<A>","std::iter::FilterMap<I, F>","std::collections::binary_heap::IntoIterSorted<T>","std::slice::EscapeAscii<'a>","std::collections::hash_set::DrainFilter<'_, K, F>","std::slice::SplitMut<'a, T, P>","std::collections::btree_set::Union<'a, T>","std::char::CaseMappingIter","std::str::SplitN<'a, P>","std::vec::Splice<'_, I, A>","std::option::IterMut<'a, A>","std::str::Lines<'a>","std::collections::binary_heap::DrainSorted<'_, T>","std::str::RSplitTerminator<'a, P>","std::slice::RChunks<'a, T>","std::char::EscapeDefault","std::collections::linked_list::DrainFilter<'_, T, F>","std::slice::ChunksMut<'a, T>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::collections::hash_map::IterMut<'a, K, V>","std::array::IntoIter<T, N>","std::iter::Chain<A, B>","std::str::EscapeDebug<'a>","std::io::Lines<B>","std::ops::RangeFrom<A>","std::str::Bytes<'_>","std::iter::Zip<A, B>","std::collections::hash_set::Difference<'a, T, S>","std::collections::hash_map::Keys<'a, K, V>","bitflags::core::error::Source<'a>","std::str::SplitWhitespace<'a>","std::slice::IterMut<'a, T>","std::iter::MapWhile<I, P>","std::slice::RSplitMut<'a, T, P>","std::collections::btree_set::Difference<'a, T, A>","std::string::Drain<'_>","std::collections::hash_map::Iter<'a, K, V>","std::iter::Peekable<I>","std::iter::Cloned<I>","std::sys_common::net::LookupHost","std::collections::btree_map::ValuesMut<'a, K, V>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::iter::Copied<I>","std::os::unix::net::ScmRights<'a>","std::char::DecodeUtf16<I>","std::option::IntoIter<A>","std::collections::binary_heap::Iter<'a, T>","std::os::unix::net::ScmCredentials<'a>","std::str::SplitTerminator<'a, P>","std::iter::Cycle<I>","std::process::CommandArgs<'a>","std::iter::Filter<I, P>","std::slice::Iter<'a, T>","std::collections::linked_list::IntoIter<T>","std::slice::SplitNMut<'a, T, P>","std::collections::hash_set::Intersection<'a, T, S>","std::iter::FlatMap<I, U, F>","std::option::Item<A>","std::collections::btree_set::Intersection<'a, T, A>","std::iter::TakeWhile<I, P>","std::collections::btree_set::Range<'a, T>","std::slice::RSplitNMut<'a, T, P>","std::collections::hash_map::IntoKeys<K, V>","std::env::ArgsOs","std::char::ToLowercase","std::result::Iter<'a, T>","std::iter::ByRefSized<'_, I>","std::iter::IntersperseWith<I, G>","std::sys_common::wstr::WStrUnits<'_>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::sys_common::wtf8::EncodeWide<'a>","std::iter::OnceWith<F>","std::slice::ChunksExactMut<'a, T>","std::iter::RepeatWith<F>","std::str::RSplitN<'a, P>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::str::Utf8Chunks<'a>","std::str::EncodeUtf16<'a>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::iter::Fuse<I>","std::sys::unix::os::Env","std::str::Matches<'a, P>","std::slice::Windows<'a, T>","std::ops::Range<A>","std::str::SplitAsciiWhitespace<'a>","std::iter::Empty<T>","std::result::IntoIter<T>","std::slice::GroupBy<'a, T, P>","std::slice::RSplit<'a, T, P>"],"R":["std::slice::ArrayChunks<'a, T, N>","std::boxed::Box<I, A>","std::str::EscapeDefault<'a>","std::ascii::EscapeDefault","std::process::CommandEnvs<'a>","std::option::IterMut<'a, A>","std::slice::RSplitN<'a, T, P>","std::iter::FlatMap<I, U, F>","std::str::MatchIndices<'a, P>","std::collections::btree_set::Iter<'a, T>","std::collections::hash_set::DrainFilter<'_, K, F>","std::collections::hash_set::Drain<'a, K>","std::env::Args","std::collections::linked_list::DrainFilter<'_, T, F>","std::path::Iter<'a>","std::str::EncodeUtf16<'a>","std::iter::adapters::GenericShunt<'_, I, R>","std::char::DecodeUtf16<I>","std::iter::Empty<T>","std::slice::SplitN<'a, T, P>","std::sys_common::wstr::WStrUnits<'_>","std::vec::IntoIter<T, A>","std::iter::Inspect<I, F>","std::slice::ChunksMut<'a, T>","std::os::unix::net::Messages<'a>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::hash_map::IntoValues<K, V>","std::slice::RChunksExactMut<'a, T>","std::iter::Zip<A, B>","std::slice::RSplitNMut<'a, T, P>","std::str::Utf8Chunks<'a>","std::net::Incoming<'a>","std::collections::binary_heap::IntoIter<T>","std::slice::RChunksMut<'a, T>","std::collections::btree_map::Iter<'a, K, V>","std::path::Ancestors<'a>","std::slice::RSplitMut<'a, T, P>","std::str::CharIndices<'a>","std::env::SplitPaths<'a>","std::slice::SplitNMut<'a, T, P>","std::result::IntoIter<T>","std::iter::Map<I, F>","std::collections::btree_set::SymmetricDifference<'a, T>","std::iter::Scan<I, St, F>","bitflags::core::error::Source<'a>","std::array::IntoIter<T, N>","std::str::RSplit<'a, P>","std::str::SplitN<'a, P>","std::env::ArgsOs","std::collections::btree_set::IntoIter<T, A>","std::collections::btree_set::Range<'a, T>","std::collections::btree_set::Union<'a, T>","std::str::SplitWhitespace<'a>","std::option::Iter<'a, A>","std::iter::Cloned<I>","std::collections::btree_map::IterMut<'a, K, V>","std::string::Drain<'_>","std::collections::hash_set::Difference<'a, T, S>","std::sys::unix::args::Args","std::iter::ArrayChunks<I, N>","std::collections::hash_map::ValuesMut<'a, K, V>","std::iter::FromFn<F>","std::char::CaseMappingIter","std::os::unix::net::ScmCredentials<'a>","std::collections::btree_map::Values<'a, K, V>","std::collections::hash_set::Union<'a, T, S>","std::char::EscapeDebug","std::slice::ArrayWindows<'a, T, N>","std::vec::DrainFilter<'_, T, F, A>","std::str::RSplitN<'a, P>","std::iter::StepBy<I>","std::collections::hash_map::IntoIter<K, V>","std::process::CommandArgs<'a>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::sync::mpsc::Iter<'a, T>","std::iter::Filter<I, P>","std::collections::hash_set::Intersection<'a, T, S>","std::str::SplitAsciiWhitespace<'a>","std::str::Lines<'a>","std::collections::btree_map::IntoKeys<K, V, A>","std::sys::unix::process::process_common::CommandArgs<'a>","std::collections::hash_map::Keys<'a, K, V>","std::char::EscapeDefault","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::option::IntoIter<A>","std::iter::Flatten<I>","std::iter::Once<T>","std::slice::Iter<'a, T>","std::iter::Fuse<I>","std::option::Item<A>","std::ops::index_range::IndexRange","std::collections::hash_map::Values<'a, K, V>","std::iter::OnceWith<F>","std::iter::Take<I>","std::collections::btree_map::Keys<'a, K, V>","std::collections::hash_set::Iter<'a, K>","std::collections::vec_deque::IntoIter<T, A>","std::iter::ByRefSized<'_, I>","std::iter::Cycle<I>","std::str::LinesAny<'a>","std::str::Chars<'a>","std::ops::Range<A>","std::collections::btree_map::RangeMut<'a, K, V>","std::env::Vars","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::sys_common::net::LookupHost","std::sys::unix::os::Env","std::collections::linked_list::IterMut<'a, T>","std::os::unix::net::ScmRights<'a>","std::collections::hash_set::IntoIter<K>","std::str::EscapeUnicode<'a>","std::str::RMatchIndices<'a, P>","std::env::VarsOs","std::collections::hash_map::IterMut<'a, K, V>","std::str::SplitTerminator<'a, P>","std::char::ToUppercase","std::iter::RepeatWith<F>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::collections::binary_heap::DrainSorted<'_, T>","std::iter::IntersperseWith<I, G>","std::collections::btree_set::Intersection<'a, T, A>","std::str::Split<'a, P>","std::result::Iter<'a, T>","std::collections::binary_heap::Iter<'a, T>","std::iter::sources::from_generator::FromGenerator<G>","std::iter::Chain<A, B>","std::slice::Chunks<'a, T>","std::sys::unix::os::SplitPaths<'a>","std::iter::SkipWhile<I, P>","std::collections::btree_map::IntoValues<K, V, A>","std::slice::GroupByMut<'a, T, P>","std::io::Lines<B>","std::collections::btree_map::ValuesMut<'a, K, V>","std::sync::mpsc::TryIter<'a, T>","std::collections::hash_map::DrainFilter<'_, K, V, F>","<&mut I as std::iter::Iterator>","std::net::IntoIncoming","std::ops::RangeInclusive<A>","std::slice::ChunksExact<'a, T>","std::result::IterMut<'a, T>","std::slice::SplitMut<'a, T, P>","std::slice::SplitInclusive<'a, T, P>","std::vec::Drain<'_, T, A>","std::str::Bytes<'_>","std::slice::Split<'a, T, P>","bitflags::core::slice::iter::GenericSplitN<I>","std::collections::btree_map::Range<'a, K, V>","std::iter::MapWhile<I, P>","std::iter::Copied<I>","std::iter::RepeatN<A>","std::slice::GroupBy<'a, T, P>","std::iter::Skip<I>","std::char::ToLowercase","std::slice::RChunksExact<'a, T>","std::slice::RChunks<'a, T>","std::io::Split<B>","std::iter::Enumerate<I>","std::vec::Splice<'_, I, A>","std::str::RSplitTerminator<'a, P>","std::fs::ReadDir","std::slice::EscapeAscii<'a>","std::collections::hash_map::Drain<'a, K, V>","std::str::EscapeDebug<'a>","std::iter::Repeat<A>","std::collections::btree_map::IntoIter<K, V, A>","std::slice::Windows<'a, T>","std::collections::binary_heap::IntoIterSorted<T>","std::slice::ArrayChunksMut<'a, T, N>","std::iter::FilterMap<I, F>","std::collections::vec_deque::Iter<'a, T>","std::slice::SplitInclusiveMut<'a, T, P>","std::collections::binary_heap::Drain<'_, T>","std::ops::RangeFrom<A>","std::collections::hash_map::IntoKeys<K, V>","std::slice::IterMut<'a, T>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::str::Matches<'a, P>","std::char::EscapeUnicode","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::path::Components<'a>","std::str::SplitInclusive<'a, P>","std::iter::Peekable<I>","std::sync::mpsc::IntoIter<T>","std::collections::btree_set::Difference<'a, T, A>","std::iter::Rev<I>","std::collections::vec_deque::IterMut<'a, T>","std::os::unix::net::Incoming<'a>","std::iter::TakeWhile<I, P>","std::collections::hash_map::Iter<'a, K, V>","std::str::RMatches<'a, P>","std::iter::Intersperse<I>","std::collections::linked_list::Iter<'a, T>","std::slice::RSplit<'a, T, P>","std::slice::ChunksExactMut<'a, T>","std::iter::Successors<T, F>","std::io::Bytes<R>","std::collections::linked_list::IntoIter<T>","std::sys::unix::fs::ReadDir","std::sys_common::wtf8::EncodeWide<'a>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::table::Table<'a, H, R>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
let mut p3 = &mut  MaybeUninit::uninit().assume_init(); // <widgets::table::Table<'a, H, R> as widgets::StatefulWidget>::State
+p0.render(p1, p2, p3);
+<widgets::table::Table<'a, H, R> as widgets::StatefulWidget>::render(p0, p1, p2, p3);
+crate::<widgets::table::Table<'a, H, R> as widgets::StatefulWidget>::render(p0, p1, p2, p3);
+<widgets::table::Table<'a, H, R>>::render(p0, p1, p2, p3);
-----------------
src/widgets/table.rs <widgets::table::Table<'a, H, R> as widgets::Widget>::render
'a
deps:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"<widgets::table::Table<'a, H, R> as widgets::Widget>::render":{"<D as std::iter::Iterator>::Item":["std::fmt::Display"],"<H as std::iter::Iterator>::Item":["std::fmt::Display"],"D":["std::marker::Sized","std::iter::Iterator"],"H":["std::iter::Iterator","std::marker::Sized"],"R":["std::iter::Iterator","std::marker::Sized"]}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::fmt::Display>":{},"<widgets::table::Table<'a, H, R> as widgets::Widget>::render":{"<D as std::iter::Iterator>::Item":["<&mut T as std::fmt::Display>","backend::termion::ModifierDiff","backend::termion::Bg","backend::termion::Fg"],"<H as std::iter::Iterator>::Item":["<&T as std::fmt::Display>","backend::termion::Bg","backend::termion::Fg","backend::termion::ModifierDiff"],"D":["std::iter::Chain<A, B>","std::env::Args","std::str::RSplitTerminator<'a, P>","std::iter::Empty<T>","std::iter::ArrayChunks<I, N>","std::collections::vec_deque::IntoIter<T, A>","std::collections::linked_list::IntoIter<T>","std::str::Bytes<'_>","std::collections::hash_map::ValuesMut<'a, K, V>","std::iter::Successors<T, F>","std::sync::mpsc::IntoIter<T>","std::iter::Fuse<I>","std::env::VarsOs","std::array::IntoIter<T, N>","std::collections::btree_map::IterMut<'a, K, V>","std::iter::Copied<I>","std::iter::SkipWhile<I, P>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::ops::index_range::IndexRange","std::slice::RSplitN<'a, T, P>","std::str::SplitTerminator<'a, P>","std::iter::RepeatN<A>","std::char::EscapeDebug","std::slice::Split<'a, T, P>","bitflags::core::error::Source<'a>","std::iter::IntersperseWith<I, G>","std::string::Drain<'_>","std::collections::hash_map::IntoKeys<K, V>","std::iter::Intersperse<I>","std::collections::btree_set::Difference<'a, T, A>","std::sys::unix::fs::ReadDir","std::char::ToUppercase","std::iter::ByRefSized<'_, I>","std::str::Matches<'a, P>","std::ops::RangeInclusive<A>","std::net::IntoIncoming","std::slice::ArrayWindows<'a, T, N>","std::str::Lines<'a>","std::slice::RChunksExactMut<'a, T>","std::slice::RSplitNMut<'a, T, P>","std::sync::mpsc::Iter<'a, T>","std::collections::btree_map::IntoKeys<K, V, A>","std::slice::RSplitMut<'a, T, P>","std::collections::hash_set::Union<'a, T, S>","std::collections::btree_set::IntoIter<T, A>","std::iter::Inspect<I, F>","std::iter::Cloned<I>","std::iter::Once<T>","std::path::Ancestors<'a>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::str::MatchIndices<'a, P>","std::option::Item<A>","std::path::Components<'a>","std::iter::Zip<A, B>","std::slice::ChunksMut<'a, T>","std::iter::TakeWhile<I, P>","std::iter::Flatten<I>","std::path::Iter<'a>","std::collections::linked_list::Iter<'a, T>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::slice::ChunksExactMut<'a, T>","std::collections::vec_deque::Iter<'a, T>","std::result::IntoIter<T>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::btree_map::Range<'a, K, V>","std::os::unix::net::ScmCredentials<'a>","std::collections::btree_map::Iter<'a, K, V>","std::collections::hash_set::IntoIter<K>","std::iter::Cycle<I>","std::slice::Chunks<'a, T>","std::str::SplitInclusive<'a, P>","std::option::IntoIter<A>","std::sys::unix::os::SplitPaths<'a>","std::iter::Skip<I>","std::iter::Enumerate<I>","std::slice::GroupByMut<'a, T, P>","std::os::unix::net::Messages<'a>","std::iter::OnceWith<F>","std::collections::btree_set::Range<'a, T>","std::slice::RChunksMut<'a, T>","std::iter::RepeatWith<F>","std::iter::sources::from_generator::FromGenerator<G>","std::io::Split<B>","std::slice::RChunks<'a, T>","std::os::unix::net::Incoming<'a>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::slice::RSplit<'a, T, P>","std::str::RSplit<'a, P>","std::sys_common::wstr::WStrUnits<'_>","std::collections::hash_map::Keys<'a, K, V>","std::str::RMatches<'a, P>","std::slice::ArrayChunks<'a, T, N>","std::collections::btree_set::SymmetricDifference<'a, T>","std::collections::btree_map::Values<'a, K, V>","std::collections::binary_heap::DrainSorted<'_, T>","std::str::Utf8Chunks<'a>","std::char::ToLowercase","std::str::EscapeUnicode<'a>","std::iter::StepBy<I>","std::vec::Drain<'_, T, A>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::env::Vars","std::collections::hash_map::IntoIter<K, V>","std::str::SplitN<'a, P>","std::str::CharIndices<'a>","std::slice::EscapeAscii<'a>","std::result::IterMut<'a, T>","std::collections::hash_set::Iter<'a, K>","std::slice::SplitInclusive<'a, T, P>","std::slice::IterMut<'a, T>","std::io::Bytes<R>","std::collections::linked_list::DrainFilter<'_, T, F>","std::collections::hash_map::Iter<'a, K, V>","bitflags::core::slice::iter::GenericSplitN<I>","std::option::IterMut<'a, A>","std::collections::btree_map::Keys<'a, K, V>","std::slice::RChunksExact<'a, T>","std::collections::binary_heap::IntoIterSorted<T>","std::collections::hash_map::IterMut<'a, K, V>","std::iter::Scan<I, St, F>","std::iter::MapWhile<I, P>","std::collections::vec_deque::IterMut<'a, T>","std::str::EscapeDefault<'a>","std::sys::unix::process::process_common::CommandArgs<'a>","std::slice::GroupBy<'a, T, P>","std::fs::ReadDir","std::iter::Repeat<A>","std::iter::Map<I, F>","std::vec::IntoIter<T, A>","std::collections::btree_set::Iter<'a, T>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::str::EscapeDebug<'a>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::collections::hash_set::Difference<'a, T, S>","std::ops::RangeFrom<A>","std::str::EncodeUtf16<'a>","std::vec::DrainFilter<'_, T, F, A>","<&mut I as std::iter::Iterator>","std::collections::hash_set::Drain<'a, K>","std::sys_common::net::LookupHost","std::str::SplitAsciiWhitespace<'a>","std::sys::unix::os::Env","std::char::DecodeUtf16<I>","std::collections::hash_map::IntoValues<K, V>","std::slice::SplitInclusiveMut<'a, T, P>","std::iter::FromFn<F>","std::sys::unix::args::Args","std::collections::linked_list::IterMut<'a, T>","std::collections::binary_heap::Iter<'a, T>","std::slice::ArrayChunksMut<'a, T, N>","std::str::LinesAny<'a>","std::collections::hash_map::Values<'a, K, V>","std::slice::SplitNMut<'a, T, P>","std::option::Iter<'a, A>","std::sync::mpsc::TryIter<'a, T>","std::env::ArgsOs","std::slice::Iter<'a, T>","std::iter::adapters::GenericShunt<'_, I, R>","std::io::Lines<B>","std::collections::btree_map::IntoIter<K, V, A>","std::str::SplitWhitespace<'a>","std::char::EscapeDefault","std::net::Incoming<'a>","std::slice::SplitN<'a, T, P>","std::collections::binary_heap::IntoIter<T>","std::collections::btree_map::ValuesMut<'a, K, V>","std::sys_common::wtf8::EncodeWide<'a>","std::char::CaseMappingIter","std::iter::Peekable<I>","std::iter::Take<I>","std::iter::FilterMap<I, F>","std::iter::FlatMap<I, U, F>","std::collections::hash_map::Drain<'a, K, V>","std::ops::Range<A>","std::collections::btree_map::IntoValues<K, V, A>","std::iter::Rev<I>","std::collections::btree_map::RangeMut<'a, K, V>","std::str::Split<'a, P>","std::str::RMatchIndices<'a, P>","std::str::RSplitN<'a, P>","std::collections::btree_set::Union<'a, T>","std::str::Chars<'a>","std::slice::Windows<'a, T>","std::collections::hash_set::DrainFilter<'_, K, F>","std::collections::vec_deque::Drain<'_, T, A>","std::os::unix::net::ScmRights<'a>","std::slice::ChunksExact<'a, T>","std::boxed::Box<I, A>","std::process::CommandArgs<'a>","std::collections::btree_set::Intersection<'a, T, A>","std::result::Iter<'a, T>","std::ascii::EscapeDefault","std::collections::binary_heap::Drain<'_, T>","std::char::EscapeUnicode","std::iter::Filter<I, P>","std::slice::SplitMut<'a, T, P>","std::vec::Splice<'_, I, A>","std::env::SplitPaths<'a>","std::process::CommandEnvs<'a>"],"H":["std::slice::RChunks<'a, T>","std::iter::TakeWhile<I, P>","std::collections::hash_map::Values<'a, K, V>","std::slice::RSplit<'a, T, P>","std::str::SplitInclusive<'a, P>","std::path::Iter<'a>","std::collections::btree_set::Difference<'a, T, A>","std::iter::SkipWhile<I, P>","std::collections::btree_map::IterMut<'a, K, V>","std::iter::Filter<I, P>","std::collections::hash_map::IntoValues<K, V>","std::iter::RepeatWith<F>","std::env::Vars","std::slice::GroupByMut<'a, T, P>","std::slice::EscapeAscii<'a>","std::sync::mpsc::IntoIter<T>","std::char::ToUppercase","std::iter::Empty<T>","std::iter::Rev<I>","std::collections::linked_list::IterMut<'a, T>","std::collections::btree_set::Range<'a, T>","std::net::IntoIncoming","std::slice::ArrayWindows<'a, T, N>","std::sys::unix::os::SplitPaths<'a>","std::option::IntoIter<A>","std::char::CaseMappingIter","std::slice::IterMut<'a, T>","std::collections::binary_heap::IntoIter<T>","std::collections::hash_set::DrainFilter<'_, K, F>","std::collections::btree_map::Range<'a, K, V>","std::collections::hash_set::Drain<'a, K>","std::collections::btree_map::IntoIter<K, V, A>","std::iter::Scan<I, St, F>","std::slice::Split<'a, T, P>","std::slice::SplitNMut<'a, T, P>","std::collections::binary_heap::DrainSorted<'_, T>","std::str::SplitAsciiWhitespace<'a>","std::str::SplitTerminator<'a, P>","std::collections::hash_map::ValuesMut<'a, K, V>","std::iter::MapWhile<I, P>","std::iter::sources::from_generator::FromGenerator<G>","std::collections::vec_deque::IntoIter<T, A>","std::os::unix::net::ScmRights<'a>","std::option::Item<A>","std::collections::btree_map::IntoKeys<K, V, A>","std::collections::hash_set::Union<'a, T, S>","std::iter::StepBy<I>","std::str::EscapeUnicode<'a>","std::collections::btree_map::Values<'a, K, V>","std::vec::Drain<'_, T, A>","std::sync::mpsc::Iter<'a, T>","std::ops::index_range::IndexRange","std::result::IntoIter<T>","std::sys_common::wtf8::EncodeWide<'a>","std::str::Matches<'a, P>","std::result::IterMut<'a, T>","std::slice::RChunksExact<'a, T>","std::vec::IntoIter<T, A>","std::slice::SplitInclusive<'a, T, P>","std::iter::Cycle<I>","std::collections::btree_map::IntoValues<K, V, A>","std::iter::Intersperse<I>","std::sys_common::wstr::WStrUnits<'_>","std::slice::Iter<'a, T>","std::slice::ChunksExact<'a, T>","bitflags::core::slice::iter::GenericSplitN<I>","std::slice::SplitInclusiveMut<'a, T, P>","std::option::IterMut<'a, A>","std::collections::btree_set::SymmetricDifference<'a, T>","std::str::EscapeDebug<'a>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::ops::Range<A>","std::str::EncodeUtf16<'a>","std::collections::btree_set::Intersection<'a, T, A>","std::sys::unix::args::Args","bitflags::core::error::Source<'a>","<&mut I as std::iter::Iterator>","std::slice::RSplitN<'a, T, P>","std::collections::hash_map::Drain<'a, K, V>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::collections::btree_map::RangeMut<'a, K, V>","std::str::RSplit<'a, P>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::str::LinesAny<'a>","std::slice::RChunksMut<'a, T>","std::io::Split<B>","std::env::ArgsOs","std::process::CommandArgs<'a>","std::char::ToLowercase","std::iter::Successors<T, F>","std::collections::btree_set::Union<'a, T>","std::io::Bytes<R>","std::slice::SplitMut<'a, T, P>","std::string::Drain<'_>","std::io::Lines<B>","std::sys_common::net::LookupHost","std::collections::linked_list::DrainFilter<'_, T, F>","std::iter::RepeatN<A>","std::collections::hash_set::Intersection<'a, T, S>","std::sys::unix::process::process_common::CommandArgs<'a>","std::iter::IntersperseWith<I, G>","std::str::SplitN<'a, P>","std::iter::Chain<A, B>","std::boxed::Box<I, A>","std::sys::unix::fs::ReadDir","std::slice::ArrayChunksMut<'a, T, N>","std::collections::hash_map::IterMut<'a, K, V>","std::iter::adapters::GenericShunt<'_, I, R>","std::iter::FilterMap<I, F>","std::collections::binary_heap::Iter<'a, T>","std::iter::Cloned<I>","std::slice::Chunks<'a, T>","std::collections::vec_deque::Iter<'a, T>","std::option::Iter<'a, A>","std::fs::ReadDir","std::slice::Windows<'a, T>","std::slice::SplitN<'a, T, P>","std::iter::Fuse<I>","std::str::SplitWhitespace<'a>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::hash_set::Difference<'a, T, S>","std::iter::Once<T>","std::iter::OnceWith<F>","std::str::RSplitTerminator<'a, P>","std::iter::Peekable<I>","std::collections::hash_set::Iter<'a, K>","std::collections::hash_map::Keys<'a, K, V>","std::iter::Skip<I>","std::collections::btree_set::IntoIter<T, A>","std::env::SplitPaths<'a>","std::os::unix::net::Messages<'a>","std::slice::RSplitNMut<'a, T, P>","std::collections::hash_map::Iter<'a, K, V>","std::iter::Zip<A, B>","std::vec::DrainFilter<'_, T, F, A>","std::str::CharIndices<'a>","std::collections::binary_heap::Drain<'_, T>","std::iter::Copied<I>","std::iter::ByRefSized<'_, I>","std::vec::Splice<'_, I, A>","std::slice::ChunksMut<'a, T>","std::ops::RangeFrom<A>","std::char::EscapeUnicode","std::char::EscapeDefault","std::slice::ArrayChunks<'a, T, N>","std::str::RSplitN<'a, P>","std::str::Split<'a, P>","std::str::Chars<'a>","std::collections::binary_heap::IntoIterSorted<T>","std::collections::hash_map::IntoIter<K, V>","std::iter::Flatten<I>","std::iter::Inspect<I, F>","std::ascii::EscapeDefault","std::collections::btree_set::Iter<'a, T>","std::str::MatchIndices<'a, P>","std::str::EscapeDefault<'a>","std::slice::RChunksExactMut<'a, T>","std::os::unix::net::ScmCredentials<'a>","std::iter::FromFn<F>","std::str::RMatches<'a, P>","std::iter::Enumerate<I>","std::iter::FlatMap<I, U, F>","std::str::Bytes<'_>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::str::Lines<'a>","std::path::Ancestors<'a>","std::collections::linked_list::IntoIter<T>","std::os::unix::net::Incoming<'a>","std::sys::unix::os::Env","std::sync::mpsc::TryIter<'a, T>","std::collections::btree_map::Iter<'a, K, V>","std::iter::Map<I, F>","std::array::IntoIter<T, N>","std::collections::linked_list::Iter<'a, T>","std::collections::vec_deque::IterMut<'a, T>","std::ops::RangeInclusive<A>","std::slice::ChunksExactMut<'a, T>","std::process::CommandEnvs<'a>","std::str::RMatchIndices<'a, P>","std::char::DecodeUtf16<I>","std::net::Incoming<'a>","std::iter::ArrayChunks<I, N>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::collections::btree_map::Keys<'a, K, V>","std::collections::btree_map::ValuesMut<'a, K, V>","std::str::Utf8Chunks<'a>","std::char::EscapeDebug","std::slice::RSplitMut<'a, T, P>","std::env::Args","std::collections::hash_set::IntoIter<K>","std::slice::GroupBy<'a, T, P>","std::path::Components<'a>","std::result::Iter<'a, T>","std::iter::Take<I>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::iter::Repeat<A>","std::env::VarsOs","std::collections::hash_map::IntoKeys<K, V>"],"R":["std::os::unix::net::Incoming<'a>","std::process::CommandEnvs<'a>","std::iter::Copied<I>","std::slice::GroupBy<'a, T, P>","std::net::IntoIncoming","std::iter::Flatten<I>","std::process::CommandArgs<'a>","std::sys::unix::fs::ReadDir","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::collections::btree_set::IntoIter<T, A>","std::iter::Fuse<I>","std::slice::Iter<'a, T>","std::char::DecodeUtf16<I>","std::collections::linked_list::IterMut<'a, T>","std::slice::Windows<'a, T>","std::str::Matches<'a, P>","std::iter::RepeatN<A>","std::collections::btree_map::Iter<'a, K, V>","std::collections::btree_set::Range<'a, T>","std::slice::SplitInclusiveMut<'a, T, P>","std::collections::btree_map::ValuesMut<'a, K, V>","std::vec::IntoIter<T, A>","std::str::Bytes<'_>","std::collections::vec_deque::IntoIter<T, A>","std::env::ArgsOs","std::collections::hash_set::Drain<'a, K>","std::iter::Peekable<I>","std::fs::ReadDir","std::path::Iter<'a>","std::collections::hash_map::Values<'a, K, V>","std::collections::linked_list::Iter<'a, T>","std::collections::hash_map::ValuesMut<'a, K, V>","std::slice::SplitInclusive<'a, T, P>","std::iter::FromFn<F>","std::str::RMatchIndices<'a, P>","std::env::Args","std::slice::RChunks<'a, T>","std::collections::hash_set::Union<'a, T, S>","std::str::SplitAsciiWhitespace<'a>","std::collections::hash_map::IterMut<'a, K, V>","std::str::CharIndices<'a>","std::slice::EscapeAscii<'a>","std::iter::SkipWhile<I, P>","std::slice::SplitN<'a, T, P>","std::collections::btree_set::Intersection<'a, T, A>","std::str::MatchIndices<'a, P>","std::slice::RSplitMut<'a, T, P>","std::str::SplitWhitespace<'a>","std::char::EscapeDefault","std::slice::ChunksExact<'a, T>","std::slice::RSplit<'a, T, P>","std::sys_common::wtf8::EncodeWide<'a>","std::collections::vec_deque::Iter<'a, T>","std::boxed::Box<I, A>","std::slice::RSplitN<'a, T, P>","std::collections::btree_map::IntoKeys<K, V, A>","std::collections::hash_set::DrainFilter<'_, K, F>","std::collections::vec_deque::IterMut<'a, T>","std::iter::FilterMap<I, F>","std::collections::btree_map::IntoValues<K, V, A>","std::collections::vec_deque::Drain<'_, T, A>","std::slice::ChunksExactMut<'a, T>","std::iter::Take<I>","std::iter::RepeatWith<F>","std::str::EncodeUtf16<'a>","std::iter::IntersperseWith<I, G>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::collections::hash_map::Iter<'a, K, V>","std::char::EscapeDebug","std::char::EscapeUnicode","std::ops::RangeInclusive<A>","std::str::Chars<'a>","std::iter::Empty<T>","std::sys_common::wstr::WStrUnits<'_>","std::path::Components<'a>","std::os::unix::net::ScmRights<'a>","std::iter::sources::from_generator::FromGenerator<G>","std::collections::hash_map::IntoValues<K, V>","std::str::SplitN<'a, P>","std::io::Bytes<R>","std::iter::Enumerate<I>","std::iter::MapWhile<I, P>","bitflags::core::error::Source<'a>","std::collections::hash_map::Drain<'a, K, V>","std::sync::mpsc::TryIter<'a, T>","std::slice::IterMut<'a, T>","std::collections::hash_set::Intersection<'a, T, S>","std::slice::ChunksMut<'a, T>","std::result::IntoIter<T>","std::iter::Successors<T, F>","std::slice::ArrayWindows<'a, T, N>","std::str::RMatches<'a, P>","std::iter::TakeWhile<I, P>","std::env::Vars","std::iter::Intersperse<I>","std::collections::binary_heap::IntoIterSorted<T>","std::iter::StepBy<I>","std::os::unix::net::Messages<'a>","std::array::IntoIter<T, N>","std::env::SplitPaths<'a>","std::collections::linked_list::DrainFilter<'_, T, F>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::sys::unix::args::Args","std::char::CaseMappingIter","std::collections::btree_set::SymmetricDifference<'a, T>","<&mut I as std::iter::Iterator>","std::sync::mpsc::IntoIter<T>","std::string::Drain<'_>","std::slice::SplitMut<'a, T, P>","std::collections::btree_map::Keys<'a, K, V>","std::str::RSplitTerminator<'a, P>","std::result::Iter<'a, T>","std::iter::Filter<I, P>","std::collections::hash_set::IntoIter<K>","std::iter::Zip<A, B>","std::slice::RSplitNMut<'a, T, P>","std::str::Utf8Chunks<'a>","std::sys::unix::process::process_common::CommandArgs<'a>","std::str::EscapeUnicode<'a>","std::collections::btree_set::Union<'a, T>","std::iter::Scan<I, St, F>","std::option::Iter<'a, A>","std::io::Split<B>","std::iter::FlatMap<I, U, F>","std::collections::btree_map::Values<'a, K, V>","std::iter::Cloned<I>","std::iter::Inspect<I, F>","std::collections::btree_map::IterMut<'a, K, V>","std::str::RSplitN<'a, P>","std::option::IntoIter<A>","std::vec::Drain<'_, T, A>","std::str::Lines<'a>","std::ops::RangeFrom<A>","std::iter::ArrayChunks<I, N>","std::sync::mpsc::Iter<'a, T>","std::sys::unix::os::Env","std::slice::ArrayChunksMut<'a, T, N>","std::collections::binary_heap::Drain<'_, T>","std::slice::ArrayChunks<'a, T, N>","std::iter::Rev<I>","std::str::EscapeDebug<'a>","std::iter::Skip<I>","std::str::EscapeDefault<'a>","std::collections::hash_map::IntoKeys<K, V>","std::iter::Map<I, F>","std::ops::index_range::IndexRange","std::io::Lines<B>","std::slice::GroupByMut<'a, T, P>","std::slice::RChunksMut<'a, T>","std::collections::hash_map::IntoIter<K, V>","std::collections::binary_heap::Iter<'a, T>","std::slice::Split<'a, T, P>","std::collections::btree_map::IntoIter<K, V, A>","std::net::Incoming<'a>","std::collections::btree_map::Range<'a, K, V>","std::slice::SplitNMut<'a, T, P>","std::str::SplitTerminator<'a, P>","std::ops::Range<A>","std::slice::RChunksExact<'a, T>","std::option::Item<A>","std::option::IterMut<'a, A>","std::char::ToUppercase","std::iter::OnceWith<F>","std::str::RSplit<'a, P>","std::slice::RChunksExactMut<'a, T>","std::iter::adapters::GenericShunt<'_, I, R>","std::iter::ByRefSized<'_, I>","std::iter::Once<T>","std::ascii::EscapeDefault","std::iter::Repeat<A>","std::collections::btree_map::RangeMut<'a, K, V>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::collections::btree_set::Difference<'a, T, A>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::char::ToLowercase","std::str::Split<'a, P>","std::str::SplitInclusive<'a, P>","std::path::Ancestors<'a>","std::slice::Chunks<'a, T>","std::vec::Splice<'_, I, A>","std::collections::linked_list::IntoIter<T>","std::collections::hash_set::Iter<'a, K>","std::sys_common::net::LookupHost","std::iter::Cycle<I>","std::os::unix::net::ScmCredentials<'a>","std::result::IterMut<'a, T>","std::collections::hash_set::Difference<'a, T, S>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::collections::hash_map::Keys<'a, K, V>","std::vec::DrainFilter<'_, T, F, A>","std::env::VarsOs","std::collections::binary_heap::IntoIter<T>","bitflags::core::slice::iter::GenericSplitN<I>","std::iter::Chain<A, B>","std::collections::btree_set::Iter<'a, T>","std::str::LinesAny<'a>","std::sys::unix::os::SplitPaths<'a>","std::collections::binary_heap::DrainSorted<'_, T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::table::Table<'a, H, R>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.render(p1, p2);
+<widgets::table::Table<'a, H, R> as widgets::Widget>::render(p0, p1, p2);
+crate::<widgets::table::Table<'a, H, R> as widgets::Widget>::render(p0, p1, p2);
+<widgets::table::Table<'a, H, R>>::render(p0, p1, p2);
-----------------
src/widgets/tabs.rs <widgets::tabs::Tabs<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::tabs::Tabs<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::tabs::Tabs<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::tabs::Tabs<'a> as std::fmt::Debug>::fmt(p0, p1);
+<widgets::tabs::Tabs<'a>>::fmt(p0, p1);
-----------------
src/widgets/tabs.rs <widgets::tabs::Tabs<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::tabs::Tabs<'a>
+p0.clone();
+<widgets::tabs::Tabs<'a> as std::clone::Clone>::clone(p0);
+crate::<widgets::tabs::Tabs<'a> as std::clone::Clone>::clone(p0);
+<widgets::tabs::Tabs<'a>>::clone(p0);
-----------------
src/widgets/tabs.rs widgets::tabs::Tabs::<'a>::new
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::vec::Vec<text::Spans<'a>>
+widgets::tabs::Tabs::<'a>::new(p0);
+crate::widgets::tabs::Tabs::<'a>::new(p0);
+<widgets::tabs::Tabs<'a>>::new(p0);
-----------------
src/widgets/tabs.rs widgets::tabs::Tabs::<'a>::block
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::tabs::Tabs<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::block::Block<'a>
+p0.block(p1);
+widgets::tabs::Tabs::<'a>::block(p0, p1);
+crate::widgets::tabs::Tabs::<'a>::block(p0, p1);
+<widgets::tabs::Tabs<'a>>::block(p0, p1);
-----------------
src/widgets/tabs.rs widgets::tabs::Tabs::<'a>::select
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::tabs::Tabs<'a>
let mut p1 = 0usize; // None+usize
+p0.select(p1);
+widgets::tabs::Tabs::<'a>::select(p0, p1);
+crate::widgets::tabs::Tabs::<'a>::select(p0, p1);
+<widgets::tabs::Tabs<'a>>::select(p0, p1);
-----------------
src/widgets/tabs.rs widgets::tabs::Tabs::<'a>::style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::tabs::Tabs<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.style(p1);
+widgets::tabs::Tabs::<'a>::style(p0, p1);
+crate::widgets::tabs::Tabs::<'a>::style(p0, p1);
+<widgets::tabs::Tabs<'a>>::style(p0, p1);
-----------------
src/widgets/tabs.rs widgets::tabs::Tabs::<'a>::highlight_style
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::tabs::Tabs<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // style::Style
+p0.highlight_style(p1);
+widgets::tabs::Tabs::<'a>::highlight_style(p0, p1);
+crate::widgets::tabs::Tabs::<'a>::highlight_style(p0, p1);
+<widgets::tabs::Tabs<'a>>::highlight_style(p0, p1);
-----------------
src/widgets/tabs.rs widgets::tabs::Tabs::<'a>::divider
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"widgets::tabs::Tabs::<'a>::divider":{"T":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"widgets::tabs::Tabs::<'a>::divider":{"T":["std::process::ExitStatusError","<T as std::convert::Into<U>>","std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::tabs::Tabs<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.divider(p1);
+widgets::tabs::Tabs::<'a>::divider(p0, p1);
+crate::widgets::tabs::Tabs::<'a>::divider(p0, p1);
+<widgets::tabs::Tabs<'a>>::divider(p0, p1);
-----------------
src/widgets/tabs.rs <widgets::tabs::Tabs<'a> as widgets::Widget>::render
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::tabs::Tabs<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // layout::Rect
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // buffer::Buffer
+p0.render(p1, p2);
+<widgets::tabs::Tabs<'a> as widgets::Widget>::render(p0, p1, p2);
+crate::<widgets::tabs::Tabs<'a> as widgets::Widget>::render(p0, p1, p2);
+<widgets::tabs::Tabs<'a>>::render(p0, p1, p2);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.eq(p1);
+<widgets::Borders as std::cmp::PartialEq>::eq(p0, p1);
+crate::<widgets::Borders as std::cmp::PartialEq>::eq(p0, p1);
+<widgets::Borders>::eq(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.assert_receiver_is_total_eq();
+<widgets::Borders as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<widgets::Borders as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<widgets::Borders>::assert_receiver_is_total_eq(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.clone();
+<widgets::Borders as std::clone::Clone>::clone(p0);
+crate::<widgets::Borders as std::clone::Clone>::clone(p0);
+<widgets::Borders>::clone(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.partial_cmp(p1);
+<widgets::Borders as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<widgets::Borders as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<widgets::Borders>::partial_cmp(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.cmp(p1);
+<widgets::Borders as std::cmp::Ord>::cmp(p0, p1);
+crate::<widgets::Borders as std::cmp::Ord>::cmp(p0, p1);
+<widgets::Borders>::cmp(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<widgets::Borders as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<widgets::Borders as std::hash::Hash>::hash":{"__H":["<&mut H as std::hash::Hasher>","std::hash::SipHasher13","std::hash::SipHasher","std::collections::hash_map::DefaultHasher","std::hash::sip::Hasher<S>","std::boxed::Box<T, A>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<widgets::Borders as std::hash::Hash>::hash(p0, p1);
+crate::<widgets::Borders as std::hash::Hash>::hash(p0, p1);
+<widgets::Borders>::hash(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<widgets::Borders as std::fmt::Debug>::fmt(p0, p1);
+crate::<widgets::Borders as std::fmt::Debug>::fmt(p0, p1);
+<widgets::Borders>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::NONE
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.NONE();
+<widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::NONE(p0);
+crate::<widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::NONE(p0);
+<widgets::Borders>::NONE(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::TOP
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.TOP();
+<widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::TOP(p0);
+crate::<widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::TOP(p0);
+<widgets::Borders>::TOP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::RIGHT
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.RIGHT();
+<widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::RIGHT(p0);
+crate::<widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::RIGHT(p0);
+<widgets::Borders>::RIGHT(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::BOTTOM
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.BOTTOM();
+<widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::BOTTOM(p0);
+crate::<widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::BOTTOM(p0);
+<widgets::Borders>::BOTTOM(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::LEFT
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.LEFT();
+<widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::LEFT(p0);
+crate::<widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::LEFT(p0);
+<widgets::Borders>::LEFT(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::ALL
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.ALL();
+<widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::ALL(p0);
+crate::<widgets::Borders as <widgets::Borders as std::fmt::Debug>::fmt::__BitFlags>::ALL(p0);
+<widgets::Borders>::ALL(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::fmt::Binary>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.fmt(p1);
+<widgets::Borders as std::fmt::Binary>::fmt(p0, p1);
+crate::<widgets::Borders as std::fmt::Binary>::fmt(p0, p1);
+<widgets::Borders>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::fmt::Octal>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.fmt(p1);
+<widgets::Borders as std::fmt::Octal>::fmt(p0, p1);
+crate::<widgets::Borders as std::fmt::Octal>::fmt(p0, p1);
+<widgets::Borders>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::fmt::LowerHex>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.fmt(p1);
+<widgets::Borders as std::fmt::LowerHex>::fmt(p0, p1);
+crate::<widgets::Borders as std::fmt::LowerHex>::fmt(p0, p1);
+<widgets::Borders>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::fmt::UpperHex>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.fmt(p1);
+<widgets::Borders as std::fmt::UpperHex>::fmt(p0, p1);
+crate::<widgets::Borders as std::fmt::UpperHex>::fmt(p0, p1);
+<widgets::Borders>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::empty
deps:{}
candidates:{}
+widgets::Borders::empty();
+crate::widgets::Borders::empty();
+<widgets::Borders>::empty();
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::all
deps:{}
candidates:{}
+widgets::Borders::all();
+crate::widgets::Borders::all();
+<widgets::Borders>::all();
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::bits
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.bits();
+widgets::Borders::bits(p0);
+crate::widgets::Borders::bits(p0);
+<widgets::Borders>::bits(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::from_bits
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+widgets::Borders::from_bits(p0);
+crate::widgets::Borders::from_bits(p0);
+<widgets::Borders>::from_bits(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::from_bits_truncate
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+widgets::Borders::from_bits_truncate(p0);
+crate::widgets::Borders::from_bits_truncate(p0);
+<widgets::Borders>::from_bits_truncate(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::from_bits_unchecked
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+widgets::Borders::from_bits_unchecked(p0);
+crate::widgets::Borders::from_bits_unchecked(p0);
+<widgets::Borders>::from_bits_unchecked(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::is_empty
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.is_empty();
+widgets::Borders::is_empty(p0);
+crate::widgets::Borders::is_empty(p0);
+<widgets::Borders>::is_empty(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::is_all
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.is_all();
+widgets::Borders::is_all(p0);
+crate::widgets::Borders::is_all(p0);
+<widgets::Borders>::is_all(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::intersects
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.intersects(p1);
+widgets::Borders::intersects(p0, p1);
+crate::widgets::Borders::intersects(p0, p1);
+<widgets::Borders>::intersects(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::contains
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.contains(p1);
+widgets::Borders::contains(p0, p1);
+crate::widgets::Borders::contains(p0, p1);
+<widgets::Borders>::contains(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::insert
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.insert(p1);
+widgets::Borders::insert(p0, p1);
+crate::widgets::Borders::insert(p0, p1);
+<widgets::Borders>::insert(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::remove
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.remove(p1);
+widgets::Borders::remove(p0, p1);
+crate::widgets::Borders::remove(p0, p1);
+<widgets::Borders>::remove(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::toggle
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.toggle(p1);
+widgets::Borders::toggle(p0, p1);
+crate::widgets::Borders::toggle(p0, p1);
+<widgets::Borders>::toggle(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::set
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p2 = true; // None+bool
+p0.set(p1, p2);
+widgets::Borders::set(p0, p1, p2);
+crate::widgets::Borders::set(p0, p1, p2);
+<widgets::Borders>::set(p0, p1, p2);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::intersection
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.intersection(p1);
+widgets::Borders::intersection(p0, p1);
+crate::widgets::Borders::intersection(p0, p1);
+<widgets::Borders>::intersection(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::union
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.union(p1);
+widgets::Borders::union(p0, p1);
+crate::widgets::Borders::union(p0, p1);
+<widgets::Borders>::union(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::difference
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.difference(p1);
+widgets::Borders::difference(p0, p1);
+crate::widgets::Borders::difference(p0, p1);
+<widgets::Borders>::difference(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::symmetric_difference
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.symmetric_difference(p1);
+widgets::Borders::symmetric_difference(p0, p1);
+crate::widgets::Borders::symmetric_difference(p0, p1);
+<widgets::Borders>::symmetric_difference(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs widgets::Borders::complement
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.complement();
+widgets::Borders::complement(p0);
+crate::widgets::Borders::complement(p0);
+<widgets::Borders>::complement(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::ops::BitOr>::bitor
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.bitor(p1);
+<widgets::Borders as std::ops::BitOr>::bitor(p0, p1);
+crate::<widgets::Borders as std::ops::BitOr>::bitor(p0, p1);
+<widgets::Borders>::bitor(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::ops::BitOrAssign>::bitor_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.bitor_assign(p1);
+<widgets::Borders as std::ops::BitOrAssign>::bitor_assign(p0, p1);
+crate::<widgets::Borders as std::ops::BitOrAssign>::bitor_assign(p0, p1);
+<widgets::Borders>::bitor_assign(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::ops::BitXor>::bitxor
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.bitxor(p1);
+<widgets::Borders as std::ops::BitXor>::bitxor(p0, p1);
+crate::<widgets::Borders as std::ops::BitXor>::bitxor(p0, p1);
+<widgets::Borders>::bitxor(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::ops::BitXorAssign>::bitxor_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.bitxor_assign(p1);
+<widgets::Borders as std::ops::BitXorAssign>::bitxor_assign(p0, p1);
+crate::<widgets::Borders as std::ops::BitXorAssign>::bitxor_assign(p0, p1);
+<widgets::Borders>::bitxor_assign(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::ops::BitAnd>::bitand
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.bitand(p1);
+<widgets::Borders as std::ops::BitAnd>::bitand(p0, p1);
+crate::<widgets::Borders as std::ops::BitAnd>::bitand(p0, p1);
+<widgets::Borders>::bitand(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::ops::BitAndAssign>::bitand_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.bitand_assign(p1);
+<widgets::Borders as std::ops::BitAndAssign>::bitand_assign(p0, p1);
+crate::<widgets::Borders as std::ops::BitAndAssign>::bitand_assign(p0, p1);
+<widgets::Borders>::bitand_assign(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::ops::Sub>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.sub(p1);
+<widgets::Borders as std::ops::Sub>::sub(p0, p1);
+crate::<widgets::Borders as std::ops::Sub>::sub(p0, p1);
+<widgets::Borders>::sub(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::ops::SubAssign>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.sub_assign(p1);
+<widgets::Borders as std::ops::SubAssign>::sub_assign(p0, p1);
+crate::<widgets::Borders as std::ops::SubAssign>::sub_assign(p0, p1);
+<widgets::Borders>::sub_assign(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::ops::Not>::not
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // widgets::Borders
+p0.not();
+<widgets::Borders as std::ops::Not>::not(p0);
+crate::<widgets::Borders as std::ops::Not>::not(p0);
+<widgets::Borders>::not(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::iter::Extend<widgets::Borders>>::extend
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"<widgets::Borders as std::iter::Extend<widgets::Borders>>::extend":{"T":["std::iter::IntoIterator","std::marker::Sized"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::collections::btree_map::Range<'a, K, V>","std::sync::mpsc::Iter<'a, T>","std::collections::hash_set::IntoIter<K>","std::collections::btree_set::Union<'a, T>","std::collections::hash_set::DrainFilter<'_, K, F>","std::str::EscapeDefault<'a>","std::collections::hash_set::Union<'a, T, S>","std::slice::GroupByMut<'a, T, P>","std::path::Components<'a>","std::collections::binary_heap::Drain<'_, T>","std::str::RMatchIndices<'a, P>","std::str::Lines<'a>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::io::Lines<B>","std::iter::Inspect<I, F>","std::collections::binary_heap::DrainSorted<'_, T>","std::process::CommandEnvs<'a>","std::char::ToUppercase","std::str::SplitInclusive<'a, P>","std::str::Split<'a, P>","std::str::MatchIndices<'a, P>","std::collections::hash_map::IntoIter<K, V>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::collections::binary_heap::Iter<'a, T>","std::option::IterMut<'a, A>","std::collections::vec_deque::Drain<'_, T, A>","std::char::ToLowercase","std::sys_common::wtf8::EncodeWide<'a>","std::collections::binary_heap::IntoIterSorted<T>","std::str::EscapeUnicode<'a>","std::slice::RChunksExactMut<'a, T>","bitflags::core::error::Source<'a>","std::collections::hash_map::Keys<'a, K, V>","std::string::Drain<'_>","std::collections::btree_map::RangeMut<'a, K, V>","std::sys::unix::os::SplitPaths<'a>","std::collections::btree_map::Keys<'a, K, V>","std::char::EscapeDefault","std::iter::RepeatWith<F>","std::iter::RepeatN<A>","std::boxed::Box<I, A>","std::collections::btree_map::ValuesMut<'a, K, V>","std::collections::vec_deque::IterMut<'a, T>","std::collections::btree_map::IterMut<'a, K, V>","std::slice::Split<'a, T, P>","std::process::CommandArgs<'a>","std::iter::Enumerate<I>","std::io::Split<B>","std::collections::btree_map::IntoKeys<K, V, A>","std::str::SplitWhitespace<'a>","std::str::SplitTerminator<'a, P>","std::iter::adapters::GenericShunt<'_, I, R>","std::option::Iter<'a, A>","std::os::unix::net::ScmRights<'a>","std::env::Args","std::collections::hash_map::IntoValues<K, V>","std::collections::linked_list::IntoIter<T>","std::str::EncodeUtf16<'a>","std::net::IntoIncoming","std::iter::FilterMap<I, F>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::slice::SplitMut<'a, T, P>","std::slice::RChunks<'a, T>","std::slice::ChunksExactMut<'a, T>","std::char::EscapeUnicode","std::sys::unix::fs::ReadDir","std::option::Item<A>","std::iter::SkipWhile<I, P>","std::slice::RSplit<'a, T, P>","std::collections::vec_deque::Iter<'a, T>","std::iter::Fuse<I>","std::str::SplitN<'a, P>","std::collections::hash_set::Drain<'a, K>","std::env::Vars","std::str::EscapeDebug<'a>","std::vec::IntoIter<T, A>","std::iter::Chain<A, B>","std::vec::Splice<'_, I, A>","std::vec::DrainFilter<'_, T, F, A>","std::iter::Skip<I>","std::slice::RSplitN<'a, T, P>","std::env::ArgsOs","std::iter::Peekable<I>","std::os::unix::net::Incoming<'a>","std::iter::IntersperseWith<I, G>","std::iter::Empty<T>","std::collections::btree_map::IntoIter<K, V, A>","std::str::RSplitN<'a, P>","std::iter::sources::from_generator::FromGenerator<G>","std::vec::Drain<'_, T, A>","std::collections::hash_map::Iter<'a, K, V>","std::iter::Scan<I, St, F>","std::collections::binary_heap::IntoIter<T>","std::env::SplitPaths<'a>","std::collections::hash_map::Values<'a, K, V>","std::env::VarsOs","std::sys_common::net::LookupHost","std::collections::vec_deque::IntoIter<T, A>","std::str::Chars<'a>","std::slice::ChunksMut<'a, T>","std::str::RMatches<'a, P>","std::iter::ByRefSized<'_, I>","std::str::Bytes<'_>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::collections::btree_map::Iter<'a, K, V>","std::slice::SplitN<'a, T, P>","std::os::unix::net::ScmCredentials<'a>","std::collections::linked_list::IterMut<'a, T>","std::collections::hash_set::Difference<'a, T, S>","std::iter::Cycle<I>","std::sys::unix::os::Env","std::ops::Range<A>","std::char::EscapeDebug","std::collections::hash_set::Iter<'a, K>","std::slice::ArrayChunksMut<'a, T, N>","std::iter::Zip<A, B>","std::sys::unix::process::process_common::CommandArgs<'a>","std::slice::RSplitNMut<'a, T, P>","std::iter::Map<I, F>","std::iter::Successors<T, F>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::fs::ReadDir","std::array::IntoIter<T, N>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::iter::ArrayChunks<I, N>","std::os::unix::net::Messages<'a>","std::iter::Take<I>","std::collections::hash_map::Drain<'a, K, V>","std::str::Utf8Chunks<'a>","std::ops::RangeFrom<A>","std::iter::Copied<I>","std::iter::Repeat<A>","std::slice::Windows<'a, T>","std::collections::btree_set::Range<'a, T>","std::collections::linked_list::DrainFilter<'_, T, F>","std::slice::ArrayChunks<'a, T, N>","std::slice::ChunksExact<'a, T>","std::sync::mpsc::IntoIter<T>","std::ops::index_range::IndexRange","std::slice::RChunksExact<'a, T>","std::collections::btree_map::Values<'a, K, V>","std::result::IntoIter<T>","std::slice::SplitNMut<'a, T, P>","std::char::DecodeUtf16<I>","std::iter::Flatten<I>","std::sys_common::wstr::WStrUnits<'_>","std::net::Incoming<'a>","std::str::SplitAsciiWhitespace<'a>","std::slice::ArrayWindows<'a, T, N>","std::iter::Intersperse<I>","std::path::Iter<'a>","std::iter::Rev<I>","std::iter::TakeWhile<I, P>","std::iter::FromFn<F>","std::collections::hash_map::IterMut<'a, K, V>","std::str::Matches<'a, P>","std::collections::hash_map::IntoKeys<K, V>","std::slice::SplitInclusive<'a, T, P>","std::iter::MapWhile<I, P>","std::io::Bytes<R>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::hash_map::ValuesMut<'a, K, V>","std::iter::FlatMap<I, U, F>","std::str::LinesAny<'a>","std::str::RSplit<'a, P>","std::collections::btree_set::Difference<'a, T, A>","std::ascii::EscapeDefault","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::collections::btree_map::IntoValues<K, V, A>","std::collections::btree_set::Iter<'a, T>","std::iter::StepBy<I>","std::option::IntoIter<A>","<&mut I as std::iter::Iterator>","std::char::CaseMappingIter","std::str::RSplitTerminator<'a, P>","std::slice::Iter<'a, T>","std::result::IterMut<'a, T>","std::collections::linked_list::Iter<'a, T>","bitflags::core::slice::iter::GenericSplitN<I>","std::slice::RSplitMut<'a, T, P>","std::collections::btree_set::IntoIter<T, A>","std::sync::mpsc::TryIter<'a, T>","std::sys::unix::args::Args","std::iter::Once<T>","std::iter::OnceWith<F>","std::iter::Cloned<I>","std::path::Ancestors<'a>","std::slice::GroupBy<'a, T, P>","std::collections::btree_set::SymmetricDifference<'a, T>","std::iter::Filter<I, P>","std::result::Iter<'a, T>","std::slice::EscapeAscii<'a>","std::slice::SplitInclusiveMut<'a, T, P>","std::slice::IterMut<'a, T>","std::ops::RangeInclusive<A>","std::str::CharIndices<'a>","std::slice::RChunksMut<'a, T>","std::collections::btree_set::Intersection<'a, T, A>","std::slice::Chunks<'a, T>"]},"<widgets::Borders as std::iter::Extend<widgets::Borders>>::extend":{"T":["<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>","text::Text","<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // widgets::Borders
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.extend(p1);
+<widgets::Borders as std::iter::Extend<widgets::Borders>>::extend(p0, p1);
+crate::<widgets::Borders as std::iter::Extend<widgets::Borders>>::extend(p0, p1);
+<widgets::Borders>::extend(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <widgets::Borders as std::iter::FromIterator<widgets::Borders>>::from_iter
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"<widgets::Borders as std::iter::FromIterator<widgets::Borders>>::from_iter":{"T":["std::iter::IntoIterator","std::marker::Sized"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::collections::binary_heap::IntoIter<T>","std::collections::btree_set::SymmetricDifference<'a, T>","std::slice::Chunks<'a, T>","std::sys_common::wtf8::EncodeWide<'a>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::collections::vec_deque::IntoIter<T, A>","std::iter::TakeWhile<I, P>","std::str::RSplitN<'a, P>","std::iter::Once<T>","std::collections::hash_set::Drain<'a, K>","std::iter::FromFn<F>","std::sync::mpsc::IntoIter<T>","std::collections::btree_map::IntoIter<K, V, A>","std::string::Drain<'_>","std::os::unix::net::Messages<'a>","std::path::Components<'a>","std::slice::ChunksExactMut<'a, T>","std::slice::Split<'a, T, P>","std::iter::Chain<A, B>","std::collections::vec_deque::Drain<'_, T, A>","std::str::EncodeUtf16<'a>","std::str::LinesAny<'a>","std::str::Utf8Chunks<'a>","std::slice::SplitN<'a, T, P>","std::iter::OnceWith<F>","std::collections::hash_set::Intersection<'a, T, S>","std::collections::btree_map::IntoKeys<K, V, A>","std::str::SplitN<'a, P>","std::slice::GroupBy<'a, T, P>","std::collections::hash_set::Iter<'a, K>","std::os::unix::net::Incoming<'a>","std::collections::linked_list::IntoIter<T>","std::collections::vec_deque::Iter<'a, T>","std::option::Iter<'a, A>","std::collections::btree_map::IntoValues<K, V, A>","std::str::RSplit<'a, P>","std::sys_common::net::LookupHost","std::collections::binary_heap::IntoIterSorted<T>","std::env::VarsOs","std::result::IterMut<'a, T>","std::path::Ancestors<'a>","std::str::RMatches<'a, P>","std::slice::ChunksMut<'a, T>","std::iter::Filter<I, P>","std::collections::btree_map::IterMut<'a, K, V>","std::vec::Drain<'_, T, A>","std::process::CommandEnvs<'a>","std::char::CaseMappingIter","std::ops::RangeInclusive<A>","std::ops::RangeFrom<A>","std::iter::Copied<I>","std::os::unix::net::ScmCredentials<'a>","std::collections::hash_map::Values<'a, K, V>","std::collections::binary_heap::DrainSorted<'_, T>","std::io::Lines<B>","std::option::Item<A>","std::iter::Cloned<I>","std::io::Bytes<R>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::collections::binary_heap::Drain<'_, T>","std::str::Lines<'a>","std::slice::RSplit<'a, T, P>","std::iter::Take<I>","std::slice::ArrayChunks<'a, T, N>","std::slice::SplitInclusive<'a, T, P>","std::str::Chars<'a>","std::collections::binary_heap::Iter<'a, T>","std::iter::SkipWhile<I, P>","std::collections::btree_map::Values<'a, K, V>","std::char::EscapeDefault","std::slice::RSplitNMut<'a, T, P>","std::str::Matches<'a, P>","std::iter::Enumerate<I>","std::vec::Splice<'_, I, A>","std::iter::Empty<T>","std::slice::SplitMut<'a, T, P>","std::sys::unix::process::process_common::CommandArgs<'a>","std::iter::Skip<I>","std::str::CharIndices<'a>","std::array::IntoIter<T, N>","std::path::Iter<'a>","std::collections::hash_set::Difference<'a, T, S>","std::char::ToLowercase","std::str::SplitAsciiWhitespace<'a>","std::iter::Successors<T, F>","std::slice::EscapeAscii<'a>","std::iter::Fuse<I>","std::str::SplitWhitespace<'a>","std::sys_common::wstr::WStrUnits<'_>","std::slice::Windows<'a, T>","std::iter::IntersperseWith<I, G>","std::ops::index_range::IndexRange","std::str::Split<'a, P>","std::result::IntoIter<T>","std::str::Bytes<'_>","std::collections::btree_map::ValuesMut<'a, K, V>","std::sync::mpsc::TryIter<'a, T>","std::collections::btree_map::RangeMut<'a, K, V>","std::iter::RepeatWith<F>","std::collections::btree_set::Iter<'a, T>","std::iter::StepBy<I>","std::iter::Map<I, F>","std::str::EscapeDebug<'a>","std::slice::SplitInclusiveMut<'a, T, P>","std::str::RMatchIndices<'a, P>","std::str::SplitInclusive<'a, P>","std::iter::Inspect<I, F>","std::iter::adapters::GenericShunt<'_, I, R>","std::process::CommandArgs<'a>","std::env::Vars","std::os::unix::net::ScmRights<'a>","std::iter::Rev<I>","std::slice::RSplitMut<'a, T, P>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","bitflags::core::slice::iter::GenericSplitN<I>","std::str::EscapeUnicode<'a>","std::collections::hash_map::ValuesMut<'a, K, V>","std::iter::ArrayChunks<I, N>","std::sys::unix::os::SplitPaths<'a>","std::slice::RChunks<'a, T>","std::env::SplitPaths<'a>","std::slice::ArrayChunksMut<'a, T, N>","<&mut I as std::iter::Iterator>","std::slice::RChunksMut<'a, T>","std::str::EscapeDefault<'a>","std::collections::hash_map::Iter<'a, K, V>","std::iter::FilterMap<I, F>","std::env::Args","std::vec::IntoIter<T, A>","std::collections::hash_map::IterMut<'a, K, V>","std::slice::RSplitN<'a, T, P>","std::slice::SplitNMut<'a, T, P>","std::result::Iter<'a, T>","std::option::IterMut<'a, A>","std::slice::RChunksExact<'a, T>","std::io::Split<B>","std::slice::Iter<'a, T>","std::char::EscapeUnicode","std::sys::unix::fs::ReadDir","std::collections::hash_map::IntoIter<K, V>","std::collections::hash_map::IntoValues<K, V>","std::iter::Flatten<I>","std::collections::linked_list::Iter<'a, T>","std::collections::hash_map::IntoKeys<K, V>","std::str::SplitTerminator<'a, P>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::sys::unix::os::Env","std::collections::linked_list::IterMut<'a, T>","std::iter::MapWhile<I, P>","bitflags::core::error::Source<'a>","std::str::RSplitTerminator<'a, P>","std::option::IntoIter<A>","std::iter::Peekable<I>","std::collections::hash_map::Drain<'a, K, V>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::iter::ByRefSized<'_, I>","std::slice::GroupByMut<'a, T, P>","std::fs::ReadDir","std::collections::hash_set::IntoIter<K>","std::slice::ChunksExact<'a, T>","std::vec::DrainFilter<'_, T, F, A>","std::iter::Intersperse<I>","std::ops::Range<A>","std::ascii::EscapeDefault","std::collections::linked_list::DrainFilter<'_, T, F>","std::boxed::Box<I, A>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::collections::btree_set::Union<'a, T>","std::collections::btree_map::Keys<'a, K, V>","std::collections::btree_set::Difference<'a, T, A>","std::slice::RChunksExactMut<'a, T>","std::char::DecodeUtf16<I>","std::iter::Cycle<I>","std::net::IntoIncoming","std::iter::Scan<I, St, F>","std::iter::RepeatN<A>","std::slice::IterMut<'a, T>","std::collections::btree_set::Range<'a, T>","std::collections::btree_map::Iter<'a, K, V>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::iter::Zip<A, B>","std::collections::btree_set::IntoIter<T, A>","std::slice::ArrayWindows<'a, T, N>","std::str::MatchIndices<'a, P>","std::iter::sources::from_generator::FromGenerator<G>","std::env::ArgsOs","std::char::EscapeDebug","std::iter::Repeat<A>","std::collections::hash_set::Union<'a, T, S>","std::sys::unix::args::Args","std::char::ToUppercase","std::sync::mpsc::Iter<'a, T>","std::net::Incoming<'a>","std::iter::FlatMap<I, U, F>","std::collections::btree_set::Intersection<'a, T, A>","std::collections::hash_map::Keys<'a, K, V>","std::collections::vec_deque::IterMut<'a, T>","std::collections::hash_set::DrainFilter<'_, K, F>","std::collections::btree_map::Range<'a, K, V>"]},"<widgets::Borders as std::iter::FromIterator<widgets::Borders>>::from_iter":{"T":["<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>","<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>","text::Text"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+<widgets::Borders as std::iter::FromIterator<widgets::Borders>>::from_iter(p0);
+crate::<widgets::Borders as std::iter::FromIterator<widgets::Borders>>::from_iter(p0);
+<widgets::Borders>::from_iter(p0);