-----------------
src/app/help.rs app::help::term_size::dimensions
deps:{}
candidates:{}
+app::help::term_size::dimensions();
+crate::app::help::term_size::dimensions();
+crate::app::help::term_size::dimensions();
-----------------
src/app/help.rs app::help::str_width
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+app::help::str_width(&p0);
+crate::app::help::str_width(&p0);
+crate::app::help::str_width(&p0);
-----------------
src/app/help.rs app::help::as_arg_trait
'a,'b
deps:{"<T as app::help::ArgWithOrder<'b, 'c>>":{"T":["app::help::ArgWithDisplay","std::marker::Sized","args::any_arg::DispOrder"]},"app::help::as_arg_trait":{"T":["std::marker::Sized","app::help::ArgWithOrder"]}}
candidates:{"<T as app::help::ArgWithOrder<'b, 'c>>":{},"app::help::as_arg_trait":{"T":["<T as app::help::ArgWithOrder<'b, 'c>>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // T
+app::help::as_arg_trait(p0);
+crate::app::help::as_arg_trait(p0);
+crate::app::help::as_arg_trait(p0);
-----------------
src/app/help.rs app::help::should_show_arg
deps:{}
candidates:{}
let mut p0 = true; // None+bool
let mut p1 = & MaybeUninit::uninit().assume_init(); // dyn app::help::ArgWithOrder<'a, 'b>
+app::help::should_show_arg(p0, p1);
+crate::app::help::should_show_arg(p0, p1);
+crate::app::help::should_show_arg(p0, p1);
-----------------
src/app/help.rs app::help::copy_until
deps:{"app::help::copy_until":{"R":["std::marker::Sized","std::io::Read"],"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Read for &mut R>":{},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"app::help::copy_until":{"R":["std::boxed::Box<R>","std::collections::VecDeque<u8, A>","std::io::Empty","std::io::BufReader<R>","std::io::stdio::StdinRaw","std::sys::unix::stdio::Stdin","std::fs::File","&std::net::TcpStream","&std::fs::File","std::io::impls::<impl std::io::Read for &mut R>","std::io::Take<T>","std::io::StdinLock<'_>","&'a std::os::unix::net::UnixStream","&'a std::sys::unix::fd::FileDesc","std::io::Stdin","std::io::Cursor<T>","std::net::TcpStream","std::io::Repeat","std::io::Chain<T, U>","std::process::ChildStderr","std::os::unix::net::UnixStream","std::process::ChildStdout"],"W":["std::os::unix::net::UnixStream","std::io::stdio::StderrRaw","std::sys::unix::stdio::Stdout","std::sys::unix::stdio::Stderr","std::io::StderrLock<'_>","std::io::buffered::linewritershim::LineWriterShim<'a, W>","&std::io::Stderr","std::io::Cursor<std::boxed::Box<[u8], A>>","std::vec::Vec<u8, A>","std::net::TcpStream","std::io::Cursor<&mut [u8]>","std::collections::VecDeque<u8, A>","std::io::Stderr","std::process::ChildStdin","std::io::Cursor<[u8; N]>","std::io::StdoutLock<'_>","&'a std::os::unix::net::UnixStream","std::io::stdio::StdoutRaw","std::io::BufWriter<W>","&std::process::ChildStdin","&std::io::Sink","&std::fs::File","std::io::Stdout","&std::io::Stdout","std::io::impls::<impl std::io::Write for &mut W>","std::io::BorrowedCursor<'a>","std::io::Sink","&std::net::TcpStream","std::fs::File","std::io::Cursor<std::vec::Vec<u8, A>>","std::boxed::Box<W>","std::io::Cursor<&mut std::vec::Vec<u8, A>>","std::io::LineWriter<W>"]},"std::io::impls::<impl std::io::Read for &mut R>":{},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // R
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // W
let mut p2 = 0u8; // None+u8
+app::help::copy_until(p0, p1, p2);
+crate::app::help::copy_until(p0, p1, p2);
+crate::app::help::copy_until(p0, p1, p2);
-----------------
src/app/help.rs app::help::copy_and_capture
deps:{"app::help::copy_and_capture":{"R":["std::marker::Sized","std::io::Read"],"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Read for &mut R>":{},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"app::help::copy_and_capture":{"R":["&std::net::TcpStream","std::process::ChildStdout","std::io::Stdin","std::io::BufReader<R>","std::os::unix::net::UnixStream","std::boxed::Box<R>","std::io::StdinLock<'_>","std::io::Repeat","std::io::impls::<impl std::io::Read for &mut R>","&std::fs::File","std::net::TcpStream","std::io::stdio::StdinRaw","std::io::Empty","std::process::ChildStderr","&'a std::os::unix::net::UnixStream","std::io::Take<T>","std::io::Chain<T, U>","std::collections::VecDeque<u8, A>","std::fs::File","&'a std::sys::unix::fd::FileDesc","std::io::Cursor<T>","std::sys::unix::stdio::Stdin"],"W":["std::io::BorrowedCursor<'a>","std::io::Cursor<&mut [u8]>","std::io::BufWriter<W>","std::os::unix::net::UnixStream","std::io::Stdout","&std::io::Sink","std::sys::unix::stdio::Stderr","std::io::Cursor<std::boxed::Box<[u8], A>>","std::io::impls::<impl std::io::Write for &mut W>","std::io::Cursor<std::vec::Vec<u8, A>>","std::vec::Vec<u8, A>","std::io::Stderr","std::fs::File","std::io::Sink","&'a std::os::unix::net::UnixStream","&std::io::Stdout","&std::process::ChildStdin","std::io::StdoutLock<'_>","std::collections::VecDeque<u8, A>","&std::io::Stderr","std::io::Cursor<&mut std::vec::Vec<u8, A>>","&std::net::TcpStream","std::io::buffered::linewritershim::LineWriterShim<'a, W>","std::boxed::Box<W>","std::net::TcpStream","std::io::StderrLock<'_>","&std::fs::File","std::io::Cursor<[u8; N]>","std::sys::unix::stdio::Stdout","std::io::stdio::StderrRaw","std::process::ChildStdin","std::io::LineWriter<W>","std::io::stdio::StdoutRaw"]},"std::io::impls::<impl std::io::Read for &mut R>":{},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // R
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // W
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // std::io::Cursor<std::vec::Vec<u8>>
+app::help::copy_and_capture(p0, p1, p2);
+crate::app::help::copy_and_capture(p0, p1, p2);
+crate::app::help::copy_and_capture(p0, p1, p2);
-----------------
src/app/help.rs app::help::wrap_help
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = 0usize; // None+usize
+app::help::wrap_help(&p0, p1);
+crate::app::help::wrap_help(&p0, p1);
+crate::app::help::wrap_help(&p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::possible_subcommand::starts
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
+app::parser::Parser::<'a, 'b>::possible_subcommand::starts(&p0, p1);
+crate::app::parser::Parser::<'a, 'b>::possible_subcommand::starts(&p0, p1);
+<app::parser::Parser<'a, 'b>>::possible_subcommand::starts(&p0, p1);
-----------------
src/macros.rs app::parser::Parser::<'a, 'b>::get_matches_with::as_trait_obj
'a,'b
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"app::parser::Parser::<'a, 'b>::get_matches_with::as_trait_obj":{"T":["std::marker::Sized","args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"app::parser::Parser::<'a, 'b>::get_matches_with::as_trait_obj":{"T":["args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::flag::FlagBuilder","app::App"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // T
+app::parser::Parser::<'a, 'b>::get_matches_with::as_trait_obj(p0);
+crate::app::parser::Parser::<'a, 'b>::get_matches_with::as_trait_obj(p0);
+<app::parser::Parser<'a, 'b>>::get_matches_with::as_trait_obj(p0);
-----------------
src/macros.rs app::parser::Parser::<'a, 'b>::get_matches_with::as_trait_obj
'a,'b
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"app::parser::Parser::<'a, 'b>::get_matches_with::as_trait_obj":{"T":["std::marker::Sized","args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"app::parser::Parser::<'a, 'b>::get_matches_with::as_trait_obj":{"T":["<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::flag::FlagBuilder","app::App","args::arg_builder::option::OptBuilder","args::arg_builder::positional::PosBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // T
+app::parser::Parser::<'a, 'b>::get_matches_with::as_trait_obj(p0);
+crate::app::parser::Parser::<'a, 'b>::get_matches_with::as_trait_obj(p0);
+<app::parser::Parser<'a, 'b>>::get_matches_with::as_trait_obj(p0);
-----------------
src/macros.rs app::parser::Parser::<'a, 'b>::get_matches_with::as_trait_obj
'a,'b
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"app::parser::Parser::<'a, 'b>::get_matches_with::as_trait_obj":{"T":["args::any_arg::AnyArg","std::marker::Sized"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"app::parser::Parser::<'a, 'b>::get_matches_with::as_trait_obj":{"T":["app::App","args::arg_builder::option::OptBuilder","args::arg_builder::positional::PosBuilder","args::arg_builder::flag::FlagBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // T
+app::parser::Parser::<'a, 'b>::get_matches_with::as_trait_obj(p0);
+crate::app::parser::Parser::<'a, 'b>::get_matches_with::as_trait_obj(p0);
+<app::parser::Parser<'a, 'b>>::get_matches_with::as_trait_obj(p0);
-----------------
src/app/usage.rs app::usage::create_usage_with_title
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
let mut p1 = & ["a"].as_mut_slice(); // None+[&str]
+app::usage::create_usage_with_title(p0, p1);
+crate::app::usage::create_usage_with_title(p0, p1);
+crate::app::usage::create_usage_with_title(p0, p1);
-----------------
src/app/usage.rs app::usage::create_error_usage
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p2 = MaybeUninit::uninit().assume_init(); // std::option::Option<&str>
+app::usage::create_error_usage(p0, p1, p2);
+crate::app::usage::create_error_usage(p0, p1, p2);
+crate::app::usage::create_error_usage(p0, p1, p2);
-----------------
src/app/usage.rs app::usage::create_usage_no_title
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
let mut p1 = & ["a"].as_mut_slice(); // None+[&str]
+app::usage::create_usage_no_title(p0, p1);
+crate::app::usage::create_usage_no_title(p0, p1);
+crate::app::usage::create_usage_no_title(p0, p1);
-----------------
src/app/usage.rs app::usage::create_help_usage
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
let mut p1 = true; // None+bool
+app::usage::create_help_usage(p0, p1);
+crate::app::usage::create_help_usage(p0, p1);
+crate::app::usage::create_help_usage(p0, p1);
-----------------
src/app/usage.rs app::usage::create_smart_usage
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
let mut p1 = & ["a"].as_mut_slice(); // None+[&str]
+app::usage::create_smart_usage(p0, p1);
+crate::app::usage::create_smart_usage(p0, p1);
+crate::app::usage::create_smart_usage(p0, p1);
-----------------
src/app/usage.rs app::usage::get_args_tag
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
let mut p1 = true; // None+bool
+app::usage::get_args_tag(p0, p1);
+crate::app::usage::get_args_tag(p0, p1);
+crate::app::usage::get_args_tag(p0, p1);
-----------------
src/app/usage.rs app::usage::needs_flags_tag
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+app::usage::needs_flags_tag(p0);
+crate::app::usage::needs_flags_tag(p0);
+crate::app::usage::needs_flags_tag(p0);
-----------------
src/app/usage.rs app::usage::get_required_usage_from
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'a str]
let mut p2 = MaybeUninit::uninit().assume_init(); // std::option::Option<&args::arg_matcher::ArgMatcher<'a>>
let mut p3 = MaybeUninit::uninit().assume_init(); // std::option::Option<&str>
let mut p4 = true; // None+bool
+app::usage::get_required_usage_from(p0, p1, p2, p3, p4);
+crate::app::usage::get_required_usage_from(p0, p1, p2, p3, p4);
+crate::app::usage::get_required_usage_from(p0, p1, p2, p3, p4);
-----------------
src/macros.rs app::validator::Validator::<'a, 'b, 'z>::validate_blacklist::as_trait_obj
'a,'b
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"app::validator::Validator::<'a, 'b, 'z>::validate_blacklist::as_trait_obj":{"T":["std::marker::Sized","args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"app::validator::Validator::<'a, 'b, 'z>::validate_blacklist::as_trait_obj":{"T":["args::arg_builder::flag::FlagBuilder","app::App","args::arg_builder::option::OptBuilder","args::arg_builder::positional::PosBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // T
+app::validator::Validator::<'a, 'b, 'z>::validate_blacklist::as_trait_obj(p0);
+crate::app::validator::Validator::<'a, 'b, 'z>::validate_blacklist::as_trait_obj(p0);
+<app::validator::Validator<'a, 'b, 'z>>::validate_blacklist::as_trait_obj(p0);
-----------------
src/macros.rs app::validator::Validator::<'a, 'b, 'z>::validate_blacklist::as_trait_obj
'a,'b
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"app::validator::Validator::<'a, 'b, 'z>::validate_blacklist::as_trait_obj":{"T":["std::marker::Sized","args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"app::validator::Validator::<'a, 'b, 'z>::validate_blacklist::as_trait_obj":{"T":["args::arg_builder::option::OptBuilder","app::App","args::arg_builder::positional::PosBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // T
+app::validator::Validator::<'a, 'b, 'z>::validate_blacklist::as_trait_obj(p0);
+crate::app::validator::Validator::<'a, 'b, 'z>::validate_blacklist::as_trait_obj(p0);
+<app::validator::Validator<'a, 'b, 'z>>::validate_blacklist::as_trait_obj(p0);
-----------------
src/macros.rs app::validator::Validator::<'a, 'b, 'z>::validate_required::as_trait_obj
'a,'b
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"app::validator::Validator::<'a, 'b, 'z>::validate_required::as_trait_obj":{"T":["args::any_arg::AnyArg","std::marker::Sized"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"app::validator::Validator::<'a, 'b, 'z>::validate_required::as_trait_obj":{"T":["<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::positional::PosBuilder","app::App","args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // T
+app::validator::Validator::<'a, 'b, 'z>::validate_required::as_trait_obj(p0);
+crate::app::validator::Validator::<'a, 'b, 'z>::validate_required::as_trait_obj(p0);
+<app::validator::Validator<'a, 'b, 'z>>::validate_required::as_trait_obj(p0);
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::values_of::to_str_slice
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsString
+args::arg_matches::ArgMatches::<'a>::values_of::to_str_slice(p0);
+crate::args::arg_matches::ArgMatches::<'a>::values_of::to_str_slice(p0);
+<args::arg_matches::ArgMatches<'a>>::values_of::to_str_slice(p0);
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::values_of_os::to_str_slice
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsString
+args::arg_matches::ArgMatches::<'a>::values_of_os::to_str_slice(p0);
+crate::args::arg_matches::ArgMatches::<'a>::values_of_os::to_str_slice(p0);
+<args::arg_matches::ArgMatches<'a>>::values_of_os::to_str_slice(p0);
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::indices_of::to_usize
deps:{}
candidates:{}
let mut p0 = & 0usize; // None+usize
+args::arg_matches::ArgMatches::<'a>::indices_of::to_usize(p0);
+crate::args::arg_matches::ArgMatches::<'a>::indices_of::to_usize(p0);
+<args::arg_matches::ArgMatches<'a>>::indices_of::to_usize(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::Values<'a> as std::default::Default>::default::to_str_slice
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsString
+<args::arg_matches::Values<'a> as std::default::Default>::default::to_str_slice(p0);
+crate::<args::arg_matches::Values<'a> as std::default::Default>::default::to_str_slice(p0);
+<args::arg_matches::Values<'a>>::default::to_str_slice(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::OsValues<'a> as std::default::Default>::default::to_str_slice
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsString
+<args::arg_matches::OsValues<'a> as std::default::Default>::default::to_str_slice(p0);
+crate::<args::arg_matches::OsValues<'a> as std::default::Default>::default::to_str_slice(p0);
+<args::arg_matches::OsValues<'a>>::default::to_str_slice(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::Indices<'a> as std::default::Default>::default::to_usize
deps:{}
candidates:{}
let mut p0 = & 0usize; // None+usize
+<args::arg_matches::Indices<'a> as std::default::Default>::default::to_usize(p0);
+crate::<args::arg_matches::Indices<'a> as std::default::Default>::default::to_usize(p0);
+<args::arg_matches::Indices<'a>>::default::to_usize(p0);
-----------------
src/completions/elvish.rs completions::elvish::escape_string
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+completions::elvish::escape_string(&p0);
+crate::completions::elvish::escape_string(&p0);
+crate::completions::elvish::escape_string(&p0);
-----------------
src/completions/elvish.rs completions::elvish::get_tooltip
deps:{"<&T as std::fmt::Debug>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"<T as std::string::ToString>":{"T":["std::fmt::Display"]},"completions::elvish::get_tooltip":{"T":["std::marker::Sized","std::string::ToString"]},"fmt::Format":{"T":["std::marker::Sized","std::fmt::Debug","std::convert::AsRef"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"<T as std::string::ToString>":{"T":["errors::Error","fmt::Format","args::arg_builder::option::OptBuilder","app::App","args::arg_builder::positional::PosBuilder","<&mut T as std::fmt::Display>","args::arg_builder::flag::FlagBuilder","<&T as std::fmt::Display>","completions::shell::Shell"]},"completions::elvish::get_tooltip":{"T":["u8","<T as std::string::ToString>","i8","char"]},"fmt::Format":{"T":["std::rc::Rc<T>","std::ffi::CString","std::slice::IterMut<'_, T>","std::vec::IntoIter<T, A>","std::sync::Arc<T>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::path::Component<'_>","std::slice::Iter<'_, T>","<&mut T as std::convert::AsRef<U>>","std::boxed::Box<T, A>","std::ffi::CStr","std::string::Drain<'a>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::option::Option<&str>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+completions::elvish::get_tooltip(p0, p1);
+crate::completions::elvish::get_tooltip(p0, p1);
+crate::completions::elvish::get_tooltip(p0, p1);
-----------------
src/completions/elvish.rs completions::elvish::generate_inner
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = "sample"; // None+&str
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // std::vec::Vec<&'p str>
+completions::elvish::generate_inner(p0, &p1, p2);
+crate::completions::elvish::generate_inner(p0, &p1, p2);
+crate::completions::elvish::generate_inner(p0, &p1, p2);
-----------------
src/completions/fish.rs completions::fish::escape_string
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+completions::fish::escape_string(&p0);
+crate::completions::fish::escape_string(&p0);
+crate::completions::fish::escape_string(&p0);
-----------------
src/completions/fish.rs completions::fish::gen_fish_inner
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = & MaybeUninit::uninit().assume_init(); // completions::fish::FishGen<'_, '_>
let mut p2 = "sample"; // None+&str
let mut p3 = &mut std::string::String::new(); // None+std::string::String
+completions::fish::gen_fish_inner(&p0, p1, &p2, p3);
+crate::completions::fish::gen_fish_inner(&p0, p1, &p2, p3);
+crate::completions::fish::gen_fish_inner(&p0, p1, &p2, p3);
-----------------
src/completions/powershell.rs completions::powershell::escape_string
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+completions::powershell::escape_string(&p0);
+crate::completions::powershell::escape_string(&p0);
+crate::completions::powershell::escape_string(&p0);
-----------------
src/completions/powershell.rs completions::powershell::get_tooltip
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"<T as std::string::ToString>":{"T":["std::fmt::Display"]},"completions::powershell::get_tooltip":{"T":["std::string::ToString","std::marker::Sized"]},"fmt::Format":{"T":["std::convert::AsRef","std::marker::Sized","std::fmt::Debug"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"<T as std::string::ToString>":{"T":["args::arg_builder::flag::FlagBuilder","<&T as std::fmt::Display>","<&mut T as std::fmt::Display>","app::App","args::arg_builder::option::OptBuilder","fmt::Format","args::arg_builder::positional::PosBuilder","completions::shell::Shell","errors::Error"]},"completions::powershell::get_tooltip":{"T":["i8","u8","char","<T as std::string::ToString>"]},"fmt::Format":{"T":["std::slice::Iter<'_, T>","std::path::Component<'_>","std::slice::IterMut<'_, T>","std::ffi::CString","std::vec::IntoIter<T, A>","std::sync::Arc<T>","<&T as std::convert::AsRef<U>>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::rc::Rc<T>","std::ffi::CStr","std::boxed::Box<T, A>","std::string::Drain<'a>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::option::Option<&str>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+completions::powershell::get_tooltip(p0, p1);
+crate::completions::powershell::get_tooltip(p0, p1);
+crate::completions::powershell::get_tooltip(p0, p1);
-----------------
src/completions/powershell.rs completions::powershell::generate_inner
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = "sample"; // None+&str
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // std::vec::Vec<&'p str>
+completions::powershell::generate_inner(p0, &p1, p2);
+crate::completions::powershell::generate_inner(p0, &p1, p2);
+crate::completions::powershell::generate_inner(p0, &p1, p2);
-----------------
src/completions/zsh.rs completions::zsh::subcommand_details
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+completions::zsh::subcommand_details(p0);
+crate::completions::zsh::subcommand_details(p0);
+crate::completions::zsh::subcommand_details(p0);
-----------------
src/completions/zsh.rs completions::zsh::subcommands_of
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+completions::zsh::subcommands_of(p0);
+crate::completions::zsh::subcommands_of(p0);
+crate::completions::zsh::subcommands_of(p0);
-----------------
src/completions/zsh.rs completions::zsh::subcommands_of::add_sc
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'_, '_>
let mut p1 = "sample"; // None+&str
let mut p2 = &mut std::string::String::new(); // None+std::vec::Vec<std::string::String>
+completions::zsh::subcommands_of::add_sc(p0, &p1, p2);
+crate::completions::zsh::subcommands_of::add_sc(p0, &p1, p2);
+crate::completions::zsh::subcommands_of::add_sc(p0, &p1, p2);
-----------------
src/completions/zsh.rs completions::zsh::get_subcommands_of
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+completions::zsh::get_subcommands_of(p0);
+crate::completions::zsh::get_subcommands_of(p0);
+crate::completions::zsh::get_subcommands_of(p0);
-----------------
src/completions/zsh.rs completions::zsh::parser_of
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = "sample"; // None+&str
+completions::zsh::parser_of(p0, &p1);
+crate::completions::zsh::parser_of(p0, &p1);
+crate::completions::zsh::parser_of(p0, &p1);
-----------------
src/completions/zsh.rs completions::zsh::get_args_of
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+completions::zsh::get_args_of(p0);
+crate::completions::zsh::get_args_of(p0);
+crate::completions::zsh::get_args_of(p0);
-----------------
src/completions/zsh.rs completions::zsh::escape_help
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+completions::zsh::escape_help(&p0);
+crate::completions::zsh::escape_help(&p0);
+crate::completions::zsh::escape_help(&p0);
-----------------
src/completions/zsh.rs completions::zsh::escape_value
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+completions::zsh::escape_value(&p0);
+crate::completions::zsh::escape_value(&p0);
+crate::completions::zsh::escape_value(&p0);
-----------------
src/completions/zsh.rs completions::zsh::write_opts_of
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+completions::zsh::write_opts_of(p0);
+crate::completions::zsh::write_opts_of(p0);
+crate::completions::zsh::write_opts_of(p0);
-----------------
src/completions/zsh.rs completions::zsh::write_flags_of
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+completions::zsh::write_flags_of(p0);
+crate::completions::zsh::write_flags_of(p0);
+crate::completions::zsh::write_flags_of(p0);
-----------------
src/completions/zsh.rs completions::zsh::write_positionals_of
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+completions::zsh::write_positionals_of(p0);
+crate::completions::zsh::write_positionals_of(p0);
+crate::completions::zsh::write_positionals_of(p0);
-----------------
src/completions/mod.rs completions::all_subcommand_names
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+completions::all_subcommand_names(p0);
+crate::completions::all_subcommand_names(p0);
+crate::completions::all_subcommand_names(p0);
-----------------
src/completions/mod.rs completions::all_subcommands
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+completions::all_subcommands(p0);
+crate::completions::all_subcommands(p0);
+crate::completions::all_subcommands(p0);
-----------------
src/completions/mod.rs completions::subcommands_of
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+completions::subcommands_of(p0);
+crate::completions::subcommands_of(p0);
+crate::completions::subcommands_of(p0);
-----------------
src/completions/mod.rs completions::get_all_subcommand_paths
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
let mut p1 = true; // None+bool
+completions::get_all_subcommand_paths(p0, p1);
+crate::completions::get_all_subcommand_paths(p0, p1);
+crate::completions::get_all_subcommand_paths(p0, p1);
-----------------
src/fmt.rs fmt::is_a_tty
deps:{}
candidates:{}
let mut p0 = true; // None+bool
+fmt::is_a_tty(p0);
+crate::fmt::is_a_tty(p0);
+crate::fmt::is_a_tty(p0);
-----------------
src/fmt.rs fmt::is_term_dumb
deps:{}
candidates:{}
+fmt::is_term_dumb();
+crate::fmt::is_term_dumb();
+crate::fmt::is_term_dumb();
-----------------
src/suggestions.rs suggestions::did_you_mean
'a
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&T as std::convert::AsRef<U>>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::convert::AsRef<U>>":{},"<I as std::iter::IntoIterator>":{"I":["std::iter::Iterator","std::marker::Sized"]},"suggestions::did_you_mean":{"I":["std::iter::IntoIterator","std::marker::Sized"],"T":["std::convert::AsRef"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&T as std::convert::AsRef<U>>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::convert::AsRef<U>>":{},"<I as std::iter::IntoIterator>":{"I":["args::arg_matches::Values","args::arg_matches::OsValues","args::arg_matches::Indices","osstringext::OsSplit","<&mut I as std::iter::Iterator>"]},"suggestions::did_you_mean":{"I":["std::collections::BinaryHeap<T>","std::vec::Vec<T, A>","std::option::Option<T>","std::collections::HashSet<T, S>","&'a std::path::PathBuf","&'a std::os::unix::net::UnixListener","std::collections::BTreeSet<T, A>","std::collections::BTreeMap<K, V, A>","<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>","std::result::Result<T, E>","std::collections::VecDeque<T, A>","std::collections::HashMap<K, V, S>","&'a std::path::Path","std::collections::LinkedList<T>","std::sync::mpsc::Receiver<T>","<&'a std::result::Result<T, E> as std::iter::IntoIterator>"],"T":["std::borrow::Cow<'_, T>","std::rc::Rc<T>","std::vec::IntoIter<T, A>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::borrow::Cow<'_, std::ffi::OsStr>","std::slice::IterMut<'_, T>","std::slice::Iter<'_, T>","std::ffi::CStr","std::sync::Arc<T>","std::vec::Drain<'a, T, A>","std::boxed::Box<T, A>","std::ffi::CString","<&mut T as std::convert::AsRef<U>>"]}}
let mut p0 = "sample"; // None+&str
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+suggestions::did_you_mean(&p0, p1);
+crate::suggestions::did_you_mean(&p0, p1);
+crate::suggestions::did_you_mean(&p0, p1);
-----------------
src/suggestions.rs suggestions::did_you_mean_flag_suffix
'z
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&T as std::convert::AsRef<U>>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::convert::AsRef<U>>":{},"<I as std::iter::IntoIterator>":{"I":["std::iter::Iterator","std::marker::Sized"]},"suggestions::did_you_mean_flag_suffix":{"I":["std::marker::Sized","std::iter::IntoIterator"],"T":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&T as std::convert::AsRef<U>>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::convert::AsRef<U>>":{},"<I as std::iter::IntoIterator>":{"I":["<&mut I as std::iter::Iterator>","args::arg_matches::Values","osstringext::OsSplit","args::arg_matches::OsValues","args::arg_matches::Indices"]},"suggestions::did_you_mean_flag_suffix":{"I":["<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>","std::collections::HashSet<T, S>","<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>","std::collections::HashMap<K, V, S>","&'a std::os::unix::net::UnixListener","std::sync::mpsc::Receiver<T>","std::vec::Vec<T, A>","std::result::Result<T, E>","std::option::Option<T>","&'a std::path::PathBuf","std::collections::BTreeMap<K, V, A>","std::collections::VecDeque<T, A>","std::collections::LinkedList<T>","std::collections::BTreeSet<T, A>","std::collections::BinaryHeap<T>","&'a std::path::Path"],"T":["std::rc::Rc<T>","<&T as std::convert::AsRef<U>>","<&mut T as std::convert::AsRef<U>>","std::slice::IterMut<'_, T>","std::ffi::CStr","std::vec::IntoIter<T, A>","std::boxed::Box<T, A>","std::borrow::Cow<'_, T>","std::vec::Drain<'a, T, A>","std::sync::Arc<T>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::slice::Iter<'_, T>","std::ffi::CString","std::borrow::Cow<'_, std::ffi::OsStr>"]}}
let mut p0 = "sample"; // None+&str
let mut p1 = & ["a"].as_mut_slice(); // None+[&str]
let mut p2 = MaybeUninit::uninit().assume_init(); // I
let mut p3 = & MaybeUninit::uninit().assume_init(); // [app::App<'_, '_>]
+suggestions::did_you_mean_flag_suffix(&p0, p1, p2, p3);
+crate::suggestions::did_you_mean_flag_suffix(&p0, p1, p2, p3);
+crate::suggestions::did_you_mean_flag_suffix(&p0, p1, p2, p3);
-----------------
src/suggestions.rs suggestions::did_you_mean_value_suffix
'z
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&T as std::convert::AsRef<U>>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::convert::AsRef<U>>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"suggestions::did_you_mean_value_suffix":{"I":["std::marker::Sized","std::iter::IntoIterator"],"T":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&T as std::convert::AsRef<U>>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::convert::AsRef<U>>":{},"<I as std::iter::IntoIterator>":{"I":["args::arg_matches::Indices","args::arg_matches::OsValues","<&mut I as std::iter::Iterator>","args::arg_matches::Values","osstringext::OsSplit"]},"suggestions::did_you_mean_value_suffix":{"I":["<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>","std::collections::BinaryHeap<T>","&'a std::os::unix::net::UnixListener","std::collections::VecDeque<T, A>","&'a std::path::Path","std::option::Option<T>","std::collections::HashSet<T, S>","<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>","std::collections::BTreeMap<K, V, A>","std::collections::BTreeSet<T, A>","std::sync::mpsc::Receiver<T>","std::collections::LinkedList<T>","std::vec::Vec<T, A>","std::result::Result<T, E>","std::collections::HashMap<K, V, S>","&'a std::path::PathBuf"],"T":["std::vec::Drain<'a, T, A>","<&mut T as std::convert::AsRef<U>>","std::slice::IterMut<'_, T>","std::ffi::CString","std::sync::Arc<T>","std::rc::Rc<T>","std::ffi::CStr","std::slice::Iter<'_, T>","std::borrow::Cow<'_, std::ffi::OsStr>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::boxed::Box<T, A>","<&T as std::convert::AsRef<U>>","std::vec::IntoIter<T, A>","std::borrow::Cow<'_, T>"]}}
let mut p0 = "sample"; // None+&str
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+suggestions::did_you_mean_value_suffix(&p0, p1);
+crate::suggestions::did_you_mean_value_suffix(&p0, p1);
+crate::suggestions::did_you_mean_value_suffix(&p0, p1);
-----------------
src/usage_parser.rs usage_parser::name_end
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+usage_parser::name_end(p0);
+crate::usage_parser::name_end(p0);
+crate::usage_parser::name_end(p0);
-----------------
src/usage_parser.rs usage_parser::token
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+usage_parser::token(p0);
+crate::usage_parser::token(p0);
+crate::usage_parser::token(p0);
-----------------
src/usage_parser.rs usage_parser::long_end
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+usage_parser::long_end(p0);
+crate::usage_parser::long_end(p0);
+crate::usage_parser::long_end(p0);
-----------------
src/usage_parser.rs usage_parser::help_start
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+usage_parser::help_start(p0);
+crate::usage_parser::help_start(p0);
+crate::usage_parser::help_start(p0);
-----------------
src/app/help.rs app::help::ArgWithOrder::as_base
'b,'c
deps:{"app::help::ArgWithOrder::as_base":{"Self":["app::help::ArgWithOrder","app::help::ArgWithDisplay","args::any_arg::DispOrder"]}}
candidates:{"app::help::ArgWithOrder::as_base":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.as_base();
+app::help::ArgWithOrder::as_base(p0);
+crate::app::help::ArgWithOrder::as_base(p0);
+crate::app::help::ArgWithOrder::as_base(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::SC_NEGATE_REQS
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::SC_NEGATE_REQS":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::SC_NEGATE_REQS":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.SC_NEGATE_REQS();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::SC_NEGATE_REQS(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::SC_NEGATE_REQS(p0);
+<app::settings::Flags>::fmt::__BitFlags::SC_NEGATE_REQS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::SC_REQUIRED
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::SC_REQUIRED":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::SC_REQUIRED":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.SC_REQUIRED();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::SC_REQUIRED(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::SC_REQUIRED(p0);
+<app::settings::Flags>::fmt::__BitFlags::SC_REQUIRED(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::A_REQUIRED_ELSE_HELP
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::A_REQUIRED_ELSE_HELP":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::A_REQUIRED_ELSE_HELP":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.A_REQUIRED_ELSE_HELP();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::A_REQUIRED_ELSE_HELP(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::A_REQUIRED_ELSE_HELP(p0);
+<app::settings::Flags>::fmt::__BitFlags::A_REQUIRED_ELSE_HELP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::GLOBAL_VERSION
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::GLOBAL_VERSION":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::GLOBAL_VERSION":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.GLOBAL_VERSION();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::GLOBAL_VERSION(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::GLOBAL_VERSION(p0);
+<app::settings::Flags>::fmt::__BitFlags::GLOBAL_VERSION(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::VERSIONLESS_SC
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::VERSIONLESS_SC":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::VERSIONLESS_SC":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.VERSIONLESS_SC();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::VERSIONLESS_SC(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::VERSIONLESS_SC(p0);
+<app::settings::Flags>::fmt::__BitFlags::VERSIONLESS_SC(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::UNIFIED_HELP
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::UNIFIED_HELP":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::UNIFIED_HELP":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.UNIFIED_HELP();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::UNIFIED_HELP(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::UNIFIED_HELP(p0);
+<app::settings::Flags>::fmt::__BitFlags::UNIFIED_HELP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::WAIT_ON_ERROR
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::WAIT_ON_ERROR":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::WAIT_ON_ERROR":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.WAIT_ON_ERROR();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::WAIT_ON_ERROR(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::WAIT_ON_ERROR(p0);
+<app::settings::Flags>::fmt::__BitFlags::WAIT_ON_ERROR(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::SC_REQUIRED_ELSE_HELP
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::SC_REQUIRED_ELSE_HELP":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::SC_REQUIRED_ELSE_HELP":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.SC_REQUIRED_ELSE_HELP();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::SC_REQUIRED_ELSE_HELP(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::SC_REQUIRED_ELSE_HELP(p0);
+<app::settings::Flags>::fmt::__BitFlags::SC_REQUIRED_ELSE_HELP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEEDS_LONG_HELP
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEEDS_LONG_HELP":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEEDS_LONG_HELP":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.NEEDS_LONG_HELP();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEEDS_LONG_HELP(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEEDS_LONG_HELP(p0);
+<app::settings::Flags>::fmt::__BitFlags::NEEDS_LONG_HELP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEEDS_LONG_VERSION
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEEDS_LONG_VERSION":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEEDS_LONG_VERSION":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.NEEDS_LONG_VERSION();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEEDS_LONG_VERSION(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEEDS_LONG_VERSION(p0);
+<app::settings::Flags>::fmt::__BitFlags::NEEDS_LONG_VERSION(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEEDS_SC_HELP
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEEDS_SC_HELP":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEEDS_SC_HELP":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.NEEDS_SC_HELP();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEEDS_SC_HELP(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEEDS_SC_HELP(p0);
+<app::settings::Flags>::fmt::__BitFlags::NEEDS_SC_HELP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DISABLE_VERSION
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DISABLE_VERSION":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DISABLE_VERSION":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.DISABLE_VERSION();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DISABLE_VERSION(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DISABLE_VERSION(p0);
+<app::settings::Flags>::fmt::__BitFlags::DISABLE_VERSION(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.HIDDEN();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN(p0);
+<app::settings::Flags>::fmt::__BitFlags::HIDDEN(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::TRAILING_VARARG
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::TRAILING_VARARG":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::TRAILING_VARARG":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.TRAILING_VARARG();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::TRAILING_VARARG(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::TRAILING_VARARG(p0);
+<app::settings::Flags>::fmt::__BitFlags::TRAILING_VARARG(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NO_BIN_NAME
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NO_BIN_NAME":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NO_BIN_NAME":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.NO_BIN_NAME();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NO_BIN_NAME(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NO_BIN_NAME(p0);
+<app::settings::Flags>::fmt::__BitFlags::NO_BIN_NAME(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_UNK_SC
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_UNK_SC":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_UNK_SC":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.ALLOW_UNK_SC();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_UNK_SC(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_UNK_SC(p0);
+<app::settings::Flags>::fmt::__BitFlags::ALLOW_UNK_SC(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::UTF8_STRICT
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::UTF8_STRICT":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::UTF8_STRICT":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.UTF8_STRICT();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::UTF8_STRICT(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::UTF8_STRICT(p0);
+<app::settings::Flags>::fmt::__BitFlags::UTF8_STRICT(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::UTF8_NONE
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::UTF8_NONE":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::UTF8_NONE":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.UTF8_NONE();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::UTF8_NONE(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::UTF8_NONE(p0);
+<app::settings::Flags>::fmt::__BitFlags::UTF8_NONE(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::LEADING_HYPHEN
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::LEADING_HYPHEN":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::LEADING_HYPHEN":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.LEADING_HYPHEN();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::LEADING_HYPHEN(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::LEADING_HYPHEN(p0);
+<app::settings::Flags>::fmt::__BitFlags::LEADING_HYPHEN(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NO_POS_VALUES
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NO_POS_VALUES":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NO_POS_VALUES":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.NO_POS_VALUES();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NO_POS_VALUES(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NO_POS_VALUES(p0);
+<app::settings::Flags>::fmt::__BitFlags::NO_POS_VALUES(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEXT_LINE_HELP
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEXT_LINE_HELP":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEXT_LINE_HELP":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.NEXT_LINE_HELP();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEXT_LINE_HELP(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEXT_LINE_HELP(p0);
+<app::settings::Flags>::fmt::__BitFlags::NEXT_LINE_HELP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DERIVE_DISP_ORDER
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DERIVE_DISP_ORDER":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DERIVE_DISP_ORDER":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.DERIVE_DISP_ORDER();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DERIVE_DISP_ORDER(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DERIVE_DISP_ORDER(p0);
+<app::settings::Flags>::fmt::__BitFlags::DERIVE_DISP_ORDER(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLORED_HELP
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLORED_HELP":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLORED_HELP":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.COLORED_HELP();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLORED_HELP(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLORED_HELP(p0);
+<app::settings::Flags>::fmt::__BitFlags::COLORED_HELP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLOR_ALWAYS
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLOR_ALWAYS":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLOR_ALWAYS":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.COLOR_ALWAYS();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLOR_ALWAYS(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLOR_ALWAYS(p0);
+<app::settings::Flags>::fmt::__BitFlags::COLOR_ALWAYS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLOR_AUTO
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLOR_AUTO":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLOR_AUTO":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.COLOR_AUTO();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLOR_AUTO(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLOR_AUTO(p0);
+<app::settings::Flags>::fmt::__BitFlags::COLOR_AUTO(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLOR_NEVER
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLOR_NEVER":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLOR_NEVER":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.COLOR_NEVER();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLOR_NEVER(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::COLOR_NEVER(p0);
+<app::settings::Flags>::fmt::__BitFlags::COLOR_NEVER(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DONT_DELIM_TRAIL
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DONT_DELIM_TRAIL":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DONT_DELIM_TRAIL":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.DONT_DELIM_TRAIL();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DONT_DELIM_TRAIL(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DONT_DELIM_TRAIL(p0);
+<app::settings::Flags>::fmt::__BitFlags::DONT_DELIM_TRAIL(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_NEG_NUMS
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_NEG_NUMS":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_NEG_NUMS":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.ALLOW_NEG_NUMS();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_NEG_NUMS(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_NEG_NUMS(p0);
+<app::settings::Flags>::fmt::__BitFlags::ALLOW_NEG_NUMS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::LOW_INDEX_MUL_POS
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::LOW_INDEX_MUL_POS":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::LOW_INDEX_MUL_POS":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.LOW_INDEX_MUL_POS();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::LOW_INDEX_MUL_POS(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::LOW_INDEX_MUL_POS(p0);
+<app::settings::Flags>::fmt::__BitFlags::LOW_INDEX_MUL_POS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DISABLE_HELP_SC
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DISABLE_HELP_SC":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DISABLE_HELP_SC":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.DISABLE_HELP_SC();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DISABLE_HELP_SC(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DISABLE_HELP_SC(p0);
+<app::settings::Flags>::fmt::__BitFlags::DISABLE_HELP_SC(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DONT_COLLAPSE_ARGS
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DONT_COLLAPSE_ARGS":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DONT_COLLAPSE_ARGS":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.DONT_COLLAPSE_ARGS();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DONT_COLLAPSE_ARGS(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DONT_COLLAPSE_ARGS(p0);
+<app::settings::Flags>::fmt::__BitFlags::DONT_COLLAPSE_ARGS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ARGS_NEGATE_SCS
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ARGS_NEGATE_SCS":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ARGS_NEGATE_SCS":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.ARGS_NEGATE_SCS();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ARGS_NEGATE_SCS(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ARGS_NEGATE_SCS(p0);
+<app::settings::Flags>::fmt::__BitFlags::ARGS_NEGATE_SCS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::PROPAGATE_VALS_DOWN
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::PROPAGATE_VALS_DOWN":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::PROPAGATE_VALS_DOWN":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.PROPAGATE_VALS_DOWN();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::PROPAGATE_VALS_DOWN(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::PROPAGATE_VALS_DOWN(p0);
+<app::settings::Flags>::fmt::__BitFlags::PROPAGATE_VALS_DOWN(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_MISSING_POS
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_MISSING_POS":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_MISSING_POS":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.ALLOW_MISSING_POS();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_MISSING_POS(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_MISSING_POS(p0);
+<app::settings::Flags>::fmt::__BitFlags::ALLOW_MISSING_POS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::TRAILING_VALUES
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::TRAILING_VALUES":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::TRAILING_VALUES":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.TRAILING_VALUES();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::TRAILING_VALUES(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::TRAILING_VALUES(p0);
+<app::settings::Flags>::fmt::__BitFlags::TRAILING_VALUES(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::VALID_NEG_NUM_FOUND
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::VALID_NEG_NUM_FOUND":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::VALID_NEG_NUM_FOUND":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.VALID_NEG_NUM_FOUND();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::VALID_NEG_NUM_FOUND(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::VALID_NEG_NUM_FOUND(p0);
+<app::settings::Flags>::fmt::__BitFlags::VALID_NEG_NUM_FOUND(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::PROPAGATED
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::PROPAGATED":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::PROPAGATED":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.PROPAGATED();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::PROPAGATED(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::PROPAGATED(p0);
+<app::settings::Flags>::fmt::__BitFlags::PROPAGATED(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::VALID_ARG_FOUND
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::VALID_ARG_FOUND":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::VALID_ARG_FOUND":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.VALID_ARG_FOUND();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::VALID_ARG_FOUND(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::VALID_ARG_FOUND(p0);
+<app::settings::Flags>::fmt::__BitFlags::VALID_ARG_FOUND(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::INFER_SUBCOMMANDS
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::INFER_SUBCOMMANDS":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::INFER_SUBCOMMANDS":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.INFER_SUBCOMMANDS();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::INFER_SUBCOMMANDS(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::INFER_SUBCOMMANDS(p0);
+<app::settings::Flags>::fmt::__BitFlags::INFER_SUBCOMMANDS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::CONTAINS_LAST
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::CONTAINS_LAST":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::CONTAINS_LAST":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.CONTAINS_LAST();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::CONTAINS_LAST(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::CONTAINS_LAST(p0);
+<app::settings::Flags>::fmt::__BitFlags::CONTAINS_LAST(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ARGS_OVERRIDE_SELF
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ARGS_OVERRIDE_SELF":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ARGS_OVERRIDE_SELF":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.ARGS_OVERRIDE_SELF();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ARGS_OVERRIDE_SELF(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ARGS_OVERRIDE_SELF(p0);
+<app::settings::Flags>::fmt::__BitFlags::ARGS_OVERRIDE_SELF(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DISABLE_HELP_FLAGS
deps:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DISABLE_HELP_FLAGS":{"Self":["<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DISABLE_HELP_FLAGS":{"Self":["app::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.DISABLE_HELP_FLAGS();
+<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DISABLE_HELP_FLAGS(p0);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DISABLE_HELP_FLAGS(p0);
+<app::settings::Flags>::fmt::__BitFlags::DISABLE_HELP_FLAGS(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::name
'n,'e
deps:{"args::any_arg::AnyArg::name":{"Self":["std::fmt::Display","args::any_arg::AnyArg"]}}
candidates:{"args::any_arg::AnyArg::name":{"Self":["args::arg_builder::positional::PosBuilder","args::arg_builder::flag::FlagBuilder","args::arg_builder::option::OptBuilder","app::App"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.name();
+args::any_arg::AnyArg::name(p0);
+crate::args::any_arg::AnyArg::name(p0);
+crate::args::any_arg::AnyArg::name(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::overrides
'n,'e
deps:{"args::any_arg::AnyArg::overrides":{"Self":["args::any_arg::AnyArg","std::fmt::Display"]}}
candidates:{"args::any_arg::AnyArg::overrides":{"Self":["app::App","args::arg_builder::option::OptBuilder","args::arg_builder::positional::PosBuilder","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.overrides();
+args::any_arg::AnyArg::overrides(p0);
+crate::args::any_arg::AnyArg::overrides(p0);
+crate::args::any_arg::AnyArg::overrides(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::aliases
'n,'e
deps:{"args::any_arg::AnyArg::aliases":{"Self":["args::any_arg::AnyArg","std::fmt::Display"]}}
candidates:{"args::any_arg::AnyArg::aliases":{"Self":["app::App","args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.aliases();
+args::any_arg::AnyArg::aliases(p0);
+crate::args::any_arg::AnyArg::aliases(p0);
+crate::args::any_arg::AnyArg::aliases(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::requires
'n,'e
deps:{"args::any_arg::AnyArg::requires":{"Self":["std::fmt::Display","args::any_arg::AnyArg"]}}
candidates:{"args::any_arg::AnyArg::requires":{"Self":["args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder","app::App"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.requires();
+args::any_arg::AnyArg::requires(p0);
+crate::args::any_arg::AnyArg::requires(p0);
+crate::args::any_arg::AnyArg::requires(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::blacklist
'n,'e
deps:{"args::any_arg::AnyArg::blacklist":{"Self":["std::fmt::Display","args::any_arg::AnyArg"]}}
candidates:{"args::any_arg::AnyArg::blacklist":{"Self":["args::arg_builder::flag::FlagBuilder","args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder","app::App"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.blacklist();
+args::any_arg::AnyArg::blacklist(p0);
+crate::args::any_arg::AnyArg::blacklist(p0);
+crate::args::any_arg::AnyArg::blacklist(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::required_unless
'n,'e
deps:{"args::any_arg::AnyArg::required_unless":{"Self":["std::fmt::Display","args::any_arg::AnyArg"]}}
candidates:{"args::any_arg::AnyArg::required_unless":{"Self":["args::arg_builder::option::OptBuilder","args::arg_builder::positional::PosBuilder","app::App","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.required_unless();
+args::any_arg::AnyArg::required_unless(p0);
+crate::args::any_arg::AnyArg::required_unless(p0);
+crate::args::any_arg::AnyArg::required_unless(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::is_set
'n,'e
deps:{"args::any_arg::AnyArg::is_set":{"Self":["std::fmt::Display","args::any_arg::AnyArg"]}}
candidates:{"args::any_arg::AnyArg::is_set":{"Self":["args::arg_builder::positional::PosBuilder","app::App","args::arg_builder::flag::FlagBuilder","args::arg_builder::option::OptBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.is_set(p1);
+args::any_arg::AnyArg::is_set(p0, p1);
+crate::args::any_arg::AnyArg::is_set(p0, p1);
+crate::args::any_arg::AnyArg::is_set(p0, p1);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::set
'n,'e
deps:{"args::any_arg::AnyArg::set":{"Self":["args::any_arg::AnyArg","std::fmt::Display"]}}
candidates:{"args::any_arg::AnyArg::set":{"Self":["args::arg_builder::option::OptBuilder","args::arg_builder::positional::PosBuilder","args::arg_builder::flag::FlagBuilder","app::App"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.set(p1);
+args::any_arg::AnyArg::set(p0, p1);
+crate::args::any_arg::AnyArg::set(p0, p1);
+crate::args::any_arg::AnyArg::set(p0, p1);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::has_switch
'n,'e
deps:{"args::any_arg::AnyArg::has_switch":{"Self":["args::any_arg::AnyArg","std::fmt::Display"]}}
candidates:{"args::any_arg::AnyArg::has_switch":{"Self":["args::arg_builder::flag::FlagBuilder","app::App","args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.has_switch();
+args::any_arg::AnyArg::has_switch(p0);
+crate::args::any_arg::AnyArg::has_switch(p0);
+crate::args::any_arg::AnyArg::has_switch(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::max_vals
'n,'e
deps:{"args::any_arg::AnyArg::max_vals":{"Self":["args::any_arg::AnyArg","std::fmt::Display"]}}
candidates:{"args::any_arg::AnyArg::max_vals":{"Self":["app::App","args::arg_builder::flag::FlagBuilder","args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.max_vals();
+args::any_arg::AnyArg::max_vals(p0);
+crate::args::any_arg::AnyArg::max_vals(p0);
+crate::args::any_arg::AnyArg::max_vals(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::min_vals
'n,'e
deps:{"args::any_arg::AnyArg::min_vals":{"Self":["std::fmt::Display","args::any_arg::AnyArg"]}}
candidates:{"args::any_arg::AnyArg::min_vals":{"Self":["app::App","args::arg_builder::flag::FlagBuilder","args::arg_builder::option::OptBuilder","args::arg_builder::positional::PosBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.min_vals();
+args::any_arg::AnyArg::min_vals(p0);
+crate::args::any_arg::AnyArg::min_vals(p0);
+crate::args::any_arg::AnyArg::min_vals(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::num_vals
'n,'e
deps:{"args::any_arg::AnyArg::num_vals":{"Self":["args::any_arg::AnyArg","std::fmt::Display"]}}
candidates:{"args::any_arg::AnyArg::num_vals":{"Self":["args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder","app::App"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.num_vals();
+args::any_arg::AnyArg::num_vals(p0);
+crate::args::any_arg::AnyArg::num_vals(p0);
+crate::args::any_arg::AnyArg::num_vals(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::possible_vals
'n,'e
deps:{"args::any_arg::AnyArg::possible_vals":{"Self":["std::fmt::Display","args::any_arg::AnyArg"]}}
candidates:{"args::any_arg::AnyArg::possible_vals":{"Self":["args::arg_builder::flag::FlagBuilder","args::arg_builder::positional::PosBuilder","app::App","args::arg_builder::option::OptBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.possible_vals();
+args::any_arg::AnyArg::possible_vals(p0);
+crate::args::any_arg::AnyArg::possible_vals(p0);
+crate::args::any_arg::AnyArg::possible_vals(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::validator
'n,'e
deps:{"args::any_arg::AnyArg::validator":{"Self":["args::any_arg::AnyArg","std::fmt::Display"]}}
candidates:{"args::any_arg::AnyArg::validator":{"Self":["args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder","app::App"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.validator();
+args::any_arg::AnyArg::validator(p0);
+crate::args::any_arg::AnyArg::validator(p0);
+crate::args::any_arg::AnyArg::validator(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::validator_os
'n,'e
deps:{"args::any_arg::AnyArg::validator_os":{"Self":["std::fmt::Display","args::any_arg::AnyArg"]}}
candidates:{"args::any_arg::AnyArg::validator_os":{"Self":["args::arg_builder::positional::PosBuilder","app::App","args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.validator_os();
+args::any_arg::AnyArg::validator_os(p0);
+crate::args::any_arg::AnyArg::validator_os(p0);
+crate::args::any_arg::AnyArg::validator_os(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::short
'n,'e
deps:{"args::any_arg::AnyArg::short":{"Self":["std::fmt::Display","args::any_arg::AnyArg"]}}
candidates:{"args::any_arg::AnyArg::short":{"Self":["args::arg_builder::flag::FlagBuilder","args::arg_builder::option::OptBuilder","app::App","args::arg_builder::positional::PosBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.short();
+args::any_arg::AnyArg::short(p0);
+crate::args::any_arg::AnyArg::short(p0);
+crate::args::any_arg::AnyArg::short(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::long
'n,'e
deps:{"args::any_arg::AnyArg::long":{"Self":["std::fmt::Display","args::any_arg::AnyArg"]}}
candidates:{"args::any_arg::AnyArg::long":{"Self":["args::arg_builder::flag::FlagBuilder","args::arg_builder::positional::PosBuilder","app::App","args::arg_builder::option::OptBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.long();
+args::any_arg::AnyArg::long(p0);
+crate::args::any_arg::AnyArg::long(p0);
+crate::args::any_arg::AnyArg::long(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::val_delim
'n,'e
deps:{"args::any_arg::AnyArg::val_delim":{"Self":["args::any_arg::AnyArg","std::fmt::Display"]}}
candidates:{"args::any_arg::AnyArg::val_delim":{"Self":["args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder","app::App","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.val_delim();
+args::any_arg::AnyArg::val_delim(p0);
+crate::args::any_arg::AnyArg::val_delim(p0);
+crate::args::any_arg::AnyArg::val_delim(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::takes_value
'n,'e
deps:{"args::any_arg::AnyArg::takes_value":{"Self":["std::fmt::Display","args::any_arg::AnyArg"]}}
candidates:{"args::any_arg::AnyArg::takes_value":{"Self":["args::arg_builder::flag::FlagBuilder","app::App","args::arg_builder::option::OptBuilder","args::arg_builder::positional::PosBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.takes_value();
+args::any_arg::AnyArg::takes_value(p0);
+crate::args::any_arg::AnyArg::takes_value(p0);
+crate::args::any_arg::AnyArg::takes_value(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::val_names
'n,'e
deps:{"args::any_arg::AnyArg::val_names":{"Self":["args::any_arg::AnyArg","std::fmt::Display"]}}
candidates:{"args::any_arg::AnyArg::val_names":{"Self":["args::arg_builder::flag::FlagBuilder","app::App","args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.val_names();
+args::any_arg::AnyArg::val_names(p0);
+crate::args::any_arg::AnyArg::val_names(p0);
+crate::args::any_arg::AnyArg::val_names(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::help
'n,'e
deps:{"args::any_arg::AnyArg::help":{"Self":["args::any_arg::AnyArg","std::fmt::Display"]}}
candidates:{"args::any_arg::AnyArg::help":{"Self":["app::App","args::arg_builder::positional::PosBuilder","args::arg_builder::flag::FlagBuilder","args::arg_builder::option::OptBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.help();
+args::any_arg::AnyArg::help(p0);
+crate::args::any_arg::AnyArg::help(p0);
+crate::args::any_arg::AnyArg::help(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::long_help
'n,'e
deps:{"args::any_arg::AnyArg::long_help":{"Self":["std::fmt::Display","args::any_arg::AnyArg"]}}
candidates:{"args::any_arg::AnyArg::long_help":{"Self":["app::App","args::arg_builder::option::OptBuilder","args::arg_builder::positional::PosBuilder","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.long_help();
+args::any_arg::AnyArg::long_help(p0);
+crate::args::any_arg::AnyArg::long_help(p0);
+crate::args::any_arg::AnyArg::long_help(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::default_val
'n,'e
deps:{"args::any_arg::AnyArg::default_val":{"Self":["std::fmt::Display","args::any_arg::AnyArg"]}}
candidates:{"args::any_arg::AnyArg::default_val":{"Self":["app::App","args::arg_builder::flag::FlagBuilder","args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.default_val();
+args::any_arg::AnyArg::default_val(p0);
+crate::args::any_arg::AnyArg::default_val(p0);
+crate::args::any_arg::AnyArg::default_val(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::default_vals_ifs
'n,'e
deps:{"args::any_arg::AnyArg::default_vals_ifs":{"Self":["args::any_arg::AnyArg","std::fmt::Display"]}}
candidates:{"args::any_arg::AnyArg::default_vals_ifs":{"Self":["app::App","args::arg_builder::flag::FlagBuilder","args::arg_builder::option::OptBuilder","args::arg_builder::positional::PosBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.default_vals_ifs();
+args::any_arg::AnyArg::default_vals_ifs(p0);
+crate::args::any_arg::AnyArg::default_vals_ifs(p0);
+crate::args::any_arg::AnyArg::default_vals_ifs(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::env
'n,'e
deps:{"args::any_arg::AnyArg::env":{"Self":["std::fmt::Display","args::any_arg::AnyArg"]}}
candidates:{"args::any_arg::AnyArg::env":{"Self":["args::arg_builder::flag::FlagBuilder","args::arg_builder::option::OptBuilder","args::arg_builder::positional::PosBuilder","app::App"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.env();
+args::any_arg::AnyArg::env(p0);
+crate::args::any_arg::AnyArg::env(p0);
+crate::args::any_arg::AnyArg::env(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::longest_filter
'n,'e
deps:{"args::any_arg::AnyArg::longest_filter":{"Self":["std::fmt::Display","args::any_arg::AnyArg"]}}
candidates:{"args::any_arg::AnyArg::longest_filter":{"Self":["args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder","app::App","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.longest_filter();
+args::any_arg::AnyArg::longest_filter(p0);
+crate::args::any_arg::AnyArg::longest_filter(p0);
+crate::args::any_arg::AnyArg::longest_filter(p0);
-----------------
src/args/any_arg.rs args::any_arg::AnyArg::val_terminator
'n,'e
deps:{"args::any_arg::AnyArg::val_terminator":{"Self":["args::any_arg::AnyArg","std::fmt::Display"]}}
candidates:{"args::any_arg::AnyArg::val_terminator":{"Self":["args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder","app::App","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.val_terminator();
+args::any_arg::AnyArg::val_terminator(p0);
+crate::args::any_arg::AnyArg::val_terminator(p0);
+crate::args::any_arg::AnyArg::val_terminator(p0);
-----------------
src/args/any_arg.rs args::any_arg::DispOrder::disp_ord
deps:{"args::any_arg::DispOrder::disp_ord":{"Self":["args::any_arg::DispOrder"]}}
candidates:{"args::any_arg::DispOrder::disp_ord":{"Self":["args::arg_builder::positional::PosBuilder","app::App","args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.disp_ord();
+args::any_arg::DispOrder::disp_ord(p0);
+crate::args::any_arg::DispOrder::disp_ord(p0);
+crate::args::any_arg::DispOrder::disp_ord(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::REQUIRED
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::REQUIRED":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::REQUIRED":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.REQUIRED();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::REQUIRED(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::REQUIRED(p0);
+<args::settings::Flags>::fmt::__BitFlags::REQUIRED(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::MULTIPLE
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::MULTIPLE":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::MULTIPLE":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.MULTIPLE();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::MULTIPLE(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::MULTIPLE(p0);
+<args::settings::Flags>::fmt::__BitFlags::MULTIPLE(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::EMPTY_VALS
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::EMPTY_VALS":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::EMPTY_VALS":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.EMPTY_VALS();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::EMPTY_VALS(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::EMPTY_VALS(p0);
+<args::settings::Flags>::fmt::__BitFlags::EMPTY_VALS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::GLOBAL
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::GLOBAL":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::GLOBAL":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.GLOBAL();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::GLOBAL(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::GLOBAL(p0);
+<args::settings::Flags>::fmt::__BitFlags::GLOBAL(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.HIDDEN();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN(p0);
+<args::settings::Flags>::fmt::__BitFlags::HIDDEN(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::TAKES_VAL
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::TAKES_VAL":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::TAKES_VAL":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.TAKES_VAL();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::TAKES_VAL(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::TAKES_VAL(p0);
+<args::settings::Flags>::fmt::__BitFlags::TAKES_VAL(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::USE_DELIM
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::USE_DELIM":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::USE_DELIM":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.USE_DELIM();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::USE_DELIM(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::USE_DELIM(p0);
+<args::settings::Flags>::fmt::__BitFlags::USE_DELIM(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEXT_LINE_HELP
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEXT_LINE_HELP":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEXT_LINE_HELP":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.NEXT_LINE_HELP();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEXT_LINE_HELP(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::NEXT_LINE_HELP(p0);
+<args::settings::Flags>::fmt::__BitFlags::NEXT_LINE_HELP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::R_UNLESS_ALL
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::R_UNLESS_ALL":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::R_UNLESS_ALL":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.R_UNLESS_ALL();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::R_UNLESS_ALL(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::R_UNLESS_ALL(p0);
+<args::settings::Flags>::fmt::__BitFlags::R_UNLESS_ALL(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::REQ_DELIM
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::REQ_DELIM":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::REQ_DELIM":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.REQ_DELIM();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::REQ_DELIM(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::REQ_DELIM(p0);
+<args::settings::Flags>::fmt::__BitFlags::REQ_DELIM(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DELIM_NOT_SET
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DELIM_NOT_SET":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DELIM_NOT_SET":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.DELIM_NOT_SET();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DELIM_NOT_SET(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::DELIM_NOT_SET(p0);
+<args::settings::Flags>::fmt::__BitFlags::DELIM_NOT_SET(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDE_POS_VALS
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDE_POS_VALS":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDE_POS_VALS":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.HIDE_POS_VALS();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDE_POS_VALS(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDE_POS_VALS(p0);
+<args::settings::Flags>::fmt::__BitFlags::HIDE_POS_VALS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_TAC_VALS
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_TAC_VALS":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_TAC_VALS":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.ALLOW_TAC_VALS();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_TAC_VALS(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::ALLOW_TAC_VALS(p0);
+<args::settings::Flags>::fmt::__BitFlags::ALLOW_TAC_VALS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::REQUIRE_EQUALS
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::REQUIRE_EQUALS":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::REQUIRE_EQUALS":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.REQUIRE_EQUALS();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::REQUIRE_EQUALS(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::REQUIRE_EQUALS(p0);
+<args::settings::Flags>::fmt::__BitFlags::REQUIRE_EQUALS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::LAST
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::LAST":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::LAST":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.LAST();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::LAST(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::LAST(p0);
+<args::settings::Flags>::fmt::__BitFlags::LAST(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDE_DEFAULT_VAL
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDE_DEFAULT_VAL":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDE_DEFAULT_VAL":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.HIDE_DEFAULT_VAL();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDE_DEFAULT_VAL(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDE_DEFAULT_VAL(p0);
+<args::settings::Flags>::fmt::__BitFlags::HIDE_DEFAULT_VAL(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::CASE_INSENSITIVE
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::CASE_INSENSITIVE":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::CASE_INSENSITIVE":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.CASE_INSENSITIVE();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::CASE_INSENSITIVE(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::CASE_INSENSITIVE(p0);
+<args::settings::Flags>::fmt::__BitFlags::CASE_INSENSITIVE(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDE_ENV_VALS
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDE_ENV_VALS":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDE_ENV_VALS":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.HIDE_ENV_VALS();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDE_ENV_VALS(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDE_ENV_VALS(p0);
+<args::settings::Flags>::fmt::__BitFlags::HIDE_ENV_VALS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN_SHORT_H
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN_SHORT_H":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN_SHORT_H":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.HIDDEN_SHORT_H();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN_SHORT_H(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN_SHORT_H(p0);
+<args::settings::Flags>::fmt::__BitFlags::HIDDEN_SHORT_H(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN_LONG_H
deps:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN_LONG_H":{"Self":["<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags"]}}
candidates:{"<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN_LONG_H":{"Self":["args::settings::Flags"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.HIDDEN_LONG_H();
+<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN_LONG_H(p0);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags::HIDDEN_LONG_H(p0);
+<args::settings::Flags>::fmt::__BitFlags::HIDDEN_LONG_H(p0);
-----------------
src/osstringext.rs osstringext::OsStrExt2::starts_with
deps:{"osstringext::OsStrExt2::starts_with":{"Self":["osstringext::OsStrExt2"]}}
candidates:{"osstringext::OsStrExt2::starts_with":{"Self":["std::ffi::OsStr"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.starts_with(p1);
+osstringext::OsStrExt2::starts_with(p0, p1);
+crate::osstringext::OsStrExt2::starts_with(p0, p1);
+crate::osstringext::OsStrExt2::starts_with(p0, p1);
-----------------
src/osstringext.rs osstringext::OsStrExt2::split_at_byte
deps:{"osstringext::OsStrExt2::split_at_byte":{"Self":["osstringext::OsStrExt2"]}}
candidates:{"osstringext::OsStrExt2::split_at_byte":{"Self":["std::ffi::OsStr"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0u8; // None+u8
+p0.split_at_byte(p1);
+osstringext::OsStrExt2::split_at_byte(p0, p1);
+crate::osstringext::OsStrExt2::split_at_byte(p0, p1);
+crate::osstringext::OsStrExt2::split_at_byte(p0, p1);
-----------------
src/osstringext.rs osstringext::OsStrExt2::split_at
deps:{"osstringext::OsStrExt2::split_at":{"Self":["osstringext::OsStrExt2"]}}
candidates:{"osstringext::OsStrExt2::split_at":{"Self":["std::ffi::OsStr"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
+p0.split_at(p1);
+osstringext::OsStrExt2::split_at(p0, p1);
+crate::osstringext::OsStrExt2::split_at(p0, p1);
+crate::osstringext::OsStrExt2::split_at(p0, p1);
-----------------
src/osstringext.rs osstringext::OsStrExt2::trim_left_matches
deps:{"osstringext::OsStrExt2::trim_left_matches":{"Self":["osstringext::OsStrExt2"]}}
candidates:{"osstringext::OsStrExt2::trim_left_matches":{"Self":["std::ffi::OsStr"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0u8; // None+u8
+p0.trim_left_matches(p1);
+osstringext::OsStrExt2::trim_left_matches(p0, p1);
+crate::osstringext::OsStrExt2::trim_left_matches(p0, p1);
+crate::osstringext::OsStrExt2::trim_left_matches(p0, p1);
-----------------
src/osstringext.rs osstringext::OsStrExt2::contains_byte
deps:{"osstringext::OsStrExt2::contains_byte":{"Self":["osstringext::OsStrExt2"]}}
candidates:{"osstringext::OsStrExt2::contains_byte":{"Self":["std::ffi::OsStr"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0u8; // None+u8
+p0.contains_byte(p1);
+osstringext::OsStrExt2::contains_byte(p0, p1);
+crate::osstringext::OsStrExt2::contains_byte(p0, p1);
+crate::osstringext::OsStrExt2::contains_byte(p0, p1);
-----------------
src/osstringext.rs osstringext::OsStrExt2::split
deps:{"osstringext::OsStrExt2::split":{"Self":["osstringext::OsStrExt2"]}}
candidates:{"osstringext::OsStrExt2::split":{"Self":["std::ffi::OsStr"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0u8; // None+u8
+p0.split(p1);
+osstringext::OsStrExt2::split(p0, p1);
+crate::osstringext::OsStrExt2::split(p0, p1);
+crate::osstringext::OsStrExt2::split(p0, p1);
-----------------
src/strext.rs strext::_StrExt::_is_char_boundary
deps:{"strext::_StrExt::_is_char_boundary":{"Self":["strext::_StrExt"]}}
candidates:{"strext::_StrExt::_is_char_boundary":{"Self":[]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
+p0._is_char_boundary(p1);
+strext::_StrExt::_is_char_boundary(p0, p1);
+crate::strext::_StrExt::_is_char_boundary(p0, p1);
+crate::strext::_StrExt::_is_char_boundary(p0, p1);
-----------------
src/app/help.rs <T as app::help::ArgWithOrder<'b, 'c>>::as_base
'b,'c
deps:{"<T as app::help::ArgWithOrder<'b, 'c>>::as_base":{"T":["app::help::ArgWithDisplay","std::marker::Sized","args::any_arg::DispOrder"]}}
candidates:{"<T as app::help::ArgWithOrder<'b, 'c>>::as_base":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // T
+p0.as_base();
+<T as app::help::ArgWithOrder<'b, 'c>>::as_base(p0);
+crate::<T as app::help::ArgWithOrder<'b, 'c>>::as_base(p0);
+<T>::as_base(p0);
-----------------
src/app/help.rs app::help::<impl args::any_arg::DispOrder for app::App<'b, 'c>>::disp_ord
'b,'c
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'b, 'c>
+p0.disp_ord();
+app::help::<impl args::any_arg::DispOrder for app::App<'b, 'c>>::disp_ord(p0);
+crate::app::help::<impl args::any_arg::DispOrder for app::App<'b, 'c>>::disp_ord(p0);
+<app::App<'b, 'c>>::disp_ord(p0);
-----------------
src/app/help.rs app::help::Help::<'a>::new
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (dyn std::io::Write + 'a)
let mut p1 = true; // None+bool
let mut p2 = true; // None+bool
let mut p3 = true; // None+bool
let mut p4 = MaybeUninit::uninit().assume_init(); // fmt::Colorizer
let mut p5 = MaybeUninit::uninit().assume_init(); // std::option::Option<usize>
let mut p6 = MaybeUninit::uninit().assume_init(); // std::option::Option<usize>
let mut p7 = true; // None+bool
+app::help::Help::<'a>::new(p0, p1, p2, p3, p4, p5, p6, p7);
+crate::app::help::Help::<'a>::new(p0, p1, p2, p3, p4, p5, p6, p7);
+<app::help::Help<'a>>::new(p0, p1, p2, p3, p4, p5, p6, p7);
-----------------
src/app/help.rs app::help::Help::<'a>::write_app_help
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (dyn std::io::Write + 'a)
let mut p1 = & MaybeUninit::uninit().assume_init(); // app::App<'_, '_>
let mut p2 = true; // None+bool
+app::help::Help::<'a>::write_app_help(p0, p1, p2);
+crate::app::help::Help::<'a>::write_app_help(p0, p1, p2);
+<app::help::Help<'a>>::write_app_help(p0, p1, p2);
-----------------
src/app/help.rs app::help::Help::<'a>::write_parser_help
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (dyn std::io::Write + 'a)
let mut p1 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
let mut p2 = true; // None+bool
+app::help::Help::<'a>::write_parser_help(p0, p1, p2);
+crate::app::help::Help::<'a>::write_parser_help(p0, p1, p2);
+<app::help::Help<'a>>::write_parser_help(p0, p1, p2);
-----------------
src/app/help.rs app::help::Help::<'a>::write_parser_help_to_stderr
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (dyn std::io::Write + 'a)
let mut p1 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+app::help::Help::<'a>::write_parser_help_to_stderr(p0, p1);
+crate::app::help::Help::<'a>::write_parser_help_to_stderr(p0, p1);
+<app::help::Help<'a>>::write_parser_help_to_stderr(p0, p1);
-----------------
src/app/help.rs app::help::Help::<'a>::_write_parser_help
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // (dyn std::io::Write + 'a)
let mut p1 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
let mut p2 = true; // None+bool
let mut p3 = true; // None+bool
+app::help::Help::<'a>::_write_parser_help(p0, p1, p2, p3);
+crate::app::help::Help::<'a>::_write_parser_help(p0, p1, p2, p3);
+<app::help::Help<'a>>::_write_parser_help(p0, p1, p2, p3);
-----------------
src/app/help.rs app::help::Help::<'a>::write_help
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::help::Help<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+p0.write_help(p1);
+app::help::Help::<'a>::write_help(p0, p1);
+crate::app::help::Help::<'a>::write_help(p0, p1);
+<app::help::Help<'a>>::write_help(p0, p1);
-----------------
src/app/help.rs app::help::Help::<'a>::write_args_unsorted
'a,'b,'c,'d
deps:{"<&mut I as std::iter::Iterator>":{},"app::help::Help::<'a>::write_args_unsorted":{"I":["std::marker::Sized","std::iter::Iterator"]}}
candidates:{"<&mut I as std::iter::Iterator>":{},"app::help::Help::<'a>::write_args_unsorted":{"I":["<&mut I as std::iter::Iterator>","args::arg_matches::Indices","args::arg_matches::OsValues","args::arg_matches::Values","osstringext::OsSplit"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::help::Help<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.write_args_unsorted(p1);
+app::help::Help::<'a>::write_args_unsorted(p0, p1);
+crate::app::help::Help::<'a>::write_args_unsorted(p0, p1);
+<app::help::Help<'a>>::write_args_unsorted(p0, p1);
-----------------
src/app/help.rs app::help::Help::<'a>::write_args
'a,'b,'c,'d
deps:{"<&mut I as std::iter::Iterator>":{},"app::help::Help::<'a>::write_args":{"I":["std::marker::Sized","std::iter::Iterator"]}}
candidates:{"<&mut I as std::iter::Iterator>":{},"app::help::Help::<'a>::write_args":{"I":["args::arg_matches::OsValues","osstringext::OsSplit","args::arg_matches::Indices","args::arg_matches::Values","<&mut I as std::iter::Iterator>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::help::Help<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.write_args(p1);
+app::help::Help::<'a>::write_args(p0, p1);
+crate::app::help::Help::<'a>::write_args(p0, p1);
+<app::help::Help<'a>>::write_args(p0, p1);
-----------------
src/app/help.rs app::help::Help::<'a>::write_arg
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::help::Help<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // dyn app::help::ArgWithDisplay<'b, 'c>
+p0.write_arg(p1);
+app::help::Help::<'a>::write_arg(p0, p1);
+crate::app::help::Help::<'a>::write_arg(p0, p1);
+<app::help::Help<'a>>::write_arg(p0, p1);
-----------------
src/app/help.rs app::help::Help::<'a>::short
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::help::Help<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // dyn app::help::ArgWithDisplay<'b, 'c>
+p0.short(p1);
+app::help::Help::<'a>::short(p0, p1);
+crate::app::help::Help::<'a>::short(p0, p1);
+<app::help::Help<'a>>::short(p0, p1);
-----------------
src/app/help.rs app::help::Help::<'a>::long
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::help::Help<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // dyn app::help::ArgWithDisplay<'b, 'c>
+p0.long(p1);
+app::help::Help::<'a>::long(p0, p1);
+crate::app::help::Help::<'a>::long(p0, p1);
+<app::help::Help<'a>>::long(p0, p1);
-----------------
src/app/help.rs app::help::Help::<'a>::val
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::help::Help<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // dyn app::help::ArgWithDisplay<'b, 'c>
+p0.val(p1);
+app::help::Help::<'a>::val(p0, p1);
+crate::app::help::Help::<'a>::val(p0, p1);
+<app::help::Help<'a>>::val(p0, p1);
-----------------
src/app/help.rs app::help::Help::<'a>::write_before_after_help
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::help::Help<'a>
let mut p1 = "sample"; // None+&str
+p0.write_before_after_help(&p1);
+app::help::Help::<'a>::write_before_after_help(p0, &p1);
+crate::app::help::Help::<'a>::write_before_after_help(p0, &p1);
+<app::help::Help<'a>>::write_before_after_help(p0, &p1);
-----------------
src/app/help.rs app::help::Help::<'a>::help
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::help::Help<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // dyn app::help::ArgWithDisplay<'b, 'c>
let mut p2 = "sample"; // None+&str
+p0.help(p1, &p2);
+app::help::Help::<'a>::help(p0, p1, &p2);
+crate::app::help::Help::<'a>::help(p0, p1, &p2);
+<app::help::Help<'a>>::help(p0, p1, &p2);
-----------------
src/app/help.rs app::help::Help::<'a>::spec_vals
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::help::Help<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // dyn app::help::ArgWithDisplay<'a, 'b>
+p0.spec_vals(p1);
+app::help::Help::<'a>::spec_vals(p0, p1);
+crate::app::help::Help::<'a>::spec_vals(p0, p1);
+<app::help::Help<'a>>::spec_vals(p0, p1);
-----------------
src/app/help.rs app::help::Help::<'a>::write_all_args
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::help::Help<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+p0.write_all_args(p1);
+app::help::Help::<'a>::write_all_args(p0, p1);
+crate::app::help::Help::<'a>::write_all_args(p0, p1);
+<app::help::Help<'a>>::write_all_args(p0, p1);
-----------------
src/app/help.rs app::help::Help::<'a>::write_subcommands
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::help::Help<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+p0.write_subcommands(p1);
+app::help::Help::<'a>::write_subcommands(p0, p1);
+crate::app::help::Help::<'a>::write_subcommands(p0, p1);
+<app::help::Help<'a>>::write_subcommands(p0, p1);
-----------------
src/app/help.rs app::help::Help::<'a>::write_version
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::help::Help<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+p0.write_version(p1);
+app::help::Help::<'a>::write_version(p0, p1);
+crate::app::help::Help::<'a>::write_version(p0, p1);
+<app::help::Help<'a>>::write_version(p0, p1);
-----------------
src/app/help.rs app::help::Help::<'a>::write_bin_name
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::help::Help<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+p0.write_bin_name(p1);
+app::help::Help::<'a>::write_bin_name(p0, p1);
+crate::app::help::Help::<'a>::write_bin_name(p0, p1);
+<app::help::Help<'a>>::write_bin_name(p0, p1);
-----------------
src/app/help.rs app::help::Help::<'a>::write_default_help
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::help::Help<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
+p0.write_default_help(p1);
+app::help::Help::<'a>::write_default_help(p0, p1);
+crate::app::help::Help::<'a>::write_default_help(p0, p1);
+<app::help::Help<'a>>::write_default_help(p0, p1);
-----------------
src/app/help.rs app::help::Help::<'a>::write_templated_help
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::help::Help<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'_, '_>
let mut p2 = "sample"; // None+&str
+p0.write_templated_help(p1, &p2);
+app::help::Help::<'a>::write_templated_help(p0, p1, &p2);
+crate::app::help::Help::<'a>::write_templated_help(p0, p1, &p2);
+<app::help::Help<'a>>::write_templated_help(p0, p1, &p2);
-----------------
src/app/meta.rs <app::meta::AppMeta<'b> as std::default::Default>::default
'b
deps:{}
candidates:{}
+<app::meta::AppMeta<'b> as std::default::Default>::default();
+crate::<app::meta::AppMeta<'b> as std::default::Default>::default();
+<app::meta::AppMeta<'b>>::default();
-----------------
src/app/meta.rs <app::meta::AppMeta<'b> as std::clone::Clone>::clone
'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::meta::AppMeta<'b>
+p0.clone();
+<app::meta::AppMeta<'b> as std::clone::Clone>::clone(p0);
+crate::<app::meta::AppMeta<'b> as std::clone::Clone>::clone(p0);
+<app::meta::AppMeta<'b>>::clone(p0);
-----------------
src/app/meta.rs app::meta::AppMeta::<'b>::new
'b
deps:{}
candidates:{}
+app::meta::AppMeta::<'b>::new();
+crate::app::meta::AppMeta::<'b>::new();
+<app::meta::AppMeta<'b>>::new();
-----------------
src/app/meta.rs app::meta::AppMeta::<'b>::with_name
'b
deps:{}
candidates:{}
let mut p0 = std::string::String::new(); // None+std::string::String
+app::meta::AppMeta::<'b>::with_name(p0);
+crate::app::meta::AppMeta::<'b>::with_name(p0);
+<app::meta::AppMeta<'b>>::with_name(p0);
-----------------
src/app/parser.rs <app::parser::ParseResult<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::ParseResult<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<app::parser::ParseResult<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<app::parser::ParseResult<'a> as std::fmt::Debug>::fmt(p0, p1);
+<app::parser::ParseResult<'a>>::fmt(p0, p1);
-----------------
src/app/parser.rs <app::parser::ParseResult<'a> as std::cmp::PartialEq>::eq
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::ParseResult<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // app::parser::ParseResult<'a>
+p0.eq(p1);
+<app::parser::ParseResult<'a> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<app::parser::ParseResult<'a> as std::cmp::PartialEq>::eq(p0, p1);
+<app::parser::ParseResult<'a>>::eq(p0, p1);
-----------------
src/app/parser.rs <app::parser::ParseResult<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::ParseResult<'a>
+p0.clone();
+<app::parser::ParseResult<'a> as std::clone::Clone>::clone(p0);
+crate::<app::parser::ParseResult<'a> as std::clone::Clone>::clone(p0);
+<app::parser::ParseResult<'a>>::clone(p0);
-----------------
src/app/parser.rs <app::parser::Parser<'a, 'b> as std::clone::Clone>::clone
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.clone();
+<app::parser::Parser<'a, 'b> as std::clone::Clone>::clone(p0);
+crate::<app::parser::Parser<'a, 'b> as std::clone::Clone>::clone(p0);
+<app::parser::Parser<'a, 'b>>::clone(p0);
-----------------
src/app/parser.rs <app::parser::Parser<'a, 'b> as std::default::Default>::default
'a,'b
deps:{}
candidates:{}
+<app::parser::Parser<'a, 'b> as std::default::Default>::default();
+crate::<app::parser::Parser<'a, 'b> as std::default::Default>::default();
+<app::parser::Parser<'a, 'b>>::default();
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::with_name
'a,'b
deps:{}
candidates:{}
let mut p0 = std::string::String::new(); // None+std::string::String
+app::parser::Parser::<'a, 'b>::with_name(p0);
+crate::app::parser::Parser::<'a, 'b>::with_name(p0);
+<app::parser::Parser<'a, 'b>>::with_name(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::help_short
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.help_short(&p1);
+app::parser::Parser::<'a, 'b>::help_short(p0, &p1);
+crate::app::parser::Parser::<'a, 'b>::help_short(p0, &p1);
+<app::parser::Parser<'a, 'b>>::help_short(p0, &p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::version_short
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.version_short(&p1);
+app::parser::Parser::<'a, 'b>::version_short(p0, &p1);
+crate::app::parser::Parser::<'a, 'b>::version_short(p0, &p1);
+<app::parser::Parser<'a, 'b>>::version_short(p0, &p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::gen_completions_to
'a,'b
deps:{"app::parser::Parser::<'a, 'b>::gen_completions_to":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"app::parser::Parser::<'a, 'b>::gen_completions_to":{"W":["std::io::BorrowedCursor<'a>","std::io::LineWriter<W>","std::io::Stdout","&'a std::os::unix::net::UnixStream","std::net::TcpStream","std::fs::File","std::io::StderrLock<'_>","std::collections::VecDeque<u8, A>","std::boxed::Box<W>","std::sys::unix::stdio::Stderr","std::io::BufWriter<W>","std::io::Cursor<[u8; N]>","std::io::Cursor<&mut std::vec::Vec<u8, A>>","std::io::StdoutLock<'_>","&std::io::Stdout","&std::process::ChildStdin","&std::io::Stderr","&std::net::TcpStream","std::io::Cursor<&mut [u8]>","std::io::stdio::StderrRaw","&std::io::Sink","std::io::impls::<impl std::io::Write for &mut W>","std::io::stdio::StdoutRaw","std::process::ChildStdin","&std::fs::File","std::vec::Vec<u8, A>","std::io::Sink","std::io::Cursor<std::boxed::Box<[u8], A>>","std::io::Stderr","std::io::buffered::linewritershim::LineWriterShim<'a, W>","std::os::unix::net::UnixStream","std::sys::unix::stdio::Stdout","std::io::Cursor<std::vec::Vec<u8, A>>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // completions::shell::Shell
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // W
+p0.gen_completions_to(p1, p2);
+app::parser::Parser::<'a, 'b>::gen_completions_to(p0, p1, p2);
+crate::app::parser::Parser::<'a, 'b>::gen_completions_to(p0, p1, p2);
+<app::parser::Parser<'a, 'b>>::gen_completions_to(p0, p1, p2);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::gen_completions
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // completions::shell::Shell
let mut p2 = MaybeUninit::uninit().assume_init(); // std::ffi::OsString
+p0.gen_completions(p1, p2);
+app::parser::Parser::<'a, 'b>::gen_completions(p0, p1, p2);
+crate::app::parser::Parser::<'a, 'b>::gen_completions(p0, p1, p2);
+<app::parser::Parser<'a, 'b>>::gen_completions(p0, p1, p2);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::app_debug_asserts
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.app_debug_asserts();
+app::parser::Parser::<'a, 'b>::app_debug_asserts(p0);
+crate::app::parser::Parser::<'a, 'b>::app_debug_asserts(p0);
+<app::parser::Parser<'a, 'b>>::app_debug_asserts(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::debug_asserts
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::arg::Arg<'_, '_>
+p0.debug_asserts(p1);
+app::parser::Parser::<'a, 'b>::debug_asserts(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::debug_asserts(p0, p1);
+<app::parser::Parser<'a, 'b>>::debug_asserts(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::add_conditional_reqs
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
+p0.add_conditional_reqs(p1);
+app::parser::Parser::<'a, 'b>::add_conditional_reqs(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::add_conditional_reqs(p0, p1);
+<app::parser::Parser<'a, 'b>>::add_conditional_reqs(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::add_arg_groups
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
+p0.add_arg_groups(p1);
+app::parser::Parser::<'a, 'b>::add_arg_groups(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::add_arg_groups(p0, p1);
+<app::parser::Parser<'a, 'b>>::add_arg_groups(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::add_reqs
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
+p0.add_reqs(p1);
+app::parser::Parser::<'a, 'b>::add_reqs(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::add_reqs(p0, p1);
+<app::parser::Parser<'a, 'b>>::add_reqs(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::implied_settings
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
+p0.implied_settings(p1);
+app::parser::Parser::<'a, 'b>::implied_settings(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::implied_settings(p0, p1);
+<app::parser::Parser<'a, 'b>>::implied_settings(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::add_arg
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
+p0.add_arg(p1);
+app::parser::Parser::<'a, 'b>::add_arg(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::add_arg(p0, p1);
+<app::parser::Parser<'a, 'b>>::add_arg(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::add_arg_ref
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
+p0.add_arg_ref(p1);
+app::parser::Parser::<'a, 'b>::add_arg_ref(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::add_arg_ref(p0, p1);
+<app::parser::Parser<'a, 'b>>::add_arg_ref(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::add_group
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::group::ArgGroup<'a>
+p0.add_group(p1);
+app::parser::Parser::<'a, 'b>::add_group(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::add_group(p0, p1);
+<app::parser::Parser<'a, 'b>>::add_group(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::add_subcommand
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
+p0.add_subcommand(p1);
+app::parser::Parser::<'a, 'b>::add_subcommand(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::add_subcommand(p0, p1);
+<app::parser::Parser<'a, 'b>>::add_subcommand(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::propagate_settings
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.propagate_settings();
+app::parser::Parser::<'a, 'b>::propagate_settings(p0);
+crate::app::parser::Parser::<'a, 'b>::propagate_settings(p0);
+<app::parser::Parser<'a, 'b>>::propagate_settings(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::derive_display_order
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.derive_display_order();
+app::parser::Parser::<'a, 'b>::derive_display_order(p0);
+crate::app::parser::Parser::<'a, 'b>::derive_display_order(p0);
+<app::parser::Parser<'a, 'b>>::derive_display_order(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::required
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.required();
+app::parser::Parser::<'a, 'b>::required(p0);
+crate::app::parser::Parser::<'a, 'b>::required(p0);
+<app::parser::Parser<'a, 'b>>::required(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::has_args
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.has_args();
+app::parser::Parser::<'a, 'b>::has_args(p0);
+crate::app::parser::Parser::<'a, 'b>::has_args(p0);
+<app::parser::Parser<'a, 'b>>::has_args(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::has_opts
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.has_opts();
+app::parser::Parser::<'a, 'b>::has_opts(p0);
+crate::app::parser::Parser::<'a, 'b>::has_opts(p0);
+<app::parser::Parser<'a, 'b>>::has_opts(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::has_flags
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.has_flags();
+app::parser::Parser::<'a, 'b>::has_flags(p0);
+crate::app::parser::Parser::<'a, 'b>::has_flags(p0);
+<app::parser::Parser<'a, 'b>>::has_flags(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::has_positionals
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.has_positionals();
+app::parser::Parser::<'a, 'b>::has_positionals(p0);
+crate::app::parser::Parser::<'a, 'b>::has_positionals(p0);
+<app::parser::Parser<'a, 'b>>::has_positionals(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::has_subcommands
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.has_subcommands();
+app::parser::Parser::<'a, 'b>::has_subcommands(p0);
+crate::app::parser::Parser::<'a, 'b>::has_subcommands(p0);
+<app::parser::Parser<'a, 'b>>::has_subcommands(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::has_visible_opts
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.has_visible_opts();
+app::parser::Parser::<'a, 'b>::has_visible_opts(p0);
+crate::app::parser::Parser::<'a, 'b>::has_visible_opts(p0);
+<app::parser::Parser<'a, 'b>>::has_visible_opts(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::has_visible_flags
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.has_visible_flags();
+app::parser::Parser::<'a, 'b>::has_visible_flags(p0);
+crate::app::parser::Parser::<'a, 'b>::has_visible_flags(p0);
+<app::parser::Parser<'a, 'b>>::has_visible_flags(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::has_visible_positionals
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.has_visible_positionals();
+app::parser::Parser::<'a, 'b>::has_visible_positionals(p0);
+crate::app::parser::Parser::<'a, 'b>::has_visible_positionals(p0);
+<app::parser::Parser<'a, 'b>>::has_visible_positionals(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::has_visible_subcommands
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.has_visible_subcommands();
+app::parser::Parser::<'a, 'b>::has_visible_subcommands(p0);
+crate::app::parser::Parser::<'a, 'b>::has_visible_subcommands(p0);
+<app::parser::Parser<'a, 'b>>::has_visible_subcommands(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::is_set
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::AppSettings
+p0.is_set(p1);
+app::parser::Parser::<'a, 'b>::is_set(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::is_set(p0, p1);
+<app::parser::Parser<'a, 'b>>::is_set(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::set
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::AppSettings
+p0.set(p1);
+app::parser::Parser::<'a, 'b>::set(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::set(p0, p1);
+<app::parser::Parser<'a, 'b>>::set(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::unset
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::AppSettings
+p0.unset(p1);
+app::parser::Parser::<'a, 'b>::unset(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::unset(p0, p1);
+<app::parser::Parser<'a, 'b>>::unset(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::verify_positionals
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.verify_positionals();
+app::parser::Parser::<'a, 'b>::verify_positionals(p0);
+crate::app::parser::Parser::<'a, 'b>::verify_positionals(p0);
+<app::parser::Parser<'a, 'b>>::verify_positionals(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::propagate_globals
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.propagate_globals();
+app::parser::Parser::<'a, 'b>::propagate_globals(p0);
+crate::app::parser::Parser::<'a, 'b>::propagate_globals(p0);
+<app::parser::Parser<'a, 'b>>::propagate_globals(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::possible_subcommand
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
+p0.possible_subcommand(p1);
+app::parser::Parser::<'a, 'b>::possible_subcommand(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::possible_subcommand(p0, p1);
+<app::parser::Parser<'a, 'b>>::possible_subcommand(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::parse_help_subcommand
'a,'b
deps:{"<&mut I as std::iter::Iterator>":{},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::parser::Parser::<'a, 'b>::parse_help_subcommand":{"I":["std::marker::Sized","std::iter::Iterator"],"T":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<&mut I as std::iter::Iterator>":{},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::parser::Parser::<'a, 'b>::parse_help_subcommand":{"I":["osstringext::OsSplit","args::arg_matches::Values","<&mut I as std::iter::Iterator>","args::arg_matches::OsValues","args::arg_matches::Indices"],"T":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // I
+p0.parse_help_subcommand(p1);
+app::parser::Parser::<'a, 'b>::parse_help_subcommand(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::parse_help_subcommand(p0, p1);
+<app::parser::Parser<'a, 'b>>::parse_help_subcommand(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::is_new_arg
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
let mut p2 = MaybeUninit::uninit().assume_init(); // app::parser::ParseResult<'_>
+p0.is_new_arg(p1, p2);
+app::parser::Parser::<'a, 'b>::is_new_arg(p0, p1, p2);
+crate::app::parser::Parser::<'a, 'b>::is_new_arg(p0, p1, p2);
+<app::parser::Parser<'a, 'b>>::is_new_arg(p0, p1, p2);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::get_matches_with
'a,'b
deps:{"<&mut I as std::iter::Iterator>":{},"app::parser::Parser::<'a, 'b>::get_matches_with":{"I":["std::marker::Sized","std::iter::Iterator"],"T":["std::convert::Into","std::clone::Clone","std::marker::Sized"]}}
candidates:{"<&mut I as std::iter::Iterator>":{},"app::parser::Parser::<'a, 'b>::get_matches_with":{"I":["args::arg_matches::Values","args::arg_matches::Indices","<&mut I as std::iter::Iterator>","args::arg_matches::OsValues","osstringext::OsSplit"],"T":["std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError","std::sync::mpmc::select::Selected"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // std::iter::Peekable<I>
+p0.get_matches_with(p1, p2);
+app::parser::Parser::<'a, 'b>::get_matches_with(p0, p1, p2);
+crate::app::parser::Parser::<'a, 'b>::get_matches_with(p0, p1, p2);
+<app::parser::Parser<'a, 'b>>::get_matches_with(p0, p1, p2);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::remove_overrides
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'_>
+p0.remove_overrides(p1);
+app::parser::Parser::<'a, 'b>::remove_overrides(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::remove_overrides(p0, p1);
+<app::parser::Parser<'a, 'b>>::remove_overrides(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::propagate_help_version
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.propagate_help_version();
+app::parser::Parser::<'a, 'b>::propagate_help_version(p0);
+crate::app::parser::Parser::<'a, 'b>::propagate_help_version(p0);
+<app::parser::Parser<'a, 'b>>::propagate_help_version(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::build_bin_names
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.build_bin_names();
+app::parser::Parser::<'a, 'b>::build_bin_names(p0);
+crate::app::parser::Parser::<'a, 'b>::build_bin_names(p0);
+<app::parser::Parser<'a, 'b>>::build_bin_names(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::parse_subcommand
'a,'b
deps:{"<&mut I as std::iter::Iterator>":{},"app::parser::Parser::<'a, 'b>::parse_subcommand":{"I":["std::marker::Sized","std::iter::Iterator"],"T":["std::marker::Sized","std::clone::Clone","std::convert::Into"]}}
candidates:{"<&mut I as std::iter::Iterator>":{},"app::parser::Parser::<'a, 'b>::parse_subcommand":{"I":["args::arg_matches::Indices","<&mut I as std::iter::Iterator>","osstringext::OsSplit","args::arg_matches::Values","args::arg_matches::OsValues"],"T":["std::process::ExitStatusError","std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = "sample"; // None+&str
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p3 = &mut  MaybeUninit::uninit().assume_init(); // std::iter::Peekable<I>
+p0.parse_subcommand(&p1, p2, p3);
+app::parser::Parser::<'a, 'b>::parse_subcommand(p0, &p1, p2, p3);
+crate::app::parser::Parser::<'a, 'b>::parse_subcommand(p0, &p1, p2, p3);
+<app::parser::Parser<'a, 'b>>::parse_subcommand(p0, &p1, p2, p3);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::groups_for_arg
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.groups_for_arg(&p1);
+app::parser::Parser::<'a, 'b>::groups_for_arg(p0, &p1);
+crate::app::parser::Parser::<'a, 'b>::groups_for_arg(p0, &p1);
+<app::parser::Parser<'a, 'b>>::groups_for_arg(p0, &p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::args_in_group
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.args_in_group(&p1);
+app::parser::Parser::<'a, 'b>::args_in_group(p0, &p1);
+crate::app::parser::Parser::<'a, 'b>::args_in_group(p0, &p1);
+<app::parser::Parser<'a, 'b>>::args_in_group(p0, &p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::arg_names_in_group
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.arg_names_in_group(&p1);
+app::parser::Parser::<'a, 'b>::arg_names_in_group(p0, &p1);
+crate::app::parser::Parser::<'a, 'b>::arg_names_in_group(p0, &p1);
+<app::parser::Parser<'a, 'b>>::arg_names_in_group(p0, &p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::create_help_and_version
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.create_help_and_version();
+app::parser::Parser::<'a, 'b>::create_help_and_version(p0);
+crate::app::parser::Parser::<'a, 'b>::create_help_and_version(p0);
+<app::parser::Parser<'a, 'b>>::create_help_and_version(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::check_for_help_and_version_str
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
+p0.check_for_help_and_version_str(p1);
+app::parser::Parser::<'a, 'b>::check_for_help_and_version_str(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::check_for_help_and_version_str(p0, p1);
+<app::parser::Parser<'a, 'b>>::check_for_help_and_version_str(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::check_for_help_and_version_char
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = 'a'; // None+char
+p0.check_for_help_and_version_char(p1);
+app::parser::Parser::<'a, 'b>::check_for_help_and_version_char(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::check_for_help_and_version_char(p0, p1);
+<app::parser::Parser<'a, 'b>>::check_for_help_and_version_char(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::use_long_help
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.use_long_help();
+app::parser::Parser::<'a, 'b>::use_long_help(p0);
+crate::app::parser::Parser::<'a, 'b>::use_long_help(p0);
+<app::parser::Parser<'a, 'b>>::use_long_help(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::_help
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = true; // None+bool
+p0._help(p1);
+app::parser::Parser::<'a, 'b>::_help(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::_help(p0, p1);
+<app::parser::Parser<'a, 'b>>::_help(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::_version
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = true; // None+bool
+p0._version(p1);
+app::parser::Parser::<'a, 'b>::_version(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::_version(p0, p1);
+<app::parser::Parser<'a, 'b>>::_version(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::parse_long_arg
'a,'b
deps:{"<&mut I as std::iter::Iterator>":{},"app::parser::Parser::<'a, 'b>::parse_long_arg":{"I":["std::marker::Sized","std::iter::Iterator"],"T":["std::convert::Into","std::clone::Clone","std::marker::Sized"]}}
candidates:{"<&mut I as std::iter::Iterator>":{},"app::parser::Parser::<'a, 'b>::parse_long_arg":{"I":["args::arg_matches::Values","osstringext::OsSplit","args::arg_matches::Indices","args::arg_matches::OsValues","<&mut I as std::iter::Iterator>"],"T":["std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p2 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
let mut p3 = &mut  MaybeUninit::uninit().assume_init(); // std::iter::Peekable<I>
+p0.parse_long_arg(p1, p2, p3);
+app::parser::Parser::<'a, 'b>::parse_long_arg(p0, p1, p2, p3);
+crate::app::parser::Parser::<'a, 'b>::parse_long_arg(p0, p1, p2, p3);
+<app::parser::Parser<'a, 'b>>::parse_long_arg(p0, p1, p2, p3);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::parse_short_arg
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p2 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
+p0.parse_short_arg(p1, p2);
+app::parser::Parser::<'a, 'b>::parse_short_arg(p0, p1, p2);
+crate::app::parser::Parser::<'a, 'b>::parse_short_arg(p0, p1, p2);
+<app::parser::Parser<'a, 'b>>::parse_short_arg(p0, p1, p2);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::parse_opt
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // std::option::Option<&std::ffi::OsStr>
let mut p2 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'a, 'b>
let mut p3 = true; // None+bool
let mut p4 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
+p0.parse_opt(p1, p2, p3, p4);
+app::parser::Parser::<'a, 'b>::parse_opt(p0, p1, p2, p3, p4);
+crate::app::parser::Parser::<'a, 'b>::parse_opt(p0, p1, p2, p3, p4);
+<app::parser::Parser<'a, 'b>>::parse_opt(p0, p1, p2, p3, p4);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::add_val_to_arg
'a,'b
deps:{"app::parser::Parser::<'a, 'b>::add_val_to_arg":{"A":["std::fmt::Display","std::marker::Sized","args::any_arg::AnyArg"]}}
candidates:{"app::parser::Parser::<'a, 'b>::add_val_to_arg":{"A":["args::arg_builder::flag::FlagBuilder","args::arg_builder::option::OptBuilder","args::arg_builder::positional::PosBuilder","app::App"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // A
let mut p2 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
let mut p3 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
+p0.add_val_to_arg(p1, p2, p3);
+app::parser::Parser::<'a, 'b>::add_val_to_arg(p0, p1, p2, p3);
+crate::app::parser::Parser::<'a, 'b>::add_val_to_arg(p0, p1, p2, p3);
+<app::parser::Parser<'a, 'b>>::add_val_to_arg(p0, p1, p2, p3);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::add_single_val_to_arg
'a,'b
deps:{"app::parser::Parser::<'a, 'b>::add_single_val_to_arg":{"A":["args::any_arg::AnyArg","std::marker::Sized","std::fmt::Display"]}}
candidates:{"app::parser::Parser::<'a, 'b>::add_single_val_to_arg":{"A":["args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder","args::arg_builder::positional::PosBuilder","app::App"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // A
let mut p2 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
let mut p3 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
+p0.add_single_val_to_arg(p1, p2, p3);
+app::parser::Parser::<'a, 'b>::add_single_val_to_arg(p0, p1, p2, p3);
+crate::app::parser::Parser::<'a, 'b>::add_single_val_to_arg(p0, p1, p2, p3);
+<app::parser::Parser<'a, 'b>>::add_single_val_to_arg(p0, p1, p2, p3);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::parse_flag
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'a, 'b>
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
+p0.parse_flag(p1, p2);
+app::parser::Parser::<'a, 'b>::parse_flag(p0, p1, p2);
+crate::app::parser::Parser::<'a, 'b>::parse_flag(p0, p1, p2);
+<app::parser::Parser<'a, 'b>>::parse_flag(p0, p1, p2);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::did_you_mean_error
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = "sample"; // None+&str
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p3 = & ["a"].as_mut_slice(); // None+[&str]
+p0.did_you_mean_error(&p1, p2, p3);
+app::parser::Parser::<'a, 'b>::did_you_mean_error(p0, &p1, p2, p3);
+crate::app::parser::Parser::<'a, 'b>::did_you_mean_error(p0, &p1, p2, p3);
+<app::parser::Parser<'a, 'b>>::did_you_mean_error(p0, &p1, p2, p3);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::print_version
'a,'b
deps:{"app::parser::Parser::<'a, 'b>::print_version":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"app::parser::Parser::<'a, 'b>::print_version":{"W":["std::io::Cursor<std::boxed::Box<[u8], A>>","&std::io::Stderr","&std::io::Stdout","std::io::Stdout","&std::fs::File","std::io::Sink","std::io::stdio::StdoutRaw","std::io::Cursor<std::vec::Vec<u8, A>>","std::io::Cursor<&mut [u8]>","std::collections::VecDeque<u8, A>","std::io::Cursor<[u8; N]>","std::io::buffered::linewritershim::LineWriterShim<'a, W>","std::net::TcpStream","std::io::BorrowedCursor<'a>","std::process::ChildStdin","std::sys::unix::stdio::Stderr","std::sys::unix::stdio::Stdout","std::io::impls::<impl std::io::Write for &mut W>","std::io::LineWriter<W>","std::io::StderrLock<'_>","&std::net::TcpStream","&'a std::os::unix::net::UnixStream","std::io::Cursor<&mut std::vec::Vec<u8, A>>","std::fs::File","std::boxed::Box<W>","&std::io::Sink","std::io::Stderr","std::io::stdio::StderrRaw","std::io::BufWriter<W>","&std::process::ChildStdin","std::os::unix::net::UnixStream","std::vec::Vec<u8, A>","std::io::StdoutLock<'_>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // W
let mut p2 = true; // None+bool
+p0.print_version(p1, p2);
+app::parser::Parser::<'a, 'b>::print_version(p0, p1, p2);
+crate::app::parser::Parser::<'a, 'b>::print_version(p0, p1, p2);
+<app::parser::Parser<'a, 'b>>::print_version(p0, p1, p2);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::write_version
'a,'b
deps:{"app::parser::Parser::<'a, 'b>::write_version":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"app::parser::Parser::<'a, 'b>::write_version":{"W":["&std::net::TcpStream","std::boxed::Box<W>","&std::process::ChildStdin","std::io::Sink","std::process::ChildStdin","std::io::StdoutLock<'_>","&std::io::Sink","&std::fs::File","std::io::Stderr","std::io::Cursor<std::boxed::Box<[u8], A>>","std::net::TcpStream","&'a std::os::unix::net::UnixStream","&std::io::Stdout","std::fs::File","std::io::StderrLock<'_>","std::io::Cursor<[u8; N]>","std::io::LineWriter<W>","std::vec::Vec<u8, A>","std::io::BufWriter<W>","std::io::Stdout","std::sys::unix::stdio::Stderr","std::io::BorrowedCursor<'a>","std::io::stdio::StderrRaw","std::io::buffered::linewritershim::LineWriterShim<'a, W>","std::os::unix::net::UnixStream","std::io::Cursor<std::vec::Vec<u8, A>>","std::collections::VecDeque<u8, A>","&std::io::Stderr","std::io::Cursor<&mut std::vec::Vec<u8, A>>","std::io::impls::<impl std::io::Write for &mut W>","std::io::Cursor<&mut [u8]>","std::sys::unix::stdio::Stdout","std::io::stdio::StdoutRaw"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // W
let mut p2 = true; // None+bool
+p0.write_version(p1, p2);
+app::parser::Parser::<'a, 'b>::write_version(p0, p1, p2);
+crate::app::parser::Parser::<'a, 'b>::write_version(p0, p1, p2);
+<app::parser::Parser<'a, 'b>>::write_version(p0, p1, p2);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::print_help
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.print_help();
+app::parser::Parser::<'a, 'b>::print_help(p0);
+crate::app::parser::Parser::<'a, 'b>::print_help(p0);
+<app::parser::Parser<'a, 'b>>::print_help(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::write_help
'a,'b
deps:{"app::parser::Parser::<'a, 'b>::write_help":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"app::parser::Parser::<'a, 'b>::write_help":{"W":["std::io::Cursor<std::boxed::Box<[u8], A>>","std::io::StdoutLock<'_>","std::io::Cursor<&mut [u8]>","std::vec::Vec<u8, A>","&std::fs::File","std::io::Cursor<[u8; N]>","std::io::Stdout","std::io::Stderr","std::fs::File","std::io::stdio::StdoutRaw","&std::net::TcpStream","&std::io::Stderr","std::collections::VecDeque<u8, A>","std::os::unix::net::UnixStream","std::io::Cursor<&mut std::vec::Vec<u8, A>>","&'a std::os::unix::net::UnixStream","std::io::Cursor<std::vec::Vec<u8, A>>","std::sys::unix::stdio::Stderr","std::sys::unix::stdio::Stdout","&std::process::ChildStdin","std::net::TcpStream","&std::io::Stdout","std::process::ChildStdin","&std::io::Sink","std::io::impls::<impl std::io::Write for &mut W>","std::io::BorrowedCursor<'a>","std::io::LineWriter<W>","std::io::buffered::linewritershim::LineWriterShim<'a, W>","std::io::StderrLock<'_>","std::io::BufWriter<W>","std::boxed::Box<W>","std::io::Sink","std::io::stdio::StderrRaw"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // W
+p0.write_help(p1);
+app::parser::Parser::<'a, 'b>::write_help(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::write_help(p0, p1);
+<app::parser::Parser<'a, 'b>>::write_help(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::write_long_help
'a,'b
deps:{"app::parser::Parser::<'a, 'b>::write_long_help":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"app::parser::Parser::<'a, 'b>::write_long_help":{"W":["std::io::stdio::StdoutRaw","&std::io::Sink","&std::net::TcpStream","&std::fs::File","std::io::Cursor<std::boxed::Box<[u8], A>>","std::io::StdoutLock<'_>","std::sys::unix::stdio::Stderr","std::process::ChildStdin","std::collections::VecDeque<u8, A>","std::io::Stdout","std::os::unix::net::UnixStream","std::io::impls::<impl std::io::Write for &mut W>","std::io::buffered::linewritershim::LineWriterShim<'a, W>","&'a std::os::unix::net::UnixStream","std::io::Cursor<&mut [u8]>","std::io::BufWriter<W>","std::vec::Vec<u8, A>","&std::io::Stdout","std::io::Sink","std::io::BorrowedCursor<'a>","&std::process::ChildStdin","std::io::LineWriter<W>","std::net::TcpStream","std::io::Cursor<[u8; N]>","std::fs::File","std::boxed::Box<W>","std::io::stdio::StderrRaw","std::io::Cursor<std::vec::Vec<u8, A>>","std::io::Stderr","std::sys::unix::stdio::Stdout","std::io::StderrLock<'_>","std::io::Cursor<&mut std::vec::Vec<u8, A>>","&std::io::Stderr"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // W
+p0.write_long_help(p1);
+app::parser::Parser::<'a, 'b>::write_long_help(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::write_long_help(p0, p1);
+<app::parser::Parser<'a, 'b>>::write_long_help(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::write_help_err
'a,'b
deps:{"app::parser::Parser::<'a, 'b>::write_help_err":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"app::parser::Parser::<'a, 'b>::write_help_err":{"W":["&std::fs::File","std::net::TcpStream","std::io::stdio::StderrRaw","&std::process::ChildStdin","std::io::Cursor<std::vec::Vec<u8, A>>","&'a std::os::unix::net::UnixStream","std::os::unix::net::UnixStream","std::io::Cursor<[u8; N]>","std::collections::VecDeque<u8, A>","std::io::BufWriter<W>","std::sys::unix::stdio::Stdout","std::io::Stderr","std::io::Cursor<std::boxed::Box<[u8], A>>","std::sys::unix::stdio::Stderr","std::io::impls::<impl std::io::Write for &mut W>","&std::io::Stdout","std::io::Sink","std::vec::Vec<u8, A>","&std::io::Sink","std::io::BorrowedCursor<'a>","std::io::LineWriter<W>","std::io::stdio::StdoutRaw","std::io::Cursor<&mut [u8]>","std::io::StderrLock<'_>","std::process::ChildStdin","std::io::Stdout","&std::io::Stderr","std::io::buffered::linewritershim::LineWriterShim<'a, W>","std::boxed::Box<W>","std::fs::File","&std::net::TcpStream","std::io::StdoutLock<'_>","std::io::Cursor<&mut std::vec::Vec<u8, A>>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // W
+p0.write_help_err(p1);
+app::parser::Parser::<'a, 'b>::write_help_err(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::write_help_err(p0, p1);
+<app::parser::Parser<'a, 'b>>::write_help_err(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::add_defaults
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
+p0.add_defaults(p1);
+app::parser::Parser::<'a, 'b>::add_defaults(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::add_defaults(p0, p1);
+<app::parser::Parser<'a, 'b>>::add_defaults(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::add_env
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
+p0.add_env(p1);
+app::parser::Parser::<'a, 'b>::add_env(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::add_env(p0, p1);
+<app::parser::Parser<'a, 'b>>::add_env(p0, p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::flags
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.flags();
+app::parser::Parser::<'a, 'b>::flags(p0);
+crate::app::parser::Parser::<'a, 'b>::flags(p0);
+<app::parser::Parser<'a, 'b>>::flags(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::opts
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.opts();
+app::parser::Parser::<'a, 'b>::opts(p0);
+crate::app::parser::Parser::<'a, 'b>::opts(p0);
+<app::parser::Parser<'a, 'b>>::opts(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::positionals
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.positionals();
+app::parser::Parser::<'a, 'b>::positionals(p0);
+crate::app::parser::Parser::<'a, 'b>::positionals(p0);
+<app::parser::Parser<'a, 'b>>::positionals(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::subcommands
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.subcommands();
+app::parser::Parser::<'a, 'b>::subcommands(p0);
+crate::app::parser::Parser::<'a, 'b>::subcommands(p0);
+<app::parser::Parser<'a, 'b>>::subcommands(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::color
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+p0.color();
+app::parser::Parser::<'a, 'b>::color(p0);
+crate::app::parser::Parser::<'a, 'b>::color(p0);
+<app::parser::Parser<'a, 'b>>::color(p0);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::find_any_arg
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.find_any_arg(&p1);
+app::parser::Parser::<'a, 'b>::find_any_arg(p0, &p1);
+crate::app::parser::Parser::<'a, 'b>::find_any_arg(p0, &p1);
+<app::parser::Parser<'a, 'b>>::find_any_arg(p0, &p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::is_bin_name
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.is_bin_name(&p1);
+app::parser::Parser::<'a, 'b>::is_bin_name(p0, &p1);
+crate::app::parser::Parser::<'a, 'b>::is_bin_name(p0, &p1);
+<app::parser::Parser<'a, 'b>>::is_bin_name(p0, &p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::is_alias
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.is_alias(&p1);
+app::parser::Parser::<'a, 'b>::is_alias(p0, &p1);
+crate::app::parser::Parser::<'a, 'b>::is_alias(p0, &p1);
+<app::parser::Parser<'a, 'b>>::is_alias(p0, &p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::find_subcommand
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.find_subcommand(&p1);
+app::parser::Parser::<'a, 'b>::find_subcommand(p0, &p1);
+crate::app::parser::Parser::<'a, 'b>::find_subcommand(p0, &p1);
+<app::parser::Parser<'a, 'b>>::find_subcommand(p0, &p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::contains_long
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.contains_long(&p1);
+app::parser::Parser::<'a, 'b>::contains_long(p0, &p1);
+crate::app::parser::Parser::<'a, 'b>::contains_long(p0, &p1);
+<app::parser::Parser<'a, 'b>>::contains_long(p0, &p1);
-----------------
src/app/parser.rs app::parser::Parser::<'a, 'b>::contains_short
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
let mut p1 = 'a'; // None+char
+p0.contains_short(p1);
+app::parser::Parser::<'a, 'b>::contains_short(p0, p1);
+crate::app::parser::Parser::<'a, 'b>::contains_short(p0, p1);
+<app::parser::Parser<'a, 'b>>::contains_short(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.eq(p1);
+<app::settings::Flags as std::cmp::PartialEq>::eq(p0, p1);
+crate::<app::settings::Flags as std::cmp::PartialEq>::eq(p0, p1);
+<app::settings::Flags>::eq(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.assert_receiver_is_total_eq();
+<app::settings::Flags as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<app::settings::Flags as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<app::settings::Flags>::assert_receiver_is_total_eq(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.clone();
+<app::settings::Flags as std::clone::Clone>::clone(p0);
+crate::<app::settings::Flags as std::clone::Clone>::clone(p0);
+<app::settings::Flags>::clone(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.partial_cmp(p1);
+<app::settings::Flags as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<app::settings::Flags as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<app::settings::Flags>::partial_cmp(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.cmp(p1);
+<app::settings::Flags as std::cmp::Ord>::cmp(p0, p1);
+crate::<app::settings::Flags as std::cmp::Ord>::cmp(p0, p1);
+<app::settings::Flags>::cmp(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<app::settings::Flags as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<app::settings::Flags as std::hash::Hash>::hash":{"__H":["std::collections::hash_map::DefaultHasher","std::hash::SipHasher13","std::boxed::Box<T, A>","std::hash::SipHasher","<&mut H as std::hash::Hasher>","std::hash::sip::Hasher<S>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<app::settings::Flags as std::hash::Hash>::hash(p0, p1);
+crate::<app::settings::Flags as std::hash::Hash>::hash(p0, p1);
+<app::settings::Flags>::hash(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<app::settings::Flags as std::fmt::Debug>::fmt(p0, p1);
+crate::<app::settings::Flags as std::fmt::Debug>::fmt(p0, p1);
+<app::settings::Flags>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::SC_NEGATE_REQS
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.SC_NEGATE_REQS();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::SC_NEGATE_REQS(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::SC_NEGATE_REQS(p0);
+<app::settings::Flags>::SC_NEGATE_REQS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::SC_REQUIRED
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.SC_REQUIRED();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::SC_REQUIRED(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::SC_REQUIRED(p0);
+<app::settings::Flags>::SC_REQUIRED(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::A_REQUIRED_ELSE_HELP
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.A_REQUIRED_ELSE_HELP();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::A_REQUIRED_ELSE_HELP(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::A_REQUIRED_ELSE_HELP(p0);
+<app::settings::Flags>::A_REQUIRED_ELSE_HELP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::GLOBAL_VERSION
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.GLOBAL_VERSION();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::GLOBAL_VERSION(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::GLOBAL_VERSION(p0);
+<app::settings::Flags>::GLOBAL_VERSION(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::VERSIONLESS_SC
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.VERSIONLESS_SC();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::VERSIONLESS_SC(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::VERSIONLESS_SC(p0);
+<app::settings::Flags>::VERSIONLESS_SC(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::UNIFIED_HELP
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.UNIFIED_HELP();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::UNIFIED_HELP(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::UNIFIED_HELP(p0);
+<app::settings::Flags>::UNIFIED_HELP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::WAIT_ON_ERROR
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.WAIT_ON_ERROR();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::WAIT_ON_ERROR(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::WAIT_ON_ERROR(p0);
+<app::settings::Flags>::WAIT_ON_ERROR(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::SC_REQUIRED_ELSE_HELP
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.SC_REQUIRED_ELSE_HELP();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::SC_REQUIRED_ELSE_HELP(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::SC_REQUIRED_ELSE_HELP(p0);
+<app::settings::Flags>::SC_REQUIRED_ELSE_HELP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NEEDS_LONG_HELP
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.NEEDS_LONG_HELP();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NEEDS_LONG_HELP(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NEEDS_LONG_HELP(p0);
+<app::settings::Flags>::NEEDS_LONG_HELP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NEEDS_LONG_VERSION
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.NEEDS_LONG_VERSION();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NEEDS_LONG_VERSION(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NEEDS_LONG_VERSION(p0);
+<app::settings::Flags>::NEEDS_LONG_VERSION(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NEEDS_SC_HELP
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.NEEDS_SC_HELP();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NEEDS_SC_HELP(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NEEDS_SC_HELP(p0);
+<app::settings::Flags>::NEEDS_SC_HELP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DISABLE_VERSION
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.DISABLE_VERSION();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DISABLE_VERSION(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DISABLE_VERSION(p0);
+<app::settings::Flags>::DISABLE_VERSION(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDDEN
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.HIDDEN();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDDEN(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDDEN(p0);
+<app::settings::Flags>::HIDDEN(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::TRAILING_VARARG
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.TRAILING_VARARG();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::TRAILING_VARARG(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::TRAILING_VARARG(p0);
+<app::settings::Flags>::TRAILING_VARARG(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NO_BIN_NAME
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.NO_BIN_NAME();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NO_BIN_NAME(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NO_BIN_NAME(p0);
+<app::settings::Flags>::NO_BIN_NAME(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ALLOW_UNK_SC
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.ALLOW_UNK_SC();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ALLOW_UNK_SC(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ALLOW_UNK_SC(p0);
+<app::settings::Flags>::ALLOW_UNK_SC(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::UTF8_STRICT
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.UTF8_STRICT();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::UTF8_STRICT(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::UTF8_STRICT(p0);
+<app::settings::Flags>::UTF8_STRICT(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::UTF8_NONE
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.UTF8_NONE();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::UTF8_NONE(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::UTF8_NONE(p0);
+<app::settings::Flags>::UTF8_NONE(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::LEADING_HYPHEN
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.LEADING_HYPHEN();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::LEADING_HYPHEN(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::LEADING_HYPHEN(p0);
+<app::settings::Flags>::LEADING_HYPHEN(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NO_POS_VALUES
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.NO_POS_VALUES();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NO_POS_VALUES(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NO_POS_VALUES(p0);
+<app::settings::Flags>::NO_POS_VALUES(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NEXT_LINE_HELP
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.NEXT_LINE_HELP();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NEXT_LINE_HELP(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NEXT_LINE_HELP(p0);
+<app::settings::Flags>::NEXT_LINE_HELP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DERIVE_DISP_ORDER
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.DERIVE_DISP_ORDER();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DERIVE_DISP_ORDER(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DERIVE_DISP_ORDER(p0);
+<app::settings::Flags>::DERIVE_DISP_ORDER(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::COLORED_HELP
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.COLORED_HELP();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::COLORED_HELP(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::COLORED_HELP(p0);
+<app::settings::Flags>::COLORED_HELP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::COLOR_ALWAYS
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.COLOR_ALWAYS();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::COLOR_ALWAYS(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::COLOR_ALWAYS(p0);
+<app::settings::Flags>::COLOR_ALWAYS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::COLOR_AUTO
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.COLOR_AUTO();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::COLOR_AUTO(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::COLOR_AUTO(p0);
+<app::settings::Flags>::COLOR_AUTO(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::COLOR_NEVER
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.COLOR_NEVER();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::COLOR_NEVER(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::COLOR_NEVER(p0);
+<app::settings::Flags>::COLOR_NEVER(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DONT_DELIM_TRAIL
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.DONT_DELIM_TRAIL();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DONT_DELIM_TRAIL(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DONT_DELIM_TRAIL(p0);
+<app::settings::Flags>::DONT_DELIM_TRAIL(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ALLOW_NEG_NUMS
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.ALLOW_NEG_NUMS();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ALLOW_NEG_NUMS(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ALLOW_NEG_NUMS(p0);
+<app::settings::Flags>::ALLOW_NEG_NUMS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::LOW_INDEX_MUL_POS
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.LOW_INDEX_MUL_POS();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::LOW_INDEX_MUL_POS(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::LOW_INDEX_MUL_POS(p0);
+<app::settings::Flags>::LOW_INDEX_MUL_POS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DISABLE_HELP_SC
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.DISABLE_HELP_SC();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DISABLE_HELP_SC(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DISABLE_HELP_SC(p0);
+<app::settings::Flags>::DISABLE_HELP_SC(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DONT_COLLAPSE_ARGS
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.DONT_COLLAPSE_ARGS();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DONT_COLLAPSE_ARGS(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DONT_COLLAPSE_ARGS(p0);
+<app::settings::Flags>::DONT_COLLAPSE_ARGS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ARGS_NEGATE_SCS
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.ARGS_NEGATE_SCS();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ARGS_NEGATE_SCS(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ARGS_NEGATE_SCS(p0);
+<app::settings::Flags>::ARGS_NEGATE_SCS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::PROPAGATE_VALS_DOWN
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.PROPAGATE_VALS_DOWN();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::PROPAGATE_VALS_DOWN(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::PROPAGATE_VALS_DOWN(p0);
+<app::settings::Flags>::PROPAGATE_VALS_DOWN(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ALLOW_MISSING_POS
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.ALLOW_MISSING_POS();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ALLOW_MISSING_POS(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ALLOW_MISSING_POS(p0);
+<app::settings::Flags>::ALLOW_MISSING_POS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::TRAILING_VALUES
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.TRAILING_VALUES();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::TRAILING_VALUES(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::TRAILING_VALUES(p0);
+<app::settings::Flags>::TRAILING_VALUES(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::VALID_NEG_NUM_FOUND
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.VALID_NEG_NUM_FOUND();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::VALID_NEG_NUM_FOUND(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::VALID_NEG_NUM_FOUND(p0);
+<app::settings::Flags>::VALID_NEG_NUM_FOUND(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::PROPAGATED
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.PROPAGATED();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::PROPAGATED(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::PROPAGATED(p0);
+<app::settings::Flags>::PROPAGATED(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::VALID_ARG_FOUND
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.VALID_ARG_FOUND();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::VALID_ARG_FOUND(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::VALID_ARG_FOUND(p0);
+<app::settings::Flags>::VALID_ARG_FOUND(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::INFER_SUBCOMMANDS
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.INFER_SUBCOMMANDS();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::INFER_SUBCOMMANDS(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::INFER_SUBCOMMANDS(p0);
+<app::settings::Flags>::INFER_SUBCOMMANDS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::CONTAINS_LAST
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.CONTAINS_LAST();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::CONTAINS_LAST(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::CONTAINS_LAST(p0);
+<app::settings::Flags>::CONTAINS_LAST(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ARGS_OVERRIDE_SELF
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.ARGS_OVERRIDE_SELF();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ARGS_OVERRIDE_SELF(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ARGS_OVERRIDE_SELF(p0);
+<app::settings::Flags>::ARGS_OVERRIDE_SELF(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DISABLE_HELP_FLAGS
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.DISABLE_HELP_FLAGS();
+<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DISABLE_HELP_FLAGS(p0);
+crate::<app::settings::Flags as <app::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DISABLE_HELP_FLAGS(p0);
+<app::settings::Flags>::DISABLE_HELP_FLAGS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Binary>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.fmt(p1);
+<app::settings::Flags as std::fmt::Binary>::fmt(p0, p1);
+crate::<app::settings::Flags as std::fmt::Binary>::fmt(p0, p1);
+<app::settings::Flags>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::Octal>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.fmt(p1);
+<app::settings::Flags as std::fmt::Octal>::fmt(p0, p1);
+crate::<app::settings::Flags as std::fmt::Octal>::fmt(p0, p1);
+<app::settings::Flags>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::LowerHex>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.fmt(p1);
+<app::settings::Flags as std::fmt::LowerHex>::fmt(p0, p1);
+crate::<app::settings::Flags as std::fmt::LowerHex>::fmt(p0, p1);
+<app::settings::Flags>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::fmt::UpperHex>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.fmt(p1);
+<app::settings::Flags as std::fmt::UpperHex>::fmt(p0, p1);
+crate::<app::settings::Flags as std::fmt::UpperHex>::fmt(p0, p1);
+<app::settings::Flags>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::empty
deps:{}
candidates:{}
+app::settings::Flags::empty();
+crate::app::settings::Flags::empty();
+<app::settings::Flags>::empty();
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::all
deps:{}
candidates:{}
+app::settings::Flags::all();
+crate::app::settings::Flags::all();
+<app::settings::Flags>::all();
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::bits
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.bits();
+app::settings::Flags::bits(p0);
+crate::app::settings::Flags::bits(p0);
+<app::settings::Flags>::bits(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::from_bits
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
+app::settings::Flags::from_bits(p0);
+crate::app::settings::Flags::from_bits(p0);
+<app::settings::Flags>::from_bits(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::from_bits_truncate
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
+app::settings::Flags::from_bits_truncate(p0);
+crate::app::settings::Flags::from_bits_truncate(p0);
+<app::settings::Flags>::from_bits_truncate(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::from_bits_unchecked
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
+app::settings::Flags::from_bits_unchecked(p0);
+crate::app::settings::Flags::from_bits_unchecked(p0);
+<app::settings::Flags>::from_bits_unchecked(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::is_empty
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.is_empty();
+app::settings::Flags::is_empty(p0);
+crate::app::settings::Flags::is_empty(p0);
+<app::settings::Flags>::is_empty(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::is_all
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.is_all();
+app::settings::Flags::is_all(p0);
+crate::app::settings::Flags::is_all(p0);
+<app::settings::Flags>::is_all(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::intersects
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.intersects(p1);
+app::settings::Flags::intersects(p0, p1);
+crate::app::settings::Flags::intersects(p0, p1);
+<app::settings::Flags>::intersects(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::contains
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.contains(p1);
+app::settings::Flags::contains(p0, p1);
+crate::app::settings::Flags::contains(p0, p1);
+<app::settings::Flags>::contains(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::insert
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.insert(p1);
+app::settings::Flags::insert(p0, p1);
+crate::app::settings::Flags::insert(p0, p1);
+<app::settings::Flags>::insert(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::remove
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.remove(p1);
+app::settings::Flags::remove(p0, p1);
+crate::app::settings::Flags::remove(p0, p1);
+<app::settings::Flags>::remove(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::toggle
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.toggle(p1);
+app::settings::Flags::toggle(p0, p1);
+crate::app::settings::Flags::toggle(p0, p1);
+<app::settings::Flags>::toggle(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::set
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p2 = true; // None+bool
+p0.set(p1, p2);
+app::settings::Flags::set(p0, p1, p2);
+crate::app::settings::Flags::set(p0, p1, p2);
+<app::settings::Flags>::set(p0, p1, p2);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::intersection
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.intersection(p1);
+app::settings::Flags::intersection(p0, p1);
+crate::app::settings::Flags::intersection(p0, p1);
+<app::settings::Flags>::intersection(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::union
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.union(p1);
+app::settings::Flags::union(p0, p1);
+crate::app::settings::Flags::union(p0, p1);
+<app::settings::Flags>::union(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::difference
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.difference(p1);
+app::settings::Flags::difference(p0, p1);
+crate::app::settings::Flags::difference(p0, p1);
+<app::settings::Flags>::difference(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::symmetric_difference
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.symmetric_difference(p1);
+app::settings::Flags::symmetric_difference(p0, p1);
+crate::app::settings::Flags::symmetric_difference(p0, p1);
+<app::settings::Flags>::symmetric_difference(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs app::settings::Flags::complement
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.complement();
+app::settings::Flags::complement(p0);
+crate::app::settings::Flags::complement(p0);
+<app::settings::Flags>::complement(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::ops::BitOr>::bitor
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.bitor(p1);
+<app::settings::Flags as std::ops::BitOr>::bitor(p0, p1);
+crate::<app::settings::Flags as std::ops::BitOr>::bitor(p0, p1);
+<app::settings::Flags>::bitor(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::ops::BitOrAssign>::bitor_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.bitor_assign(p1);
+<app::settings::Flags as std::ops::BitOrAssign>::bitor_assign(p0, p1);
+crate::<app::settings::Flags as std::ops::BitOrAssign>::bitor_assign(p0, p1);
+<app::settings::Flags>::bitor_assign(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::ops::BitXor>::bitxor
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.bitxor(p1);
+<app::settings::Flags as std::ops::BitXor>::bitxor(p0, p1);
+crate::<app::settings::Flags as std::ops::BitXor>::bitxor(p0, p1);
+<app::settings::Flags>::bitxor(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::ops::BitXorAssign>::bitxor_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.bitxor_assign(p1);
+<app::settings::Flags as std::ops::BitXorAssign>::bitxor_assign(p0, p1);
+crate::<app::settings::Flags as std::ops::BitXorAssign>::bitxor_assign(p0, p1);
+<app::settings::Flags>::bitxor_assign(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::ops::BitAnd>::bitand
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.bitand(p1);
+<app::settings::Flags as std::ops::BitAnd>::bitand(p0, p1);
+crate::<app::settings::Flags as std::ops::BitAnd>::bitand(p0, p1);
+<app::settings::Flags>::bitand(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::ops::BitAndAssign>::bitand_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.bitand_assign(p1);
+<app::settings::Flags as std::ops::BitAndAssign>::bitand_assign(p0, p1);
+crate::<app::settings::Flags as std::ops::BitAndAssign>::bitand_assign(p0, p1);
+<app::settings::Flags>::bitand_assign(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::ops::Sub>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.sub(p1);
+<app::settings::Flags as std::ops::Sub>::sub(p0, p1);
+crate::<app::settings::Flags as std::ops::Sub>::sub(p0, p1);
+<app::settings::Flags>::sub(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::ops::SubAssign>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.sub_assign(p1);
+<app::settings::Flags as std::ops::SubAssign>::sub_assign(p0, p1);
+crate::<app::settings::Flags as std::ops::SubAssign>::sub_assign(p0, p1);
+<app::settings::Flags>::sub_assign(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::ops::Not>::not
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::settings::Flags
+p0.not();
+<app::settings::Flags as std::ops::Not>::not(p0);
+crate::<app::settings::Flags as std::ops::Not>::not(p0);
+<app::settings::Flags>::not(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::iter::Extend<app::settings::Flags>>::extend
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"<app::settings::Flags as std::iter::Extend<app::settings::Flags>>::extend":{"T":["std::marker::Sized","std::iter::IntoIterator"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["osstringext::OsSplit","args::arg_matches::OsValues","<&mut I as std::iter::Iterator>","args::arg_matches::Values","args::arg_matches::Indices"]},"<app::settings::Flags as std::iter::Extend<app::settings::Flags>>::extend":{"T":["std::collections::BTreeMap<K, V, A>","std::sync::mpsc::Receiver<T>","std::collections::VecDeque<T, A>","std::result::Result<T, E>","std::collections::HashMap<K, V, S>","&'a std::os::unix::net::UnixListener","<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>","std::collections::HashSet<T, S>","std::collections::LinkedList<T>","std::collections::BTreeSet<T, A>","std::option::Option<T>","&'a std::path::Path","std::collections::BinaryHeap<T>","&'a std::path::PathBuf","<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>","std::vec::Vec<T, A>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.extend(p1);
+<app::settings::Flags as std::iter::Extend<app::settings::Flags>>::extend(p0, p1);
+crate::<app::settings::Flags as std::iter::Extend<app::settings::Flags>>::extend(p0, p1);
+<app::settings::Flags>::extend(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <app::settings::Flags as std::iter::FromIterator<app::settings::Flags>>::from_iter
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::iter::Iterator","std::marker::Sized"]},"<app::settings::Flags as std::iter::FromIterator<app::settings::Flags>>::from_iter":{"T":["std::marker::Sized","std::iter::IntoIterator"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["<&mut I as std::iter::Iterator>","osstringext::OsSplit","args::arg_matches::Values","args::arg_matches::OsValues","args::arg_matches::Indices"]},"<app::settings::Flags as std::iter::FromIterator<app::settings::Flags>>::from_iter":{"T":["std::collections::LinkedList<T>","&'a std::os::unix::net::UnixListener","&'a std::path::PathBuf","std::result::Result<T, E>","std::option::Option<T>","std::collections::HashSet<T, S>","<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>","std::collections::BTreeSet<T, A>","std::vec::Vec<T, A>","std::sync::mpsc::Receiver<T>","std::collections::BinaryHeap<T>","std::collections::VecDeque<T, A>","std::collections::HashMap<K, V, S>","<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>","&'a std::path::Path","std::collections::BTreeMap<K, V, A>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+<app::settings::Flags as std::iter::FromIterator<app::settings::Flags>>::from_iter(p0);
+crate::<app::settings::Flags as std::iter::FromIterator<app::settings::Flags>>::from_iter(p0);
+<app::settings::Flags>::from_iter(p0);
-----------------
src/app/settings.rs <app::settings::AppFlags as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::AppFlags
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<app::settings::AppFlags as std::fmt::Debug>::fmt(p0, p1);
+crate::<app::settings::AppFlags as std::fmt::Debug>::fmt(p0, p1);
+<app::settings::AppFlags>::fmt(p0, p1);
-----------------
src/app/settings.rs <app::settings::AppFlags as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::AppFlags
+p0.clone();
+<app::settings::AppFlags as std::clone::Clone>::clone(p0);
+crate::<app::settings::AppFlags as std::clone::Clone>::clone(p0);
+<app::settings::AppFlags>::clone(p0);
-----------------
src/app/settings.rs <app::settings::AppFlags as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::AppFlags
let mut p1 = & MaybeUninit::uninit().assume_init(); // app::settings::AppFlags
+p0.eq(p1);
+<app::settings::AppFlags as std::cmp::PartialEq>::eq(p0, p1);
+crate::<app::settings::AppFlags as std::cmp::PartialEq>::eq(p0, p1);
+<app::settings::AppFlags>::eq(p0, p1);
-----------------
src/app/settings.rs <app::settings::AppFlags as std::ops::BitOr>::bitor
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::settings::AppFlags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::AppFlags
+p0.bitor(p1);
+<app::settings::AppFlags as std::ops::BitOr>::bitor(p0, p1);
+crate::<app::settings::AppFlags as std::ops::BitOr>::bitor(p0, p1);
+<app::settings::AppFlags>::bitor(p0, p1);
-----------------
src/app/settings.rs <app::settings::AppFlags as std::default::Default>::default
deps:{}
candidates:{}
+<app::settings::AppFlags as std::default::Default>::default();
+crate::<app::settings::AppFlags as std::default::Default>::default();
+<app::settings::AppFlags>::default();
-----------------
src/app/settings.rs app::settings::AppFlags::new
deps:{}
candidates:{}
+app::settings::AppFlags::new();
+crate::app::settings::AppFlags::new();
+<app::settings::AppFlags>::new();
-----------------
src/app/settings.rs app::settings::AppFlags::zeroed
deps:{}
candidates:{}
+app::settings::AppFlags::zeroed();
+crate::app::settings::AppFlags::zeroed();
+<app::settings::AppFlags>::zeroed();
-----------------
src/macros.rs app::settings::AppFlags::set
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::settings::AppFlags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::AppSettings
+p0.set(p1);
+app::settings::AppFlags::set(p0, p1);
+crate::app::settings::AppFlags::set(p0, p1);
+<app::settings::AppFlags>::set(p0, p1);
-----------------
src/macros.rs app::settings::AppFlags::unset
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::settings::AppFlags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::AppSettings
+p0.unset(p1);
+app::settings::AppFlags::unset(p0, p1);
+crate::app::settings::AppFlags::unset(p0, p1);
+<app::settings::AppFlags>::unset(p0, p1);
-----------------
src/macros.rs app::settings::AppFlags::is_set
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::AppFlags
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::AppSettings
+p0.is_set(p1);
+app::settings::AppFlags::is_set(p0, p1);
+crate::app::settings::AppFlags::is_set(p0, p1);
+<app::settings::AppFlags>::is_set(p0, p1);
-----------------
src/app/settings.rs <app::settings::AppSettings as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::AppSettings
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<app::settings::AppSettings as std::fmt::Debug>::fmt(p0, p1);
+crate::<app::settings::AppSettings as std::fmt::Debug>::fmt(p0, p1);
+<app::settings::AppSettings>::fmt(p0, p1);
-----------------
src/app/settings.rs <app::settings::AppSettings as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::AppSettings
let mut p1 = & MaybeUninit::uninit().assume_init(); // app::settings::AppSettings
+p0.eq(p1);
+<app::settings::AppSettings as std::cmp::PartialEq>::eq(p0, p1);
+crate::<app::settings::AppSettings as std::cmp::PartialEq>::eq(p0, p1);
+<app::settings::AppSettings>::eq(p0, p1);
-----------------
src/app/settings.rs <app::settings::AppSettings as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::settings::AppSettings
+p0.clone();
+<app::settings::AppSettings as std::clone::Clone>::clone(p0);
+crate::<app::settings::AppSettings as std::clone::Clone>::clone(p0);
+<app::settings::AppSettings>::clone(p0);
-----------------
src/app/settings.rs <app::settings::AppSettings as std::str::FromStr>::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<app::settings::AppSettings as std::str::FromStr>::from_str(&p0);
+crate::<app::settings::AppSettings as std::str::FromStr>::from_str(&p0);
+<app::settings::AppSettings>::from_str(&p0);
-----------------
src/app/validator.rs app::validator::Validator::<'a, 'b, 'z>::new
'a,'b,'z
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+app::validator::Validator::<'a, 'b, 'z>::new(p0);
+crate::app::validator::Validator::<'a, 'b, 'z>::new(p0);
+<app::validator::Validator<'a, 'b, 'z>>::new(p0);
-----------------
src/app/validator.rs app::validator::Validator::<'a, 'b, 'z>::validate
'a,'b,'z
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::validator::Validator<'a, 'b, 'z>
let mut p1 = MaybeUninit::uninit().assume_init(); // app::parser::ParseResult<'a>
let mut p2 = std::string::String::new(); // None+std::option::Option<std::string::String>
let mut p3 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
+p0.validate(p1, p2, p3);
+app::validator::Validator::<'a, 'b, 'z>::validate(p0, p1, p2, p3);
+crate::app::validator::Validator::<'a, 'b, 'z>::validate(p0, p1, p2, p3);
+<app::validator::Validator<'a, 'b, 'z>>::validate(p0, p1, p2, p3);
-----------------
src/app/validator.rs app::validator::Validator::<'a, 'b, 'z>::validate_arg_values
'a,'b,'z
deps:{"app::validator::Validator::<'a, 'b, 'z>::validate_arg_values":{"A":["std::marker::Sized","args::any_arg::AnyArg","std::fmt::Display"]}}
candidates:{"app::validator::Validator::<'a, 'b, 'z>::validate_arg_values":{"A":["args::arg_builder::option::OptBuilder","args::arg_builder::positional::PosBuilder","app::App","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::validator::Validator<'a, 'b, 'z>
let mut p1 = & MaybeUninit::uninit().assume_init(); // A
let mut p2 = & MaybeUninit::uninit().assume_init(); // args::matched_arg::MatchedArg
let mut p3 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
+p0.validate_arg_values(p1, p2, p3);
+app::validator::Validator::<'a, 'b, 'z>::validate_arg_values(p0, p1, p2, p3);
+crate::app::validator::Validator::<'a, 'b, 'z>::validate_arg_values(p0, p1, p2, p3);
+<app::validator::Validator<'a, 'b, 'z>>::validate_arg_values(p0, p1, p2, p3);
-----------------
src/app/validator.rs app::validator::Validator::<'a, 'b, 'z>::build_err
'a,'b,'z
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::validator::Validator<'a, 'b, 'z>
let mut p1 = "sample"; // None+&str
let mut p2 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'_>
+p0.build_err(&p1, p2);
+app::validator::Validator::<'a, 'b, 'z>::build_err(p0, &p1, p2);
+crate::app::validator::Validator::<'a, 'b, 'z>::build_err(p0, &p1, p2);
+<app::validator::Validator<'a, 'b, 'z>>::build_err(p0, &p1, p2);
-----------------
src/app/validator.rs app::validator::Validator::<'a, 'b, 'z>::validate_blacklist
'a,'b,'z
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::validator::Validator<'a, 'b, 'z>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'_>
+p0.validate_blacklist(p1);
+app::validator::Validator::<'a, 'b, 'z>::validate_blacklist(p0, p1);
+crate::app::validator::Validator::<'a, 'b, 'z>::validate_blacklist(p0, p1);
+<app::validator::Validator<'a, 'b, 'z>>::validate_blacklist(p0, p1);
-----------------
src/app/validator.rs app::validator::Validator::<'a, 'b, 'z>::validate_matched_args
'a,'b,'z
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::validator::Validator<'a, 'b, 'z>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
+p0.validate_matched_args(p1);
+app::validator::Validator::<'a, 'b, 'z>::validate_matched_args(p0, p1);
+crate::app::validator::Validator::<'a, 'b, 'z>::validate_matched_args(p0, p1);
+<app::validator::Validator<'a, 'b, 'z>>::validate_matched_args(p0, p1);
-----------------
src/app/validator.rs app::validator::Validator::<'a, 'b, 'z>::validate_arg_num_occurs
'a,'b,'z
deps:{"app::validator::Validator::<'a, 'b, 'z>::validate_arg_num_occurs":{"A":["std::fmt::Display","std::marker::Sized","args::any_arg::AnyArg"]}}
candidates:{"app::validator::Validator::<'a, 'b, 'z>::validate_arg_num_occurs":{"A":["args::arg_builder::flag::FlagBuilder","args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder","app::App"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::validator::Validator<'a, 'b, 'z>
let mut p1 = & MaybeUninit::uninit().assume_init(); // A
let mut p2 = & MaybeUninit::uninit().assume_init(); // args::matched_arg::MatchedArg
let mut p3 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'_>
+p0.validate_arg_num_occurs(p1, p2, p3);
+app::validator::Validator::<'a, 'b, 'z>::validate_arg_num_occurs(p0, p1, p2, p3);
+crate::app::validator::Validator::<'a, 'b, 'z>::validate_arg_num_occurs(p0, p1, p2, p3);
+<app::validator::Validator<'a, 'b, 'z>>::validate_arg_num_occurs(p0, p1, p2, p3);
-----------------
src/app/validator.rs app::validator::Validator::<'a, 'b, 'z>::validate_arg_num_vals
'a,'b,'z
deps:{"app::validator::Validator::<'a, 'b, 'z>::validate_arg_num_vals":{"A":["std::marker::Sized","args::any_arg::AnyArg","std::fmt::Display"]}}
candidates:{"app::validator::Validator::<'a, 'b, 'z>::validate_arg_num_vals":{"A":["args::arg_builder::positional::PosBuilder","app::App","args::arg_builder::flag::FlagBuilder","args::arg_builder::option::OptBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::validator::Validator<'a, 'b, 'z>
let mut p1 = & MaybeUninit::uninit().assume_init(); // A
let mut p2 = & MaybeUninit::uninit().assume_init(); // args::matched_arg::MatchedArg
let mut p3 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'_>
+p0.validate_arg_num_vals(p1, p2, p3);
+app::validator::Validator::<'a, 'b, 'z>::validate_arg_num_vals(p0, p1, p2, p3);
+crate::app::validator::Validator::<'a, 'b, 'z>::validate_arg_num_vals(p0, p1, p2, p3);
+<app::validator::Validator<'a, 'b, 'z>>::validate_arg_num_vals(p0, p1, p2, p3);
-----------------
src/app/validator.rs app::validator::Validator::<'a, 'b, 'z>::validate_arg_requires
'a,'b,'z
deps:{"app::validator::Validator::<'a, 'b, 'z>::validate_arg_requires":{"A":["std::marker::Sized","args::any_arg::AnyArg","std::fmt::Display"]}}
candidates:{"app::validator::Validator::<'a, 'b, 'z>::validate_arg_requires":{"A":["args::arg_builder::positional::PosBuilder","app::App","args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::validator::Validator<'a, 'b, 'z>
let mut p1 = & MaybeUninit::uninit().assume_init(); // A
let mut p2 = & MaybeUninit::uninit().assume_init(); // args::matched_arg::MatchedArg
let mut p3 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'_>
+p0.validate_arg_requires(p1, p2, p3);
+app::validator::Validator::<'a, 'b, 'z>::validate_arg_requires(p0, p1, p2, p3);
+crate::app::validator::Validator::<'a, 'b, 'z>::validate_arg_requires(p0, p1, p2, p3);
+<app::validator::Validator<'a, 'b, 'z>>::validate_arg_requires(p0, p1, p2, p3);
-----------------
src/app/validator.rs app::validator::Validator::<'a, 'b, 'z>::validate_required
'a,'b,'z
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::validator::Validator<'a, 'b, 'z>
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'_>
+p0.validate_required(p1);
+app::validator::Validator::<'a, 'b, 'z>::validate_required(p0, p1);
+crate::app::validator::Validator::<'a, 'b, 'z>::validate_required(p0, p1);
+<app::validator::Validator<'a, 'b, 'z>>::validate_required(p0, p1);
-----------------
src/app/validator.rs app::validator::Validator::<'a, 'b, 'z>::validate_arg_conflicts
'a,'b,'z
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::validator::Validator<'a, 'b, 'z>
let mut p1 = & MaybeUninit::uninit().assume_init(); // dyn args::any_arg::AnyArg<'a, 'b>
let mut p2 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'_>
+p0.validate_arg_conflicts(p1, p2);
+app::validator::Validator::<'a, 'b, 'z>::validate_arg_conflicts(p0, p1, p2);
+crate::app::validator::Validator::<'a, 'b, 'z>::validate_arg_conflicts(p0, p1, p2);
+<app::validator::Validator<'a, 'b, 'z>>::validate_arg_conflicts(p0, p1, p2);
-----------------
src/app/validator.rs app::validator::Validator::<'a, 'b, 'z>::validate_required_unless
'a,'b,'z
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::validator::Validator<'a, 'b, 'z>
let mut p1 = & MaybeUninit::uninit().assume_init(); // dyn args::any_arg::AnyArg<'a, 'b>
let mut p2 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'_>
+p0.validate_required_unless(p1, p2);
+app::validator::Validator::<'a, 'b, 'z>::validate_required_unless(p0, p1, p2);
+crate::app::validator::Validator::<'a, 'b, 'z>::validate_required_unless(p0, p1, p2);
+<app::validator::Validator<'a, 'b, 'z>>::validate_required_unless(p0, p1, p2);
-----------------
src/app/validator.rs app::validator::Validator::<'a, 'b, 'z>::missing_required_error
'a,'b,'z
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::validator::Validator<'a, 'b, 'z>
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'_>
let mut p2 = MaybeUninit::uninit().assume_init(); // std::option::Option<&str>
+p0.missing_required_error(p1, p2);
+app::validator::Validator::<'a, 'b, 'z>::missing_required_error(p0, p1, p2);
+crate::app::validator::Validator::<'a, 'b, 'z>::missing_required_error(p0, p1, p2);
+<app::validator::Validator<'a, 'b, 'z>>::missing_required_error(p0, p1, p2);
-----------------
src/app/validator.rs app::validator::Validator::<'a, 'b, 'z>::is_missing_required_ok
'a,'b,'z
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::validator::Validator<'a, 'b, 'z>
let mut p1 = & MaybeUninit::uninit().assume_init(); // dyn args::any_arg::AnyArg<'a, 'b>
let mut p2 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'_>
+p0.is_missing_required_ok(p1, p2);
+app::validator::Validator::<'a, 'b, 'z>::is_missing_required_ok(p0, p1, p2);
+crate::app::validator::Validator::<'a, 'b, 'z>::is_missing_required_ok(p0, p1, p2);
+<app::validator::Validator<'a, 'b, 'z>>::is_missing_required_ok(p0, p1, p2);
-----------------
src/app/mod.rs app::App::<'a, 'b>::new
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::new":{"S":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::new":{"S":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // S
+app::App::<'a, 'b>::new(p0);
+crate::app::App::<'a, 'b>::new(p0);
+<app::App<'a, 'b>>::new(p0);
-----------------
src/app/mod.rs app::App::<'a, 'b>::get_name
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
+p0.get_name();
+app::App::<'a, 'b>::get_name(p0);
+crate::app::App::<'a, 'b>::get_name(p0);
+<app::App<'a, 'b>>::get_name(p0);
-----------------
src/app/mod.rs app::App::<'a, 'b>::get_bin_name
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
+p0.get_bin_name();
+app::App::<'a, 'b>::get_bin_name(p0);
+crate::app::App::<'a, 'b>::get_bin_name(p0);
+<app::App<'a, 'b>>::get_bin_name(p0);
-----------------
src/app/mod.rs app::App::<'a, 'b>::with_defaults
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::with_defaults":{"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::with_defaults":{"S":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // S
+app::App::<'a, 'b>::with_defaults(p0);
+crate::app::App::<'a, 'b>::with_defaults(p0);
+<app::App<'a, 'b>>::with_defaults(p0);
-----------------
src/app/mod.rs app::App::<'a, 'b>::author
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::author":{"S":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::author":{"S":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.author(p1);
+app::App::<'a, 'b>::author(p0, p1);
+crate::app::App::<'a, 'b>::author(p0, p1);
+<app::App<'a, 'b>>::author(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::bin_name
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::bin_name":{"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::bin_name":{"S":["args::arg_matcher::ArgMatcher","<T as std::convert::Into<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.bin_name(p1);
+app::App::<'a, 'b>::bin_name(p0, p1);
+crate::app::App::<'a, 'b>::bin_name(p0, p1);
+<app::App<'a, 'b>>::bin_name(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::about
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::about":{"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::about":{"S":["args::arg_matcher::ArgMatcher","<T as std::convert::Into<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.about(p1);
+app::App::<'a, 'b>::about(p0, p1);
+crate::app::App::<'a, 'b>::about(p0, p1);
+<app::App<'a, 'b>>::about(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::long_about
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::long_about":{"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::long_about":{"S":["args::arg_matcher::ArgMatcher","<T as std::convert::Into<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.long_about(p1);
+app::App::<'a, 'b>::long_about(p0, p1);
+crate::app::App::<'a, 'b>::long_about(p0, p1);
+<app::App<'a, 'b>>::long_about(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::name
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::name":{"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::name":{"S":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.name(p1);
+app::App::<'a, 'b>::name(p0, p1);
+crate::app::App::<'a, 'b>::name(p0, p1);
+<app::App<'a, 'b>>::name(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::after_help
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::after_help":{"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::after_help":{"S":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.after_help(p1);
+app::App::<'a, 'b>::after_help(p0, p1);
+crate::app::App::<'a, 'b>::after_help(p0, p1);
+<app::App<'a, 'b>>::after_help(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::before_help
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::before_help":{"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::before_help":{"S":["args::arg_matcher::ArgMatcher","<T as std::convert::Into<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.before_help(p1);
+app::App::<'a, 'b>::before_help(p0, p1);
+crate::app::App::<'a, 'b>::before_help(p0, p1);
+<app::App<'a, 'b>>::before_help(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::version
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::version":{"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::version":{"S":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.version(p1);
+app::App::<'a, 'b>::version(p0, p1);
+crate::app::App::<'a, 'b>::version(p0, p1);
+<app::App<'a, 'b>>::version(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::long_version
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::long_version":{"S":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::long_version":{"S":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.long_version(p1);
+app::App::<'a, 'b>::long_version(p0, p1);
+crate::app::App::<'a, 'b>::long_version(p0, p1);
+<app::App<'a, 'b>>::long_version(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::usage
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::usage":{"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::usage":{"S":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.usage(p1);
+app::App::<'a, 'b>::usage(p0, p1);
+crate::app::App::<'a, 'b>::usage(p0, p1);
+<app::App<'a, 'b>>::usage(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::help
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::help":{"S":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::help":{"S":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.help(p1);
+app::App::<'a, 'b>::help(p0, p1);
+crate::app::App::<'a, 'b>::help(p0, p1);
+<app::App<'a, 'b>>::help(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::help_short
'a,'b
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"app::App::<'a, 'b>::help_short":{"S":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"app::App::<'a, 'b>::help_short":{"S":["std::borrow::Cow<'_, T>","std::vec::Drain<'a, T, A>","std::borrow::Cow<'_, std::ffi::OsStr>","std::sync::Arc<T>","std::boxed::Box<T, A>","<&T as std::convert::AsRef<U>>","std::vec::IntoIter<T, A>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::ffi::CStr","std::slice::IterMut<'_, T>","std::slice::Iter<'_, T>","std::ffi::CString","std::rc::Rc<T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.help_short(p1);
+app::App::<'a, 'b>::help_short(p0, p1);
+crate::app::App::<'a, 'b>::help_short(p0, p1);
+<app::App<'a, 'b>>::help_short(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::version_short
'a,'b
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"app::App::<'a, 'b>::version_short":{"S":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"app::App::<'a, 'b>::version_short":{"S":["std::boxed::Box<T, A>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::ffi::CString","std::slice::Iter<'_, T>","std::borrow::Cow<'_, T>","std::borrow::Cow<'_, std::ffi::OsStr>","std::sync::Arc<T>","std::vec::IntoIter<T, A>","std::slice::IterMut<'_, T>","<&T as std::convert::AsRef<U>>","std::ffi::CStr","std::vec::Drain<'a, T, A>","std::rc::Rc<T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.version_short(p1);
+app::App::<'a, 'b>::version_short(p0, p1);
+crate::app::App::<'a, 'b>::version_short(p0, p1);
+<app::App<'a, 'b>>::version_short(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::help_message
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::help_message":{"S":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::help_message":{"S":["args::arg_matcher::ArgMatcher","<T as std::convert::Into<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.help_message(p1);
+app::App::<'a, 'b>::help_message(p0, p1);
+crate::app::App::<'a, 'b>::help_message(p0, p1);
+<app::App<'a, 'b>>::help_message(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::version_message
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::version_message":{"S":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::version_message":{"S":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.version_message(p1);
+app::App::<'a, 'b>::version_message(p0, p1);
+crate::app::App::<'a, 'b>::version_message(p0, p1);
+<app::App<'a, 'b>>::version_message(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::template
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::template":{"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::template":{"S":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.template(p1);
+app::App::<'a, 'b>::template(p0, p1);
+crate::app::App::<'a, 'b>::template(p0, p1);
+<app::App<'a, 'b>>::template(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::setting
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::AppSettings
+p0.setting(p1);
+app::App::<'a, 'b>::setting(p0, p1);
+crate::app::App::<'a, 'b>::setting(p0, p1);
+<app::App<'a, 'b>>::setting(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::settings
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // [app::settings::AppSettings]
+p0.settings(p1);
+app::App::<'a, 'b>::settings(p0, p1);
+crate::app::App::<'a, 'b>::settings(p0, p1);
+<app::App<'a, 'b>>::settings(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::global_setting
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::AppSettings
+p0.global_setting(p1);
+app::App::<'a, 'b>::global_setting(p0, p1);
+crate::app::App::<'a, 'b>::global_setting(p0, p1);
+<app::App<'a, 'b>>::global_setting(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::global_settings
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // [app::settings::AppSettings]
+p0.global_settings(p1);
+app::App::<'a, 'b>::global_settings(p0, p1);
+crate::app::App::<'a, 'b>::global_settings(p0, p1);
+<app::App<'a, 'b>>::global_settings(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::unset_setting
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // app::settings::AppSettings
+p0.unset_setting(p1);
+app::App::<'a, 'b>::unset_setting(p0, p1);
+crate::app::App::<'a, 'b>::unset_setting(p0, p1);
+<app::App<'a, 'b>>::unset_setting(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::unset_settings
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // [app::settings::AppSettings]
+p0.unset_settings(p1);
+app::App::<'a, 'b>::unset_settings(p0, p1);
+crate::app::App::<'a, 'b>::unset_settings(p0, p1);
+<app::App<'a, 'b>>::unset_settings(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::set_term_width
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = 0usize; // None+usize
+p0.set_term_width(p1);
+app::App::<'a, 'b>::set_term_width(p0, p1);
+crate::app::App::<'a, 'b>::set_term_width(p0, p1);
+<app::App<'a, 'b>>::set_term_width(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::max_term_width
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = 0usize; // None+usize
+p0.max_term_width(p1);
+app::App::<'a, 'b>::max_term_width(p0, p1);
+crate::app::App::<'a, 'b>::max_term_width(p0, p1);
+<app::App<'a, 'b>>::max_term_width(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::arg
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::arg":{"A":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::arg":{"A":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // A
+p0.arg(p1);
+app::App::<'a, 'b>::arg(p0, p1);
+crate::app::App::<'a, 'b>::arg(p0, p1);
+<app::App<'a, 'b>>::arg(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::args
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // [args::arg::Arg<'a, 'b>]
+p0.args(p1);
+app::App::<'a, 'b>::args(p0, p1);
+crate::app::App::<'a, 'b>::args(p0, p1);
+<app::App<'a, 'b>>::args(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::arg_from_usage
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.arg_from_usage(&p1);
+app::App::<'a, 'b>::arg_from_usage(p0, &p1);
+crate::app::App::<'a, 'b>::arg_from_usage(p0, &p1);
+<app::App<'a, 'b>>::arg_from_usage(p0, &p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::args_from_usage
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.args_from_usage(&p1);
+app::App::<'a, 'b>::args_from_usage(p0, &p1);
+crate::app::App::<'a, 'b>::args_from_usage(p0, &p1);
+<app::App<'a, 'b>>::args_from_usage(p0, &p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::alias
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::alias":{"S":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::alias":{"S":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.alias(p1);
+app::App::<'a, 'b>::alias(p0, p1);
+crate::app::App::<'a, 'b>::alias(p0, p1);
+<app::App<'a, 'b>>::alias(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::aliases
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'b str]
+p0.aliases(p1);
+app::App::<'a, 'b>::aliases(p0, p1);
+crate::app::App::<'a, 'b>::aliases(p0, p1);
+<app::App<'a, 'b>>::aliases(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::visible_alias
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::visible_alias":{"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::visible_alias":{"S":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.visible_alias(p1);
+app::App::<'a, 'b>::visible_alias(p0, p1);
+crate::app::App::<'a, 'b>::visible_alias(p0, p1);
+<app::App<'a, 'b>>::visible_alias(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::visible_aliases
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'b str]
+p0.visible_aliases(p1);
+app::App::<'a, 'b>::visible_aliases(p0, p1);
+crate::app::App::<'a, 'b>::visible_aliases(p0, p1);
+<app::App<'a, 'b>>::visible_aliases(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::group
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::group::ArgGroup<'a>
+p0.group(p1);
+app::App::<'a, 'b>::group(p0, p1);
+crate::app::App::<'a, 'b>::group(p0, p1);
+<app::App<'a, 'b>>::group(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::groups
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // [args::group::ArgGroup<'a>]
+p0.groups(p1);
+app::App::<'a, 'b>::groups(p0, p1);
+crate::app::App::<'a, 'b>::groups(p0, p1);
+<app::App<'a, 'b>>::groups(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::subcommand
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
+p0.subcommand(p1);
+app::App::<'a, 'b>::subcommand(p0, p1);
+crate::app::App::<'a, 'b>::subcommand(p0, p1);
+<app::App<'a, 'b>>::subcommand(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::subcommands
'a,'b
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"app::App::<'a, 'b>::subcommands":{"I":["std::iter::IntoIterator","std::marker::Sized"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["args::arg_matches::Indices","osstringext::OsSplit","args::arg_matches::Values","args::arg_matches::OsValues","<&mut I as std::iter::Iterator>"]},"app::App::<'a, 'b>::subcommands":{"I":["&'a std::os::unix::net::UnixListener","std::collections::HashMap<K, V, S>","std::collections::VecDeque<T, A>","<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>","std::collections::BTreeSet<T, A>","std::collections::HashSet<T, S>","&'a std::path::Path","std::vec::Vec<T, A>","std::collections::BTreeMap<K, V, A>","<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>","&'a std::path::PathBuf","std::collections::BinaryHeap<T>","std::sync::mpsc::Receiver<T>","std::option::Option<T>","std::result::Result<T, E>","std::collections::LinkedList<T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.subcommands(p1);
+app::App::<'a, 'b>::subcommands(p0, p1);
+crate::app::App::<'a, 'b>::subcommands(p0, p1);
+<app::App<'a, 'b>>::subcommands(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::display_order
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = 0usize; // None+usize
+p0.display_order(p1);
+app::App::<'a, 'b>::display_order(p0, p1);
+crate::app::App::<'a, 'b>::display_order(p0, p1);
+<app::App<'a, 'b>>::display_order(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::print_help
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
+p0.print_help();
+app::App::<'a, 'b>::print_help(p0);
+crate::app::App::<'a, 'b>::print_help(p0);
+<app::App<'a, 'b>>::print_help(p0);
-----------------
src/app/mod.rs app::App::<'a, 'b>::print_long_help
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
+p0.print_long_help();
+app::App::<'a, 'b>::print_long_help(p0);
+crate::app::App::<'a, 'b>::print_long_help(p0);
+<app::App<'a, 'b>>::print_long_help(p0);
-----------------
src/app/mod.rs app::App::<'a, 'b>::write_help
'a,'b
deps:{"app::App::<'a, 'b>::write_help":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"app::App::<'a, 'b>::write_help":{"W":["std::os::unix::net::UnixStream","&std::io::Stderr","std::process::ChildStdin","std::io::impls::<impl std::io::Write for &mut W>","std::io::Stdout","std::io::Cursor<&mut [u8]>","std::io::Cursor<std::vec::Vec<u8, A>>","std::io::stdio::StderrRaw","std::sys::unix::stdio::Stdout","std::io::BufWriter<W>","std::io::LineWriter<W>","std::vec::Vec<u8, A>","std::boxed::Box<W>","&std::net::TcpStream","&std::io::Stdout","std::collections::VecDeque<u8, A>","std::io::stdio::StdoutRaw","&'a std::os::unix::net::UnixStream","std::io::Cursor<&mut std::vec::Vec<u8, A>>","&std::fs::File","std::io::Stderr","std::fs::File","std::io::buffered::linewritershim::LineWriterShim<'a, W>","std::io::Cursor<[u8; N]>","std::sys::unix::stdio::Stderr","std::io::BorrowedCursor<'a>","std::io::Sink","std::io::Cursor<std::boxed::Box<[u8], A>>","&std::process::ChildStdin","std::io::StderrLock<'_>","std::net::TcpStream","std::io::StdoutLock<'_>","&std::io::Sink"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // W
+p0.write_help(p1);
+app::App::<'a, 'b>::write_help(p0, p1);
+crate::app::App::<'a, 'b>::write_help(p0, p1);
+<app::App<'a, 'b>>::write_help(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::write_long_help
'a,'b
deps:{"app::App::<'a, 'b>::write_long_help":{"W":["std::io::Write","std::marker::Sized"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"app::App::<'a, 'b>::write_long_help":{"W":["std::net::TcpStream","&std::fs::File","std::io::Cursor<&mut std::vec::Vec<u8, A>>","std::io::StdoutLock<'_>","std::io::Cursor<&mut [u8]>","std::io::stdio::StderrRaw","&std::io::Stderr","std::vec::Vec<u8, A>","std::fs::File","std::io::stdio::StdoutRaw","std::io::buffered::linewritershim::LineWriterShim<'a, W>","&std::process::ChildStdin","std::io::Stdout","&std::io::Sink","std::io::LineWriter<W>","std::io::Cursor<std::vec::Vec<u8, A>>","std::os::unix::net::UnixStream","std::io::Cursor<[u8; N]>","std::boxed::Box<W>","std::io::Cursor<std::boxed::Box<[u8], A>>","std::io::BufWriter<W>","std::collections::VecDeque<u8, A>","std::io::Sink","&'a std::os::unix::net::UnixStream","std::process::ChildStdin","std::io::impls::<impl std::io::Write for &mut W>","&std::io::Stdout","&std::net::TcpStream","std::sys::unix::stdio::Stderr","std::io::BorrowedCursor<'a>","std::io::Stderr","std::sys::unix::stdio::Stdout","std::io::StderrLock<'_>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // W
+p0.write_long_help(p1);
+app::App::<'a, 'b>::write_long_help(p0, p1);
+crate::app::App::<'a, 'b>::write_long_help(p0, p1);
+<app::App<'a, 'b>>::write_long_help(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::write_version
'a,'b
deps:{"app::App::<'a, 'b>::write_version":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"app::App::<'a, 'b>::write_version":{"W":["std::io::BufWriter<W>","&std::net::TcpStream","&std::io::Sink","std::io::BorrowedCursor<'a>","std::io::buffered::linewritershim::LineWriterShim<'a, W>","&std::io::Stdout","std::io::impls::<impl std::io::Write for &mut W>","std::io::Cursor<std::vec::Vec<u8, A>>","std::io::Sink","std::sys::unix::stdio::Stderr","std::io::Cursor<std::boxed::Box<[u8], A>>","std::io::stdio::StderrRaw","&'a std::os::unix::net::UnixStream","std::io::StderrLock<'_>","std::os::unix::net::UnixStream","std::vec::Vec<u8, A>","&std::fs::File","std::process::ChildStdin","std::fs::File","std::sys::unix::stdio::Stdout","std::io::LineWriter<W>","&std::io::Stderr","std::collections::VecDeque<u8, A>","std::io::Stdout","&std::process::ChildStdin","std::net::TcpStream","std::io::Cursor<&mut std::vec::Vec<u8, A>>","std::boxed::Box<W>","std::io::StdoutLock<'_>","std::io::stdio::StdoutRaw","std::io::Stderr","std::io::Cursor<&mut [u8]>","std::io::Cursor<[u8; N]>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // W
+p0.write_version(p1);
+app::App::<'a, 'b>::write_version(p0, p1);
+crate::app::App::<'a, 'b>::write_version(p0, p1);
+<app::App<'a, 'b>>::write_version(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::write_long_version
'a,'b
deps:{"app::App::<'a, 'b>::write_long_version":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"app::App::<'a, 'b>::write_long_version":{"W":["&std::process::ChildStdin","std::io::Cursor<[u8; N]>","std::io::BorrowedCursor<'a>","&'a std::os::unix::net::UnixStream","std::boxed::Box<W>","&std::net::TcpStream","std::collections::VecDeque<u8, A>","std::io::stdio::StderrRaw","std::sys::unix::stdio::Stdout","std::io::Cursor<&mut std::vec::Vec<u8, A>>","std::net::TcpStream","std::io::buffered::linewritershim::LineWriterShim<'a, W>","std::io::Stderr","std::io::Sink","std::io::Cursor<std::vec::Vec<u8, A>>","std::io::impls::<impl std::io::Write for &mut W>","std::sys::unix::stdio::Stderr","&std::fs::File","std::io::Cursor<&mut [u8]>","std::io::LineWriter<W>","std::io::Stdout","std::process::ChildStdin","std::io::Cursor<std::boxed::Box<[u8], A>>","&std::io::Stderr","&std::io::Sink","std::vec::Vec<u8, A>","std::fs::File","std::io::BufWriter<W>","std::io::stdio::StdoutRaw","std::io::StderrLock<'_>","std::os::unix::net::UnixStream","&std::io::Stdout","std::io::StdoutLock<'_>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // W
+p0.write_long_version(p1);
+app::App::<'a, 'b>::write_long_version(p0, p1);
+crate::app::App::<'a, 'b>::write_long_version(p0, p1);
+<app::App<'a, 'b>>::write_long_version(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::gen_completions
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::gen_completions":{"S":["std::convert::Into","std::marker::Sized"],"T":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::gen_completions":{"S":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"],"T":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
let mut p2 = MaybeUninit::uninit().assume_init(); // completions::shell::Shell
let mut p3 = MaybeUninit::uninit().assume_init(); // T
+p0.gen_completions(p1, p2, p3);
+app::App::<'a, 'b>::gen_completions(p0, p1, p2, p3);
+crate::app::App::<'a, 'b>::gen_completions(p0, p1, p2, p3);
+<app::App<'a, 'b>>::gen_completions(p0, p1, p2, p3);
-----------------
src/app/mod.rs app::App::<'a, 'b>::gen_completions_to
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"app::App::<'a, 'b>::gen_completions_to":{"S":["std::marker::Sized","std::convert::Into"],"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"app::App::<'a, 'b>::gen_completions_to":{"S":["args::arg_matcher::ArgMatcher","<T as std::convert::Into<U>>"],"W":["std::io::impls::<impl std::io::Write for &mut W>","std::boxed::Box<W>","std::io::BorrowedCursor<'a>","std::os::unix::net::UnixStream","std::fs::File","std::collections::VecDeque<u8, A>","&std::io::Stdout","std::io::Cursor<std::vec::Vec<u8, A>>","std::io::StdoutLock<'_>","&std::fs::File","std::io::Stdout","std::io::BufWriter<W>","std::net::TcpStream","std::io::stdio::StderrRaw","&std::process::ChildStdin","&std::net::TcpStream","std::io::StderrLock<'_>","std::io::Cursor<std::boxed::Box<[u8], A>>","std::io::buffered::linewritershim::LineWriterShim<'a, W>","&std::io::Stderr","&'a std::os::unix::net::UnixStream","std::sys::unix::stdio::Stderr","std::io::Cursor<&mut std::vec::Vec<u8, A>>","std::io::Sink","std::sys::unix::stdio::Stdout","std::io::Cursor<[u8; N]>","std::io::Cursor<&mut [u8]>","std::vec::Vec<u8, A>","std::io::stdio::StdoutRaw","std::io::Stderr","std::process::ChildStdin","&std::io::Sink","std::io::LineWriter<W>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
let mut p2 = MaybeUninit::uninit().assume_init(); // completions::shell::Shell
let mut p3 = &mut  MaybeUninit::uninit().assume_init(); // W
+p0.gen_completions_to(p1, p2, p3);
+app::App::<'a, 'b>::gen_completions_to(p0, p1, p2, p3);
+crate::app::App::<'a, 'b>::gen_completions_to(p0, p1, p2, p3);
+<app::App<'a, 'b>>::gen_completions_to(p0, p1, p2, p3);
-----------------
src/app/mod.rs app::App::<'a, 'b>::get_matches
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
+p0.get_matches();
+app::App::<'a, 'b>::get_matches(p0);
+crate::app::App::<'a, 'b>::get_matches(p0);
+<app::App<'a, 'b>>::get_matches(p0);
-----------------
src/app/mod.rs app::App::<'a, 'b>::get_matches_safe
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
+p0.get_matches_safe();
+app::App::<'a, 'b>::get_matches_safe(p0);
+crate::app::App::<'a, 'b>::get_matches_safe(p0);
+<app::App<'a, 'b>>::get_matches_safe(p0);
-----------------
src/app/mod.rs app::App::<'a, 'b>::get_matches_from
'a,'b
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"app::App::<'a, 'b>::get_matches_from":{"I":["std::marker::Sized","std::iter::IntoIterator"],"T":["std::convert::Into","std::clone::Clone","std::marker::Sized"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["<&mut I as std::iter::Iterator>","args::arg_matches::Values","args::arg_matches::OsValues","args::arg_matches::Indices","osstringext::OsSplit"]},"app::App::<'a, 'b>::get_matches_from":{"I":["std::result::Result<T, E>","<&'a std::option::Option<T> as std::iter::IntoIterator>","std::collections::HashMap<K, V, S>","std::vec::Vec<T, A>","std::collections::VecDeque<T, A>","std::option::Option<T>","<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>","std::sync::mpsc::Receiver<T>","&'a std::path::Path","std::collections::HashSet<T, S>","std::collections::BinaryHeap<T>","std::collections::BTreeSet<T, A>","&'a std::os::unix::net::UnixListener","std::collections::LinkedList<T>","&'a std::path::PathBuf","std::collections::BTreeMap<K, V, A>"],"T":["std::sync::mpmc::select::Selected","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.get_matches_from(p1);
+app::App::<'a, 'b>::get_matches_from(p0, p1);
+crate::app::App::<'a, 'b>::get_matches_from(p0, p1);
+<app::App<'a, 'b>>::get_matches_from(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::get_matches_from_safe
'a,'b
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"app::App::<'a, 'b>::get_matches_from_safe":{"I":["std::marker::Sized","std::iter::IntoIterator"],"T":["std::marker::Sized","std::convert::Into","std::clone::Clone"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["osstringext::OsSplit","args::arg_matches::Indices","args::arg_matches::OsValues","args::arg_matches::Values","<&mut I as std::iter::Iterator>"]},"app::App::<'a, 'b>::get_matches_from_safe":{"I":["<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>","&'a std::path::Path","<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>","std::sync::mpsc::Receiver<T>","std::collections::BTreeMap<K, V, A>","&'a std::os::unix::net::UnixListener","std::collections::HashSet<T, S>","std::collections::BinaryHeap<T>","std::vec::Vec<T, A>","std::result::Result<T, E>","std::option::Option<T>","std::collections::LinkedList<T>","std::collections::HashMap<K, V, S>","std::collections::BTreeSet<T, A>","std::collections::VecDeque<T, A>","&'a std::path::PathBuf"],"T":["std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.get_matches_from_safe(p1);
+app::App::<'a, 'b>::get_matches_from_safe(p0, p1);
+crate::app::App::<'a, 'b>::get_matches_from_safe(p0, p1);
+<app::App<'a, 'b>>::get_matches_from_safe(p0, p1);
-----------------
src/app/mod.rs app::App::<'a, 'b>::get_matches_from_safe_borrow
'a,'b
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"app::App::<'a, 'b>::get_matches_from_safe_borrow":{"I":["std::iter::IntoIterator","std::marker::Sized"],"T":["std::convert::Into","std::clone::Clone","std::marker::Sized"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["<&mut I as std::iter::Iterator>","args::arg_matches::OsValues","osstringext::OsSplit","args::arg_matches::Values","args::arg_matches::Indices"]},"app::App::<'a, 'b>::get_matches_from_safe_borrow":{"I":["std::collections::HashMap<K, V, S>","&'a std::path::Path","std::vec::Vec<T, A>","&'a std::os::unix::net::UnixListener","std::collections::HashSet<T, S>","std::collections::BTreeSet<T, A>","std::collections::LinkedList<T>","std::collections::VecDeque<T, A>","std::collections::BinaryHeap<T>","<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>","&'a std::path::PathBuf","<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>","std::result::Result<T, E>","std::sync::mpsc::Receiver<T>","std::option::Option<T>","std::collections::BTreeMap<K, V, A>"],"T":["std::sync::mpmc::select::Selected","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.get_matches_from_safe_borrow(p1);
+app::App::<'a, 'b>::get_matches_from_safe_borrow(p0, p1);
+crate::app::App::<'a, 'b>::get_matches_from_safe_borrow(p0, p1);
+<app::App<'a, 'b>>::get_matches_from_safe_borrow(p0, p1);
-----------------
src/app/mod.rs <app::App<'a, 'b> as std::clone::Clone>::clone
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'a, 'b>
+p0.clone();
+<app::App<'a, 'b> as std::clone::Clone>::clone(p0);
+crate::<app::App<'a, 'b> as std::clone::Clone>::clone(p0);
+<app::App<'a, 'b>>::clone(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::name
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.name();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::name(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::name(p0);
+<app::App<'n, 'e>>::name(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::overrides
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.overrides();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::overrides(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::overrides(p0);
+<app::App<'n, 'e>>::overrides(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::requires
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.requires();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::requires(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::requires(p0);
+<app::App<'n, 'e>>::requires(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::blacklist
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.blacklist();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::blacklist(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::blacklist(p0);
+<app::App<'n, 'e>>::blacklist(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::required_unless
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.required_unless();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::required_unless(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::required_unless(p0);
+<app::App<'n, 'e>>::required_unless(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_names
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.val_names();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_names(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_names(p0);
+<app::App<'n, 'e>>::val_names(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::is_set
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.is_set(p1);
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::is_set(p0, p1);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::is_set(p0, p1);
+<app::App<'n, 'e>>::is_set(p0, p1);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_terminator
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.val_terminator();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_terminator(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_terminator(p0);
+<app::App<'n, 'e>>::val_terminator(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::set
'n,'e
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.set(p1);
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::set(p0, p1);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::set(p0, p1);
+<app::App<'n, 'e>>::set(p0, p1);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::has_switch
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.has_switch();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::has_switch(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::has_switch(p0);
+<app::App<'n, 'e>>::has_switch(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::max_vals
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.max_vals();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::max_vals(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::max_vals(p0);
+<app::App<'n, 'e>>::max_vals(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::num_vals
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.num_vals();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::num_vals(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::num_vals(p0);
+<app::App<'n, 'e>>::num_vals(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::possible_vals
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.possible_vals();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::possible_vals(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::possible_vals(p0);
+<app::App<'n, 'e>>::possible_vals(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.validator();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator(p0);
+<app::App<'n, 'e>>::validator(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator_os
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.validator_os();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator_os(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator_os(p0);
+<app::App<'n, 'e>>::validator_os(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::min_vals
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.min_vals();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::min_vals(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::min_vals(p0);
+<app::App<'n, 'e>>::min_vals(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::short
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.short();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::short(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::short(p0);
+<app::App<'n, 'e>>::short(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.long();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long(p0);
+<app::App<'n, 'e>>::long(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_delim
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.val_delim();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_delim(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_delim(p0);
+<app::App<'n, 'e>>::val_delim(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::takes_value
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.takes_value();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::takes_value(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::takes_value(p0);
+<app::App<'n, 'e>>::takes_value(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::help
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.help();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::help(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::help(p0);
+<app::App<'n, 'e>>::help(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long_help
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.long_help();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long_help(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long_help(p0);
+<app::App<'n, 'e>>::long_help(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_val
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.default_val();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_val(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_val(p0);
+<app::App<'n, 'e>>::default_val(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_vals_ifs
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.default_vals_ifs();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_vals_ifs(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_vals_ifs(p0);
+<app::App<'n, 'e>>::default_vals_ifs(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::env
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.env();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::env(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::env(p0);
+<app::App<'n, 'e>>::env(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::longest_filter
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.longest_filter();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::longest_filter(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::longest_filter(p0);
+<app::App<'n, 'e>>::longest_filter(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::aliases
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
+p0.aliases();
+<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::aliases(p0);
+crate::<app::App<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::aliases(p0);
+<app::App<'n, 'e>>::aliases(p0);
-----------------
src/app/mod.rs <app::App<'n, 'e> as std::fmt::Display>::fmt
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::App<'n, 'e>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<app::App<'n, 'e> as std::fmt::Display>::fmt(p0, p1);
+crate::<app::App<'n, 'e> as std::fmt::Display>::fmt(p0, p1);
+<app::App<'n, 'e>>::fmt(p0, p1);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::name
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::name":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::name":{"T":["<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::positional::PosBuilder","args::arg_builder::flag::FlagBuilder","app::App","args::arg_builder::option::OptBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.name();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::name(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::name(p0);
+<&'z T>::name(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::overrides
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::overrides":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::overrides":{"T":["<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::option::OptBuilder","app::App","args::arg_builder::flag::FlagBuilder","args::arg_builder::positional::PosBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.overrides();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::overrides(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::overrides(p0);
+<&'z T>::overrides(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::aliases
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::aliases":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::aliases":{"T":["args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>","app::App","args::arg_builder::positional::PosBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.aliases();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::aliases(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::aliases(p0);
+<&'z T>::aliases(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::requires
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::requires":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::requires":{"T":["app::App","args::arg_builder::flag::FlagBuilder","args::arg_builder::positional::PosBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::option::OptBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.requires();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::requires(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::requires(p0);
+<&'z T>::requires(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::blacklist
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::blacklist":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::blacklist":{"T":["app::App","args::arg_builder::flag::FlagBuilder","args::arg_builder::option::OptBuilder","args::arg_builder::positional::PosBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.blacklist();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::blacklist(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::blacklist(p0);
+<&'z T>::blacklist(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::required_unless
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::required_unless":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::required_unless":{"T":["app::App","args::arg_builder::option::OptBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::flag::FlagBuilder","args::arg_builder::positional::PosBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.required_unless();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::required_unless(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::required_unless(p0);
+<&'z T>::required_unless(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::is_set
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::is_set":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::is_set":{"T":["args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::flag::FlagBuilder","app::App"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.is_set(p1);
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::is_set(p0, p1);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::is_set(p0, p1);
+<&'z T>::is_set(p0, p1);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::set
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::set":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::set":{"T":["args::arg_builder::positional::PosBuilder","args::arg_builder::flag::FlagBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>","app::App","args::arg_builder::option::OptBuilder"]}}
let mut p0 = &mut  &mut MaybeUninit::uninit().assume_init(); // T
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.set(p1);
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::set(p0, p1);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::set(p0, p1);
+<&'z T>::set(p0, p1);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::has_switch
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::has_switch":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::has_switch":{"T":["args::arg_builder::positional::PosBuilder","app::App","<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.has_switch();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::has_switch(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::has_switch(p0);
+<&'z T>::has_switch(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::max_vals
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::max_vals":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::max_vals":{"T":["args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>","app::App","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.max_vals();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::max_vals(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::max_vals(p0);
+<&'z T>::max_vals(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::min_vals
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::min_vals":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::min_vals":{"T":["args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder","app::App","<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::positional::PosBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.min_vals();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::min_vals(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::min_vals(p0);
+<&'z T>::min_vals(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::num_vals
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::num_vals":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::num_vals":{"T":["args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder","app::App","<&'z T as args::any_arg::AnyArg<'n, 'e>>"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.num_vals();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::num_vals(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::num_vals(p0);
+<&'z T>::num_vals(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::possible_vals
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::possible_vals":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::possible_vals":{"T":["app::App","args::arg_builder::flag::FlagBuilder","args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.possible_vals();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::possible_vals(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::possible_vals(p0);
+<&'z T>::possible_vals(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::validator
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::validator":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::validator":{"T":["args::arg_builder::flag::FlagBuilder","args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>","app::App"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.validator();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::validator(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::validator(p0);
+<&'z T>::validator(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::validator_os
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::validator_os":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::validator_os":{"T":["<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::flag::FlagBuilder","args::arg_builder::positional::PosBuilder","app::App","args::arg_builder::option::OptBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.validator_os();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::validator_os(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::validator_os(p0);
+<&'z T>::validator_os(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::short
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::short":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::short":{"T":["args::arg_builder::flag::FlagBuilder","args::arg_builder::option::OptBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>","app::App","args::arg_builder::positional::PosBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.short();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::short(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::short(p0);
+<&'z T>::short(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::long
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::long":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::long":{"T":["<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::flag::FlagBuilder","args::arg_builder::option::OptBuilder","args::arg_builder::positional::PosBuilder","app::App"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.long();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::long(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::long(p0);
+<&'z T>::long(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::val_delim
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::val_delim":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::val_delim":{"T":["args::arg_builder::positional::PosBuilder","app::App","<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.val_delim();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::val_delim(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::val_delim(p0);
+<&'z T>::val_delim(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::takes_value
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::takes_value":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::takes_value":{"T":["args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder","app::App","<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::positional::PosBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.takes_value();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::takes_value(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::takes_value(p0);
+<&'z T>::takes_value(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::val_names
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::val_names":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::val_names":{"T":["args::arg_builder::positional::PosBuilder","app::App","args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.val_names();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::val_names(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::val_names(p0);
+<&'z T>::val_names(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::help
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::help":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::help":{"T":["<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::option::OptBuilder","args::arg_builder::positional::PosBuilder","app::App","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.help();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::help(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::help(p0);
+<&'z T>::help(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::long_help
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::long_help":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::long_help":{"T":["args::arg_builder::flag::FlagBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>","app::App","args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.long_help();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::long_help(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::long_help(p0);
+<&'z T>::long_help(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::default_val
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::default_val":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::default_val":{"T":["<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::option::OptBuilder","app::App","args::arg_builder::positional::PosBuilder","args::arg_builder::flag::FlagBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.default_val();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::default_val(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::default_val(p0);
+<&'z T>::default_val(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::default_vals_ifs
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::default_vals_ifs":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::default_vals_ifs":{"T":["args::arg_builder::option::OptBuilder","app::App","args::arg_builder::flag::FlagBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::positional::PosBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.default_vals_ifs();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::default_vals_ifs(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::default_vals_ifs(p0);
+<&'z T>::default_vals_ifs(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::env
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::env":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::env":{"T":["args::arg_builder::positional::PosBuilder","args::arg_builder::flag::FlagBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>","app::App","args::arg_builder::option::OptBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.env();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::env(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::env(p0);
+<&'z T>::env(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::longest_filter
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::longest_filter":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::longest_filter":{"T":["args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>","app::App","args::arg_builder::positional::PosBuilder"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.longest_filter();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::longest_filter(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::longest_filter(p0);
+<&'z T>::longest_filter(p0);
-----------------
src/args/any_arg.rs <&'z T as args::any_arg::AnyArg<'n, 'e>>::val_terminator
'n,'e,'z
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::val_terminator":{"T":["args::any_arg::AnyArg"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"<&'z T as args::any_arg::AnyArg<'n, 'e>>::val_terminator":{"T":["args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::positional::PosBuilder","app::App"]}}
let mut p0 = & & MaybeUninit::uninit().assume_init(); // T
+p0.val_terminator();
+<&'z T as args::any_arg::AnyArg<'n, 'e>>::val_terminator(p0);
+crate::<&'z T as args::any_arg::AnyArg<'n, 'e>>::val_terminator(p0);
+<&'z T>::val_terminator(p0);
-----------------
src/args/arg.rs <args::arg::Arg<'a, 'b> as std::default::Default>::default
'a,'b
deps:{}
candidates:{}
+<args::arg::Arg<'a, 'b> as std::default::Default>::default();
+crate::<args::arg::Arg<'a, 'b> as std::default::Default>::default();
+<args::arg::Arg<'a, 'b>>::default();
-----------------
src/args/arg.rs <args::arg::Arg<'a, 'b> as std::clone::Clone>::clone
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
+p0.clone();
+<args::arg::Arg<'a, 'b> as std::clone::Clone>::clone(p0);
+crate::<args::arg::Arg<'a, 'b> as std::clone::Clone>::clone(p0);
+<args::arg::Arg<'a, 'b>>::clone(p0);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::with_name
'a,'b
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+args::arg::Arg::<'a, 'b>::with_name(&p0);
+crate::args::arg::Arg::<'a, 'b>::with_name(&p0);
+<args::arg::Arg<'a, 'b>>::with_name(&p0);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::from_usage
'a,'b
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+args::arg::Arg::<'a, 'b>::from_usage(&p0);
+crate::args::arg::Arg::<'a, 'b>::from_usage(&p0);
+<args::arg::Arg<'a, 'b>>::from_usage(&p0);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::short
'a,'b
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg::Arg::<'a, 'b>::short":{"S":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg::Arg::<'a, 'b>::short":{"S":["std::rc::Rc<T>","std::slice::IterMut<'_, T>","<&T as std::convert::AsRef<U>>","std::ffi::CString","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::borrow::Cow<'_, std::ffi::OsStr>","std::vec::IntoIter<T, A>","<&mut T as std::convert::AsRef<U>>","std::boxed::Box<T, A>","std::slice::Iter<'_, T>","std::borrow::Cow<'_, T>","std::ffi::CStr","std::vec::Drain<'a, T, A>","std::sync::Arc<T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.short(p1);
+args::arg::Arg::<'a, 'b>::short(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::short(p0, p1);
+<args::arg::Arg<'a, 'b>>::short(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::long
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.long(&p1);
+args::arg::Arg::<'a, 'b>::long(p0, &p1);
+crate::args::arg::Arg::<'a, 'b>::long(p0, &p1);
+<args::arg::Arg<'a, 'b>>::long(p0, &p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::alias
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"args::arg::Arg::<'a, 'b>::alias":{"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"args::arg::Arg::<'a, 'b>::alias":{"S":["args::arg_matcher::ArgMatcher","<T as std::convert::Into<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.alias(p1);
+args::arg::Arg::<'a, 'b>::alias(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::alias(p0, p1);
+<args::arg::Arg<'a, 'b>>::alias(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::aliases
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'b str]
+p0.aliases(p1);
+args::arg::Arg::<'a, 'b>::aliases(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::aliases(p0, p1);
+<args::arg::Arg<'a, 'b>>::aliases(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::visible_alias
'a,'b
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"args::arg::Arg::<'a, 'b>::visible_alias":{"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"args::arg::Arg::<'a, 'b>::visible_alias":{"S":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.visible_alias(p1);
+args::arg::Arg::<'a, 'b>::visible_alias(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::visible_alias(p0, p1);
+<args::arg::Arg<'a, 'b>>::visible_alias(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::visible_aliases
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'b str]
+p0.visible_aliases(p1);
+args::arg::Arg::<'a, 'b>::visible_aliases(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::visible_aliases(p0, p1);
+<args::arg::Arg<'a, 'b>>::visible_aliases(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::help
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.help(&p1);
+args::arg::Arg::<'a, 'b>::help(p0, &p1);
+crate::args::arg::Arg::<'a, 'b>::help(p0, &p1);
+<args::arg::Arg<'a, 'b>>::help(p0, &p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::long_help
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.long_help(&p1);
+args::arg::Arg::<'a, 'b>::long_help(p0, &p1);
+crate::args::arg::Arg::<'a, 'b>::long_help(p0, &p1);
+<args::arg::Arg<'a, 'b>>::long_help(p0, &p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::last
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.last(p1);
+args::arg::Arg::<'a, 'b>::last(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::last(p0, p1);
+<args::arg::Arg<'a, 'b>>::last(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::required
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.required(p1);
+args::arg::Arg::<'a, 'b>::required(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::required(p0, p1);
+<args::arg::Arg<'a, 'b>>::required(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::require_equals
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.require_equals(p1);
+args::arg::Arg::<'a, 'b>::require_equals(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::require_equals(p0, p1);
+<args::arg::Arg<'a, 'b>>::require_equals(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::allow_hyphen_values
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.allow_hyphen_values(p1);
+args::arg::Arg::<'a, 'b>::allow_hyphen_values(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::allow_hyphen_values(p0, p1);
+<args::arg::Arg<'a, 'b>>::allow_hyphen_values(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::required_unless
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.required_unless(&p1);
+args::arg::Arg::<'a, 'b>::required_unless(p0, &p1);
+crate::args::arg::Arg::<'a, 'b>::required_unless(p0, &p1);
+<args::arg::Arg<'a, 'b>>::required_unless(p0, &p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::required_unless_all
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'a str]
+p0.required_unless_all(p1);
+args::arg::Arg::<'a, 'b>::required_unless_all(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::required_unless_all(p0, p1);
+<args::arg::Arg<'a, 'b>>::required_unless_all(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::required_unless_one
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'a str]
+p0.required_unless_one(p1);
+args::arg::Arg::<'a, 'b>::required_unless_one(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::required_unless_one(p0, p1);
+<args::arg::Arg<'a, 'b>>::required_unless_one(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::conflicts_with
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.conflicts_with(&p1);
+args::arg::Arg::<'a, 'b>::conflicts_with(p0, &p1);
+crate::args::arg::Arg::<'a, 'b>::conflicts_with(p0, &p1);
+<args::arg::Arg<'a, 'b>>::conflicts_with(p0, &p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::conflicts_with_all
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'a str]
+p0.conflicts_with_all(p1);
+args::arg::Arg::<'a, 'b>::conflicts_with_all(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::conflicts_with_all(p0, p1);
+<args::arg::Arg<'a, 'b>>::conflicts_with_all(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::overrides_with
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.overrides_with(&p1);
+args::arg::Arg::<'a, 'b>::overrides_with(p0, &p1);
+crate::args::arg::Arg::<'a, 'b>::overrides_with(p0, &p1);
+<args::arg::Arg<'a, 'b>>::overrides_with(p0, &p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::overrides_with_all
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'a str]
+p0.overrides_with_all(p1);
+args::arg::Arg::<'a, 'b>::overrides_with_all(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::overrides_with_all(p0, p1);
+<args::arg::Arg<'a, 'b>>::overrides_with_all(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::requires
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.requires(&p1);
+args::arg::Arg::<'a, 'b>::requires(p0, &p1);
+crate::args::arg::Arg::<'a, 'b>::requires(p0, &p1);
+<args::arg::Arg<'a, 'b>>::requires(p0, &p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::requires_if
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
let mut p2 = "sample"; // None+&str
+p0.requires_if(&p1, &p2);
+args::arg::Arg::<'a, 'b>::requires_if(p0, &p1, &p2);
+crate::args::arg::Arg::<'a, 'b>::requires_if(p0, &p1, &p2);
+<args::arg::Arg<'a, 'b>>::requires_if(p0, &p1, &p2);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::requires_ifs
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // [(&'b str, &'a str)]
+p0.requires_ifs(p1);
+args::arg::Arg::<'a, 'b>::requires_ifs(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::requires_ifs(p0, p1);
+<args::arg::Arg<'a, 'b>>::requires_ifs(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::required_if
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
let mut p2 = "sample"; // None+&str
+p0.required_if(&p1, &p2);
+args::arg::Arg::<'a, 'b>::required_if(p0, &p1, &p2);
+crate::args::arg::Arg::<'a, 'b>::required_if(p0, &p1, &p2);
+<args::arg::Arg<'a, 'b>>::required_if(p0, &p1, &p2);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::required_ifs
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // [(&'a str, &'b str)]
+p0.required_ifs(p1);
+args::arg::Arg::<'a, 'b>::required_ifs(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::required_ifs(p0, p1);
+<args::arg::Arg<'a, 'b>>::required_ifs(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::requires_all
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'a str]
+p0.requires_all(p1);
+args::arg::Arg::<'a, 'b>::requires_all(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::requires_all(p0, p1);
+<args::arg::Arg<'a, 'b>>::requires_all(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::takes_value
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.takes_value(p1);
+args::arg::Arg::<'a, 'b>::takes_value(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::takes_value(p0, p1);
+<args::arg::Arg<'a, 'b>>::takes_value(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::hide_possible_values
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.hide_possible_values(p1);
+args::arg::Arg::<'a, 'b>::hide_possible_values(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::hide_possible_values(p0, p1);
+<args::arg::Arg<'a, 'b>>::hide_possible_values(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::hide_default_value
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.hide_default_value(p1);
+args::arg::Arg::<'a, 'b>::hide_default_value(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::hide_default_value(p0, p1);
+<args::arg::Arg<'a, 'b>>::hide_default_value(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::index
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = 0u64; // None+u64
+p0.index(p1);
+args::arg::Arg::<'a, 'b>::index(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::index(p0, p1);
+<args::arg::Arg<'a, 'b>>::index(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::multiple
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.multiple(p1);
+args::arg::Arg::<'a, 'b>::multiple(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::multiple(p0, p1);
+<args::arg::Arg<'a, 'b>>::multiple(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::value_terminator
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.value_terminator(&p1);
+args::arg::Arg::<'a, 'b>::value_terminator(p0, &p1);
+crate::args::arg::Arg::<'a, 'b>::value_terminator(p0, &p1);
+<args::arg::Arg<'a, 'b>>::value_terminator(p0, &p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::global
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.global(p1);
+args::arg::Arg::<'a, 'b>::global(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::global(p0, p1);
+<args::arg::Arg<'a, 'b>>::global(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::empty_values
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.empty_values(p1);
+args::arg::Arg::<'a, 'b>::empty_values(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::empty_values(p0, p1);
+<args::arg::Arg<'a, 'b>>::empty_values(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::hidden
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.hidden(p1);
+args::arg::Arg::<'a, 'b>::hidden(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::hidden(p0, p1);
+<args::arg::Arg<'a, 'b>>::hidden(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::possible_values
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'b str]
+p0.possible_values(p1);
+args::arg::Arg::<'a, 'b>::possible_values(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::possible_values(p0, p1);
+<args::arg::Arg<'a, 'b>>::possible_values(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::possible_value
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.possible_value(&p1);
+args::arg::Arg::<'a, 'b>::possible_value(p0, &p1);
+crate::args::arg::Arg::<'a, 'b>::possible_value(p0, &p1);
+<args::arg::Arg<'a, 'b>>::possible_value(p0, &p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::case_insensitive
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.case_insensitive(p1);
+args::arg::Arg::<'a, 'b>::case_insensitive(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::case_insensitive(p0, p1);
+<args::arg::Arg<'a, 'b>>::case_insensitive(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::group
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.group(&p1);
+args::arg::Arg::<'a, 'b>::group(p0, &p1);
+crate::args::arg::Arg::<'a, 'b>::group(p0, &p1);
+<args::arg::Arg<'a, 'b>>::group(p0, &p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::groups
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'a str]
+p0.groups(p1);
+args::arg::Arg::<'a, 'b>::groups(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::groups(p0, p1);
+<args::arg::Arg<'a, 'b>>::groups(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::number_of_values
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = 0u64; // None+u64
+p0.number_of_values(p1);
+args::arg::Arg::<'a, 'b>::number_of_values(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::number_of_values(p0, p1);
+<args::arg::Arg<'a, 'b>>::number_of_values(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::validator
'a,'b
deps:{"args::arg::Arg::<'a, 'b>::validator":{"F":["std::marker::Sized","std::ops::Fn"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
candidates:{"args::arg::Arg::<'a, 'b>::validator":{"F":["bitflags::core::str::IsWhitespace","bitflags::core::slice::ascii::EscapeByte","bitflags::core::str::UnsafeBytesToStr","bitflags::core::str::CharEscapeDefault","bitflags::core::str::CharEscapeUnicode","std::boxed::Box<F, A>","bitflags::core::str::CharEscapeDebugContinue","bitflags::core::str::IsAsciiWhitespace","bitflags::core::str::IsNotEmpty","bitflags::core::str::LinesAnyMap","bitflags::core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::Fn<A> for &F>"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.validator(p1);
+args::arg::Arg::<'a, 'b>::validator(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::validator(p0, p1);
+<args::arg::Arg<'a, 'b>>::validator(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::validator_os
'a,'b
deps:{"args::arg::Arg::<'a, 'b>::validator_os":{"F":["std::marker::Sized","std::ops::Fn"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
candidates:{"args::arg::Arg::<'a, 'b>::validator_os":{"F":["bitflags::core::str::IsWhitespace","bitflags::core::str::CharEscapeDefault","bitflags::core::slice::ascii::EscapeByte","bitflags::core::str::BytesIsNotEmpty","bitflags::core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","std::boxed::Box<F, A>","bitflags::core::str::IsNotEmpty","bitflags::core::str::CharEscapeDebugContinue","bitflags::core::str::UnsafeBytesToStr","bitflags::core::str::IsAsciiWhitespace","bitflags::core::str::LinesAnyMap"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.validator_os(p1);
+args::arg::Arg::<'a, 'b>::validator_os(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::validator_os(p0, p1);
+<args::arg::Arg<'a, 'b>>::validator_os(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::max_values
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = 0u64; // None+u64
+p0.max_values(p1);
+args::arg::Arg::<'a, 'b>::max_values(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::max_values(p0, p1);
+<args::arg::Arg<'a, 'b>>::max_values(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::min_values
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = 0u64; // None+u64
+p0.min_values(p1);
+args::arg::Arg::<'a, 'b>::min_values(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::min_values(p0, p1);
+<args::arg::Arg<'a, 'b>>::min_values(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::use_delimiter
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.use_delimiter(p1);
+args::arg::Arg::<'a, 'b>::use_delimiter(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::use_delimiter(p0, p1);
+<args::arg::Arg<'a, 'b>>::use_delimiter(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::require_delimiter
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.require_delimiter(p1);
+args::arg::Arg::<'a, 'b>::require_delimiter(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::require_delimiter(p0, p1);
+<args::arg::Arg<'a, 'b>>::require_delimiter(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::value_delimiter
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.value_delimiter(&p1);
+args::arg::Arg::<'a, 'b>::value_delimiter(p0, &p1);
+crate::args::arg::Arg::<'a, 'b>::value_delimiter(p0, &p1);
+<args::arg::Arg<'a, 'b>>::value_delimiter(p0, &p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::value_names
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'b str]
+p0.value_names(p1);
+args::arg::Arg::<'a, 'b>::value_names(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::value_names(p0, p1);
+<args::arg::Arg<'a, 'b>>::value_names(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::value_name
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.value_name(&p1);
+args::arg::Arg::<'a, 'b>::value_name(p0, &p1);
+crate::args::arg::Arg::<'a, 'b>::value_name(p0, &p1);
+<args::arg::Arg<'a, 'b>>::value_name(p0, &p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::default_value
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.default_value(&p1);
+args::arg::Arg::<'a, 'b>::default_value(p0, &p1);
+crate::args::arg::Arg::<'a, 'b>::default_value(p0, &p1);
+<args::arg::Arg<'a, 'b>>::default_value(p0, &p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::default_value_os
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
+p0.default_value_os(p1);
+args::arg::Arg::<'a, 'b>::default_value_os(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::default_value_os(p0, p1);
+<args::arg::Arg<'a, 'b>>::default_value_os(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::default_value_if
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // std::option::Option<&'b str>
let mut p3 = "sample"; // None+&str
+p0.default_value_if(&p1, p2, &p3);
+args::arg::Arg::<'a, 'b>::default_value_if(p0, &p1, p2, &p3);
+crate::args::arg::Arg::<'a, 'b>::default_value_if(p0, &p1, p2, &p3);
+<args::arg::Arg<'a, 'b>>::default_value_if(p0, &p1, p2, &p3);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::default_value_if_os
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // std::option::Option<&'b std::ffi::OsStr>
let mut p3 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
+p0.default_value_if_os(&p1, p2, p3);
+args::arg::Arg::<'a, 'b>::default_value_if_os(p0, &p1, p2, p3);
+crate::args::arg::Arg::<'a, 'b>::default_value_if_os(p0, &p1, p2, p3);
+<args::arg::Arg<'a, 'b>>::default_value_if_os(p0, &p1, p2, p3);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::default_value_ifs
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // [(&'a str, std::option::Option<&'b str>, &'b str)]
+p0.default_value_ifs(p1);
+args::arg::Arg::<'a, 'b>::default_value_ifs(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::default_value_ifs(p0, p1);
+<args::arg::Arg<'a, 'b>>::default_value_ifs(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::default_value_ifs_os
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // [(&'a str, std::option::Option<&'b std::ffi::OsStr>, &'b std::ffi::OsStr)]
+p0.default_value_ifs_os(p1);
+args::arg::Arg::<'a, 'b>::default_value_ifs_os(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::default_value_ifs_os(p0, p1);
+<args::arg::Arg<'a, 'b>>::default_value_ifs_os(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::env
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.env(&p1);
+args::arg::Arg::<'a, 'b>::env(p0, &p1);
+crate::args::arg::Arg::<'a, 'b>::env(p0, &p1);
+<args::arg::Arg<'a, 'b>>::env(p0, &p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::env_os
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
+p0.env_os(p1);
+args::arg::Arg::<'a, 'b>::env_os(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::env_os(p0, p1);
+<args::arg::Arg<'a, 'b>>::env_os(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::hide_env_values
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.hide_env_values(p1);
+args::arg::Arg::<'a, 'b>::hide_env_values(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::hide_env_values(p0, p1);
+<args::arg::Arg<'a, 'b>>::hide_env_values(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::next_line_help
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.next_line_help(p1);
+args::arg::Arg::<'a, 'b>::next_line_help(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::next_line_help(p0, p1);
+<args::arg::Arg<'a, 'b>>::next_line_help(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::display_order
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = 0usize; // None+usize
+p0.display_order(p1);
+args::arg::Arg::<'a, 'b>::display_order(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::display_order(p0, p1);
+<args::arg::Arg<'a, 'b>>::display_order(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::raw
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.raw(p1);
+args::arg::Arg::<'a, 'b>::raw(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::raw(p0, p1);
+<args::arg::Arg<'a, 'b>>::raw(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::hidden_short_help
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.hidden_short_help(p1);
+args::arg::Arg::<'a, 'b>::hidden_short_help(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::hidden_short_help(p0, p1);
+<args::arg::Arg<'a, 'b>>::hidden_short_help(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::hidden_long_help
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = true; // None+bool
+p0.hidden_long_help(p1);
+args::arg::Arg::<'a, 'b>::hidden_long_help(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::hidden_long_help(p0, p1);
+<args::arg::Arg<'a, 'b>>::hidden_long_help(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::is_set
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.is_set(p1);
+args::arg::Arg::<'a, 'b>::is_set(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::is_set(p0, p1);
+<args::arg::Arg<'a, 'b>>::is_set(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::set
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.set(p1);
+args::arg::Arg::<'a, 'b>::set(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::set(p0, p1);
+<args::arg::Arg<'a, 'b>>::set(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::unset
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.unset(p1);
+args::arg::Arg::<'a, 'b>::unset(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::unset(p0, p1);
+<args::arg::Arg<'a, 'b>>::unset(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::setb
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.setb(p1);
+args::arg::Arg::<'a, 'b>::setb(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::setb(p0, p1);
+<args::arg::Arg<'a, 'b>>::setb(p0, p1);
-----------------
src/args/arg.rs args::arg::Arg::<'a, 'b>::unsetb
'a,'b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.unsetb(p1);
+args::arg::Arg::<'a, 'b>::unsetb(p0, p1);
+crate::args::arg::Arg::<'a, 'b>::unsetb(p0, p1);
+<args::arg::Arg<'a, 'b>>::unsetb(p0, p1);
-----------------
src/args/arg.rs <args::arg::Arg<'a, 'b> as std::convert::From<&'z args::arg::Arg<'a, 'b>>>::from
'a,'b,'z
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
+<args::arg::Arg<'a, 'b> as std::convert::From<&'z args::arg::Arg<'a, 'b>>>::from(p0);
+crate::<args::arg::Arg<'a, 'b> as std::convert::From<&'z args::arg::Arg<'a, 'b>>>::from(p0);
+<args::arg::Arg<'a, 'b>>::from(p0);
-----------------
src/args/arg.rs <args::arg::Arg<'n, 'e> as std::cmp::PartialEq>::eq
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg::Arg<'n, 'e>
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::arg::Arg<'n, 'e>
+p0.eq(p1);
+<args::arg::Arg<'n, 'e> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<args::arg::Arg<'n, 'e> as std::cmp::PartialEq>::eq(p0, p1);
+<args::arg::Arg<'n, 'e>>::eq(p0, p1);
-----------------
src/args/arg_builder/base.rs <args::arg_builder::base::Base<'a, 'b> as std::fmt::Debug>::fmt
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::base::Base<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<args::arg_builder::base::Base<'a, 'b> as std::fmt::Debug>::fmt(p0, p1);
+crate::<args::arg_builder::base::Base<'a, 'b> as std::fmt::Debug>::fmt(p0, p1);
+<args::arg_builder::base::Base<'a, 'b>>::fmt(p0, p1);
-----------------
src/args/arg_builder/base.rs <args::arg_builder::base::Base<'a, 'b> as std::clone::Clone>::clone
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::base::Base<'a, 'b>
+p0.clone();
+<args::arg_builder::base::Base<'a, 'b> as std::clone::Clone>::clone(p0);
+crate::<args::arg_builder::base::Base<'a, 'b> as std::clone::Clone>::clone(p0);
+<args::arg_builder::base::Base<'a, 'b>>::clone(p0);
-----------------
src/args/arg_builder/base.rs <args::arg_builder::base::Base<'a, 'b> as std::default::Default>::default
'a,'b
deps:{}
candidates:{}
+<args::arg_builder::base::Base<'a, 'b> as std::default::Default>::default();
+crate::<args::arg_builder::base::Base<'a, 'b> as std::default::Default>::default();
+<args::arg_builder::base::Base<'a, 'b>>::default();
-----------------
src/args/arg_builder/base.rs args::arg_builder::base::Base::<'n, 'e>::new
'n,'e
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+args::arg_builder::base::Base::<'n, 'e>::new(&p0);
+crate::args::arg_builder::base::Base::<'n, 'e>::new(&p0);
+<args::arg_builder::base::Base<'n, 'e>>::new(&p0);
-----------------
src/args/arg_builder/base.rs args::arg_builder::base::Base::<'n, 'e>::set
'n,'e
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_builder::base::Base<'n, 'e>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.set(p1);
+args::arg_builder::base::Base::<'n, 'e>::set(p0, p1);
+crate::args::arg_builder::base::Base::<'n, 'e>::set(p0, p1);
+<args::arg_builder::base::Base<'n, 'e>>::set(p0, p1);
-----------------
src/args/arg_builder/base.rs args::arg_builder::base::Base::<'n, 'e>::unset
'n,'e
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_builder::base::Base<'n, 'e>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.unset(p1);
+args::arg_builder::base::Base::<'n, 'e>::unset(p0, p1);
+crate::args::arg_builder::base::Base::<'n, 'e>::unset(p0, p1);
+<args::arg_builder::base::Base<'n, 'e>>::unset(p0, p1);
-----------------
src/args/arg_builder/base.rs args::arg_builder::base::Base::<'n, 'e>::is_set
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::base::Base<'n, 'e>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.is_set(p1);
+args::arg_builder::base::Base::<'n, 'e>::is_set(p0, p1);
+crate::args::arg_builder::base::Base::<'n, 'e>::is_set(p0, p1);
+<args::arg_builder::base::Base<'n, 'e>>::is_set(p0, p1);
-----------------
src/args/arg_builder/base.rs <args::arg_builder::base::Base<'n, 'e> as std::convert::From<&'z args::arg::Arg<'n, 'e>>>::from
'n,'e,'z
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg::Arg<'n, 'e>
+<args::arg_builder::base::Base<'n, 'e> as std::convert::From<&'z args::arg::Arg<'n, 'e>>>::from(p0);
+crate::<args::arg_builder::base::Base<'n, 'e> as std::convert::From<&'z args::arg::Arg<'n, 'e>>>::from(p0);
+<args::arg_builder::base::Base<'n, 'e>>::from(p0);
-----------------
src/args/arg_builder/base.rs <args::arg_builder::base::Base<'n, 'e> as std::cmp::PartialEq>::eq
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::base::Base<'n, 'e>
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::base::Base<'n, 'e>
+p0.eq(p1);
+<args::arg_builder::base::Base<'n, 'e> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<args::arg_builder::base::Base<'n, 'e> as std::cmp::PartialEq>::eq(p0, p1);
+<args::arg_builder::base::Base<'n, 'e>>::eq(p0, p1);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as std::default::Default>::default
'n,'e
deps:{}
candidates:{}
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as std::default::Default>::default();
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as std::default::Default>::default();
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::default();
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as std::clone::Clone>::clone
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.clone();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as std::clone::Clone>::clone(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as std::clone::Clone>::clone(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::clone(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as std::fmt::Debug>::fmt
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as std::fmt::Debug>::fmt(p0, p1);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as std::fmt::Debug>::fmt(p0, p1);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::fmt(p0, p1);
-----------------
src/args/arg_builder/flag.rs args::arg_builder::flag::FlagBuilder::<'n, 'e>::new
'n,'e
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+args::arg_builder::flag::FlagBuilder::<'n, 'e>::new(&p0);
+crate::args::arg_builder::flag::FlagBuilder::<'n, 'e>::new(&p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::new(&p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'a, 'b> as std::convert::From<&'z args::arg::Arg<'a, 'b>>>::from
'a,'b,'z
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
+<args::arg_builder::flag::FlagBuilder<'a, 'b> as std::convert::From<&'z args::arg::Arg<'a, 'b>>>::from(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'a, 'b> as std::convert::From<&'z args::arg::Arg<'a, 'b>>>::from(p0);
+<args::arg_builder::flag::FlagBuilder<'a, 'b>>::from(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'a, 'b> as std::convert::From<args::arg::Arg<'a, 'b>>>::from
'a,'b
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'b>
+<args::arg_builder::flag::FlagBuilder<'a, 'b> as std::convert::From<args::arg::Arg<'a, 'b>>>::from(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'a, 'b> as std::convert::From<args::arg::Arg<'a, 'b>>>::from(p0);
+<args::arg_builder::flag::FlagBuilder<'a, 'b>>::from(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as std::fmt::Display>::fmt
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as std::fmt::Display>::fmt(p0, p1);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as std::fmt::Display>::fmt(p0, p1);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::fmt(p0, p1);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::name
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.name();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::name(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::name(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::name(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::overrides
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.overrides();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::overrides(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::overrides(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::overrides(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::requires
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.requires();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::requires(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::requires(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::requires(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::blacklist
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.blacklist();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::blacklist(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::blacklist(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::blacklist(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::required_unless
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.required_unless();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::required_unless(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::required_unless(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::required_unless(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::is_set
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.is_set(p1);
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::is_set(p0, p1);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::is_set(p0, p1);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::is_set(p0, p1);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::has_switch
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.has_switch();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::has_switch(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::has_switch(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::has_switch(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::takes_value
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.takes_value();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::takes_value(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::takes_value(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::takes_value(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::set
'n,'e
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.set(p1);
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::set(p0, p1);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::set(p0, p1);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::set(p0, p1);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::max_vals
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.max_vals();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::max_vals(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::max_vals(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::max_vals(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_names
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.val_names();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_names(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_names(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::val_names(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::num_vals
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.num_vals();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::num_vals(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::num_vals(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::num_vals(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::possible_vals
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.possible_vals();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::possible_vals(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::possible_vals(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::possible_vals(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.validator();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::validator(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator_os
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.validator_os();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator_os(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator_os(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::validator_os(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::min_vals
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.min_vals();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::min_vals(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::min_vals(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::min_vals(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::short
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.short();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::short(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::short(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::short(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.long();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::long(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_delim
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.val_delim();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_delim(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_delim(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::val_delim(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::help
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.help();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::help(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::help(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::help(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long_help
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.long_help();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long_help(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long_help(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::long_help(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_terminator
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.val_terminator();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_terminator(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_terminator(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::val_terminator(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_val
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.default_val();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_val(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_val(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::default_val(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_vals_ifs
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.default_vals_ifs();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_vals_ifs(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_vals_ifs(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::default_vals_ifs(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::env
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.env();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::env(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::env(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::env(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::longest_filter
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.longest_filter();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::longest_filter(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::longest_filter(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::longest_filter(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::aliases
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.aliases();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::aliases(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::aliases(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::aliases(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::DispOrder>::disp_ord
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.disp_ord();
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::DispOrder>::disp_ord(p0);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as args::any_arg::DispOrder>::disp_ord(p0);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::disp_ord(p0);
-----------------
src/args/arg_builder/flag.rs <args::arg_builder::flag::FlagBuilder<'n, 'e> as std::cmp::PartialEq>::eq
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::flag::FlagBuilder<'n, 'e>
+p0.eq(p1);
+<args::arg_builder::flag::FlagBuilder<'n, 'e> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<args::arg_builder::flag::FlagBuilder<'n, 'e> as std::cmp::PartialEq>::eq(p0, p1);
+<args::arg_builder::flag::FlagBuilder<'n, 'e>>::eq(p0, p1);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as std::default::Default>::default
'n,'e
deps:{}
candidates:{}
+<args::arg_builder::option::OptBuilder<'n, 'e> as std::default::Default>::default();
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as std::default::Default>::default();
+<args::arg_builder::option::OptBuilder<'n, 'e>>::default();
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as std::clone::Clone>::clone
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.clone();
+<args::arg_builder::option::OptBuilder<'n, 'e> as std::clone::Clone>::clone(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as std::clone::Clone>::clone(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::clone(p0);
-----------------
src/args/arg_builder/option.rs args::arg_builder::option::OptBuilder::<'n, 'e>::new
'n,'e
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+args::arg_builder::option::OptBuilder::<'n, 'e>::new(&p0);
+crate::args::arg_builder::option::OptBuilder::<'n, 'e>::new(&p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::new(&p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as std::convert::From<&'z args::arg::Arg<'n, 'e>>>::from
'n,'e,'z
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg::Arg<'n, 'e>
+<args::arg_builder::option::OptBuilder<'n, 'e> as std::convert::From<&'z args::arg::Arg<'n, 'e>>>::from(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as std::convert::From<&'z args::arg::Arg<'n, 'e>>>::from(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::from(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as std::convert::From<args::arg::Arg<'n, 'e>>>::from
'n,'e
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'n, 'e>
+<args::arg_builder::option::OptBuilder<'n, 'e> as std::convert::From<args::arg::Arg<'n, 'e>>>::from(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as std::convert::From<args::arg::Arg<'n, 'e>>>::from(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::from(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as std::fmt::Display>::fmt
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<args::arg_builder::option::OptBuilder<'n, 'e> as std::fmt::Display>::fmt(p0, p1);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as std::fmt::Display>::fmt(p0, p1);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::fmt(p0, p1);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::name
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.name();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::name(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::name(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::name(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::overrides
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.overrides();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::overrides(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::overrides(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::overrides(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::requires
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.requires();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::requires(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::requires(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::requires(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::blacklist
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.blacklist();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::blacklist(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::blacklist(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::blacklist(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::required_unless
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.required_unless();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::required_unless(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::required_unless(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::required_unless(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_names
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.val_names();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_names(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_names(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::val_names(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::is_set
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.is_set(p1);
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::is_set(p0, p1);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::is_set(p0, p1);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::is_set(p0, p1);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::has_switch
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.has_switch();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::has_switch(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::has_switch(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::has_switch(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::set
'n,'e
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.set(p1);
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::set(p0, p1);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::set(p0, p1);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::set(p0, p1);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::max_vals
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.max_vals();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::max_vals(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::max_vals(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::max_vals(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_terminator
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.val_terminator();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_terminator(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_terminator(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::val_terminator(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::num_vals
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.num_vals();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::num_vals(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::num_vals(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::num_vals(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::possible_vals
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.possible_vals();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::possible_vals(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::possible_vals(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::possible_vals(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.validator();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::validator(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator_os
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.validator_os();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator_os(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator_os(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::validator_os(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::min_vals
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.min_vals();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::min_vals(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::min_vals(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::min_vals(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::short
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.short();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::short(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::short(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::short(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.long();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::long(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_delim
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.val_delim();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_delim(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_delim(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::val_delim(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::takes_value
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.takes_value();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::takes_value(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::takes_value(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::takes_value(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::help
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.help();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::help(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::help(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::help(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long_help
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.long_help();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long_help(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long_help(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::long_help(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_val
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.default_val();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_val(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_val(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::default_val(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_vals_ifs
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.default_vals_ifs();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_vals_ifs(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_vals_ifs(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::default_vals_ifs(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::env
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.env();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::env(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::env(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::env(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::longest_filter
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.longest_filter();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::longest_filter(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::longest_filter(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::longest_filter(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::aliases
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.aliases();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::aliases(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::aliases(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::aliases(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::DispOrder>::disp_ord
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.disp_ord();
+<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::DispOrder>::disp_ord(p0);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as args::any_arg::DispOrder>::disp_ord(p0);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::disp_ord(p0);
-----------------
src/args/arg_builder/option.rs <args::arg_builder::option::OptBuilder<'n, 'e> as std::cmp::PartialEq>::eq
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'n, 'e>
+p0.eq(p1);
+<args::arg_builder::option::OptBuilder<'n, 'e> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<args::arg_builder::option::OptBuilder<'n, 'e> as std::cmp::PartialEq>::eq(p0, p1);
+<args::arg_builder::option::OptBuilder<'n, 'e>>::eq(p0, p1);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as std::clone::Clone>::clone
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.clone();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as std::clone::Clone>::clone(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as std::clone::Clone>::clone(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::clone(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as std::default::Default>::default
'n,'e
deps:{}
candidates:{}
+<args::arg_builder::positional::PosBuilder<'n, 'e> as std::default::Default>::default();
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as std::default::Default>::default();
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::default();
-----------------
src/args/arg_builder/positional.rs args::arg_builder::positional::PosBuilder::<'n, 'e>::new
'n,'e
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = 0u64; // None+u64
+args::arg_builder::positional::PosBuilder::<'n, 'e>::new(&p0, p1);
+crate::args::arg_builder::positional::PosBuilder::<'n, 'e>::new(&p0, p1);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::new(&p0, p1);
-----------------
src/args/arg_builder/positional.rs args::arg_builder::positional::PosBuilder::<'n, 'e>::from_arg_ref
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg::Arg<'n, 'e>
let mut p1 = 0u64; // None+u64
+args::arg_builder::positional::PosBuilder::<'n, 'e>::from_arg_ref(p0, p1);
+crate::args::arg_builder::positional::PosBuilder::<'n, 'e>::from_arg_ref(p0, p1);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::from_arg_ref(p0, p1);
-----------------
src/args/arg_builder/positional.rs args::arg_builder::positional::PosBuilder::<'n, 'e>::from_arg
'n,'e
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg::Arg<'n, 'e>
let mut p1 = 0u64; // None+u64
+args::arg_builder::positional::PosBuilder::<'n, 'e>::from_arg(p0, p1);
+crate::args::arg_builder::positional::PosBuilder::<'n, 'e>::from_arg(p0, p1);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::from_arg(p0, p1);
-----------------
src/args/arg_builder/positional.rs args::arg_builder::positional::PosBuilder::<'n, 'e>::multiple_str
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.multiple_str();
+args::arg_builder::positional::PosBuilder::<'n, 'e>::multiple_str(p0);
+crate::args::arg_builder::positional::PosBuilder::<'n, 'e>::multiple_str(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::multiple_str(p0);
-----------------
src/args/arg_builder/positional.rs args::arg_builder::positional::PosBuilder::<'n, 'e>::name_no_brackets
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.name_no_brackets();
+args::arg_builder::positional::PosBuilder::<'n, 'e>::name_no_brackets(p0);
+crate::args::arg_builder::positional::PosBuilder::<'n, 'e>::name_no_brackets(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::name_no_brackets(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as std::fmt::Display>::fmt
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<args::arg_builder::positional::PosBuilder<'n, 'e> as std::fmt::Display>::fmt(p0, p1);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as std::fmt::Display>::fmt(p0, p1);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::fmt(p0, p1);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::name
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.name();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::name(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::name(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::name(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::overrides
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.overrides();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::overrides(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::overrides(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::overrides(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::requires
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.requires();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::requires(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::requires(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::requires(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::blacklist
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.blacklist();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::blacklist(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::blacklist(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::blacklist(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::required_unless
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.required_unless();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::required_unless(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::required_unless(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::required_unless(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_names
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.val_names();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_names(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_names(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::val_names(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::is_set
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.is_set(p1);
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::is_set(p0, p1);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::is_set(p0, p1);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::is_set(p0, p1);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::set
'n,'e
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.set(p1);
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::set(p0, p1);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::set(p0, p1);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::set(p0, p1);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::has_switch
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.has_switch();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::has_switch(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::has_switch(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::has_switch(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::max_vals
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.max_vals();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::max_vals(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::max_vals(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::max_vals(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_terminator
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.val_terminator();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_terminator(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_terminator(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::val_terminator(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::num_vals
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.num_vals();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::num_vals(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::num_vals(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::num_vals(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::possible_vals
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.possible_vals();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::possible_vals(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::possible_vals(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::possible_vals(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.validator();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::validator(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator_os
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.validator_os();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator_os(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::validator_os(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::validator_os(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::min_vals
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.min_vals();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::min_vals(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::min_vals(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::min_vals(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::short
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.short();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::short(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::short(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::short(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.long();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::long(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_delim
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.val_delim();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_delim(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::val_delim(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::val_delim(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::takes_value
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.takes_value();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::takes_value(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::takes_value(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::takes_value(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::help
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.help();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::help(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::help(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::help(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long_help
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.long_help();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long_help(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::long_help(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::long_help(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_vals_ifs
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.default_vals_ifs();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_vals_ifs(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_vals_ifs(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::default_vals_ifs(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_val
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.default_val();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_val(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::default_val(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::default_val(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::env
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.env();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::env(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::env(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::env(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::longest_filter
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.longest_filter();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::longest_filter(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::longest_filter(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::longest_filter(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::aliases
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.aliases();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::aliases(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::AnyArg<'n, 'e>>::aliases(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::aliases(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::DispOrder>::disp_ord
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.disp_ord();
+<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::DispOrder>::disp_ord(p0);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as args::any_arg::DispOrder>::disp_ord(p0);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::disp_ord(p0);
-----------------
src/args/arg_builder/positional.rs <args::arg_builder::positional::PosBuilder<'n, 'e> as std::cmp::PartialEq>::eq
'n,'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::positional::PosBuilder<'n, 'e>
+p0.eq(p1);
+<args::arg_builder::positional::PosBuilder<'n, 'e> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<args::arg_builder::positional::PosBuilder<'n, 'e> as std::cmp::PartialEq>::eq(p0, p1);
+<args::arg_builder::positional::PosBuilder<'n, 'e>>::eq(p0, p1);
-----------------
src/args/arg_builder/switched.rs <args::arg_builder::switched::Switched<'b> as std::fmt::Debug>::fmt
'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::switched::Switched<'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<args::arg_builder::switched::Switched<'b> as std::fmt::Debug>::fmt(p0, p1);
+crate::<args::arg_builder::switched::Switched<'b> as std::fmt::Debug>::fmt(p0, p1);
+<args::arg_builder::switched::Switched<'b>>::fmt(p0, p1);
-----------------
src/args/arg_builder/switched.rs <args::arg_builder::switched::Switched<'e> as std::default::Default>::default
'e
deps:{}
candidates:{}
+<args::arg_builder::switched::Switched<'e> as std::default::Default>::default();
+crate::<args::arg_builder::switched::Switched<'e> as std::default::Default>::default();
+<args::arg_builder::switched::Switched<'e>>::default();
-----------------
src/args/arg_builder/switched.rs <args::arg_builder::switched::Switched<'e> as std::convert::From<&'z args::arg::Arg<'n, 'e>>>::from
'n,'e,'z
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg::Arg<'n, 'e>
+<args::arg_builder::switched::Switched<'e> as std::convert::From<&'z args::arg::Arg<'n, 'e>>>::from(p0);
+crate::<args::arg_builder::switched::Switched<'e> as std::convert::From<&'z args::arg::Arg<'n, 'e>>>::from(p0);
+<args::arg_builder::switched::Switched<'e>>::from(p0);
-----------------
src/args/arg_builder/switched.rs <args::arg_builder::switched::Switched<'e> as std::clone::Clone>::clone
'e
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::switched::Switched<'e>
+p0.clone();
+<args::arg_builder::switched::Switched<'e> as std::clone::Clone>::clone(p0);
+crate::<args::arg_builder::switched::Switched<'e> as std::clone::Clone>::clone(p0);
+<args::arg_builder::switched::Switched<'e>>::clone(p0);
-----------------
src/args/arg_builder/valued.rs <args::arg_builder::valued::Valued<'a, 'b> as std::clone::Clone>::clone
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::valued::Valued<'a, 'b>
+p0.clone();
+<args::arg_builder::valued::Valued<'a, 'b> as std::clone::Clone>::clone(p0);
+crate::<args::arg_builder::valued::Valued<'a, 'b> as std::clone::Clone>::clone(p0);
+<args::arg_builder::valued::Valued<'a, 'b>>::clone(p0);
-----------------
src/args/arg_builder/valued.rs <args::arg_builder::valued::Valued<'n, 'e> as std::default::Default>::default
'n,'e
deps:{}
candidates:{}
+<args::arg_builder::valued::Valued<'n, 'e> as std::default::Default>::default();
+crate::<args::arg_builder::valued::Valued<'n, 'e> as std::default::Default>::default();
+<args::arg_builder::valued::Valued<'n, 'e>>::default();
-----------------
src/args/arg_builder/valued.rs args::arg_builder::valued::Valued::<'n, 'e>::fill_in
'n,'e
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_builder::valued::Valued<'n, 'e>
+p0.fill_in();
+args::arg_builder::valued::Valued::<'n, 'e>::fill_in(p0);
+crate::args::arg_builder::valued::Valued::<'n, 'e>::fill_in(p0);
+<args::arg_builder::valued::Valued<'n, 'e>>::fill_in(p0);
-----------------
src/args/arg_builder/valued.rs <args::arg_builder::valued::Valued<'n, 'e> as std::convert::From<&'z args::arg::Arg<'n, 'e>>>::from
'n,'e,'z
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg::Arg<'n, 'e>
+<args::arg_builder::valued::Valued<'n, 'e> as std::convert::From<&'z args::arg::Arg<'n, 'e>>>::from(p0);
+crate::<args::arg_builder::valued::Valued<'n, 'e> as std::convert::From<&'z args::arg::Arg<'n, 'e>>>::from(p0);
+<args::arg_builder::valued::Valued<'n, 'e>>::from(p0);
-----------------
src/args/arg_matcher.rs <args::arg_matcher::ArgMatcher<'a> as std::default::Default>::default
'a
deps:{}
candidates:{}
+<args::arg_matcher::ArgMatcher<'a> as std::default::Default>::default();
+crate::<args::arg_matcher::ArgMatcher<'a> as std::default::Default>::default();
+<args::arg_matcher::ArgMatcher<'a>>::default();
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::new
'a
deps:{}
candidates:{}
+args::arg_matcher::ArgMatcher::<'a>::new();
+crate::args::arg_matcher::ArgMatcher::<'a>::new();
+<args::arg_matcher::ArgMatcher<'a>>::new();
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::process_arg_overrides
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // std::option::Option<&dyn args::any_arg::AnyArg<'a, 'b>>
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // std::vec::Vec<(&'b str, &'a str)>
let mut p3 = &mut  MaybeUninit::uninit().assume_init(); // std::vec::Vec<&'a str>
let mut p4 = true; // None+bool
+p0.process_arg_overrides(p1, p2, p3, p4);
+args::arg_matcher::ArgMatcher::<'a>::process_arg_overrides(p0, p1, p2, p3, p4);
+crate::args::arg_matcher::ArgMatcher::<'a>::process_arg_overrides(p0, p1, p2, p3, p4);
+<args::arg_matcher::ArgMatcher<'a>>::process_arg_overrides(p0, p1, p2, p3, p4);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::handle_self_overrides
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // std::option::Option<&dyn args::any_arg::AnyArg<'a, 'b>>
+p0.handle_self_overrides(p1);
+args::arg_matcher::ArgMatcher::<'a>::handle_self_overrides(p0, p1);
+crate::args::arg_matcher::ArgMatcher::<'a>::handle_self_overrides(p0, p1);
+<args::arg_matcher::ArgMatcher<'a>>::handle_self_overrides(p0, p1);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::is_present
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = "sample"; // None+&str
+p0.is_present(&p1);
+args::arg_matcher::ArgMatcher::<'a>::is_present(p0, &p1);
+crate::args::arg_matcher::ArgMatcher::<'a>::is_present(p0, &p1);
+<args::arg_matcher::ArgMatcher<'a>>::is_present(p0, &p1);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::propagate_globals
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'a str]
+p0.propagate_globals(p1);
+args::arg_matcher::ArgMatcher::<'a>::propagate_globals(p0, p1);
+crate::args::arg_matcher::ArgMatcher::<'a>::propagate_globals(p0, p1);
+<args::arg_matcher::ArgMatcher<'a>>::propagate_globals(p0, p1);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::fill_in_global_values
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'a str]
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // std::collections::HashMap<&'a str, args::matched_arg::MatchedArg>
+p0.fill_in_global_values(p1, p2);
+args::arg_matcher::ArgMatcher::<'a>::fill_in_global_values(p0, p1, p2);
+crate::args::arg_matcher::ArgMatcher::<'a>::fill_in_global_values(p0, p1, p2);
+<args::arg_matcher::ArgMatcher<'a>>::fill_in_global_values(p0, p1, p2);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::get_mut
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = "sample"; // None+&str
+p0.get_mut(&p1);
+args::arg_matcher::ArgMatcher::<'a>::get_mut(p0, &p1);
+crate::args::arg_matcher::ArgMatcher::<'a>::get_mut(p0, &p1);
+<args::arg_matcher::ArgMatcher<'a>>::get_mut(p0, &p1);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::get
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = "sample"; // None+&str
+p0.get(&p1);
+args::arg_matcher::ArgMatcher::<'a>::get(p0, &p1);
+crate::args::arg_matcher::ArgMatcher::<'a>::get(p0, &p1);
+<args::arg_matcher::ArgMatcher<'a>>::get(p0, &p1);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::remove
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = "sample"; // None+&str
+p0.remove(&p1);
+args::arg_matcher::ArgMatcher::<'a>::remove(p0, &p1);
+crate::args::arg_matcher::ArgMatcher::<'a>::remove(p0, &p1);
+<args::arg_matcher::ArgMatcher<'a>>::remove(p0, &p1);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::remove_all
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = & ["a"].as_mut_slice(); // None+[&str]
+p0.remove_all(p1);
+args::arg_matcher::ArgMatcher::<'a>::remove_all(p0, p1);
+crate::args::arg_matcher::ArgMatcher::<'a>::remove_all(p0, p1);
+<args::arg_matcher::ArgMatcher<'a>>::remove_all(p0, p1);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::insert
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = "sample"; // None+&str
+p0.insert(&p1);
+args::arg_matcher::ArgMatcher::<'a>::insert(p0, &p1);
+crate::args::arg_matcher::ArgMatcher::<'a>::insert(p0, &p1);
+<args::arg_matcher::ArgMatcher<'a>>::insert(p0, &p1);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::contains
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = "sample"; // None+&str
+p0.contains(&p1);
+args::arg_matcher::ArgMatcher::<'a>::contains(p0, &p1);
+crate::args::arg_matcher::ArgMatcher::<'a>::contains(p0, &p1);
+<args::arg_matcher::ArgMatcher<'a>>::contains(p0, &p1);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::is_empty
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
+p0.is_empty();
+args::arg_matcher::ArgMatcher::<'a>::is_empty(p0);
+crate::args::arg_matcher::ArgMatcher::<'a>::is_empty(p0);
+<args::arg_matcher::ArgMatcher<'a>>::is_empty(p0);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::usage
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = std::string::String::new(); // None+std::string::String
+p0.usage(p1);
+args::arg_matcher::ArgMatcher::<'a>::usage(p0, p1);
+crate::args::arg_matcher::ArgMatcher::<'a>::usage(p0, p1);
+<args::arg_matcher::ArgMatcher<'a>>::usage(p0, p1);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::arg_names
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
+p0.arg_names();
+args::arg_matcher::ArgMatcher::<'a>::arg_names(p0);
+crate::args::arg_matcher::ArgMatcher::<'a>::arg_names(p0);
+<args::arg_matcher::ArgMatcher<'a>>::arg_names(p0);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::entry
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = "sample"; // None+&str
+p0.entry(&p1);
+args::arg_matcher::ArgMatcher::<'a>::entry(p0, &p1);
+crate::args::arg_matcher::ArgMatcher::<'a>::entry(p0, &p1);
+<args::arg_matcher::ArgMatcher<'a>>::entry(p0, &p1);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::subcommand
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // args::subcommand::SubCommand<'a>
+p0.subcommand(p1);
+args::arg_matcher::ArgMatcher::<'a>::subcommand(p0, p1);
+crate::args::arg_matcher::ArgMatcher::<'a>::subcommand(p0, p1);
+<args::arg_matcher::ArgMatcher<'a>>::subcommand(p0, p1);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::subcommand_name
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
+p0.subcommand_name();
+args::arg_matcher::ArgMatcher::<'a>::subcommand_name(p0);
+crate::args::arg_matcher::ArgMatcher::<'a>::subcommand_name(p0);
+<args::arg_matcher::ArgMatcher<'a>>::subcommand_name(p0);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::iter
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
+p0.iter();
+args::arg_matcher::ArgMatcher::<'a>::iter(p0);
+crate::args::arg_matcher::ArgMatcher::<'a>::iter(p0);
+<args::arg_matcher::ArgMatcher<'a>>::iter(p0);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::inc_occurrence_of
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = "sample"; // None+&str
+p0.inc_occurrence_of(&p1);
+args::arg_matcher::ArgMatcher::<'a>::inc_occurrence_of(p0, &p1);
+crate::args::arg_matcher::ArgMatcher::<'a>::inc_occurrence_of(p0, &p1);
+<args::arg_matcher::ArgMatcher<'a>>::inc_occurrence_of(p0, &p1);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::inc_occurrences_of
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'a str]
+p0.inc_occurrences_of(p1);
+args::arg_matcher::ArgMatcher::<'a>::inc_occurrences_of(p0, p1);
+crate::args::arg_matcher::ArgMatcher::<'a>::inc_occurrences_of(p0, p1);
+<args::arg_matcher::ArgMatcher<'a>>::inc_occurrences_of(p0, p1);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::add_val_to
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = "sample"; // None+&str
let mut p2 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
+p0.add_val_to(&p1, p2);
+args::arg_matcher::ArgMatcher::<'a>::add_val_to(p0, &p1, p2);
+crate::args::arg_matcher::ArgMatcher::<'a>::add_val_to(p0, &p1, p2);
+<args::arg_matcher::ArgMatcher<'a>>::add_val_to(p0, &p1, p2);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::add_index_to
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = "sample"; // None+&str
let mut p2 = 0usize; // None+usize
+p0.add_index_to(&p1, p2);
+args::arg_matcher::ArgMatcher::<'a>::add_index_to(p0, &p1, p2);
+crate::args::arg_matcher::ArgMatcher::<'a>::add_index_to(p0, &p1, p2);
+<args::arg_matcher::ArgMatcher<'a>>::add_index_to(p0, &p1, p2);
-----------------
src/args/arg_matcher.rs args::arg_matcher::ArgMatcher::<'a>::needs_more_vals
'a,'b
deps:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"args::arg_matcher::ArgMatcher::<'a>::needs_more_vals":{"A":["args::any_arg::AnyArg","std::marker::Sized"]}}
candidates:{"<&'z T as args::any_arg::AnyArg<'n, 'e>>":{},"args::arg_matcher::ArgMatcher::<'a>::needs_more_vals":{"A":["app::App","args::arg_builder::option::OptBuilder","<&'z T as args::any_arg::AnyArg<'n, 'e>>","args::arg_builder::flag::FlagBuilder","args::arg_builder::positional::PosBuilder"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // A
+p0.needs_more_vals(p1);
+args::arg_matcher::ArgMatcher::<'a>::needs_more_vals(p0, p1);
+crate::args::arg_matcher::ArgMatcher::<'a>::needs_more_vals(p0, p1);
+<args::arg_matcher::ArgMatcher<'a>>::needs_more_vals(p0, p1);
-----------------
src/args/arg_matcher.rs <args::arg_matcher::ArgMatcher<'a> as std::convert::Into<args::arg_matches::ArgMatches<'a>>>::into
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::arg_matcher::ArgMatcher<'a>
+p0.into();
+<args::arg_matcher::ArgMatcher<'a> as std::convert::Into<args::arg_matches::ArgMatches<'a>>>::into(p0);
+crate::<args::arg_matcher::ArgMatcher<'a> as std::convert::Into<args::arg_matches::ArgMatches<'a>>>::into(p0);
+<args::arg_matcher::ArgMatcher<'a>>::into(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::ArgMatches<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::ArgMatches<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<args::arg_matches::ArgMatches<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<args::arg_matches::ArgMatches<'a> as std::fmt::Debug>::fmt(p0, p1);
+<args::arg_matches::ArgMatches<'a>>::fmt(p0, p1);
-----------------
src/args/arg_matches.rs <args::arg_matches::ArgMatches<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::ArgMatches<'a>
+p0.clone();
+<args::arg_matches::ArgMatches<'a> as std::clone::Clone>::clone(p0);
+crate::<args::arg_matches::ArgMatches<'a> as std::clone::Clone>::clone(p0);
+<args::arg_matches::ArgMatches<'a>>::clone(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::ArgMatches<'a> as std::default::Default>::default
'a
deps:{}
candidates:{}
+<args::arg_matches::ArgMatches<'a> as std::default::Default>::default();
+crate::<args::arg_matches::ArgMatches<'a> as std::default::Default>::default();
+<args::arg_matches::ArgMatches<'a>>::default();
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::new
'a
deps:{}
candidates:{}
+args::arg_matches::ArgMatches::<'a>::new();
+crate::args::arg_matches::ArgMatches::<'a>::new();
+<args::arg_matches::ArgMatches<'a>>::new();
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::value_of
'a
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::value_of":{"S":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::value_of":{"S":["std::slice::IterMut<'_, T>","<&T as std::convert::AsRef<U>>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::ffi::CString","std::ffi::CStr","std::rc::Rc<T>","std::sync::Arc<T>","std::borrow::Cow<'_, T>","std::slice::Iter<'_, T>","std::vec::IntoIter<T, A>","std::vec::Drain<'a, T, A>","std::boxed::Box<T, A>","std::borrow::Cow<'_, std::ffi::OsStr>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::ArgMatches<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.value_of(p1);
+args::arg_matches::ArgMatches::<'a>::value_of(p0, p1);
+crate::args::arg_matches::ArgMatches::<'a>::value_of(p0, p1);
+<args::arg_matches::ArgMatches<'a>>::value_of(p0, p1);
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::value_of_lossy
'a
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::value_of_lossy":{"S":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::value_of_lossy":{"S":["std::slice::IterMut<'_, T>","std::vec::Drain<'a, T, A>","<&mut T as std::convert::AsRef<U>>","std::borrow::Cow<'_, T>","std::rc::Rc<T>","std::boxed::Box<T, A>","std::ffi::CStr","<&T as std::convert::AsRef<U>>","std::vec::IntoIter<T, A>","std::slice::Iter<'_, T>","std::ffi::CString","std::borrow::Cow<'_, std::ffi::OsStr>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::sync::Arc<T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::ArgMatches<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.value_of_lossy(p1);
+args::arg_matches::ArgMatches::<'a>::value_of_lossy(p0, p1);
+crate::args::arg_matches::ArgMatches::<'a>::value_of_lossy(p0, p1);
+<args::arg_matches::ArgMatches<'a>>::value_of_lossy(p0, p1);
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::value_of_os
'a
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::value_of_os":{"S":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::value_of_os":{"S":["std::borrow::Cow<'_, std::ffi::OsStr>","std::boxed::Box<T, A>","std::sync::Arc<T>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::vec::IntoIter<T, A>","std::rc::Rc<T>","std::ffi::CStr","std::slice::Iter<'_, T>","std::slice::IterMut<'_, T>","<&T as std::convert::AsRef<U>>","std::ffi::CString","std::vec::Drain<'a, T, A>","std::borrow::Cow<'_, T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::ArgMatches<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.value_of_os(p1);
+args::arg_matches::ArgMatches::<'a>::value_of_os(p0, p1);
+crate::args::arg_matches::ArgMatches::<'a>::value_of_os(p0, p1);
+<args::arg_matches::ArgMatches<'a>>::value_of_os(p0, p1);
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::values_of
'a
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::values_of":{"S":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::values_of":{"S":["std::ffi::CString","std::slice::Iter<'_, T>","std::sync::Arc<T>","<&T as std::convert::AsRef<U>>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::vec::Drain<'a, T, A>","<&mut T as std::convert::AsRef<U>>","std::rc::Rc<T>","std::vec::IntoIter<T, A>","std::ffi::CStr","std::boxed::Box<T, A>","std::borrow::Cow<'_, T>","std::borrow::Cow<'_, std::ffi::OsStr>","std::slice::IterMut<'_, T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::ArgMatches<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.values_of(p1);
+args::arg_matches::ArgMatches::<'a>::values_of(p0, p1);
+crate::args::arg_matches::ArgMatches::<'a>::values_of(p0, p1);
+<args::arg_matches::ArgMatches<'a>>::values_of(p0, p1);
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::values_of_lossy
'a
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::values_of_lossy":{"S":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::values_of_lossy":{"S":["std::rc::Rc<T>","<&mut T as std::convert::AsRef<U>>","std::ffi::CString","std::borrow::Cow<'_, std::ffi::OsStr>","<&T as std::convert::AsRef<U>>","std::borrow::Cow<'_, T>","std::slice::IterMut<'_, T>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::slice::Iter<'_, T>","std::vec::Drain<'a, T, A>","std::boxed::Box<T, A>","std::vec::IntoIter<T, A>","std::sync::Arc<T>","std::ffi::CStr"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::ArgMatches<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.values_of_lossy(p1);
+args::arg_matches::ArgMatches::<'a>::values_of_lossy(p0, p1);
+crate::args::arg_matches::ArgMatches::<'a>::values_of_lossy(p0, p1);
+<args::arg_matches::ArgMatches<'a>>::values_of_lossy(p0, p1);
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::values_of_os
'a
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::values_of_os":{"S":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::values_of_os":{"S":["std::slice::IterMut<'_, T>","std::ffi::CString","std::ffi::CStr","std::boxed::Box<T, A>","std::borrow::Cow<'_, T>","<&T as std::convert::AsRef<U>>","std::borrow::Cow<'_, std::ffi::OsStr>","std::rc::Rc<T>","std::vec::Drain<'a, T, A>","std::sync::Arc<T>","std::vec::IntoIter<T, A>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::slice::Iter<'_, T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::ArgMatches<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.values_of_os(p1);
+args::arg_matches::ArgMatches::<'a>::values_of_os(p0, p1);
+crate::args::arg_matches::ArgMatches::<'a>::values_of_os(p0, p1);
+<args::arg_matches::ArgMatches<'a>>::values_of_os(p0, p1);
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::is_present
'a
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::is_present":{"S":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::is_present":{"S":["std::ffi::CStr","std::vec::Drain<'a, T, A>","std::boxed::Box<T, A>","std::rc::Rc<T>","std::vec::IntoIter<T, A>","std::sync::Arc<T>","std::slice::IterMut<'_, T>","<&T as std::convert::AsRef<U>>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::borrow::Cow<'_, std::ffi::OsStr>","std::ffi::CString","std::borrow::Cow<'_, T>","std::slice::Iter<'_, T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::ArgMatches<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.is_present(p1);
+args::arg_matches::ArgMatches::<'a>::is_present(p0, p1);
+crate::args::arg_matches::ArgMatches::<'a>::is_present(p0, p1);
+<args::arg_matches::ArgMatches<'a>>::is_present(p0, p1);
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::occurrences_of
'a
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::occurrences_of":{"S":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::occurrences_of":{"S":["<&mut T as std::convert::AsRef<U>>","std::borrow::Cow<'_, T>","std::vec::IntoIter<T, A>","std::ffi::CStr","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::vec::Drain<'a, T, A>","std::slice::IterMut<'_, T>","std::slice::Iter<'_, T>","std::ffi::CString","std::sync::Arc<T>","std::borrow::Cow<'_, std::ffi::OsStr>","std::rc::Rc<T>","std::boxed::Box<T, A>","<&T as std::convert::AsRef<U>>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::ArgMatches<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.occurrences_of(p1);
+args::arg_matches::ArgMatches::<'a>::occurrences_of(p0, p1);
+crate::args::arg_matches::ArgMatches::<'a>::occurrences_of(p0, p1);
+<args::arg_matches::ArgMatches<'a>>::occurrences_of(p0, p1);
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::index_of
'a
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::index_of":{"S":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::index_of":{"S":["std::ffi::CString","std::slice::Iter<'_, T>","std::rc::Rc<T>","std::borrow::Cow<'_, std::ffi::OsStr>","std::sync::Arc<T>","<&T as std::convert::AsRef<U>>","std::boxed::Box<T, A>","std::vec::Drain<'a, T, A>","std::ffi::CStr","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::slice::IterMut<'_, T>","std::vec::IntoIter<T, A>","std::borrow::Cow<'_, T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::ArgMatches<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.index_of(p1);
+args::arg_matches::ArgMatches::<'a>::index_of(p0, p1);
+crate::args::arg_matches::ArgMatches::<'a>::index_of(p0, p1);
+<args::arg_matches::ArgMatches<'a>>::index_of(p0, p1);
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::indices_of
'a
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::indices_of":{"S":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::indices_of":{"S":["std::boxed::Box<T, A>","std::rc::Rc<T>","std::vec::Drain<'a, T, A>","<&T as std::convert::AsRef<U>>","std::borrow::Cow<'_, std::ffi::OsStr>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::slice::Iter<'_, T>","std::borrow::Cow<'_, T>","std::slice::IterMut<'_, T>","std::sync::Arc<T>","std::vec::IntoIter<T, A>","std::ffi::CString","std::ffi::CStr","<&mut T as std::convert::AsRef<U>>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::ArgMatches<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.indices_of(p1);
+args::arg_matches::ArgMatches::<'a>::indices_of(p0, p1);
+crate::args::arg_matches::ArgMatches::<'a>::indices_of(p0, p1);
+<args::arg_matches::ArgMatches<'a>>::indices_of(p0, p1);
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::subcommand_matches
'a
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::subcommand_matches":{"S":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"args::arg_matches::ArgMatches::<'a>::subcommand_matches":{"S":["<&T as std::convert::AsRef<U>>","std::ffi::CStr","std::vec::IntoIter<T, A>","std::vec::Drain<'a, T, A>","std::boxed::Box<T, A>","std::ffi::CString","std::sync::Arc<T>","std::rc::Rc<T>","std::borrow::Cow<'_, T>","<&mut T as std::convert::AsRef<U>>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::borrow::Cow<'_, std::ffi::OsStr>","std::slice::Iter<'_, T>","std::slice::IterMut<'_, T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::ArgMatches<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.subcommand_matches(p1);
+args::arg_matches::ArgMatches::<'a>::subcommand_matches(p0, p1);
+crate::args::arg_matches::ArgMatches::<'a>::subcommand_matches(p0, p1);
+<args::arg_matches::ArgMatches<'a>>::subcommand_matches(p0, p1);
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::subcommand_name
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::ArgMatches<'a>
+p0.subcommand_name();
+args::arg_matches::ArgMatches::<'a>::subcommand_name(p0);
+crate::args::arg_matches::ArgMatches::<'a>::subcommand_name(p0);
+<args::arg_matches::ArgMatches<'a>>::subcommand_name(p0);
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::subcommand
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::ArgMatches<'a>
+p0.subcommand();
+args::arg_matches::ArgMatches::<'a>::subcommand(p0);
+crate::args::arg_matches::ArgMatches::<'a>::subcommand(p0);
+<args::arg_matches::ArgMatches<'a>>::subcommand(p0);
-----------------
src/args/arg_matches.rs args::arg_matches::ArgMatches::<'a>::usage
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::ArgMatches<'a>
+p0.usage();
+args::arg_matches::ArgMatches::<'a>::usage(p0);
+crate::args::arg_matches::ArgMatches::<'a>::usage(p0);
+<args::arg_matches::ArgMatches<'a>>::usage(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::Values<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::Values<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<args::arg_matches::Values<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<args::arg_matches::Values<'a> as std::fmt::Debug>::fmt(p0, p1);
+<args::arg_matches::Values<'a>>::fmt(p0, p1);
-----------------
src/args/arg_matches.rs <args::arg_matches::Values<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::Values<'a>
+p0.clone();
+<args::arg_matches::Values<'a> as std::clone::Clone>::clone(p0);
+crate::<args::arg_matches::Values<'a> as std::clone::Clone>::clone(p0);
+<args::arg_matches::Values<'a>>::clone(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::Values<'a> as std::iter::Iterator>::next
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matches::Values<'a>
+p0.next();
+<args::arg_matches::Values<'a> as std::iter::Iterator>::next(p0);
+crate::<args::arg_matches::Values<'a> as std::iter::Iterator>::next(p0);
+<args::arg_matches::Values<'a>>::next(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::Values<'a> as std::iter::Iterator>::size_hint
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::Values<'a>
+p0.size_hint();
+<args::arg_matches::Values<'a> as std::iter::Iterator>::size_hint(p0);
+crate::<args::arg_matches::Values<'a> as std::iter::Iterator>::size_hint(p0);
+<args::arg_matches::Values<'a>>::size_hint(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::Values<'a> as std::iter::DoubleEndedIterator>::next_back
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matches::Values<'a>
+p0.next_back();
+<args::arg_matches::Values<'a> as std::iter::DoubleEndedIterator>::next_back(p0);
+crate::<args::arg_matches::Values<'a> as std::iter::DoubleEndedIterator>::next_back(p0);
+<args::arg_matches::Values<'a>>::next_back(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::Values<'a> as std::default::Default>::default
'a
deps:{}
candidates:{}
+<args::arg_matches::Values<'a> as std::default::Default>::default();
+crate::<args::arg_matches::Values<'a> as std::default::Default>::default();
+<args::arg_matches::Values<'a>>::default();
-----------------
src/args/arg_matches.rs <args::arg_matches::OsValues<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::OsValues<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<args::arg_matches::OsValues<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<args::arg_matches::OsValues<'a> as std::fmt::Debug>::fmt(p0, p1);
+<args::arg_matches::OsValues<'a>>::fmt(p0, p1);
-----------------
src/args/arg_matches.rs <args::arg_matches::OsValues<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::OsValues<'a>
+p0.clone();
+<args::arg_matches::OsValues<'a> as std::clone::Clone>::clone(p0);
+crate::<args::arg_matches::OsValues<'a> as std::clone::Clone>::clone(p0);
+<args::arg_matches::OsValues<'a>>::clone(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::OsValues<'a> as std::iter::Iterator>::next
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matches::OsValues<'a>
+p0.next();
+<args::arg_matches::OsValues<'a> as std::iter::Iterator>::next(p0);
+crate::<args::arg_matches::OsValues<'a> as std::iter::Iterator>::next(p0);
+<args::arg_matches::OsValues<'a>>::next(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::OsValues<'a> as std::iter::Iterator>::size_hint
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::OsValues<'a>
+p0.size_hint();
+<args::arg_matches::OsValues<'a> as std::iter::Iterator>::size_hint(p0);
+crate::<args::arg_matches::OsValues<'a> as std::iter::Iterator>::size_hint(p0);
+<args::arg_matches::OsValues<'a>>::size_hint(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::OsValues<'a> as std::iter::DoubleEndedIterator>::next_back
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matches::OsValues<'a>
+p0.next_back();
+<args::arg_matches::OsValues<'a> as std::iter::DoubleEndedIterator>::next_back(p0);
+crate::<args::arg_matches::OsValues<'a> as std::iter::DoubleEndedIterator>::next_back(p0);
+<args::arg_matches::OsValues<'a>>::next_back(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::OsValues<'a> as std::default::Default>::default
'a
deps:{}
candidates:{}
+<args::arg_matches::OsValues<'a> as std::default::Default>::default();
+crate::<args::arg_matches::OsValues<'a> as std::default::Default>::default();
+<args::arg_matches::OsValues<'a>>::default();
-----------------
src/args/arg_matches.rs <args::arg_matches::Indices<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::Indices<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<args::arg_matches::Indices<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<args::arg_matches::Indices<'a> as std::fmt::Debug>::fmt(p0, p1);
+<args::arg_matches::Indices<'a>>::fmt(p0, p1);
-----------------
src/args/arg_matches.rs <args::arg_matches::Indices<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::Indices<'a>
+p0.clone();
+<args::arg_matches::Indices<'a> as std::clone::Clone>::clone(p0);
+crate::<args::arg_matches::Indices<'a> as std::clone::Clone>::clone(p0);
+<args::arg_matches::Indices<'a>>::clone(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::Indices<'a> as std::iter::Iterator>::next
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matches::Indices<'a>
+p0.next();
+<args::arg_matches::Indices<'a> as std::iter::Iterator>::next(p0);
+crate::<args::arg_matches::Indices<'a> as std::iter::Iterator>::next(p0);
+<args::arg_matches::Indices<'a>>::next(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::Indices<'a> as std::iter::Iterator>::size_hint
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::arg_matches::Indices<'a>
+p0.size_hint();
+<args::arg_matches::Indices<'a> as std::iter::Iterator>::size_hint(p0);
+crate::<args::arg_matches::Indices<'a> as std::iter::Iterator>::size_hint(p0);
+<args::arg_matches::Indices<'a>>::size_hint(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::Indices<'a> as std::iter::DoubleEndedIterator>::next_back
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::arg_matches::Indices<'a>
+p0.next_back();
+<args::arg_matches::Indices<'a> as std::iter::DoubleEndedIterator>::next_back(p0);
+crate::<args::arg_matches::Indices<'a> as std::iter::DoubleEndedIterator>::next_back(p0);
+<args::arg_matches::Indices<'a>>::next_back(p0);
-----------------
src/args/arg_matches.rs <args::arg_matches::Indices<'a> as std::default::Default>::default
'a
deps:{}
candidates:{}
+<args::arg_matches::Indices<'a> as std::default::Default>::default();
+crate::<args::arg_matches::Indices<'a> as std::default::Default>::default();
+<args::arg_matches::Indices<'a>>::default();
-----------------
src/args/group.rs <args::group::ArgGroup<'a> as std::default::Default>::default
'a
deps:{}
candidates:{}
+<args::group::ArgGroup<'a> as std::default::Default>::default();
+crate::<args::group::ArgGroup<'a> as std::default::Default>::default();
+<args::group::ArgGroup<'a>>::default();
-----------------
src/args/group.rs args::group::ArgGroup::<'a>::with_name
'a
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+args::group::ArgGroup::<'a>::with_name(&p0);
+crate::args::group::ArgGroup::<'a>::with_name(&p0);
+<args::group::ArgGroup<'a>>::with_name(&p0);
-----------------
src/args/group.rs args::group::ArgGroup::<'a>::arg
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::group::ArgGroup<'a>
let mut p1 = "sample"; // None+&str
+p0.arg(&p1);
+args::group::ArgGroup::<'a>::arg(p0, &p1);
+crate::args::group::ArgGroup::<'a>::arg(p0, &p1);
+<args::group::ArgGroup<'a>>::arg(p0, &p1);
-----------------
src/args/group.rs args::group::ArgGroup::<'a>::args
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::group::ArgGroup<'a>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'a str]
+p0.args(p1);
+args::group::ArgGroup::<'a>::args(p0, p1);
+crate::args::group::ArgGroup::<'a>::args(p0, p1);
+<args::group::ArgGroup<'a>>::args(p0, p1);
-----------------
src/args/group.rs args::group::ArgGroup::<'a>::multiple
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::group::ArgGroup<'a>
let mut p1 = true; // None+bool
+p0.multiple(p1);
+args::group::ArgGroup::<'a>::multiple(p0, p1);
+crate::args::group::ArgGroup::<'a>::multiple(p0, p1);
+<args::group::ArgGroup<'a>>::multiple(p0, p1);
-----------------
src/args/group.rs args::group::ArgGroup::<'a>::required
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::group::ArgGroup<'a>
let mut p1 = true; // None+bool
+p0.required(p1);
+args::group::ArgGroup::<'a>::required(p0, p1);
+crate::args::group::ArgGroup::<'a>::required(p0, p1);
+<args::group::ArgGroup<'a>>::required(p0, p1);
-----------------
src/args/group.rs args::group::ArgGroup::<'a>::requires
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::group::ArgGroup<'a>
let mut p1 = "sample"; // None+&str
+p0.requires(&p1);
+args::group::ArgGroup::<'a>::requires(p0, &p1);
+crate::args::group::ArgGroup::<'a>::requires(p0, &p1);
+<args::group::ArgGroup<'a>>::requires(p0, &p1);
-----------------
src/args/group.rs args::group::ArgGroup::<'a>::requires_all
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::group::ArgGroup<'a>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'a str]
+p0.requires_all(p1);
+args::group::ArgGroup::<'a>::requires_all(p0, p1);
+crate::args::group::ArgGroup::<'a>::requires_all(p0, p1);
+<args::group::ArgGroup<'a>>::requires_all(p0, p1);
-----------------
src/args/group.rs args::group::ArgGroup::<'a>::conflicts_with
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::group::ArgGroup<'a>
let mut p1 = "sample"; // None+&str
+p0.conflicts_with(&p1);
+args::group::ArgGroup::<'a>::conflicts_with(p0, &p1);
+crate::args::group::ArgGroup::<'a>::conflicts_with(p0, &p1);
+<args::group::ArgGroup<'a>>::conflicts_with(p0, &p1);
-----------------
src/args/group.rs args::group::ArgGroup::<'a>::conflicts_with_all
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::group::ArgGroup<'a>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'a str]
+p0.conflicts_with_all(p1);
+args::group::ArgGroup::<'a>::conflicts_with_all(p0, p1);
+crate::args::group::ArgGroup::<'a>::conflicts_with_all(p0, p1);
+<args::group::ArgGroup<'a>>::conflicts_with_all(p0, p1);
-----------------
src/args/group.rs <args::group::ArgGroup<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::group::ArgGroup<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<args::group::ArgGroup<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<args::group::ArgGroup<'a> as std::fmt::Debug>::fmt(p0, p1);
+<args::group::ArgGroup<'a>>::fmt(p0, p1);
-----------------
src/args/group.rs <args::group::ArgGroup<'a> as std::convert::From<&'z args::group::ArgGroup<'a>>>::from
'a,'z
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::group::ArgGroup<'a>
+<args::group::ArgGroup<'a> as std::convert::From<&'z args::group::ArgGroup<'a>>>::from(p0);
+crate::<args::group::ArgGroup<'a> as std::convert::From<&'z args::group::ArgGroup<'a>>>::from(p0);
+<args::group::ArgGroup<'a>>::from(p0);
-----------------
src/args/group.rs <args::group::ArgGroup<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::group::ArgGroup<'a>
+p0.clone();
+<args::group::ArgGroup<'a> as std::clone::Clone>::clone(p0);
+crate::<args::group::ArgGroup<'a> as std::clone::Clone>::clone(p0);
+<args::group::ArgGroup<'a>>::clone(p0);
-----------------
src/args/matched_arg.rs <args::matched_arg::MatchedArg as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::matched_arg::MatchedArg
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<args::matched_arg::MatchedArg as std::fmt::Debug>::fmt(p0, p1);
+crate::<args::matched_arg::MatchedArg as std::fmt::Debug>::fmt(p0, p1);
+<args::matched_arg::MatchedArg>::fmt(p0, p1);
-----------------
src/args/matched_arg.rs <args::matched_arg::MatchedArg as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::matched_arg::MatchedArg
+p0.clone();
+<args::matched_arg::MatchedArg as std::clone::Clone>::clone(p0);
+crate::<args::matched_arg::MatchedArg as std::clone::Clone>::clone(p0);
+<args::matched_arg::MatchedArg>::clone(p0);
-----------------
src/args/matched_arg.rs <args::matched_arg::MatchedArg as std::default::Default>::default
deps:{}
candidates:{}
+<args::matched_arg::MatchedArg as std::default::Default>::default();
+crate::<args::matched_arg::MatchedArg as std::default::Default>::default();
+<args::matched_arg::MatchedArg>::default();
-----------------
src/args/matched_arg.rs args::matched_arg::MatchedArg::new
deps:{}
candidates:{}
+args::matched_arg::MatchedArg::new();
+crate::args::matched_arg::MatchedArg::new();
+<args::matched_arg::MatchedArg>::new();
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.eq(p1);
+<args::settings::Flags as std::cmp::PartialEq>::eq(p0, p1);
+crate::<args::settings::Flags as std::cmp::PartialEq>::eq(p0, p1);
+<args::settings::Flags>::eq(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.assert_receiver_is_total_eq();
+<args::settings::Flags as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<args::settings::Flags as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<args::settings::Flags>::assert_receiver_is_total_eq(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.clone();
+<args::settings::Flags as std::clone::Clone>::clone(p0);
+crate::<args::settings::Flags as std::clone::Clone>::clone(p0);
+<args::settings::Flags>::clone(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.partial_cmp(p1);
+<args::settings::Flags as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<args::settings::Flags as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<args::settings::Flags>::partial_cmp(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.cmp(p1);
+<args::settings::Flags as std::cmp::Ord>::cmp(p0, p1);
+crate::<args::settings::Flags as std::cmp::Ord>::cmp(p0, p1);
+<args::settings::Flags>::cmp(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<args::settings::Flags as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<args::settings::Flags as std::hash::Hash>::hash":{"__H":["std::hash::SipHasher13","std::hash::SipHasher","std::boxed::Box<T, A>","std::collections::hash_map::DefaultHasher","std::hash::sip::Hasher<S>","<&mut H as std::hash::Hasher>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<args::settings::Flags as std::hash::Hash>::hash(p0, p1);
+crate::<args::settings::Flags as std::hash::Hash>::hash(p0, p1);
+<args::settings::Flags>::hash(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<args::settings::Flags as std::fmt::Debug>::fmt(p0, p1);
+crate::<args::settings::Flags as std::fmt::Debug>::fmt(p0, p1);
+<args::settings::Flags>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::REQUIRED
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.REQUIRED();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::REQUIRED(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::REQUIRED(p0);
+<args::settings::Flags>::REQUIRED(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::MULTIPLE
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.MULTIPLE();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::MULTIPLE(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::MULTIPLE(p0);
+<args::settings::Flags>::MULTIPLE(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::EMPTY_VALS
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.EMPTY_VALS();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::EMPTY_VALS(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::EMPTY_VALS(p0);
+<args::settings::Flags>::EMPTY_VALS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::GLOBAL
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.GLOBAL();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::GLOBAL(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::GLOBAL(p0);
+<args::settings::Flags>::GLOBAL(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDDEN
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.HIDDEN();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDDEN(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDDEN(p0);
+<args::settings::Flags>::HIDDEN(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::TAKES_VAL
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.TAKES_VAL();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::TAKES_VAL(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::TAKES_VAL(p0);
+<args::settings::Flags>::TAKES_VAL(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::USE_DELIM
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.USE_DELIM();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::USE_DELIM(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::USE_DELIM(p0);
+<args::settings::Flags>::USE_DELIM(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NEXT_LINE_HELP
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.NEXT_LINE_HELP();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NEXT_LINE_HELP(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::NEXT_LINE_HELP(p0);
+<args::settings::Flags>::NEXT_LINE_HELP(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::R_UNLESS_ALL
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.R_UNLESS_ALL();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::R_UNLESS_ALL(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::R_UNLESS_ALL(p0);
+<args::settings::Flags>::R_UNLESS_ALL(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::REQ_DELIM
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.REQ_DELIM();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::REQ_DELIM(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::REQ_DELIM(p0);
+<args::settings::Flags>::REQ_DELIM(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DELIM_NOT_SET
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.DELIM_NOT_SET();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DELIM_NOT_SET(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::DELIM_NOT_SET(p0);
+<args::settings::Flags>::DELIM_NOT_SET(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDE_POS_VALS
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.HIDE_POS_VALS();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDE_POS_VALS(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDE_POS_VALS(p0);
+<args::settings::Flags>::HIDE_POS_VALS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ALLOW_TAC_VALS
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.ALLOW_TAC_VALS();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ALLOW_TAC_VALS(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::ALLOW_TAC_VALS(p0);
+<args::settings::Flags>::ALLOW_TAC_VALS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::REQUIRE_EQUALS
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.REQUIRE_EQUALS();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::REQUIRE_EQUALS(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::REQUIRE_EQUALS(p0);
+<args::settings::Flags>::REQUIRE_EQUALS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::LAST
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.LAST();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::LAST(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::LAST(p0);
+<args::settings::Flags>::LAST(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDE_DEFAULT_VAL
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.HIDE_DEFAULT_VAL();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDE_DEFAULT_VAL(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDE_DEFAULT_VAL(p0);
+<args::settings::Flags>::HIDE_DEFAULT_VAL(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::CASE_INSENSITIVE
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.CASE_INSENSITIVE();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::CASE_INSENSITIVE(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::CASE_INSENSITIVE(p0);
+<args::settings::Flags>::CASE_INSENSITIVE(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDE_ENV_VALS
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.HIDE_ENV_VALS();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDE_ENV_VALS(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDE_ENV_VALS(p0);
+<args::settings::Flags>::HIDE_ENV_VALS(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDDEN_SHORT_H
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.HIDDEN_SHORT_H();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDDEN_SHORT_H(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDDEN_SHORT_H(p0);
+<args::settings::Flags>::HIDDEN_SHORT_H(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDDEN_LONG_H
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.HIDDEN_LONG_H();
+<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDDEN_LONG_H(p0);
+crate::<args::settings::Flags as <args::settings::Flags as std::fmt::Debug>::fmt::__BitFlags>::HIDDEN_LONG_H(p0);
+<args::settings::Flags>::HIDDEN_LONG_H(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Binary>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.fmt(p1);
+<args::settings::Flags as std::fmt::Binary>::fmt(p0, p1);
+crate::<args::settings::Flags as std::fmt::Binary>::fmt(p0, p1);
+<args::settings::Flags>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::Octal>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.fmt(p1);
+<args::settings::Flags as std::fmt::Octal>::fmt(p0, p1);
+crate::<args::settings::Flags as std::fmt::Octal>::fmt(p0, p1);
+<args::settings::Flags>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::LowerHex>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.fmt(p1);
+<args::settings::Flags as std::fmt::LowerHex>::fmt(p0, p1);
+crate::<args::settings::Flags as std::fmt::LowerHex>::fmt(p0, p1);
+<args::settings::Flags>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::fmt::UpperHex>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.fmt(p1);
+<args::settings::Flags as std::fmt::UpperHex>::fmt(p0, p1);
+crate::<args::settings::Flags as std::fmt::UpperHex>::fmt(p0, p1);
+<args::settings::Flags>::fmt(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::empty
deps:{}
candidates:{}
+args::settings::Flags::empty();
+crate::args::settings::Flags::empty();
+<args::settings::Flags>::empty();
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::all
deps:{}
candidates:{}
+args::settings::Flags::all();
+crate::args::settings::Flags::all();
+<args::settings::Flags>::all();
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::bits
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.bits();
+args::settings::Flags::bits(p0);
+crate::args::settings::Flags::bits(p0);
+<args::settings::Flags>::bits(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::from_bits
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+args::settings::Flags::from_bits(p0);
+crate::args::settings::Flags::from_bits(p0);
+<args::settings::Flags>::from_bits(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::from_bits_truncate
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+args::settings::Flags::from_bits_truncate(p0);
+crate::args::settings::Flags::from_bits_truncate(p0);
+<args::settings::Flags>::from_bits_truncate(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::from_bits_unchecked
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+args::settings::Flags::from_bits_unchecked(p0);
+crate::args::settings::Flags::from_bits_unchecked(p0);
+<args::settings::Flags>::from_bits_unchecked(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::is_empty
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.is_empty();
+args::settings::Flags::is_empty(p0);
+crate::args::settings::Flags::is_empty(p0);
+<args::settings::Flags>::is_empty(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::is_all
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.is_all();
+args::settings::Flags::is_all(p0);
+crate::args::settings::Flags::is_all(p0);
+<args::settings::Flags>::is_all(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::intersects
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.intersects(p1);
+args::settings::Flags::intersects(p0, p1);
+crate::args::settings::Flags::intersects(p0, p1);
+<args::settings::Flags>::intersects(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::contains
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.contains(p1);
+args::settings::Flags::contains(p0, p1);
+crate::args::settings::Flags::contains(p0, p1);
+<args::settings::Flags>::contains(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::insert
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.insert(p1);
+args::settings::Flags::insert(p0, p1);
+crate::args::settings::Flags::insert(p0, p1);
+<args::settings::Flags>::insert(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::remove
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.remove(p1);
+args::settings::Flags::remove(p0, p1);
+crate::args::settings::Flags::remove(p0, p1);
+<args::settings::Flags>::remove(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::toggle
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.toggle(p1);
+args::settings::Flags::toggle(p0, p1);
+crate::args::settings::Flags::toggle(p0, p1);
+<args::settings::Flags>::toggle(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::set
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p2 = true; // None+bool
+p0.set(p1, p2);
+args::settings::Flags::set(p0, p1, p2);
+crate::args::settings::Flags::set(p0, p1, p2);
+<args::settings::Flags>::set(p0, p1, p2);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::intersection
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.intersection(p1);
+args::settings::Flags::intersection(p0, p1);
+crate::args::settings::Flags::intersection(p0, p1);
+<args::settings::Flags>::intersection(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::union
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.union(p1);
+args::settings::Flags::union(p0, p1);
+crate::args::settings::Flags::union(p0, p1);
+<args::settings::Flags>::union(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::difference
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.difference(p1);
+args::settings::Flags::difference(p0, p1);
+crate::args::settings::Flags::difference(p0, p1);
+<args::settings::Flags>::difference(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::symmetric_difference
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.symmetric_difference(p1);
+args::settings::Flags::symmetric_difference(p0, p1);
+crate::args::settings::Flags::symmetric_difference(p0, p1);
+<args::settings::Flags>::symmetric_difference(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs args::settings::Flags::complement
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.complement();
+args::settings::Flags::complement(p0);
+crate::args::settings::Flags::complement(p0);
+<args::settings::Flags>::complement(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::ops::BitOr>::bitor
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.bitor(p1);
+<args::settings::Flags as std::ops::BitOr>::bitor(p0, p1);
+crate::<args::settings::Flags as std::ops::BitOr>::bitor(p0, p1);
+<args::settings::Flags>::bitor(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::ops::BitOrAssign>::bitor_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.bitor_assign(p1);
+<args::settings::Flags as std::ops::BitOrAssign>::bitor_assign(p0, p1);
+crate::<args::settings::Flags as std::ops::BitOrAssign>::bitor_assign(p0, p1);
+<args::settings::Flags>::bitor_assign(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::ops::BitXor>::bitxor
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.bitxor(p1);
+<args::settings::Flags as std::ops::BitXor>::bitxor(p0, p1);
+crate::<args::settings::Flags as std::ops::BitXor>::bitxor(p0, p1);
+<args::settings::Flags>::bitxor(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::ops::BitXorAssign>::bitxor_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.bitxor_assign(p1);
+<args::settings::Flags as std::ops::BitXorAssign>::bitxor_assign(p0, p1);
+crate::<args::settings::Flags as std::ops::BitXorAssign>::bitxor_assign(p0, p1);
+<args::settings::Flags>::bitxor_assign(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::ops::BitAnd>::bitand
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.bitand(p1);
+<args::settings::Flags as std::ops::BitAnd>::bitand(p0, p1);
+crate::<args::settings::Flags as std::ops::BitAnd>::bitand(p0, p1);
+<args::settings::Flags>::bitand(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::ops::BitAndAssign>::bitand_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.bitand_assign(p1);
+<args::settings::Flags as std::ops::BitAndAssign>::bitand_assign(p0, p1);
+crate::<args::settings::Flags as std::ops::BitAndAssign>::bitand_assign(p0, p1);
+<args::settings::Flags>::bitand_assign(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::ops::Sub>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.sub(p1);
+<args::settings::Flags as std::ops::Sub>::sub(p0, p1);
+crate::<args::settings::Flags as std::ops::Sub>::sub(p0, p1);
+<args::settings::Flags>::sub(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::ops::SubAssign>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.sub_assign(p1);
+<args::settings::Flags as std::ops::SubAssign>::sub_assign(p0, p1);
+crate::<args::settings::Flags as std::ops::SubAssign>::sub_assign(p0, p1);
+<args::settings::Flags>::sub_assign(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::ops::Not>::not
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // args::settings::Flags
+p0.not();
+<args::settings::Flags as std::ops::Not>::not(p0);
+crate::<args::settings::Flags as std::ops::Not>::not(p0);
+<args::settings::Flags>::not(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::iter::Extend<args::settings::Flags>>::extend
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"<args::settings::Flags as std::iter::Extend<args::settings::Flags>>::extend":{"T":["std::iter::IntoIterator","std::marker::Sized"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["args::arg_matches::Indices","args::arg_matches::OsValues","osstringext::OsSplit","<&mut I as std::iter::Iterator>","args::arg_matches::Values"]},"<args::settings::Flags as std::iter::Extend<args::settings::Flags>>::extend":{"T":["<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>","std::option::Option<T>","&'a std::path::PathBuf","&'a std::os::unix::net::UnixListener","&'a std::path::Path","<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>","std::vec::Vec<T, A>","std::collections::BTreeMap<K, V, A>","std::collections::VecDeque<T, A>","std::collections::LinkedList<T>","std::collections::BinaryHeap<T>","std::collections::BTreeSet<T, A>","std::sync::mpsc::Receiver<T>","std::collections::HashMap<K, V, S>","std::collections::HashSet<T, S>","std::result::Result<T, E>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::settings::Flags
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.extend(p1);
+<args::settings::Flags as std::iter::Extend<args::settings::Flags>>::extend(p0, p1);
+crate::<args::settings::Flags as std::iter::Extend<args::settings::Flags>>::extend(p0, p1);
+<args::settings::Flags>::extend(p0, p1);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.3.2/src/lib.rs <args::settings::Flags as std::iter::FromIterator<args::settings::Flags>>::from_iter
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"<args::settings::Flags as std::iter::FromIterator<args::settings::Flags>>::from_iter":{"T":["std::marker::Sized","std::iter::IntoIterator"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a vec_map::VecMap<T> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["args::arg_matches::OsValues","<&mut I as std::iter::Iterator>","osstringext::OsSplit","args::arg_matches::Indices","args::arg_matches::Values"]},"<args::settings::Flags as std::iter::FromIterator<args::settings::Flags>>::from_iter":{"T":["std::collections::BinaryHeap<T>","std::collections::BTreeMap<K, V, A>","<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>","std::result::Result<T, E>","<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>","std::collections::LinkedList<T>","std::collections::BTreeSet<T, A>","std::collections::HashSet<T, S>","std::option::Option<T>","&'a std::path::PathBuf","&'a std::path::Path","std::vec::Vec<T, A>","std::collections::HashMap<K, V, S>","std::sync::mpsc::Receiver<T>","&'a std::os::unix::net::UnixListener","std::collections::VecDeque<T, A>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+<args::settings::Flags as std::iter::FromIterator<args::settings::Flags>>::from_iter(p0);
+crate::<args::settings::Flags as std::iter::FromIterator<args::settings::Flags>>::from_iter(p0);
+<args::settings::Flags>::from_iter(p0);
-----------------
src/args/settings.rs <args::settings::ArgFlags as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::ArgFlags
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<args::settings::ArgFlags as std::fmt::Debug>::fmt(p0, p1);
+crate::<args::settings::ArgFlags as std::fmt::Debug>::fmt(p0, p1);
+<args::settings::ArgFlags>::fmt(p0, p1);
-----------------
src/args/settings.rs <args::settings::ArgFlags as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::ArgFlags
+p0.clone();
+<args::settings::ArgFlags as std::clone::Clone>::clone(p0);
+crate::<args::settings::ArgFlags as std::clone::Clone>::clone(p0);
+<args::settings::ArgFlags>::clone(p0);
-----------------
src/args/settings.rs args::settings::ArgFlags::new
deps:{}
candidates:{}
+args::settings::ArgFlags::new();
+crate::args::settings::ArgFlags::new();
+<args::settings::ArgFlags>::new();
-----------------
src/macros.rs args::settings::ArgFlags::set
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::settings::ArgFlags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.set(p1);
+args::settings::ArgFlags::set(p0, p1);
+crate::args::settings::ArgFlags::set(p0, p1);
+<args::settings::ArgFlags>::set(p0, p1);
-----------------
src/macros.rs args::settings::ArgFlags::unset
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // args::settings::ArgFlags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.unset(p1);
+args::settings::ArgFlags::unset(p0, p1);
+crate::args::settings::ArgFlags::unset(p0, p1);
+<args::settings::ArgFlags>::unset(p0, p1);
-----------------
src/macros.rs args::settings::ArgFlags::is_set
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::ArgFlags
let mut p1 = MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.is_set(p1);
+args::settings::ArgFlags::is_set(p0, p1);
+crate::args::settings::ArgFlags::is_set(p0, p1);
+<args::settings::ArgFlags>::is_set(p0, p1);
-----------------
src/args/settings.rs <args::settings::ArgFlags as std::default::Default>::default
deps:{}
candidates:{}
+<args::settings::ArgFlags as std::default::Default>::default();
+crate::<args::settings::ArgFlags as std::default::Default>::default();
+<args::settings::ArgFlags>::default();
-----------------
src/args/settings.rs <args::settings::ArgSettings as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<args::settings::ArgSettings as std::fmt::Debug>::fmt(p0, p1);
+crate::<args::settings::ArgSettings as std::fmt::Debug>::fmt(p0, p1);
+<args::settings::ArgSettings>::fmt(p0, p1);
-----------------
src/args/settings.rs <args::settings::ArgSettings as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.eq(p1);
+<args::settings::ArgSettings as std::cmp::PartialEq>::eq(p0, p1);
+crate::<args::settings::ArgSettings as std::cmp::PartialEq>::eq(p0, p1);
+<args::settings::ArgSettings>::eq(p0, p1);
-----------------
src/args/settings.rs <args::settings::ArgSettings as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::settings::ArgSettings
+p0.clone();
+<args::settings::ArgSettings as std::clone::Clone>::clone(p0);
+crate::<args::settings::ArgSettings as std::clone::Clone>::clone(p0);
+<args::settings::ArgSettings>::clone(p0);
-----------------
src/args/settings.rs <args::settings::ArgSettings as std::str::FromStr>::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<args::settings::ArgSettings as std::str::FromStr>::from_str(&p0);
+crate::<args::settings::ArgSettings as std::str::FromStr>::from_str(&p0);
+<args::settings::ArgSettings>::from_str(&p0);
-----------------
src/args/subcommand.rs <args::subcommand::SubCommand<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::subcommand::SubCommand<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<args::subcommand::SubCommand<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<args::subcommand::SubCommand<'a> as std::fmt::Debug>::fmt(p0, p1);
+<args::subcommand::SubCommand<'a>>::fmt(p0, p1);
-----------------
src/args/subcommand.rs <args::subcommand::SubCommand<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // args::subcommand::SubCommand<'a>
+p0.clone();
+<args::subcommand::SubCommand<'a> as std::clone::Clone>::clone(p0);
+crate::<args::subcommand::SubCommand<'a> as std::clone::Clone>::clone(p0);
+<args::subcommand::SubCommand<'a>>::clone(p0);
-----------------
src/args/subcommand.rs args::subcommand::SubCommand::<'a>::with_name
'a,'b
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+args::subcommand::SubCommand::<'a>::with_name(&p0);
+crate::args::subcommand::SubCommand::<'a>::with_name(&p0);
+<args::subcommand::SubCommand<'a>>::with_name(&p0);
-----------------
src/completions/bash.rs completions::bash::BashGen::<'a, 'b>::new
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+completions::bash::BashGen::<'a, 'b>::new(p0);
+crate::completions::bash::BashGen::<'a, 'b>::new(p0);
+<completions::bash::BashGen<'a, 'b>>::new(p0);
-----------------
src/completions/bash.rs completions::bash::BashGen::<'a, 'b>::generate_to
'a,'b
deps:{"completions::bash::BashGen::<'a, 'b>::generate_to":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"completions::bash::BashGen::<'a, 'b>::generate_to":{"W":["&std::fs::File","&std::io::Sink","std::io::Cursor<std::boxed::Box<[u8], A>>","std::io::Sink","std::os::unix::net::UnixStream","std::net::TcpStream","std::io::stdio::StdoutRaw","std::vec::Vec<u8, A>","std::sys::unix::stdio::Stderr","std::io::BorrowedCursor<'a>","std::io::Cursor<[u8; N]>","std::collections::VecDeque<u8, A>","std::io::BufWriter<W>","std::fs::File","std::io::Cursor<&mut std::vec::Vec<u8, A>>","&std::net::TcpStream","std::io::StdoutLock<'_>","&std::io::Stdout","std::sys::unix::stdio::Stdout","std::io::Stderr","std::io::LineWriter<W>","std::process::ChildStdin","&std::process::ChildStdin","std::io::impls::<impl std::io::Write for &mut W>","std::io::Cursor<&mut [u8]>","std::boxed::Box<W>","std::io::StderrLock<'_>","&'a std::os::unix::net::UnixStream","std::io::Cursor<std::vec::Vec<u8, A>>","std::io::stdio::StderrRaw","&std::io::Stderr","std::io::Stdout","std::io::buffered::linewritershim::LineWriterShim<'a, W>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // completions::bash::BashGen<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // W
+p0.generate_to(p1);
+completions::bash::BashGen::<'a, 'b>::generate_to(p0, p1);
+crate::completions::bash::BashGen::<'a, 'b>::generate_to(p0, p1);
+<completions::bash::BashGen<'a, 'b>>::generate_to(p0, p1);
-----------------
src/completions/bash.rs completions::bash::BashGen::<'a, 'b>::all_subcommands
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // completions::bash::BashGen<'a, 'b>
+p0.all_subcommands();
+completions::bash::BashGen::<'a, 'b>::all_subcommands(p0);
+crate::completions::bash::BashGen::<'a, 'b>::all_subcommands(p0);
+<completions::bash::BashGen<'a, 'b>>::all_subcommands(p0);
-----------------
src/completions/bash.rs completions::bash::BashGen::<'a, 'b>::subcommand_details
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // completions::bash::BashGen<'a, 'b>
+p0.subcommand_details();
+completions::bash::BashGen::<'a, 'b>::subcommand_details(p0);
+crate::completions::bash::BashGen::<'a, 'b>::subcommand_details(p0);
+<completions::bash::BashGen<'a, 'b>>::subcommand_details(p0);
-----------------
src/completions/bash.rs completions::bash::BashGen::<'a, 'b>::option_details_for_path
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // completions::bash::BashGen<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.option_details_for_path(&p1);
+completions::bash::BashGen::<'a, 'b>::option_details_for_path(p0, &p1);
+crate::completions::bash::BashGen::<'a, 'b>::option_details_for_path(p0, &p1);
+<completions::bash::BashGen<'a, 'b>>::option_details_for_path(p0, &p1);
-----------------
src/completions/bash.rs completions::bash::BashGen::<'a, 'b>::vals_for
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // completions::bash::BashGen<'a, 'b>
let mut p1 = & MaybeUninit::uninit().assume_init(); // args::arg_builder::option::OptBuilder<'_, '_>
+p0.vals_for(p1);
+completions::bash::BashGen::<'a, 'b>::vals_for(p0, p1);
+crate::completions::bash::BashGen::<'a, 'b>::vals_for(p0, p1);
+<completions::bash::BashGen<'a, 'b>>::vals_for(p0, p1);
-----------------
src/completions/bash.rs completions::bash::BashGen::<'a, 'b>::all_options_for_path
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // completions::bash::BashGen<'a, 'b>
let mut p1 = "sample"; // None+&str
+p0.all_options_for_path(&p1);
+completions::bash::BashGen::<'a, 'b>::all_options_for_path(p0, &p1);
+crate::completions::bash::BashGen::<'a, 'b>::all_options_for_path(p0, &p1);
+<completions::bash::BashGen<'a, 'b>>::all_options_for_path(p0, &p1);
-----------------
src/completions/elvish.rs completions::elvish::ElvishGen::<'a, 'b>::new
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+completions::elvish::ElvishGen::<'a, 'b>::new(p0);
+crate::completions::elvish::ElvishGen::<'a, 'b>::new(p0);
+<completions::elvish::ElvishGen<'a, 'b>>::new(p0);
-----------------
src/completions/elvish.rs completions::elvish::ElvishGen::<'a, 'b>::generate_to
'a,'b
deps:{"completions::elvish::ElvishGen::<'a, 'b>::generate_to":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"completions::elvish::ElvishGen::<'a, 'b>::generate_to":{"W":["&std::net::TcpStream","std::io::BufWriter<W>","std::io::Cursor<std::vec::Vec<u8, A>>","std::io::Stderr","std::io::BorrowedCursor<'a>","std::io::StderrLock<'_>","std::vec::Vec<u8, A>","&std::io::Stderr","std::net::TcpStream","std::io::stdio::StdoutRaw","&std::io::Stdout","std::os::unix::net::UnixStream","std::io::Cursor<[u8; N]>","std::sys::unix::stdio::Stderr","std::io::stdio::StderrRaw","&std::io::Sink","std::io::Sink","&'a std::os::unix::net::UnixStream","std::io::Cursor<&mut std::vec::Vec<u8, A>>","std::io::StdoutLock<'_>","&std::fs::File","std::sys::unix::stdio::Stdout","std::io::buffered::linewritershim::LineWriterShim<'a, W>","&std::process::ChildStdin","std::io::Stdout","std::process::ChildStdin","std::io::Cursor<std::boxed::Box<[u8], A>>","std::collections::VecDeque<u8, A>","std::boxed::Box<W>","std::fs::File","std::io::LineWriter<W>","std::io::impls::<impl std::io::Write for &mut W>","std::io::Cursor<&mut [u8]>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // completions::elvish::ElvishGen<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // W
+p0.generate_to(p1);
+completions::elvish::ElvishGen::<'a, 'b>::generate_to(p0, p1);
+crate::completions::elvish::ElvishGen::<'a, 'b>::generate_to(p0, p1);
+<completions::elvish::ElvishGen<'a, 'b>>::generate_to(p0, p1);
-----------------
src/completions/fish.rs completions::fish::FishGen::<'a, 'b>::new
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+completions::fish::FishGen::<'a, 'b>::new(p0);
+crate::completions::fish::FishGen::<'a, 'b>::new(p0);
+<completions::fish::FishGen<'a, 'b>>::new(p0);
-----------------
src/completions/fish.rs completions::fish::FishGen::<'a, 'b>::generate_to
'a,'b
deps:{"completions::fish::FishGen::<'a, 'b>::generate_to":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"completions::fish::FishGen::<'a, 'b>::generate_to":{"W":["std::io::Stderr","std::vec::Vec<u8, A>","std::io::Cursor<[u8; N]>","std::process::ChildStdin","&std::io::Stdout","&std::io::Sink","std::net::TcpStream","std::io::LineWriter<W>","std::collections::VecDeque<u8, A>","std::io::impls::<impl std::io::Write for &mut W>","std::os::unix::net::UnixStream","std::io::stdio::StdoutRaw","&'a std::os::unix::net::UnixStream","std::io::Cursor<&mut [u8]>","std::io::Cursor<std::vec::Vec<u8, A>>","std::io::Cursor<&mut std::vec::Vec<u8, A>>","std::fs::File","&std::fs::File","std::io::BorrowedCursor<'a>","std::io::Stdout","std::io::StdoutLock<'_>","&std::net::TcpStream","std::io::stdio::StderrRaw","&std::process::ChildStdin","std::io::Cursor<std::boxed::Box<[u8], A>>","&std::io::Stderr","std::sys::unix::stdio::Stdout","std::io::buffered::linewritershim::LineWriterShim<'a, W>","std::sys::unix::stdio::Stderr","std::io::BufWriter<W>","std::io::Sink","std::boxed::Box<W>","std::io::StderrLock<'_>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // completions::fish::FishGen<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // W
+p0.generate_to(p1);
+completions::fish::FishGen::<'a, 'b>::generate_to(p0, p1);
+crate::completions::fish::FishGen::<'a, 'b>::generate_to(p0, p1);
+<completions::fish::FishGen<'a, 'b>>::generate_to(p0, p1);
-----------------
src/completions/powershell.rs completions::powershell::PowerShellGen::<'a, 'b>::new
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+completions::powershell::PowerShellGen::<'a, 'b>::new(p0);
+crate::completions::powershell::PowerShellGen::<'a, 'b>::new(p0);
+<completions::powershell::PowerShellGen<'a, 'b>>::new(p0);
-----------------
src/completions/powershell.rs completions::powershell::PowerShellGen::<'a, 'b>::generate_to
'a,'b
deps:{"completions::powershell::PowerShellGen::<'a, 'b>::generate_to":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"completions::powershell::PowerShellGen::<'a, 'b>::generate_to":{"W":["std::collections::VecDeque<u8, A>","std::io::Stderr","std::boxed::Box<W>","&std::io::Stderr","std::io::stdio::StdoutRaw","std::io::stdio::StderrRaw","std::io::Cursor<&mut std::vec::Vec<u8, A>>","std::sys::unix::stdio::Stdout","&std::net::TcpStream","std::io::Cursor<std::boxed::Box<[u8], A>>","std::fs::File","std::net::TcpStream","std::process::ChildStdin","std::io::buffered::linewritershim::LineWriterShim<'a, W>","std::io::BorrowedCursor<'a>","std::io::StderrLock<'_>","std::io::StdoutLock<'_>","&std::io::Sink","std::io::Stdout","std::io::Cursor<[u8; N]>","std::io::Sink","std::io::impls::<impl std::io::Write for &mut W>","&'a std::os::unix::net::UnixStream","std::sys::unix::stdio::Stderr","std::os::unix::net::UnixStream","std::io::Cursor<std::vec::Vec<u8, A>>","std::vec::Vec<u8, A>","&std::process::ChildStdin","&std::fs::File","std::io::LineWriter<W>","&std::io::Stdout","std::io::BufWriter<W>","std::io::Cursor<&mut [u8]>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // completions::powershell::PowerShellGen<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // W
+p0.generate_to(p1);
+completions::powershell::PowerShellGen::<'a, 'b>::generate_to(p0, p1);
+crate::completions::powershell::PowerShellGen::<'a, 'b>::generate_to(p0, p1);
+<completions::powershell::PowerShellGen<'a, 'b>>::generate_to(p0, p1);
-----------------
src/completions/shell.rs <completions::shell::Shell as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // completions::shell::Shell
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<completions::shell::Shell as std::fmt::Debug>::fmt(p0, p1);
+crate::<completions::shell::Shell as std::fmt::Debug>::fmt(p0, p1);
+<completions::shell::Shell>::fmt(p0, p1);
-----------------
src/completions/shell.rs <completions::shell::Shell as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // completions::shell::Shell
+p0.clone();
+<completions::shell::Shell as std::clone::Clone>::clone(p0);
+crate::<completions::shell::Shell as std::clone::Clone>::clone(p0);
+<completions::shell::Shell>::clone(p0);
-----------------
src/completions/shell.rs completions::shell::Shell::variants
deps:{}
candidates:{}
+completions::shell::Shell::variants();
+crate::completions::shell::Shell::variants();
+<completions::shell::Shell>::variants();
-----------------
src/completions/shell.rs <completions::shell::Shell as std::str::FromStr>::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+<completions::shell::Shell as std::str::FromStr>::from_str(&p0);
+crate::<completions::shell::Shell as std::str::FromStr>::from_str(&p0);
+<completions::shell::Shell>::from_str(&p0);
-----------------
src/completions/shell.rs <completions::shell::Shell as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // completions::shell::Shell
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<completions::shell::Shell as std::fmt::Display>::fmt(p0, p1);
+crate::<completions::shell::Shell as std::fmt::Display>::fmt(p0, p1);
+<completions::shell::Shell>::fmt(p0, p1);
-----------------
src/completions/zsh.rs completions::zsh::ZshGen::<'a, 'b>::new
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+completions::zsh::ZshGen::<'a, 'b>::new(p0);
+crate::completions::zsh::ZshGen::<'a, 'b>::new(p0);
+<completions::zsh::ZshGen<'a, 'b>>::new(p0);
-----------------
src/completions/zsh.rs completions::zsh::ZshGen::<'a, 'b>::generate_to
'a,'b
deps:{"completions::zsh::ZshGen::<'a, 'b>::generate_to":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"completions::zsh::ZshGen::<'a, 'b>::generate_to":{"W":["std::io::LineWriter<W>","std::io::Stdout","std::sys::unix::stdio::Stdout","std::io::impls::<impl std::io::Write for &mut W>","std::io::BorrowedCursor<'a>","std::vec::Vec<u8, A>","&std::fs::File","&std::io::Stdout","std::io::Stderr","std::boxed::Box<W>","std::io::stdio::StdoutRaw","std::io::buffered::linewritershim::LineWriterShim<'a, W>","std::net::TcpStream","std::os::unix::net::UnixStream","&std::net::TcpStream","std::io::Cursor<&mut std::vec::Vec<u8, A>>","&std::process::ChildStdin","std::io::StderrLock<'_>","std::io::Cursor<[u8; N]>","&std::io::Sink","std::process::ChildStdin","std::io::stdio::StderrRaw","std::collections::VecDeque<u8, A>","std::io::Cursor<&mut [u8]>","std::io::BufWriter<W>","std::io::Sink","std::sys::unix::stdio::Stderr","&std::io::Stderr","std::io::Cursor<std::boxed::Box<[u8], A>>","&'a std::os::unix::net::UnixStream","std::io::StdoutLock<'_>","std::io::Cursor<std::vec::Vec<u8, A>>","std::fs::File"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // completions::zsh::ZshGen<'a, 'b>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // W
+p0.generate_to(p1);
+completions::zsh::ZshGen::<'a, 'b>::generate_to(p0, p1);
+crate::completions::zsh::ZshGen::<'a, 'b>::generate_to(p0, p1);
+<completions::zsh::ZshGen<'a, 'b>>::generate_to(p0, p1);
-----------------
src/completions/mod.rs completions::ComplGen::<'a, 'b>::new
'a,'b
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // app::parser::Parser<'a, 'b>
+completions::ComplGen::<'a, 'b>::new(p0);
+crate::completions::ComplGen::<'a, 'b>::new(p0);
+<completions::ComplGen<'a, 'b>>::new(p0);
-----------------
src/completions/mod.rs completions::ComplGen::<'a, 'b>::generate
'a,'b
deps:{"completions::ComplGen::<'a, 'b>::generate":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"completions::ComplGen::<'a, 'b>::generate":{"W":["std::io::impls::<impl std::io::Write for &mut W>","std::io::StdoutLock<'_>","std::io::buffered::linewritershim::LineWriterShim<'a, W>","std::io::BufWriter<W>","std::process::ChildStdin","std::io::Cursor<[u8; N]>","std::io::stdio::StdoutRaw","std::io::Cursor<std::boxed::Box<[u8], A>>","&'a std::os::unix::net::UnixStream","&std::io::Stdout","std::fs::File","&std::fs::File","std::io::LineWriter<W>","&std::process::ChildStdin","std::collections::VecDeque<u8, A>","&std::io::Stderr","std::io::stdio::StderrRaw","std::io::Stdout","std::sys::unix::stdio::Stdout","&std::net::TcpStream","std::io::Stderr","&std::io::Sink","std::io::Cursor<&mut [u8]>","std::boxed::Box<W>","std::net::TcpStream","std::sys::unix::stdio::Stderr","std::io::Cursor<std::vec::Vec<u8, A>>","std::io::BorrowedCursor<'a>","std::io::Cursor<&mut std::vec::Vec<u8, A>>","std::io::StderrLock<'_>","std::io::Sink","std::os::unix::net::UnixStream","std::vec::Vec<u8, A>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // completions::ComplGen<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // completions::shell::Shell
let mut p2 = &mut  MaybeUninit::uninit().assume_init(); // W
+p0.generate(p1, p2);
+completions::ComplGen::<'a, 'b>::generate(p0, p1, p2);
+crate::completions::ComplGen::<'a, 'b>::generate(p0, p1, p2);
+<completions::ComplGen<'a, 'b>>::generate(p0, p1, p2);
-----------------
src/errors.rs <errors::ErrorKind as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // errors::ErrorKind
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<errors::ErrorKind as std::fmt::Debug>::fmt(p0, p1);
+crate::<errors::ErrorKind as std::fmt::Debug>::fmt(p0, p1);
+<errors::ErrorKind>::fmt(p0, p1);
-----------------
src/errors.rs <errors::ErrorKind as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // errors::ErrorKind
+p0.clone();
+<errors::ErrorKind as std::clone::Clone>::clone(p0);
+crate::<errors::ErrorKind as std::clone::Clone>::clone(p0);
+<errors::ErrorKind>::clone(p0);
-----------------
src/errors.rs <errors::ErrorKind as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // errors::ErrorKind
let mut p1 = & MaybeUninit::uninit().assume_init(); // errors::ErrorKind
+p0.eq(p1);
+<errors::ErrorKind as std::cmp::PartialEq>::eq(p0, p1);
+crate::<errors::ErrorKind as std::cmp::PartialEq>::eq(p0, p1);
+<errors::ErrorKind>::eq(p0, p1);
-----------------
src/errors.rs <errors::Error as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // errors::Error
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<errors::Error as std::fmt::Debug>::fmt(p0, p1);
+crate::<errors::Error as std::fmt::Debug>::fmt(p0, p1);
+<errors::Error>::fmt(p0, p1);
-----------------
src/errors.rs errors::Error::use_stderr
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // errors::Error
+p0.use_stderr();
+errors::Error::use_stderr(p0);
+crate::errors::Error::use_stderr(p0);
+<errors::Error>::use_stderr(p0);
-----------------
src/errors.rs errors::Error::exit
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // errors::Error
+p0.exit();
+errors::Error::exit(p0);
+crate::errors::Error::exit(p0);
+<errors::Error>::exit(p0);
-----------------
src/errors.rs errors::Error::write_to
deps:{"errors::Error::write_to":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"errors::Error::write_to":{"W":["std::boxed::Box<W>","std::process::ChildStdin","std::vec::Vec<u8, A>","std::io::Cursor<&mut [u8]>","&'a std::os::unix::net::UnixStream","&std::net::TcpStream","std::io::Cursor<[u8; N]>","std::io::BufWriter<W>","std::io::StderrLock<'_>","std::io::LineWriter<W>","std::fs::File","std::io::impls::<impl std::io::Write for &mut W>","std::io::Cursor<std::vec::Vec<u8, A>>","std::io::Sink","&std::io::Stdout","std::io::stdio::StdoutRaw","&std::process::ChildStdin","std::sys::unix::stdio::Stderr","std::sys::unix::stdio::Stdout","std::io::Stderr","std::io::Cursor<std::boxed::Box<[u8], A>>","std::io::buffered::linewritershim::LineWriterShim<'a, W>","std::io::BorrowedCursor<'a>","std::os::unix::net::UnixStream","std::io::stdio::StderrRaw","&std::fs::File","&std::io::Stderr","std::io::Stdout","std::io::StdoutLock<'_>","std::collections::VecDeque<u8, A>","&std::io::Sink","std::net::TcpStream","std::io::Cursor<&mut std::vec::Vec<u8, A>>"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // errors::Error
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // W
+p0.write_to(p1);
+errors::Error::write_to(p0, p1);
+crate::errors::Error::write_to(p0, p1);
+<errors::Error>::write_to(p0, p1);
-----------------
src/errors.rs errors::Error::argument_conflict
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"errors::Error::argument_conflict":{"O":["std::marker::Sized","std::convert::Into"],"U":["std::fmt::Display","std::marker::Sized"]},"fmt::Format":{"T":["std::marker::Sized","std::fmt::Debug","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"errors::Error::argument_conflict":{"O":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"],"U":["args::arg_builder::positional::PosBuilder","args::arg_builder::flag::FlagBuilder","<&T as std::fmt::Display>","completions::shell::Shell","args::arg_builder::option::OptBuilder","errors::Error","fmt::Format","app::App","<&mut T as std::fmt::Display>"]},"fmt::Format":{"T":["std::vec::IntoIter<T, A>","std::slice::IterMut<'_, T>","std::path::Component<'_>","std::boxed::Box<T, A>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::string::Drain<'a>","<&T as std::convert::AsRef<U>>","std::ffi::CStr","std::ffi::CString","std::sync::Arc<T>","std::slice::Iter<'_, T>","std::rc::Rc<T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // dyn args::any_arg::AnyArg<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // std::option::Option<O>
let mut p2 = MaybeUninit::uninit().assume_init(); // U
let mut p3 = MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
+errors::Error::argument_conflict(p0, p1, p2, p3);
+crate::errors::Error::argument_conflict(p0, p1, p2, p3);
+<errors::Error>::argument_conflict(p0, p1, p2, p3);
-----------------
src/errors.rs errors::Error::empty_value
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::empty_value":{"U":["std::marker::Sized","std::fmt::Display"]},"fmt::Format":{"T":["std::fmt::Debug","std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::empty_value":{"U":["completions::shell::Shell","<&mut T as std::fmt::Display>","app::App","args::arg_builder::option::OptBuilder","errors::Error","<&T as std::fmt::Display>","fmt::Format","args::arg_builder::positional::PosBuilder","args::arg_builder::flag::FlagBuilder"]},"fmt::Format":{"T":["std::ffi::CStr","std::vec::IntoIter<T, A>","std::sync::Arc<T>","<&T as std::convert::AsRef<U>>","std::string::Drain<'a>","std::rc::Rc<T>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::path::Component<'_>","std::slice::Iter<'_, T>","std::ffi::CString","std::boxed::Box<T, A>","std::slice::IterMut<'_, T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // dyn args::any_arg::AnyArg<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // U
let mut p2 = MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
+errors::Error::empty_value(p0, p1, p2);
+crate::errors::Error::empty_value(p0, p1, p2);
+<errors::Error>::empty_value(p0, p1, p2);
-----------------
src/errors.rs errors::Error::invalid_value
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::invalid_value":{"B":["std::convert::AsRef","std::marker::Sized"],"G":["std::marker::Sized","std::convert::AsRef","std::fmt::Display"],"U":["std::fmt::Display","std::marker::Sized"]},"fmt::Format":{"T":["std::marker::Sized","std::convert::AsRef","std::fmt::Debug"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::invalid_value":{"B":["std::vec::Drain<'a, T, A>","std::boxed::Box<T, A>","std::ffi::CString","std::slice::IterMut<'_, T>","std::borrow::Cow<'_, T>","std::ffi::CStr","std::rc::Rc<T>","std::vec::IntoIter<T, A>","std::slice::Iter<'_, T>","std::sync::Arc<T>","<&mut T as std::convert::AsRef<U>>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::borrow::Cow<'_, std::ffi::OsStr>"],"G":["std::vec::Vec<T, A>","std::boxed::Box<T, A>","std::sync::Arc<T>","std::path::Component<'_>","std::path::PathBuf","std::path::Path","<&mut T as std::convert::AsRef<U>>","std::path::Components<'_>","std::string::Drain<'a>","<&mut T as std::fmt::Display>","std::ffi::OsStr","std::rc::Rc<T>","std::ffi::OsString","std::path::Iter<'_>","std::simd::Simd<T, LANES>","<&T as std::fmt::Display>"],"U":["args::arg_builder::positional::PosBuilder","args::arg_builder::flag::FlagBuilder","args::arg_builder::option::OptBuilder","app::App","<&T as std::fmt::Display>","completions::shell::Shell","errors::Error","fmt::Format","<&mut T as std::fmt::Display>"]},"fmt::Format":{"T":["std::rc::Rc<T>","std::boxed::Box<T, A>","std::path::Component<'_>","std::sync::Arc<T>","std::ffi::CString","std::vec::IntoIter<T, A>","std::ffi::CStr","std::slice::Iter<'_, T>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","<&T as std::convert::AsRef<U>>","std::slice::IterMut<'_, T>","std::string::Drain<'a>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // B
let mut p1 = & MaybeUninit::uninit().assume_init(); // [G]
let mut p2 = & MaybeUninit::uninit().assume_init(); // dyn args::any_arg::AnyArg<'a, 'b>
let mut p3 = MaybeUninit::uninit().assume_init(); // U
let mut p4 = MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
+errors::Error::invalid_value(p0, p1, p2, p3, p4);
+crate::errors::Error::invalid_value(p0, p1, p2, p3, p4);
+<errors::Error>::invalid_value(p0, p1, p2, p3, p4);
-----------------
src/errors.rs errors::Error::invalid_subcommand
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"errors::Error::invalid_subcommand":{"D":["std::convert::AsRef","std::fmt::Display","std::marker::Sized"],"N":["std::fmt::Display","std::marker::Sized"],"S":["std::convert::Into","std::marker::Sized"],"U":["std::marker::Sized","std::fmt::Display"]},"fmt::Format":{"T":["std::marker::Sized","std::fmt::Debug","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"errors::Error::invalid_subcommand":{"D":["<&T as std::fmt::Display>","std::rc::Rc<T>","std::path::Components<'_>","std::path::PathBuf","std::path::Component<'_>","std::sync::Arc<T>","std::simd::Simd<T, LANES>","std::path::Path","<&mut T as std::fmt::Display>","std::ffi::OsString","std::vec::Vec<T, A>","std::string::Drain<'a>","std::path::Iter<'_>","std::boxed::Box<T, A>","<&T as std::convert::AsRef<U>>","std::ffi::OsStr"],"N":["fmt::Format","<&T as std::fmt::Display>","args::arg_builder::flag::FlagBuilder","args::arg_builder::positional::PosBuilder","app::App","completions::shell::Shell","errors::Error","args::arg_builder::option::OptBuilder"],"S":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"],"U":["fmt::Format","args::arg_builder::positional::PosBuilder","app::App","completions::shell::Shell","<&T as std::fmt::Display>","<&mut T as std::fmt::Display>","args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder","errors::Error"]},"fmt::Format":{"T":["std::ffi::CString","std::boxed::Box<T, A>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::slice::IterMut<'_, T>","<&mut T as std::fmt::Debug>","std::ffi::CStr","std::string::Drain<'a>","std::rc::Rc<T>","std::sync::Arc<T>","std::path::Component<'_>","std::vec::IntoIter<T, A>","std::slice::Iter<'_, T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // S
let mut p1 = MaybeUninit::uninit().assume_init(); // D
let mut p2 = MaybeUninit::uninit().assume_init(); // N
let mut p3 = MaybeUninit::uninit().assume_init(); // U
let mut p4 = MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
+errors::Error::invalid_subcommand(p0, p1, p2, p3, p4);
+crate::errors::Error::invalid_subcommand(p0, p1, p2, p3, p4);
+<errors::Error>::invalid_subcommand(p0, p1, p2, p3, p4);
-----------------
src/errors.rs errors::Error::unrecognized_subcommand
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"errors::Error::unrecognized_subcommand":{"N":["std::marker::Sized","std::fmt::Display"],"S":["std::convert::Into","std::marker::Sized"]},"fmt::Format":{"T":["std::convert::AsRef","std::marker::Sized","std::fmt::Debug"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"errors::Error::unrecognized_subcommand":{"N":["<&mut T as std::fmt::Display>","<&T as std::fmt::Display>","errors::Error","args::arg_builder::positional::PosBuilder","app::App","args::arg_builder::flag::FlagBuilder","completions::shell::Shell","args::arg_builder::option::OptBuilder","fmt::Format"],"S":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]},"fmt::Format":{"T":["std::vec::IntoIter<T, A>","std::boxed::Box<T, A>","std::string::Drain<'a>","std::ffi::CStr","std::ffi::CString","std::slice::IterMut<'_, T>","std::path::Component<'_>","std::slice::Iter<'_, T>","std::sync::Arc<T>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::rc::Rc<T>","<&T as std::convert::AsRef<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // S
let mut p1 = MaybeUninit::uninit().assume_init(); // N
let mut p2 = MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
+errors::Error::unrecognized_subcommand(p0, p1, p2);
+crate::errors::Error::unrecognized_subcommand(p0, p1, p2);
+<errors::Error>::unrecognized_subcommand(p0, p1, p2);
-----------------
src/errors.rs errors::Error::missing_required_argument
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::missing_required_argument":{"R":["std::marker::Sized","std::fmt::Display"],"U":["std::fmt::Display","std::marker::Sized"]},"fmt::Format":{"T":["std::fmt::Debug","std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::missing_required_argument":{"R":["<&mut T as std::fmt::Display>","args::arg_builder::option::OptBuilder","fmt::Format","args::arg_builder::flag::FlagBuilder","args::arg_builder::positional::PosBuilder","app::App","<&T as std::fmt::Display>","errors::Error","completions::shell::Shell"],"U":["args::arg_builder::positional::PosBuilder","completions::shell::Shell","errors::Error","args::arg_builder::option::OptBuilder","<&mut T as std::fmt::Display>","args::arg_builder::flag::FlagBuilder","<&T as std::fmt::Display>","fmt::Format","app::App"]},"fmt::Format":{"T":["bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::ffi::CStr","std::path::Component<'_>","std::vec::IntoIter<T, A>","<&T as std::convert::AsRef<U>>","std::slice::Iter<'_, T>","std::string::Drain<'a>","std::rc::Rc<T>","std::boxed::Box<T, A>","std::ffi::CString","std::sync::Arc<T>","std::slice::IterMut<'_, T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // R
let mut p1 = MaybeUninit::uninit().assume_init(); // U
let mut p2 = MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
+errors::Error::missing_required_argument(p0, p1, p2);
+crate::errors::Error::missing_required_argument(p0, p1, p2);
+<errors::Error>::missing_required_argument(p0, p1, p2);
-----------------
src/errors.rs errors::Error::missing_subcommand
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::missing_subcommand":{"N":["std::marker::Sized","std::fmt::Display","std::convert::AsRef"],"U":["std::marker::Sized","std::fmt::Display"]},"fmt::Format":{"T":["std::fmt::Debug","std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::missing_subcommand":{"N":["<&T as std::fmt::Display>","std::ffi::OsStr","<&T as std::convert::AsRef<U>>","std::boxed::Box<T, A>","std::path::Iter<'_>","std::string::Drain<'a>","std::rc::Rc<T>","std::path::Component<'_>","std::path::PathBuf","std::path::Path","std::vec::Vec<T, A>","std::sync::Arc<T>","std::simd::Simd<T, LANES>","std::ffi::OsString","std::path::Components<'_>"],"U":["completions::shell::Shell","<&mut T as std::fmt::Display>","args::arg_builder::flag::FlagBuilder","app::App","fmt::Format","args::arg_builder::option::OptBuilder","errors::Error","args::arg_builder::positional::PosBuilder"]},"fmt::Format":{"T":["std::string::Drain<'a>","std::rc::Rc<T>","std::vec::IntoIter<T, A>","std::boxed::Box<T, A>","std::ffi::CStr","std::slice::IterMut<'_, T>","std::slice::Iter<'_, T>","<&mut T as std::fmt::Debug>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::sync::Arc<T>","std::ffi::CString","std::path::Component<'_>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // N
let mut p1 = MaybeUninit::uninit().assume_init(); // U
let mut p2 = MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
+errors::Error::missing_subcommand(p0, p1, p2);
+crate::errors::Error::missing_subcommand(p0, p1, p2);
+<errors::Error>::missing_subcommand(p0, p1, p2);
-----------------
src/errors.rs errors::Error::invalid_utf8
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::invalid_utf8":{"U":["std::marker::Sized","std::fmt::Display"]},"fmt::Format":{"T":["std::fmt::Debug","std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::invalid_utf8":{"U":["errors::Error","completions::shell::Shell","app::App","<&mut T as std::fmt::Display>","args::arg_builder::positional::PosBuilder","args::arg_builder::option::OptBuilder","fmt::Format","<&T as std::fmt::Display>","args::arg_builder::flag::FlagBuilder"]},"fmt::Format":{"T":["<&T as std::convert::AsRef<U>>","std::sync::Arc<T>","std::vec::IntoIter<T, A>","std::ffi::CStr","std::rc::Rc<T>","std::slice::IterMut<'_, T>","std::slice::Iter<'_, T>","std::string::Drain<'a>","std::boxed::Box<T, A>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::ffi::CString","std::path::Component<'_>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // U
let mut p1 = MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
+errors::Error::invalid_utf8(p0, p1);
+crate::errors::Error::invalid_utf8(p0, p1);
+<errors::Error>::invalid_utf8(p0, p1);
-----------------
src/errors.rs errors::Error::too_many_values
deps:{"<&T as std::fmt::Debug>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::too_many_values":{"U":["std::marker::Sized","std::fmt::Display"],"V":["std::convert::AsRef","std::marker::Sized","std::fmt::Display","std::borrow::ToOwned"]},"fmt::Format":{"T":["std::marker::Sized","std::convert::AsRef","std::fmt::Debug"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::too_many_values":{"U":["args::arg_builder::flag::FlagBuilder","<&mut T as std::fmt::Display>","fmt::Format","args::arg_builder::option::OptBuilder","app::App","args::arg_builder::positional::PosBuilder","completions::shell::Shell","errors::Error"],"V":["std::path::Path","std::ffi::OsStr"]},"fmt::Format":{"T":["std::vec::IntoIter<T, A>","std::rc::Rc<T>","std::string::Drain<'a>","std::ffi::CString","std::slice::IterMut<'_, T>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::sync::Arc<T>","std::boxed::Box<T, A>","std::ffi::CStr","std::path::Component<'_>","<&T as std::fmt::Debug>","std::slice::Iter<'_, T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // V
let mut p1 = & MaybeUninit::uninit().assume_init(); // dyn args::any_arg::AnyArg<'a, 'b>
let mut p2 = MaybeUninit::uninit().assume_init(); // U
let mut p3 = MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
+errors::Error::too_many_values(p0, p1, p2, p3);
+crate::errors::Error::too_many_values(p0, p1, p2, p3);
+<errors::Error>::too_many_values(p0, p1, p2, p3);
-----------------
src/errors.rs errors::Error::too_few_values
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::too_few_values":{"U":["std::marker::Sized","std::fmt::Display"]},"fmt::Format":{"T":["std::convert::AsRef","std::fmt::Debug","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::too_few_values":{"U":["args::arg_builder::positional::PosBuilder","completions::shell::Shell","app::App","args::arg_builder::option::OptBuilder","args::arg_builder::flag::FlagBuilder","errors::Error","fmt::Format","<&mut T as std::fmt::Display>"]},"fmt::Format":{"T":["std::string::Drain<'a>","std::rc::Rc<T>","std::sync::Arc<T>","std::path::Component<'_>","std::slice::IterMut<'_, T>","std::ffi::CStr","std::vec::IntoIter<T, A>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::ffi::CString","std::slice::Iter<'_, T>","<&mut T as std::fmt::Debug>","std::boxed::Box<T, A>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // dyn args::any_arg::AnyArg<'a, 'b>
let mut p1 = 0u64; // None+u64
let mut p2 = 0usize; // None+usize
let mut p3 = MaybeUninit::uninit().assume_init(); // U
let mut p4 = MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
+errors::Error::too_few_values(p0, p1, p2, p3, p4);
+crate::errors::Error::too_few_values(p0, p1, p2, p3, p4);
+<errors::Error>::too_few_values(p0, p1, p2, p3, p4);
-----------------
src/errors.rs errors::Error::value_validation
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::option::Option<&dyn args::any_arg::AnyArg<'a, 'b>>
let mut p1 = std::string::String::new(); // None+std::string::String
let mut p2 = MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
+errors::Error::value_validation(p0, p1, p2);
+crate::errors::Error::value_validation(p0, p1, p2);
+<errors::Error>::value_validation(p0, p1, p2);
-----------------
src/errors.rs errors::Error::value_validation_auto
deps:{}
candidates:{}
let mut p0 = std::string::String::new(); // None+std::string::String
+errors::Error::value_validation_auto(p0);
+crate::errors::Error::value_validation_auto(p0);
+<errors::Error>::value_validation_auto(p0);
-----------------
src/errors.rs errors::Error::wrong_number_of_values
deps:{"<&T as std::fmt::Debug>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::wrong_number_of_values":{"S":["std::marker::Sized","std::fmt::Display"],"U":["std::marker::Sized","std::fmt::Display"]},"fmt::Format":{"T":["std::convert::AsRef","std::marker::Sized","std::fmt::Debug"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Debug>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::wrong_number_of_values":{"S":["args::arg_builder::flag::FlagBuilder","completions::shell::Shell","<&T as std::fmt::Display>","app::App","errors::Error","args::arg_builder::option::OptBuilder","fmt::Format","args::arg_builder::positional::PosBuilder"],"U":["args::arg_builder::positional::PosBuilder","fmt::Format","completions::shell::Shell","args::arg_builder::flag::FlagBuilder","errors::Error","<&mut T as std::fmt::Display>","args::arg_builder::option::OptBuilder","app::App"]},"fmt::Format":{"T":["std::ffi::CString","std::boxed::Box<T, A>","std::vec::IntoIter<T, A>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::sync::Arc<T>","std::slice::Iter<'_, T>","std::rc::Rc<T>","std::path::Component<'_>","std::string::Drain<'a>","std::ffi::CStr","std::slice::IterMut<'_, T>","<&mut T as std::fmt::Debug>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // dyn args::any_arg::AnyArg<'a, 'b>
let mut p1 = 0u64; // None+u64
let mut p2 = 0usize; // None+usize
let mut p3 = MaybeUninit::uninit().assume_init(); // S
let mut p4 = MaybeUninit::uninit().assume_init(); // U
let mut p5 = MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
+errors::Error::wrong_number_of_values(p0, p1, p2, p3, p4, p5);
+crate::errors::Error::wrong_number_of_values(p0, p1, p2, p3, p4, p5);
+<errors::Error>::wrong_number_of_values(p0, p1, p2, p3, p4, p5);
-----------------
src/errors.rs errors::Error::unexpected_multiple_usage
deps:{"<&T as std::fmt::Debug>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::unexpected_multiple_usage":{"U":["std::marker::Sized","std::fmt::Display"]},"fmt::Format":{"T":["std::convert::AsRef","std::fmt::Debug","std::marker::Sized"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"errors::Error::unexpected_multiple_usage":{"U":["app::App","completions::shell::Shell","<&T as std::fmt::Display>","args::arg_builder::option::OptBuilder","args::arg_builder::positional::PosBuilder","args::arg_builder::flag::FlagBuilder","errors::Error","fmt::Format"]},"fmt::Format":{"T":["std::boxed::Box<T, A>","<&mut T as std::convert::AsRef<U>>","std::string::Drain<'a>","std::sync::Arc<T>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::rc::Rc<T>","std::ffi::CStr","std::path::Component<'_>","std::slice::Iter<'_, T>","std::ffi::CString","std::vec::IntoIter<T, A>","std::slice::IterMut<'_, T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // dyn args::any_arg::AnyArg<'a, 'b>
let mut p1 = MaybeUninit::uninit().assume_init(); // U
let mut p2 = MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
+errors::Error::unexpected_multiple_usage(p0, p1, p2);
+crate::errors::Error::unexpected_multiple_usage(p0, p1, p2);
+<errors::Error>::unexpected_multiple_usage(p0, p1, p2);
-----------------
src/errors.rs errors::Error::unknown_argument
deps:{"<&T as std::fmt::Debug>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"errors::Error::unknown_argument":{"A":["std::marker::Sized","std::convert::Into"],"U":["std::fmt::Display","std::marker::Sized"]},"fmt::Format":{"T":["std::marker::Sized","std::fmt::Debug","std::convert::AsRef"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"errors::Error::unknown_argument":{"A":["args::arg_matcher::ArgMatcher","<T as std::convert::Into<U>>"],"U":["errors::Error","<&mut T as std::fmt::Display>","args::arg_builder::flag::FlagBuilder","args::arg_builder::option::OptBuilder","app::App","fmt::Format","<&T as std::fmt::Display>","completions::shell::Shell","args::arg_builder::positional::PosBuilder"]},"fmt::Format":{"T":["std::sync::Arc<T>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::slice::Iter<'_, T>","<&mut T as std::convert::AsRef<U>>","std::ffi::CString","std::path::Component<'_>","std::rc::Rc<T>","std::ffi::CStr","std::slice::IterMut<'_, T>","std::vec::IntoIter<T, A>","std::boxed::Box<T, A>","std::string::Drain<'a>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // A
let mut p1 = "sample"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // U
let mut p3 = MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
+errors::Error::unknown_argument(p0, &p1, p2, p3);
+crate::errors::Error::unknown_argument(p0, &p1, p2, p3);
+<errors::Error>::unknown_argument(p0, &p1, p2, p3);
-----------------
src/errors.rs errors::Error::io_error
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // errors::Error
let mut p1 = MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
+errors::Error::io_error(p0, p1);
+crate::errors::Error::io_error(p0, p1);
+<errors::Error>::io_error(p0, p1);
-----------------
src/errors.rs errors::Error::argument_not_found_auto
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"errors::Error::argument_not_found_auto":{"A":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"errors::Error::argument_not_found_auto":{"A":["<T as std::convert::Into<U>>","args::arg_matcher::ArgMatcher"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // A
+errors::Error::argument_not_found_auto(p0);
+crate::errors::Error::argument_not_found_auto(p0);
+<errors::Error>::argument_not_found_auto(p0);
-----------------
src/errors.rs errors::Error::with_description
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = MaybeUninit::uninit().assume_init(); // errors::ErrorKind
+errors::Error::with_description(&p0, p1);
+crate::errors::Error::with_description(&p0, p1);
+<errors::Error>::with_description(&p0, p1);
-----------------
src/errors.rs <errors::Error as std::error::Error>::description
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // errors::Error
+p0.description();
+<errors::Error as std::error::Error>::description(p0);
+crate::<errors::Error as std::error::Error>::description(p0);
+<errors::Error>::description(p0);
-----------------
src/errors.rs <errors::Error as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // errors::Error
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<errors::Error as std::fmt::Display>::fmt(p0, p1);
+crate::<errors::Error as std::fmt::Display>::fmt(p0, p1);
+<errors::Error>::fmt(p0, p1);
-----------------
src/errors.rs <errors::Error as std::convert::From<std::io::Error>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::io::Error
+<errors::Error as std::convert::From<std::io::Error>>::from(p0);
+crate::<errors::Error as std::convert::From<std::io::Error>>::from(p0);
+<errors::Error>::from(p0);
-----------------
src/errors.rs <errors::Error as std::convert::From<std::fmt::Error>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::fmt::Error
+<errors::Error as std::convert::From<std::fmt::Error>>::from(p0);
+crate::<errors::Error as std::convert::From<std::fmt::Error>>::from(p0);
+<errors::Error>::from(p0);
-----------------
src/fmt.rs <fmt::ColorWhen as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<fmt::ColorWhen as std::fmt::Debug>::fmt(p0, p1);
+crate::<fmt::ColorWhen as std::fmt::Debug>::fmt(p0, p1);
+<fmt::ColorWhen>::fmt(p0, p1);
-----------------
src/fmt.rs <fmt::ColorWhen as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
+p0.clone();
+<fmt::ColorWhen as std::clone::Clone>::clone(p0);
+crate::<fmt::ColorWhen as std::clone::Clone>::clone(p0);
+<fmt::ColorWhen>::clone(p0);
-----------------
src/fmt.rs <fmt::ColorWhen as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
let mut p1 = & MaybeUninit::uninit().assume_init(); // fmt::ColorWhen
+p0.eq(p1);
+<fmt::ColorWhen as std::cmp::PartialEq>::eq(p0, p1);
+crate::<fmt::ColorWhen as std::cmp::PartialEq>::eq(p0, p1);
+<fmt::ColorWhen>::eq(p0, p1);
-----------------
src/fmt.rs fmt::Colorizer::new
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // fmt::ColorizerOption
+fmt::Colorizer::new(p0);
+crate::fmt::Colorizer::new(p0);
+<fmt::Colorizer>::new(p0);
-----------------
src/fmt.rs fmt::Colorizer::good
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"fmt::Colorizer::good":{"T":["std::fmt::Display","std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"fmt::Colorizer::good":{"T":["std::sync::Arc<T>","std::simd::Simd<T, LANES>","std::string::Drain<'a>","<&T as std::fmt::Display>","std::path::Path","std::ffi::OsStr","std::path::Iter<'_>","std::boxed::Box<T, A>","std::vec::Vec<T, A>","<&mut T as std::fmt::Display>","std::rc::Rc<T>","<&mut T as std::convert::AsRef<U>>","std::path::Components<'_>","std::path::PathBuf","std::ffi::OsString","std::path::Component<'_>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fmt::Colorizer
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.good(p1);
+fmt::Colorizer::good(p0, p1);
+crate::fmt::Colorizer::good(p0, p1);
+<fmt::Colorizer>::good(p0, p1);
-----------------
src/fmt.rs fmt::Colorizer::warning
deps:{"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Display>":{},"fmt::Colorizer::warning":{"T":["std::marker::Sized","std::convert::AsRef","std::fmt::Display"]}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut T as std::fmt::Display>":{},"fmt::Colorizer::warning":{"T":["<&mut T as std::fmt::Display>","std::sync::Arc<T>","std::path::Components<'_>","std::simd::Simd<T, LANES>","std::path::Iter<'_>","std::vec::Vec<T, A>","std::path::Path","<&T as std::fmt::Display>","std::path::Component<'_>","std::rc::Rc<T>","std::string::Drain<'a>","std::ffi::OsString","std::path::PathBuf","std::ffi::OsStr","std::boxed::Box<T, A>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fmt::Colorizer
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.warning(p1);
+fmt::Colorizer::warning(p0, p1);
+crate::fmt::Colorizer::warning(p0, p1);
+<fmt::Colorizer>::warning(p0, p1);
-----------------
src/fmt.rs fmt::Colorizer::error
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"fmt::Colorizer::error":{"T":["std::marker::Sized","std::convert::AsRef","std::fmt::Display"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"<&mut T as std::fmt::Display>":{},"fmt::Colorizer::error":{"T":["std::string::Drain<'a>","<&T as std::convert::AsRef<U>>","std::rc::Rc<T>","std::vec::Vec<T, A>","<&mut T as std::convert::AsRef<U>>","std::path::Path","std::path::Component<'_>","std::ffi::OsStr","std::path::Iter<'_>","std::sync::Arc<T>","<&T as std::fmt::Display>","std::simd::Simd<T, LANES>","std::path::Components<'_>","std::path::PathBuf","std::boxed::Box<T, A>","std::ffi::OsString"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fmt::Colorizer
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.error(p1);
+fmt::Colorizer::error(p0, p1);
+crate::fmt::Colorizer::error(p0, p1);
+<fmt::Colorizer>::error(p0, p1);
-----------------
src/fmt.rs fmt::Colorizer::none
deps:{"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"fmt::Colorizer::none":{"T":["std::convert::AsRef","std::marker::Sized","std::fmt::Display"]}}
candidates:{"<&T as std::fmt::Display>":{},"<&mut T as std::convert::AsRef<U>>":{},"fmt::Colorizer::none":{"T":["std::sync::Arc<T>","std::rc::Rc<T>","<&mut T as std::convert::AsRef<U>>","std::path::Iter<'_>","std::ffi::OsString","std::vec::Vec<T, A>","std::path::PathBuf","std::string::Drain<'a>","std::path::Component<'_>","std::path::Path","std::path::Components<'_>","std::simd::Simd<T, LANES>","<&T as std::fmt::Display>","std::ffi::OsStr","std::boxed::Box<T, A>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fmt::Colorizer
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.none(p1);
+fmt::Colorizer::none(p0, p1);
+crate::fmt::Colorizer::none(p0, p1);
+<fmt::Colorizer>::none(p0, p1);
-----------------
src/fmt.rs <fmt::Colorizer as std::default::Default>::default
deps:{}
candidates:{}
+<fmt::Colorizer as std::default::Default>::default();
+crate::<fmt::Colorizer as std::default::Default>::default();
+<fmt::Colorizer>::default();
-----------------
src/fmt.rs <fmt::Format<T> as std::fmt::Debug>::fmt
deps:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<fmt::Format<T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"fmt::Format":{"T":["std::convert::AsRef","std::fmt::Debug","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<fmt::Format<T> as std::fmt::Debug>::fmt":{"T":["completions::shell::Shell","errors::Error","fmt::ColorWhen","usage_parser::UsageToken","args::arg_builder::base::Base","usage_parser::UsageParser","args::subcommand::SubCommand","args::arg_matches::Indices","app::settings::AppFlags","<*const T as std::fmt::Debug>","errors::ErrorKind","args::arg_builder::switched::Switched","args::arg_matches::Values","args::settings::ArgSettings","args::matched_arg::MatchedArg","args::arg_matches::ArgMatches","args::group::ArgGroup","args::settings::ArgFlags","args::arg_matches::OsValues","app::settings::Flags","app::settings::AppSettings","args::arg_builder::flag::FlagBuilder","app::parser::ParseResult","fmt::Format","osstringext::OsSplit","args::settings::Flags","<&T as std::fmt::Debug>"]},"fmt::Format":{"T":["bitflags::core::num::dec2flt::common::AsciiStr<'a>","<&T as std::convert::AsRef<U>>","std::boxed::Box<T, A>","std::vec::IntoIter<T, A>","std::sync::Arc<T>","std::string::Drain<'a>","std::slice::IterMut<'_, T>","std::slice::Iter<'_, T>","std::path::Component<'_>","std::rc::Rc<T>","std::ffi::CString","std::ffi::CStr"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fmt::Format<T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<fmt::Format<T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<fmt::Format<T> as std::fmt::Debug>::fmt(p0, p1);
+<fmt::Format<T>>::fmt(p0, p1);
-----------------
src/fmt.rs fmt::Format::<T>::format
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"fmt::Format::<T>::format":{"T":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"fmt::Format::<T>::format":{"T":["bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::ffi::CString","std::boxed::Box<T, A>","std::vec::Drain<'a, T, A>","std::sync::Arc<T>","<&T as std::convert::AsRef<U>>","std::ffi::CStr","std::rc::Rc<T>","std::slice::Iter<'_, T>","std::slice::IterMut<'_, T>","std::vec::IntoIter<T, A>","std::borrow::Cow<'_, std::ffi::OsStr>","std::borrow::Cow<'_, T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fmt::Format<T>
+p0.format();
+fmt::Format::<T>::format(p0);
+crate::fmt::Format::<T>::format(p0);
+<fmt::Format<T>>::format(p0);
-----------------
src/fmt.rs <fmt::Format<T> as std::fmt::Display>::fmt
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<fmt::Format<T> as std::fmt::Display>::fmt":{"T":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<fmt::Format<T> as std::fmt::Display>::fmt":{"T":["std::boxed::Box<T, A>","bitflags::core::num::dec2flt::common::AsciiStr<'a>","std::sync::Arc<T>","std::slice::IterMut<'_, T>","std::vec::IntoIter<T, A>","std::rc::Rc<T>","std::vec::Drain<'a, T, A>","std::ffi::CStr","std::borrow::Cow<'_, T>","std::slice::Iter<'_, T>","std::ffi::CString","<&T as std::convert::AsRef<U>>","std::borrow::Cow<'_, std::ffi::OsStr>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fmt::Format<T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<fmt::Format<T> as std::fmt::Display>::fmt(p0, p1);
+crate::<fmt::Format<T> as std::fmt::Display>::fmt(p0, p1);
+<fmt::Format<T>>::fmt(p0, p1);
-----------------
src/osstringext.rs <std::ffi::OsStr as osstringext::OsStrExt2>::starts_with
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.starts_with(p1);
+<std::ffi::OsStr as osstringext::OsStrExt2>::starts_with(p0, p1);
+crate::<std::ffi::OsStr as osstringext::OsStrExt2>::starts_with(p0, p1);
+<std::ffi::OsStr>::starts_with(p0, p1);
-----------------
src/osstringext.rs <std::ffi::OsStr as osstringext::OsStrExt2>::contains_byte
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
let mut p1 = 0u8; // None+u8
+p0.contains_byte(p1);
+<std::ffi::OsStr as osstringext::OsStrExt2>::contains_byte(p0, p1);
+crate::<std::ffi::OsStr as osstringext::OsStrExt2>::contains_byte(p0, p1);
+<std::ffi::OsStr>::contains_byte(p0, p1);
-----------------
src/osstringext.rs <std::ffi::OsStr as osstringext::OsStrExt2>::split_at_byte
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
let mut p1 = 0u8; // None+u8
+p0.split_at_byte(p1);
+<std::ffi::OsStr as osstringext::OsStrExt2>::split_at_byte(p0, p1);
+crate::<std::ffi::OsStr as osstringext::OsStrExt2>::split_at_byte(p0, p1);
+<std::ffi::OsStr>::split_at_byte(p0, p1);
-----------------
src/osstringext.rs <std::ffi::OsStr as osstringext::OsStrExt2>::trim_left_matches
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
let mut p1 = 0u8; // None+u8
+p0.trim_left_matches(p1);
+<std::ffi::OsStr as osstringext::OsStrExt2>::trim_left_matches(p0, p1);
+crate::<std::ffi::OsStr as osstringext::OsStrExt2>::trim_left_matches(p0, p1);
+<std::ffi::OsStr>::trim_left_matches(p0, p1);
-----------------
src/osstringext.rs <std::ffi::OsStr as osstringext::OsStrExt2>::split_at
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
let mut p1 = 0usize; // None+usize
+p0.split_at(p1);
+<std::ffi::OsStr as osstringext::OsStrExt2>::split_at(p0, p1);
+crate::<std::ffi::OsStr as osstringext::OsStrExt2>::split_at(p0, p1);
+<std::ffi::OsStr>::split_at(p0, p1);
-----------------
src/osstringext.rs <std::ffi::OsStr as osstringext::OsStrExt2>::split
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::ffi::OsStr
let mut p1 = 0u8; // None+u8
+p0.split(p1);
+<std::ffi::OsStr as osstringext::OsStrExt2>::split(p0, p1);
+crate::<std::ffi::OsStr as osstringext::OsStrExt2>::split(p0, p1);
+<std::ffi::OsStr>::split(p0, p1);
-----------------
src/osstringext.rs <osstringext::OsSplit<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // osstringext::OsSplit<'a>
+p0.clone();
+<osstringext::OsSplit<'a> as std::clone::Clone>::clone(p0);
+crate::<osstringext::OsSplit<'a> as std::clone::Clone>::clone(p0);
+<osstringext::OsSplit<'a>>::clone(p0);
-----------------
src/osstringext.rs <osstringext::OsSplit<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // osstringext::OsSplit<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<osstringext::OsSplit<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<osstringext::OsSplit<'a> as std::fmt::Debug>::fmt(p0, p1);
+<osstringext::OsSplit<'a>>::fmt(p0, p1);
-----------------
src/osstringext.rs <osstringext::OsSplit<'a> as std::iter::Iterator>::next
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // osstringext::OsSplit<'a>
+p0.next();
+<osstringext::OsSplit<'a> as std::iter::Iterator>::next(p0);
+crate::<osstringext::OsSplit<'a> as std::iter::Iterator>::next(p0);
+<osstringext::OsSplit<'a>>::next(p0);
-----------------
src/strext.rs <str as strext::_StrExt>::_is_char_boundary
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = 0usize; // None+usize
+p0._is_char_boundary(p1);
+<str as strext::_StrExt>::_is_char_boundary(&p0, p1);
+crate::<str as strext::_StrExt>::_is_char_boundary(&p0, p1);
+<str>::_is_char_boundary(&p0, p1);
-----------------
src/usage_parser.rs <usage_parser::UsageToken as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // usage_parser::UsageToken
let mut p1 = & MaybeUninit::uninit().assume_init(); // usage_parser::UsageToken
+p0.eq(p1);
+<usage_parser::UsageToken as std::cmp::PartialEq>::eq(p0, p1);
+crate::<usage_parser::UsageToken as std::cmp::PartialEq>::eq(p0, p1);
+<usage_parser::UsageToken>::eq(p0, p1);
-----------------
src/usage_parser.rs <usage_parser::UsageToken as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // usage_parser::UsageToken
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<usage_parser::UsageToken as std::fmt::Debug>::fmt(p0, p1);
+crate::<usage_parser::UsageToken as std::fmt::Debug>::fmt(p0, p1);
+<usage_parser::UsageToken>::fmt(p0, p1);
-----------------
src/usage_parser.rs <usage_parser::UsageParser<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // usage_parser::UsageParser<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<usage_parser::UsageParser<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<usage_parser::UsageParser<'a> as std::fmt::Debug>::fmt(p0, p1);
+<usage_parser::UsageParser<'a>>::fmt(p0, p1);
-----------------
src/usage_parser.rs usage_parser::UsageParser::<'a>::new
'a
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+usage_parser::UsageParser::<'a>::new(&p0);
+crate::usage_parser::UsageParser::<'a>::new(&p0);
+<usage_parser::UsageParser<'a>>::new(&p0);
-----------------
src/usage_parser.rs usage_parser::UsageParser::<'a>::from_usage
'a
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+usage_parser::UsageParser::<'a>::from_usage(&p0);
+crate::usage_parser::UsageParser::<'a>::from_usage(&p0);
+<usage_parser::UsageParser<'a>>::from_usage(&p0);
-----------------
src/usage_parser.rs usage_parser::UsageParser::<'a>::parse
'a
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // usage_parser::UsageParser<'a>
+p0.parse();
+usage_parser::UsageParser::<'a>::parse(p0);
+crate::usage_parser::UsageParser::<'a>::parse(p0);
+<usage_parser::UsageParser<'a>>::parse(p0);
-----------------
src/usage_parser.rs usage_parser::UsageParser::<'a>::name
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // usage_parser::UsageParser<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'a>
+p0.name(p1);
+usage_parser::UsageParser::<'a>::name(p0, p1);
+crate::usage_parser::UsageParser::<'a>::name(p0, p1);
+<usage_parser::UsageParser<'a>>::name(p0, p1);
-----------------
src/usage_parser.rs usage_parser::UsageParser::<'a>::stop_at
'a
deps:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"usage_parser::UsageParser::<'a>::stop_at":{"F":["std::marker::Sized","std::ops::Fn"]}}
candidates:{"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{},"usage_parser::UsageParser::<'a>::stop_at":{"F":["bitflags::core::str::BytesIsNotEmpty","std::boxed::Box<F, A>","bitflags::core::str::UnsafeBytesToStr","bitflags::core::str::CharEscapeDefault","bitflags::core::str::IsWhitespace","bitflags::core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","bitflags::core::str::LinesAnyMap","bitflags::core::str::CharEscapeDebugContinue","bitflags::core::str::IsNotEmpty","bitflags::core::str::IsAsciiWhitespace","bitflags::core::slice::ascii::EscapeByte"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // usage_parser::UsageParser<'a>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.stop_at(p1);
+usage_parser::UsageParser::<'a>::stop_at(p0, p1);
+crate::usage_parser::UsageParser::<'a>::stop_at(p0, p1);
+<usage_parser::UsageParser<'a>>::stop_at(p0, p1);
-----------------
src/usage_parser.rs usage_parser::UsageParser::<'a>::short_or_long
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // usage_parser::UsageParser<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'a>
+p0.short_or_long(p1);
+usage_parser::UsageParser::<'a>::short_or_long(p0, p1);
+crate::usage_parser::UsageParser::<'a>::short_or_long(p0, p1);
+<usage_parser::UsageParser<'a>>::short_or_long(p0, p1);
-----------------
src/usage_parser.rs usage_parser::UsageParser::<'a>::long
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // usage_parser::UsageParser<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'a>
+p0.long(p1);
+usage_parser::UsageParser::<'a>::long(p0, p1);
+crate::usage_parser::UsageParser::<'a>::long(p0, p1);
+<usage_parser::UsageParser<'a>>::long(p0, p1);
-----------------
src/usage_parser.rs usage_parser::UsageParser::<'a>::short
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // usage_parser::UsageParser<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'a>
+p0.short(p1);
+usage_parser::UsageParser::<'a>::short(p0, p1);
+crate::usage_parser::UsageParser::<'a>::short(p0, p1);
+<usage_parser::UsageParser<'a>>::short(p0, p1);
-----------------
src/usage_parser.rs usage_parser::UsageParser::<'a>::multiple
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // usage_parser::UsageParser<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // args::arg::Arg<'_, '_>
+p0.multiple(p1);
+usage_parser::UsageParser::<'a>::multiple(p0, p1);
+crate::usage_parser::UsageParser::<'a>::multiple(p0, p1);
+<usage_parser::UsageParser<'a>>::multiple(p0, p1);
-----------------
src/usage_parser.rs usage_parser::UsageParser::<'a>::help
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // usage_parser::UsageParser<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // args::arg::Arg<'a, 'a>
+p0.help(p1);
+usage_parser::UsageParser::<'a>::help(p0, p1);
+crate::usage_parser::UsageParser::<'a>::help(p0, p1);
+<usage_parser::UsageParser<'a>>::help(p0, p1);