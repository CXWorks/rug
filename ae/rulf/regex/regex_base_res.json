{"<&'a T as input::Input>::as_bytes": true, "<&'a T as input::Input>::at": false, "<&'a T as input::Input>::is_empty_match": false, "<&'a T as input::Input>::len": false, "<&'a T as input::Input>::next_char": false, "<&'a T as input::Input>::prefix_at": false, "<&'a T as input::Input>::previous_char": false, "<&'a [u8] as re_bytes::Replacer>::no_expansion": false, "<&'a [u8] as re_bytes::Replacer>::replace_append": false, "<&'a prog::Program as std::iter::IntoIterator>::into_iter": true, "<&'a re_set::bytes::SetMatches as std::iter::IntoIterator>::into_iter": false, "<&'a re_set::unicode::SetMatches as std::iter::IntoIterator>::into_iter": false, "<&'a sparse::SparseSet as std::iter::IntoIterator>::into_iter": true, "<&'a str as re_unicode::Replacer>::no_expansion": true, "<&'a str as re_unicode::Replacer>::replace_append": false, "<F as re_bytes::Replacer>::replace_append": false, "<F as re_unicode::Replacer>::replace_append": false, "<dfa::InstPtrs<'a> as std::iter::Iterator>::next": true, "<error::Error as std::error::Error>::description": true, "<exec::Exec as std::clone::Clone>::clone": false, "<exec::ExecNoSync<'c> as re_trait::RegularExpression>::captures_read_at": false, "<exec::ExecNoSync<'c> as re_trait::RegularExpression>::find_at": false, "<exec::ExecNoSync<'c> as re_trait::RegularExpression>::is_match_at": false, "<exec::ExecNoSync<'c> as re_trait::RegularExpression>::next_after_empty": false, "<exec::ExecNoSync<'c> as re_trait::RegularExpression>::shortest_match_at": false, "<exec::ExecNoSync<'c> as re_trait::RegularExpression>::slots_len": false, "<exec::ExecNoSyncStr<'c> as re_trait::RegularExpression>::captures_read_at": false, "<exec::ExecNoSyncStr<'c> as re_trait::RegularExpression>::find_at": false, "<exec::ExecNoSyncStr<'c> as re_trait::RegularExpression>::is_match_at": false, "<exec::ExecNoSyncStr<'c> as re_trait::RegularExpression>::next_after_empty": false, "<exec::ExecNoSyncStr<'c> as re_trait::RegularExpression>::shortest_match_at": false, "<exec::ExecNoSyncStr<'c> as re_trait::RegularExpression>::slots_len": false, "<expand::Ref<'a> as std::convert::From<&'a str>>::from": true, "<expand::Ref<'static> as std::convert::From<usize>>::from": true, "<input::ByteInput<'t> as input::Input>::as_bytes": true, "<input::ByteInput<'t> as input::Input>::at": true, "<input::ByteInput<'t> as input::Input>::is_empty_match": false, "<input::ByteInput<'t> as input::Input>::len": true, "<input::ByteInput<'t> as input::Input>::next_char": true, "<input::ByteInput<'t> as input::Input>::prefix_at": false, "<input::ByteInput<'t> as input::Input>::previous_char": true, "<input::ByteInput<'t> as std::ops::Deref>::deref": true, "<input::Char as std::cmp::PartialEq<char>>::eq": true, "<input::Char as std::cmp::PartialOrd<char>>::partial_cmp": true, "<input::Char as std::convert::From<char>>::from": false, "<input::Char as std::convert::From<std::option::Option<char>>>::from": false, "<input::CharInput<'t> as input::Input>::as_bytes": true, "<input::CharInput<'t> as input::Input>::at": true, "<input::CharInput<'t> as input::Input>::is_empty_match": true, "<input::CharInput<'t> as input::Input>::len": true, "<input::CharInput<'t> as input::Input>::next_char": true, "<input::CharInput<'t> as input::Input>::prefix_at": false, "<input::CharInput<'t> as input::Input>::previous_char": true, "<input::CharInput<'t> as std::ops::Deref>::deref": true, "<literal::imp::LiteralIter<'a> as std::iter::Iterator>::next": false, "<prog::Program as std::fmt::Debug>::fmt::visible_byte": true, "<prog::Program as std::fmt::Debug>::fmt::with_goto": false, "<prog::Program as std::ops::Deref>::deref": false, "<re_builder::RegexOptions as std::default::Default>::default": false, "<re_bytes::CaptureNames<'r> as std::iter::Iterator>::count": false, "<re_bytes::CaptureNames<'r> as std::iter::Iterator>::next": false, "<re_bytes::CaptureNames<'r> as std::iter::Iterator>::size_hint": true, "<re_bytes::Captures<'t> as std::ops::Index<&'i str>>::index": false, "<re_bytes::Captures<'t> as std::ops::Index<usize>>::index": false, "<re_bytes::CapturesDebug<'c, 't> as std::fmt::Debug>::fmt::escape_byte": true, "<re_bytes::CapturesDebug<'c, 't> as std::fmt::Debug>::fmt::escape_bytes": false, "<re_bytes::NoExpand<'t> as re_bytes::Replacer>::no_expansion": false, "<re_bytes::NoExpand<'t> as re_bytes::Replacer>::replace_append": false, "<re_bytes::Regex as std::convert::From<exec::Exec>>::from": false, "<re_bytes::Regex as std::str::FromStr>::from_str": true, "<re_bytes::ReplacerRef<'a, R> as re_bytes::Replacer>::no_expansion": false, "<re_bytes::ReplacerRef<'a, R> as re_bytes::Replacer>::replace_append": false, "<re_bytes::SubCaptureMatches<'c, 't> as std::iter::Iterator>::next": false, "<re_set::bytes::RegexSet as std::convert::From<exec::Exec>>::from": false, "<re_set::bytes::SetMatches as std::iter::IntoIterator>::into_iter": false, "<re_set::bytes::SetMatchesIntoIter as std::iter::DoubleEndedIterator>::next_back": false, "<re_set::bytes::SetMatchesIntoIter as std::iter::Iterator>::next": false, "<re_set::bytes::SetMatchesIntoIter as std::iter::Iterator>::size_hint": false, "<re_set::bytes::SetMatchesIter<'a> as std::iter::DoubleEndedIterator>::next_back": false, "<re_set::bytes::SetMatchesIter<'a> as std::iter::Iterator>::next": false, "<re_set::bytes::SetMatchesIter<'a> as std::iter::Iterator>::size_hint": false, "<re_set::unicode::RegexSet as std::convert::From<exec::Exec>>::from": false, "<re_set::unicode::SetMatches as std::iter::IntoIterator>::into_iter": false, "<re_set::unicode::SetMatchesIntoIter as std::iter::DoubleEndedIterator>::next_back": false, "<re_set::unicode::SetMatchesIntoIter as std::iter::Iterator>::next": false, "<re_set::unicode::SetMatchesIntoIter as std::iter::Iterator>::size_hint": false, "<re_set::unicode::SetMatchesIter<'a> as std::iter::DoubleEndedIterator>::next_back": false, "<re_set::unicode::SetMatchesIter<'a> as std::iter::Iterator>::next": false, "<re_set::unicode::SetMatchesIter<'a> as std::iter::Iterator>::size_hint": false, "<re_trait::SubCapturesPosIter<'c> as std::iter::Iterator>::next": true, "<re_unicode::CaptureNames<'r> as std::iter::Iterator>::count": false, "<re_unicode::CaptureNames<'r> as std::iter::Iterator>::next": false, "<re_unicode::CaptureNames<'r> as std::iter::Iterator>::size_hint": false, "<re_unicode::Captures<'t> as std::ops::Index<&'i str>>::index": false, "<re_unicode::Captures<'t> as std::ops::Index<usize>>::index": false, "<re_unicode::NoExpand<'t> as re_unicode::Replacer>::no_expansion": true, "<re_unicode::NoExpand<'t> as re_unicode::Replacer>::replace_append": false, "<re_unicode::Regex as std::convert::From<exec::Exec>>::from": false, "<re_unicode::Regex as std::str::FromStr>::from_str": true, "<re_unicode::ReplacerRef<'a, R> as re_unicode::Replacer>::no_expansion": false, "<re_unicode::ReplacerRef<'a, R> as re_unicode::Replacer>::replace_append": false, "<re_unicode::SubCaptureMatches<'c, 't> as std::iter::Iterator>::next": false, "<sparse::SparseSet as std::ops::Deref>::deref": false, "backtrack::Bounded::<'a, 'm, 'r, 's, I>::backtrack": false, "backtrack::Bounded::<'a, 'm, 'r, 's, I>::clear": false, "backtrack::Bounded::<'a, 'm, 'r, 's, I>::exec": false, "backtrack::Bounded::<'a, 'm, 'r, 's, I>::exec_": false, "backtrack::Bounded::<'a, 'm, 'r, 's, I>::has_visited": false, "backtrack::Bounded::<'a, 'm, 'r, 's, I>::step": false, "backtrack::Cache::new": false, "backtrack::should_exec": true, "backtrack::usize_to_u32": true, "cache::imp::Cached::<T>::get_or": true, "cache::imp::Cached::<T>::new": true, "cache::imp::CachedGuard::<'a, T>::value": false, "compile::ByteClassSet::byte_classes": true, "compile::ByteClassSet::new": true, "compile::ByteClassSet::set_range": true, "compile::ByteClassSet::set_word_boundary": true, "compile::Hole::dup_one": false, "compile::InstHole::fill": false, "compile::MaybeInst::fill": false, "compile::MaybeInst::fill_split": false, "compile::MaybeInst::half_fill_split_goto1": false, "compile::MaybeInst::half_fill_split_goto2": false, "compile::MaybeInst::unwrap": false, "compile::SuffixCache::clear": true, "compile::SuffixCache::get": true, "compile::SuffixCache::hash": false, "compile::SuffixCache::new": true, "compile::u32_to_usize": false, "dfa::Byte::as_byte": true, "dfa::Byte::byte": false, "dfa::Byte::eof": true, "dfa::Byte::is_ascii_word": true, "dfa::Byte::is_eof": true, "dfa::Cache::new": true, "dfa::CacheInner::reset_size": true, "dfa::Fsm::<'a>::forward": false, "dfa::Fsm::<'a>::forward_many": false, "dfa::Fsm::<'a>::reverse": false, "dfa::Result::<T>::is_match": true, "dfa::Result::<T>::map": false, "dfa::Result::<T>::set_non_match": false, "dfa::State::flags": false, "dfa::State::inst_ptrs": true, "dfa::StateFlags::has_empty": true, "dfa::StateFlags::is_match": true, "dfa::StateFlags::is_word": true, "dfa::StateFlags::set_empty": true, "dfa::StateFlags::set_match": true, "dfa::StateFlags::set_word": true, "dfa::StateMap::clear": false, "dfa::StateMap::get_ptr": false, "dfa::StateMap::get_state": false, "dfa::StateMap::insert": true, "dfa::StateMap::is_empty": false, "dfa::StateMap::len": false, "dfa::StateMap::new": false, "dfa::Transitions::add": true, "dfa::Transitions::clear": true, "dfa::Transitions::new": true, "dfa::Transitions::next": true, "dfa::Transitions::next_unchecked": true, "dfa::Transitions::num_states": true, "dfa::Transitions::set_next": true, "dfa::Transitions::state_heap_size": true, "dfa::can_exec": false, "dfa::push_inst_ptr": true, "dfa::read_vari32": true, "dfa::read_varu32": true, "dfa::show_state_ptr": false, "dfa::usize_to_u32": true, "dfa::vb": false, "dfa::write_vari32": true, "dfa::write_varu32": true, "exec::Exec::capture_name_idx": false, "exec::Exec::capture_names": false, "exec::Exec::into_byte_regex": false, "exec::Exec::into_byte_regex_set": false, "exec::Exec::into_regex": false, "exec::Exec::into_regex_set": false, "exec::Exec::regex_strings": false, "exec::Exec::searcher": false, "exec::Exec::searcher_str": false, "exec::ExecBuilder::automatic": false, "exec::ExecBuilder::bounded_backtracking": false, "exec::ExecBuilder::build": true, "exec::ExecBuilder::build_aho_corasick": false, "exec::ExecBuilder::bytes": true, "exec::ExecBuilder::new": true, "exec::ExecBuilder::new_many": false, "exec::ExecBuilder::new_options": true, "exec::ExecBuilder::nfa": true, "exec::ExecBuilder::only_utf8": true, "exec::ExecBuilder::parse": true, "exec::ExecBuilder::unicode": true, "exec::ExecNoSync::<'c>::capture_name_idx": true, "exec::ExecNoSync::<'c>::captures_nfa": false, "exec::ExecNoSync::<'c>::captures_nfa_type": false, "exec::ExecNoSync::<'c>::exec_backtrack": false, "exec::ExecNoSync::<'c>::exec_dfa_reverse_suffix": false, "exec::ExecNoSync::<'c>::exec_nfa": false, "exec::ExecNoSync::<'c>::exec_pikevm": false, "exec::ExecNoSync::<'c>::find_dfa_anchored_reverse": false, "exec::ExecNoSync::<'c>::find_dfa_forward": false, "exec::ExecNoSync::<'c>::find_dfa_reverse_suffix": false, "exec::ExecNoSync::<'c>::find_literals": false, "exec::ExecNoSync::<'c>::find_nfa": false, "exec::ExecNoSync::<'c>::is_anchor_end_match": false, "exec::ExecNoSync::<'c>::is_anchor_end_match::imp": false, "exec::ExecNoSync::<'c>::many_matches_at": false, "exec::ExecNoSync::<'c>::match_nfa": false, "exec::ExecNoSync::<'c>::match_nfa_type": false, "exec::ExecNoSync::<'c>::shortest_dfa": false, "exec::ExecNoSync::<'c>::shortest_dfa_reverse_suffix": false, "exec::ExecNoSync::<'c>::shortest_nfa": false, "exec::ExecNoSync::<'c>::shortest_nfa_type": true, "exec::ExecNoSyncStr::<'c>::capture_name_idx": false, "exec::ExecReadOnly::choose_dfa_match_type": false, "exec::ExecReadOnly::choose_dfa_match_type::imp": false, "exec::ExecReadOnly::choose_literal_match_type": false, "exec::ExecReadOnly::choose_literal_match_type::imp": false, "exec::ExecReadOnly::choose_match_type": false, "exec::ExecReadOnly::should_suffix_scan": false, "exec::ProgramCacheInner::new": true, "exec::alternation_literals": true, "expand::expand_bytes": false, "expand::expand_str": false, "expand::find_cap_ref": true, "expand::find_cap_ref_braced": true, "expand::is_valid_cap_letter": true, "find_byte::find_byte": false, "find_byte::find_byte::imp": false, "input::<impl std::cmp::PartialEq<input::Char> for char>::eq": true, "input::<impl std::cmp::PartialOrd<input::Char> for char>::partial_cmp": true, "input::ByteInput::<'t>::new": true, "input::Char::is_none": true, "input::Char::is_word_byte": false, "input::Char::is_word_char": true, "input::Char::len_utf8": true, "input::CharInput::<'t>::new": false, "input::Input::is_empty": false, "input::InputAt::byte": true, "input::InputAt::char": true, "input::InputAt::is_empty": true, "input::InputAt::is_end": true, "input::InputAt::is_start": true, "input::InputAt::len": true, "input::InputAt::next_pos": true, "input::InputAt::pos": true, "literal::imp::BoyerMooreSearch::approximate_size": true, "literal::imp::BoyerMooreSearch::check_match": true, "literal::imp::BoyerMooreSearch::compile_md2_shift": false, "literal::imp::BoyerMooreSearch::compile_skip_table": false, "literal::imp::BoyerMooreSearch::find": true, "literal::imp::BoyerMooreSearch::len": true, "literal::imp::BoyerMooreSearch::new": true, "literal::imp::BoyerMooreSearch::select_guard": true, "literal::imp::BoyerMooreSearch::should_use": true, "literal::imp::BoyerMooreSearch::skip_loop": true, "literal::imp::FreqyPacked::approximate_size": true, "literal::imp::FreqyPacked::char_len": true, "literal::imp::FreqyPacked::empty": true, "literal::imp::FreqyPacked::find": true, "literal::imp::FreqyPacked::is_suffix": true, "literal::imp::FreqyPacked::len": true, "literal::imp::FreqyPacked::new": false, "literal::imp::LiteralSearcher::approximate_size": true, "literal::imp::LiteralSearcher::complete": false, "literal::imp::LiteralSearcher::empty": false, "literal::imp::LiteralSearcher::find": false, "literal::imp::LiteralSearcher::find_end": false, "literal::imp::LiteralSearcher::find_start": false, "literal::imp::LiteralSearcher::is_empty": false, "literal::imp::LiteralSearcher::iter": false, "literal::imp::LiteralSearcher::lcp": false, "literal::imp::LiteralSearcher::lcs": false, "literal::imp::LiteralSearcher::len": false, "literal::imp::LiteralSearcher::new": false, "literal::imp::LiteralSearcher::prefixes": false, "literal::imp::LiteralSearcher::suffixes": false, "literal::imp::Matcher::new": false, "literal::imp::Matcher::prefixes": false, "literal::imp::Matcher::suffixes": false, "literal::imp::SingleByteSet::_find": true, "literal::imp::SingleByteSet::approximate_size": true, "literal::imp::SingleByteSet::find": false, "literal::imp::SingleByteSet::new": true, "literal::imp::SingleByteSet::prefixes": false, "literal::imp::SingleByteSet::suffixes": false, "literal::imp::char_len_lossy": true, "literal::imp::freq_rank": true, "pikevm::Cache::new": true, "pikevm::Fsm::<'r, I>::add": false, "pikevm::Fsm::<'r, I>::add_step": false, "pikevm::Fsm::<'r, I>::exec": false, "pikevm::Fsm::<'r, I>::exec_": false, "pikevm::Fsm::<'r, I>::step": false, "pikevm::Threads::caps": true, "pikevm::Threads::new": true, "pikevm::Threads::resize": true, "prog::Inst::is_match": false, "prog::InstBytes::matches": false, "prog::InstRanges::matches": false, "prog::InstRanges::num_chars": false, "prog::Program::approximate_size": true, "prog::Program::leads_to_match": true, "prog::Program::needs_dotstar": true, "prog::Program::new": false, "prog::Program::only_utf8": true, "prog::Program::skip": true, "prog::Program::uses_bytes": false, "re_builder::bytes::RegexBuilder::build": false, "re_builder::bytes::RegexBuilder::case_insensitive": true, "re_builder::bytes::RegexBuilder::dfa_size_limit": false, "re_builder::bytes::RegexBuilder::dot_matches_new_line": false, "re_builder::bytes::RegexBuilder::ignore_whitespace": false, "re_builder::bytes::RegexBuilder::multi_line": true, "re_builder::bytes::RegexBuilder::nest_limit": true, "re_builder::bytes::RegexBuilder::new": false, "re_builder::bytes::RegexBuilder::octal": true, "re_builder::bytes::RegexBuilder::size_limit": false, "re_builder::bytes::RegexBuilder::swap_greed": false, "re_builder::bytes::RegexBuilder::unicode": false, "re_builder::set_bytes::RegexSetBuilder::build": false, "re_builder::set_bytes::RegexSetBuilder::case_insensitive": true, "re_builder::set_bytes::RegexSetBuilder::dfa_size_limit": false, "re_builder::set_bytes::RegexSetBuilder::dot_matches_new_line": false, "re_builder::set_bytes::RegexSetBuilder::ignore_whitespace": false, "re_builder::set_bytes::RegexSetBuilder::multi_line": false, "re_builder::set_bytes::RegexSetBuilder::nest_limit": true, "re_builder::set_bytes::RegexSetBuilder::new": true, "re_builder::set_bytes::RegexSetBuilder::octal": true, "re_builder::set_bytes::RegexSetBuilder::size_limit": false, "re_builder::set_bytes::RegexSetBuilder::swap_greed": false, "re_builder::set_bytes::RegexSetBuilder::unicode": false, "re_builder::set_unicode::RegexSetBuilder::build": false, "re_builder::set_unicode::RegexSetBuilder::case_insensitive": true, "re_builder::set_unicode::RegexSetBuilder::dfa_size_limit": false, "re_builder::set_unicode::RegexSetBuilder::dot_matches_new_line": false, "re_builder::set_unicode::RegexSetBuilder::ignore_whitespace": true, "re_builder::set_unicode::RegexSetBuilder::multi_line": false, "re_builder::set_unicode::RegexSetBuilder::nest_limit": false, "re_builder::set_unicode::RegexSetBuilder::new": false, "re_builder::set_unicode::RegexSetBuilder::octal": true, "re_builder::set_unicode::RegexSetBuilder::size_limit": true, "re_builder::set_unicode::RegexSetBuilder::swap_greed": false, "re_builder::set_unicode::RegexSetBuilder::unicode": false, "re_builder::unicode::RegexBuilder::build": false, "re_builder::unicode::RegexBuilder::case_insensitive": true, "re_builder::unicode::RegexBuilder::dfa_size_limit": false, "re_builder::unicode::RegexBuilder::dot_matches_new_line": false, "re_builder::unicode::RegexBuilder::ignore_whitespace": false, "re_builder::unicode::RegexBuilder::multi_line": false, "re_builder::unicode::RegexBuilder::nest_limit": true, "re_builder::unicode::RegexBuilder::new": false, "re_builder::unicode::RegexBuilder::octal": false, "re_builder::unicode::RegexBuilder::size_limit": false, "re_builder::unicode::RegexBuilder::swap_greed": true, "re_builder::unicode::RegexBuilder::unicode": true, "re_bytes::<impl std::convert::From<re_bytes::Match<'t>> for std::ops::Range<usize>>::from": true, "re_bytes::CaptureLocations::get": false, "re_bytes::CaptureLocations::len": false, "re_bytes::CaptureLocations::pos": false, "re_bytes::Captures::<'t>::expand": false, "re_bytes::Captures::<'t>::get": false, "re_bytes::Captures::<'t>::iter": false, "re_bytes::Captures::<'t>::len": false, "re_bytes::Captures::<'t>::name": false, "re_bytes::Match::<'t>::as_bytes": true, "re_bytes::Match::<'t>::end": true, "re_bytes::Match::<'t>::new": true, "re_bytes::Match::<'t>::range": true, "re_bytes::Match::<'t>::start": true, "re_bytes::Regex::as_str": true, "re_bytes::Regex::capture_locations": true, "re_bytes::Regex::capture_names": false, "re_bytes::Regex::captures": false, "re_bytes::Regex::captures_len": true, "re_bytes::Regex::captures_read": false, "re_bytes::Regex::captures_read_at": true, "re_bytes::Regex::find": true, "re_bytes::Regex::find_at": true, "re_bytes::Regex::is_match": true, "re_bytes::Regex::is_match_at": true, "re_bytes::Regex::locations": false, "re_bytes::Regex::new": true, "re_bytes::Regex::read_captures_at": true, "re_bytes::Regex::replace": false, "re_bytes::Regex::replace_all": true, "re_bytes::Regex::replacen": false, "re_bytes::Regex::shortest_match": true, "re_bytes::Regex::shortest_match_at": false, "re_bytes::Replacer::by_ref": false, "re_bytes::Replacer::no_expansion": false, "re_set::bytes::RegexSet::empty": true, "re_set::bytes::RegexSet::is_empty": true, "re_set::bytes::RegexSet::is_match": false, "re_set::bytes::RegexSet::is_match_at": true, "re_set::bytes::RegexSet::len": false, "re_set::bytes::RegexSet::matches": true, "re_set::bytes::RegexSet::new": true, "re_set::bytes::RegexSet::patterns": true, "re_set::bytes::RegexSet::read_matches_at": true, "re_set::bytes::SetMatches::iter": false, "re_set::bytes::SetMatches::len": false, "re_set::bytes::SetMatches::matched": false, "re_set::bytes::SetMatches::matched_any": false, "re_set::bytes::as_bytes_bytes": false, "re_set::bytes::as_bytes_str": false, "re_set::unicode::RegexSet::empty": true, "re_set::unicode::RegexSet::is_empty": true, "re_set::unicode::RegexSet::is_match": false, "re_set::unicode::RegexSet::is_match_at": true, "re_set::unicode::RegexSet::len": true, "re_set::unicode::RegexSet::matches": true, "re_set::unicode::RegexSet::new": true, "re_set::unicode::RegexSet::patterns": true, "re_set::unicode::RegexSet::read_matches_at": false, "re_set::unicode::SetMatches::iter": false, "re_set::unicode::SetMatches::len": false, "re_set::unicode::SetMatches::matched": false, "re_set::unicode::SetMatches::matched_any": false, "re_set::unicode::as_bytes_bytes": false, "re_set::unicode::as_bytes_str": false, "re_trait::Locations::as_slots": false, "re_trait::Locations::iter": true, "re_trait::Locations::len": false, "re_trait::Locations::pos": true, "re_trait::RegularExpression::locations": false, "re_unicode::<impl std::convert::From<re_unicode::Match<'t>> for &'t str>::from": false, "re_unicode::<impl std::convert::From<re_unicode::Match<'t>> for std::ops::Range<usize>>::from": true, "re_unicode::CaptureLocations::get": false, "re_unicode::CaptureLocations::len": false, "re_unicode::CaptureLocations::pos": false, "re_unicode::Captures::<'t>::expand": false, "re_unicode::Captures::<'t>::get": true, "re_unicode::Captures::<'t>::iter": true, "re_unicode::Captures::<'t>::len": false, "re_unicode::Captures::<'t>::name": false, "re_unicode::Match::<'t>::as_str": true, "re_unicode::Match::<'t>::end": true, "re_unicode::Match::<'t>::new": true, "re_unicode::Match::<'t>::range": true, "re_unicode::Match::<'t>::start": true, "re_unicode::Regex::as_str": true, "re_unicode::Regex::capture_locations": false, "re_unicode::Regex::capture_names": true, "re_unicode::Regex::captures": true, "re_unicode::Regex::captures_len": true, "re_unicode::Regex::captures_read": true, "re_unicode::Regex::captures_read_at": false, "re_unicode::Regex::find": true, "re_unicode::Regex::find_at": false, "re_unicode::Regex::is_match": true, "re_unicode::Regex::is_match_at": true, "re_unicode::Regex::locations": true, "re_unicode::Regex::new": true, "re_unicode::Regex::read_captures_at": false, "re_unicode::Regex::replace": true, "re_unicode::Regex::replace_all": false, "re_unicode::Regex::replacen": true, "re_unicode::Regex::shortest_match": true, "re_unicode::Regex::shortest_match_at": true, "re_unicode::Replacer::by_ref": true, "re_unicode::Replacer::no_expansion": false, "re_unicode::escape": true, "sparse::SparseSet::capacity": true, "sparse::SparseSet::clear": true, "sparse::SparseSet::contains": true, "sparse::SparseSet::insert": true, "sparse::SparseSet::is_empty": true, "sparse::SparseSet::len": true, "sparse::SparseSet::new": true, "utf8::decode_last_utf8": true, "utf8::decode_utf8": true, "utf8::is_start_byte": true, "utf8::next_utf8": true}