-----------------
src/date.rs date::div_floor
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
let mut p1 = 0i64; // None+i64
+date::div_floor(p0, p1);
+crate::date::div_floor(p0, p1);
+crate::date::div_floor(p0, p1);
-----------------
src/date.rs date::Date::try_from_parsed_items::adjustment
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+date::Date::try_from_parsed_items::adjustment(p0);
+crate::date::Date::try_from_parsed_items::adjustment(p0);
+<date::Date>::try_from_parsed_items::adjustment(p0);
-----------------
src/format/date.rs format::date::fmt_a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
+format::date::fmt_a(p0, p1);
+crate::format::date::fmt_a(p0, p1);
+crate::format::date::fmt_a(p0, p1);
-----------------
src/format/date.rs format::date::parse_a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
+format::date::parse_a(p0, p1);
+crate::format::date::parse_a(p0, p1);
+crate::format::date::parse_a(p0, p1);
-----------------
src/format/date.rs format::date::fmt_A
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
+format::date::fmt_A(p0, p1);
+crate::format::date::fmt_A(p0, p1);
+crate::format::date::fmt_A(p0, p1);
-----------------
src/format/date.rs format::date::parse_A
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
+format::date::parse_A(p0, p1);
+crate::format::date::parse_A(p0, p1);
+crate::format::date::parse_A(p0, p1);
-----------------
src/format/date.rs format::date::fmt_b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
+format::date::fmt_b(p0, p1);
+crate::format::date::fmt_b(p0, p1);
+crate::format::date::fmt_b(p0, p1);
-----------------
src/format/date.rs format::date::parse_b
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
+format::date::parse_b(p0, p1);
+crate::format::date::parse_b(p0, p1);
+crate::format::date::parse_b(p0, p1);
-----------------
src/format/date.rs format::date::fmt_B
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
+format::date::fmt_B(p0, p1);
+crate::format::date::fmt_B(p0, p1);
+crate::format::date::fmt_B(p0, p1);
-----------------
src/format/date.rs format::date::parse_B
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
+format::date::parse_B(p0, p1);
+crate::format::date::parse_B(p0, p1);
+crate::format::date::parse_B(p0, p1);
-----------------
src/format/date.rs format::date::fmt_C
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::fmt_C(p0, p1, p2);
+crate::format::date::fmt_C(p0, p1, p2);
+crate::format::date::fmt_C(p0, p1, p2);
-----------------
src/format/date.rs format::date::parse_C
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::parse_C(p0, p1, p2);
+crate::format::date::parse_C(p0, p1, p2);
+crate::format::date::parse_C(p0, p1, p2);
-----------------
src/format/date.rs format::date::fmt_d
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::fmt_d(p0, p1, p2);
+crate::format::date::fmt_d(p0, p1, p2);
+crate::format::date::fmt_d(p0, p1, p2);
-----------------
src/format/date.rs format::date::parse_d
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::parse_d(p0, p1, p2);
+crate::format::date::parse_d(p0, p1, p2);
+crate::format::date::parse_d(p0, p1, p2);
-----------------
src/format/date.rs format::date::fmt_g
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::fmt_g(p0, p1, p2);
+crate::format::date::fmt_g(p0, p1, p2);
+crate::format::date::fmt_g(p0, p1, p2);
-----------------
src/format/date.rs format::date::parse_g
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::parse_g(p0, p1, p2);
+crate::format::date::parse_g(p0, p1, p2);
+crate::format::date::parse_g(p0, p1, p2);
-----------------
src/format/date.rs format::date::fmt_G
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::fmt_G(p0, p1, p2);
+crate::format::date::fmt_G(p0, p1, p2);
+crate::format::date::fmt_G(p0, p1, p2);
-----------------
src/format/date.rs format::date::parse_G
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::parse_G(p0, p1, p2);
+crate::format::date::parse_G(p0, p1, p2);
+crate::format::date::parse_G(p0, p1, p2);
-----------------
src/format/date.rs format::date::fmt_j
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::fmt_j(p0, p1, p2);
+crate::format::date::fmt_j(p0, p1, p2);
+crate::format::date::fmt_j(p0, p1, p2);
-----------------
src/format/date.rs format::date::parse_j
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::parse_j(p0, p1, p2);
+crate::format::date::parse_j(p0, p1, p2);
+crate::format::date::parse_j(p0, p1, p2);
-----------------
src/format/date.rs format::date::fmt_m
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::fmt_m(p0, p1, p2);
+crate::format::date::fmt_m(p0, p1, p2);
+crate::format::date::fmt_m(p0, p1, p2);
-----------------
src/format/date.rs format::date::parse_m
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::parse_m(p0, p1, p2);
+crate::format::date::parse_m(p0, p1, p2);
+crate::format::date::parse_m(p0, p1, p2);
-----------------
src/format/date.rs format::date::fmt_u
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
+format::date::fmt_u(p0, p1);
+crate::format::date::fmt_u(p0, p1);
+crate::format::date::fmt_u(p0, p1);
-----------------
src/format/date.rs format::date::parse_u
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
+format::date::parse_u(p0, p1);
+crate::format::date::parse_u(p0, p1);
+crate::format::date::parse_u(p0, p1);
-----------------
src/format/date.rs format::date::fmt_U
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::fmt_U(p0, p1, p2);
+crate::format::date::fmt_U(p0, p1, p2);
+crate::format::date::fmt_U(p0, p1, p2);
-----------------
src/format/date.rs format::date::parse_U
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::parse_U(p0, p1, p2);
+crate::format::date::parse_U(p0, p1, p2);
+crate::format::date::parse_U(p0, p1, p2);
-----------------
src/format/date.rs format::date::fmt_V
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::fmt_V(p0, p1, p2);
+crate::format::date::fmt_V(p0, p1, p2);
+crate::format::date::fmt_V(p0, p1, p2);
-----------------
src/format/date.rs format::date::parse_V
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::parse_V(p0, p1, p2);
+crate::format::date::parse_V(p0, p1, p2);
+crate::format::date::parse_V(p0, p1, p2);
-----------------
src/format/date.rs format::date::fmt_w
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
+format::date::fmt_w(p0, p1);
+crate::format::date::fmt_w(p0, p1);
+crate::format::date::fmt_w(p0, p1);
-----------------
src/format/date.rs format::date::parse_w
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
+format::date::parse_w(p0, p1);
+crate::format::date::parse_w(p0, p1);
+crate::format::date::parse_w(p0, p1);
-----------------
src/format/date.rs format::date::fmt_W
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::fmt_W(p0, p1, p2);
+crate::format::date::fmt_W(p0, p1, p2);
+crate::format::date::fmt_W(p0, p1, p2);
-----------------
src/format/date.rs format::date::parse_W
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::parse_W(p0, p1, p2);
+crate::format::date::parse_W(p0, p1, p2);
+crate::format::date::parse_W(p0, p1, p2);
-----------------
src/format/date.rs format::date::fmt_y
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::fmt_y(p0, p1, p2);
+crate::format::date::fmt_y(p0, p1, p2);
+crate::format::date::fmt_y(p0, p1, p2);
-----------------
src/format/date.rs format::date::parse_y
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::parse_y(p0, p1, p2);
+crate::format::date::parse_y(p0, p1, p2);
+crate::format::date::parse_y(p0, p1, p2);
-----------------
src/format/date.rs format::date::fmt_Y
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::fmt_Y(p0, p1, p2);
+crate::format::date::fmt_Y(p0, p1, p2);
+crate::format::date::fmt_Y(p0, p1, p2);
-----------------
src/format/date.rs format::date::parse_Y
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::date::parse_Y(p0, p1, p2);
+crate::format::date::parse_Y(p0, p1, p2);
+crate::format::date::parse_Y(p0, p1, p2);
-----------------
src/format/offset.rs format::offset::fmt_z
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
+format::offset::fmt_z(p0, p1);
+crate::format::offset::fmt_z(p0, p1);
+crate::format::offset::fmt_z(p0, p1);
-----------------
src/format/offset.rs format::offset::parse_z
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
+format::offset::parse_z(p0, p1);
+crate::format::offset::parse_z(p0, p1);
+crate::format::offset::parse_z(p0, p1);
-----------------
src/format/parse.rs format::parse::try_consume_char
deps:{}
candidates:{}
let mut p0 = &mut "a"; // None+&str
let mut p1 = 'a'; // None+char
+format::parse::try_consume_char(p0, p1);
+crate::format::parse::try_consume_char(p0, p1);
+crate::format::parse::try_consume_char(p0, p1);
-----------------
src/format/parse.rs format::parse::try_consume_char_case_insensitive
deps:{}
candidates:{}
let mut p0 = &mut "a"; // None+&str
let mut p1 = 'a'; // None+char
+format::parse::try_consume_char_case_insensitive(p0, p1);
+crate::format::parse::try_consume_char_case_insensitive(p0, p1);
+crate::format::parse::try_consume_char_case_insensitive(p0, p1);
-----------------
src/format/parse.rs format::parse::try_consume_str
deps:{}
candidates:{}
let mut p0 = &mut "a"; // None+&str
let mut p1 = "sample"; // None+&str
+format::parse::try_consume_str(p0, &p1);
+crate::format::parse::try_consume_str(p0, &p1);
+crate::format::parse::try_consume_str(p0, &p1);
-----------------
src/format/parse.rs format::parse::try_consume_first_match
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&T as std::convert::AsRef<U>>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::convert::AsRef<U>>":{},"<I as std::iter::IntoIterator>":{"I":["std::iter::Iterator","std::marker::Sized"]},"format::parse::try_consume_first_match":{"T":["std::marker::Sized","std::marker::Copy"],"impl AsRef<str>":["std::convert::AsRef","std::marker::Sized"],"impl IntoIterator<Item = (impl AsRef<str>, T)>":["std::marker::Sized","std::iter::IntoIterator"]},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&T as std::convert::AsRef<U>>":{},"<&mut I as std::iter::Iterator>":{},"<&mut T as std::convert::AsRef<U>>":{},"<I as std::iter::IntoIterator>":{"I":["std::iter::Rev<I>","std::fs::ReadDir","std::collections::binary_heap::Drain<'_, T>","std::collections::hash_set::DrainFilter<'_, K, F>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::path::Iter<'a>","std::collections::binary_heap::IntoIter<T>","std::boxed::Box<I, A>","std::net::Incoming<'a>","std::iter::TakeWhile<I, P>","std::str::RSplitTerminator<'a, P>","std::slice::RChunksMut<'a, T>","std::env::ArgsOs","std::vec::Splice<'_, I, A>","std::collections::binary_heap::Iter<'a, T>","std::slice::GroupBy<'a, T, P>","std::collections::vec_deque::IntoIter<T, A>","std::collections::hash_set::Union<'a, T, S>","std::collections::btree_set::Iter<'a, T>","std::option::Item<A>","std::slice::ChunksExactMut<'a, T>","std::slice::ArrayWindows<'a, T, N>","std::str::Split<'a, P>","std::collections::hash_map::IterMut<'a, K, V>","std::env::VarsOs","std::collections::linked_list::IntoIter<T>","std::vec::DrainFilter<'_, T, F, A>","std::collections::btree_map::Iter<'a, K, V>","std::iter::adapters::GenericShunt<'_, I, R>","std::slice::SplitN<'a, T, P>","std::char::EscapeDebug","std::iter::RepeatN<A>","std::io::Bytes<R>","std::slice::RChunksExact<'a, T>","std::slice::Chunks<'a, T>","std::collections::btree_set::Intersection<'a, T, A>","std::collections::btree_set::Difference<'a, T, A>","std::collections::hash_set::Difference<'a, T, S>","std::collections::hash_map::IntoKeys<K, V>","std::collections::hash_map::ValuesMut<'a, K, V>","std::collections::binary_heap::IntoIterSorted<T>","std::iter::FlatMap<I, U, F>","std::iter::Scan<I, St, F>","std::slice::SplitInclusiveMut<'a, T, P>","std::str::EscapeDefault<'a>","std::result::IntoIter<T>","std::process::CommandArgs<'a>","std::slice::ArrayChunksMut<'a, T, N>","std::collections::vec_deque::Iter<'a, T>","std::str::LinesAny<'a>","std::ops::RangeFrom<A>","std::sync::mpsc::Iter<'a, T>","std::ascii::EscapeDefault","std::iter::OnceWith<F>","std::iter::Zip<A, B>","std::slice::RChunksExactMut<'a, T>","std::iter::Peekable<I>","std::env::SplitPaths<'a>","std::io::Split<B>","std::sys_common::wtf8::EncodeWide<'a>","std::collections::linked_list::DrainFilter<'_, T, F>","std::iter::StepBy<I>","std::collections::btree_map::RangeMut<'a, K, V>","std::slice::RSplitMut<'a, T, P>","std::collections::hash_map::IntoIter<K, V>","std::sync::mpsc::IntoIter<T>","std::iter::Flatten<I>","std::collections::hash_map::IntoValues<K, V>","std::option::Iter<'a, A>","std::collections::linked_list::IterMut<'a, T>","std::collections::btree_set::Union<'a, T>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::ops::index_range::IndexRange","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::slice::RSplit<'a, T, P>","std::iter::Enumerate<I>","std::slice::ChunksMut<'a, T>","std::collections::vec_deque::Drain<'_, T, A>","std::iter::SkipWhile<I, P>","std::collections::btree_map::Keys<'a, K, V>","std::collections::vec_deque::IterMut<'a, T>","std::iter::Once<T>","std::iter::Skip<I>","std::iter::Intersperse<I>","std::slice::EscapeAscii<'a>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::slice::SplitMut<'a, T, P>","std::iter::Take<I>","std::collections::btree_map::Range<'a, K, V>","std::char::DecodeUtf16<I>","std::char::ToUppercase","std::iter::ByRefSized<'_, I>","std::collections::hash_map::Drain<'a, K, V>","std::iter::Copied<I>","std::collections::btree_map::IterMut<'a, K, V>","std::iter::Cloned<I>","core::error::Source<'a>","std::iter::Cycle<I>","std::str::Lines<'a>","std::iter::Fuse<I>","std::net::IntoIncoming","std::iter::adapters::flatten::FlattenCompat<I, U>","std::iter::Empty<T>","std::char::ToLowercase","std::collections::linked_list::Iter<'a, T>","std::slice::SplitNMut<'a, T, P>","std::str::RSplitN<'a, P>","std::iter::MapWhile<I, P>","std::slice::Windows<'a, T>","std::os::unix::net::Messages<'a>","std::char::EscapeUnicode","std::io::Lines<B>","std::sys_common::wstr::WStrUnits<'_>","std::vec::IntoIter<T, A>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::iter::FromFn<F>","std::ops::RangeInclusive<A>","std::result::IterMut<'a, T>","std::result::Iter<'a, T>","std::sys::unix::args::Args","std::iter::Map<I, F>","std::ops::Range<A>","std::iter::Filter<I, P>","std::process::CommandEnvs<'a>","std::str::Bytes<'_>","std::iter::Inspect<I, F>","std::collections::hash_set::Iter<'a, K>","std::slice::Split<'a, T, P>","std::str::EncodeUtf16<'a>","std::str::SplitAsciiWhitespace<'a>","std::collections::btree_map::IntoIter<K, V, A>","std::option::IterMut<'a, A>","std::collections::btree_map::ValuesMut<'a, K, V>","std::iter::sources::from_generator::FromGenerator<G>","std::os::unix::net::Incoming<'a>","std::str::EscapeDebug<'a>","std::os::unix::net::ScmRights<'a>","std::collections::btree_map::IntoValues<K, V, A>","std::slice::ArrayChunks<'a, T, N>","std::str::EscapeUnicode<'a>","std::sys::unix::fs::ReadDir","std::iter::FilterMap<I, F>","std::collections::btree_map::Values<'a, K, V>","std::str::RMatchIndices<'a, P>","std::str::CharIndices<'a>","std::env::Args","std::iter::Successors<T, F>","std::string::Drain<'_>","std::path::Ancestors<'a>","std::collections::hash_set::Drain<'a, K>","std::slice::IterMut<'a, T>","std::str::RSplit<'a, P>","std::iter::IntersperseWith<I, G>","std::iter::ArrayChunks<I, N>","std::collections::hash_set::IntoIter<K>","std::slice::SplitInclusive<'a, T, P>","std::iter::Chain<A, B>","core::slice::iter::GenericSplitN<I>","std::sys::unix::os::SplitPaths<'a>","std::collections::hash_map::Keys<'a, K, V>","std::slice::Iter<'a, T>","std::char::EscapeDefault","std::env::Vars","std::collections::hash_map::Iter<'a, K, V>","std::collections::btree_map::IntoKeys<K, V, A>","std::collections::btree_set::Range<'a, T>","std::option::IntoIter<A>","std::iter::RepeatWith<F>","std::sys::unix::os::Env","std::iter::Repeat<A>","std::str::Utf8Chunks<'a>","std::str::Chars<'a>","std::str::RMatches<'a, P>","std::collections::hash_set::Intersection<'a, T, S>","std::slice::GroupByMut<'a, T, P>","std::str::SplitWhitespace<'a>","std::str::Matches<'a, P>","std::str::SplitN<'a, P>","std::collections::btree_set::IntoIter<T, A>","std::slice::RSplitN<'a, T, P>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::os::unix::net::ScmCredentials<'a>","std::str::SplitInclusive<'a, P>","std::sys_common::net::LookupHost","std::sys::unix::process::process_common::CommandArgs<'a>","std::collections::binary_heap::DrainSorted<'_, T>","std::path::Components<'a>","std::slice::RChunks<'a, T>","std::char::CaseMappingIter","std::array::IntoIter<T, N>","std::slice::RSplitNMut<'a, T, P>","std::str::MatchIndices<'a, P>","std::collections::hash_map::Values<'a, K, V>","<&mut I as std::iter::Iterator>","std::slice::ChunksExact<'a, T>","std::vec::Drain<'_, T, A>","std::sync::mpsc::TryIter<'a, T>","std::str::SplitTerminator<'a, P>","std::collections::btree_set::SymmetricDifference<'a, T>"]},"format::parse::try_consume_first_match":{"T":["date::Date","offset_date_time::OffsetDateTime","format::parse::ParsedItems","format::parse::AmPm","duration::Duration","utc_offset::UtcOffset","error::Format","primitive_date_time::PrimitiveDateTime","instant::Instant","error::ConversionRange","std::marker::copy_impls::<impl std::marker::Copy for &T>","format::Padding","error::IndeterminateOffset","format::Specifier","weekday::Weekday","time_mod::Time","error::ComponentRange","sign::Sign"],"impl AsRef<str>":["std::ffi::CString","std::borrow::Cow<'_, std::ffi::OsStr>","core::num::dec2flt::common::AsciiStr<'a>","std::slice::Iter<'_, T>","std::borrow::Cow<'_, T>","std::vec::Drain<'a, T, A>","std::vec::IntoIter<T, A>","std::sync::Arc<T>","std::slice::IterMut<'_, T>","<&mut T as std::convert::AsRef<U>>","<&T as std::convert::AsRef<U>>","std::boxed::Box<T, A>","std::ffi::CStr","std::rc::Rc<T>"],"impl IntoIterator<Item = (impl AsRef<str>, T)>":["std::option::Option<T>","std::collections::HashMap<K, V, S>","&'a std::path::PathBuf","std::collections::LinkedList<T>","std::collections::BTreeSet<T, A>","std::collections::HashSet<T, S>","&'a std::os::unix::net::UnixListener","std::vec::Vec<T, A>","<&'a std::option::Option<T> as std::iter::IntoIterator>","std::collections::VecDeque<T, A>","std::collections::BTreeMap<K, V, A>","std::result::Result<T, E>","&'a std::path::Path","std::collections::BinaryHeap<T>","std::sync::mpsc::Receiver<T>"]},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{}}
let mut p0 = &mut "a"; // None+&str
let mut p1 = MaybeUninit::uninit().assume_init(); // impl IntoIterator<Item = (impl AsRef<str>, T)>
+format::parse::try_consume_first_match(p0, p1);
+crate::format::parse::try_consume_first_match(p0, p1);
+crate::format::parse::try_consume_first_match(p0, p1);
-----------------
src/format/parse.rs format::parse::try_consume_digits
deps:{"format::parse::try_consume_digits":{"T":["std::str::FromStr","std::marker::Sized"]}}
candidates:{"format::parse::try_consume_digits":{"T":["u64","u16","i32","i16","i64","char","u32","bool","i8","usize","u8"]}}
let mut p0 = &mut "a"; // None+&str
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
+format::parse::try_consume_digits(p0, p1, p2);
+crate::format::parse::try_consume_digits(p0, p1, p2);
+crate::format::parse::try_consume_digits(p0, p1, p2);
-----------------
src/format/parse.rs format::parse::try_consume_exact_digits
deps:{"format::parse::try_consume_exact_digits":{"T":["std::marker::Sized","std::str::FromStr"]}}
candidates:{"format::parse::try_consume_exact_digits":{"T":["u8","i32","i16","bool","u32","i8","usize","i64","u64","u16","char"]}}
let mut p0 = &mut "a"; // None+&str
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::parse::try_consume_exact_digits(p0, p1, p2);
+crate::format::parse::try_consume_exact_digits(p0, p1, p2);
+crate::format::parse::try_consume_exact_digits(p0, p1, p2);
-----------------
src/format/parse.rs format::parse::consume_padding
deps:{}
candidates:{}
let mut p0 = &mut "a"; // None+&str
let mut p1 = MaybeUninit::uninit().assume_init(); // format::Padding
let mut p2 = 0usize; // None+usize
+format::parse::consume_padding(p0, p1, p2);
+crate::format::parse::consume_padding(p0, p1, p2);
+crate::format::parse::consume_padding(p0, p1, p2);
-----------------
src/format/parse.rs format::parse::parse
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = & MaybeUninit::uninit().assume_init(); // format::format::Format
+format::parse::parse(&p0, p1);
+crate::format::parse::parse(&p0, p1);
+crate::format::parse::parse(&p0, p1);
-----------------
src/format/parse_items.rs format::parse_items::parse_fmt_string
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+format::parse_items::parse_fmt_string(&p0);
+crate::format::parse_items::parse_fmt_string(&p0);
+crate::format::parse_items::parse_fmt_string(&p0);
-----------------
src/format/parse_items.rs format::parse_items::try_parse_fmt_string
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+format::parse_items::try_parse_fmt_string(&p0);
+crate::format::parse_items::try_parse_fmt_string(&p0);
+crate::format::parse_items::try_parse_fmt_string(&p0);
-----------------
src/format/time.rs format::time::fmt_H
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::time::fmt_H(p0, p1, p2);
+crate::format::time::fmt_H(p0, p1, p2);
+crate::format::time::fmt_H(p0, p1, p2);
-----------------
src/format/time.rs format::time::parse_H
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::time::parse_H(p0, p1, p2);
+crate::format::time::parse_H(p0, p1, p2);
+crate::format::time::parse_H(p0, p1, p2);
-----------------
src/format/time.rs format::time::fmt_I
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::time::fmt_I(p0, p1, p2);
+crate::format::time::fmt_I(p0, p1, p2);
+crate::format::time::fmt_I(p0, p1, p2);
-----------------
src/format/time.rs format::time::parse_I
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::time::parse_I(p0, p1, p2);
+crate::format::time::parse_I(p0, p1, p2);
+crate::format::time::parse_I(p0, p1, p2);
-----------------
src/format/time.rs format::time::fmt_M
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::time::fmt_M(p0, p1, p2);
+crate::format::time::fmt_M(p0, p1, p2);
+crate::format::time::fmt_M(p0, p1, p2);
-----------------
src/format/time.rs format::time::parse_M
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::time::parse_M(p0, p1, p2);
+crate::format::time::parse_M(p0, p1, p2);
+crate::format::time::parse_M(p0, p1, p2);
-----------------
src/format/time.rs format::time::fmt_N
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // time_mod::Time
+format::time::fmt_N(p0, p1);
+crate::format::time::fmt_N(p0, p1);
+crate::format::time::fmt_N(p0, p1);
-----------------
src/format/time.rs format::time::parse_N
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
+format::time::parse_N(p0, p1);
+crate::format::time::parse_N(p0, p1);
+crate::format::time::parse_N(p0, p1);
-----------------
src/format/time.rs format::time::fmt_p
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // time_mod::Time
+format::time::fmt_p(p0, p1);
+crate::format::time::fmt_p(p0, p1);
+crate::format::time::fmt_p(p0, p1);
-----------------
src/format/time.rs format::time::parse_p
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
+format::time::parse_p(p0, p1);
+crate::format::time::parse_p(p0, p1);
+crate::format::time::parse_p(p0, p1);
-----------------
src/format/time.rs format::time::fmt_P
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // time_mod::Time
+format::time::fmt_P(p0, p1);
+crate::format::time::fmt_P(p0, p1);
+crate::format::time::fmt_P(p0, p1);
-----------------
src/format/time.rs format::time::parse_P
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
+format::time::parse_P(p0, p1);
+crate::format::time::parse_P(p0, p1);
+crate::format::time::parse_P(p0, p1);
-----------------
src/format/time.rs format::time::fmt_S
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::time::fmt_S(p0, p1, p2);
+crate::format::time::fmt_S(p0, p1, p2);
+crate::format::time::fmt_S(p0, p1, p2);
-----------------
src/format/time.rs format::time::parse_S
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
let mut p2 = MaybeUninit::uninit().assume_init(); // format::Padding
+format::time::parse_S(p0, p1, p2);
+crate::format::time::parse_S(p0, p1, p2);
+crate::format::time::parse_S(p0, p1, p2);
-----------------
src/format/well_known.rs format::well_known::rfc3339::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::deferred_format::DeferredFormat
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format::well_known::rfc3339::fmt(p0, p1);
+crate::format::well_known::rfc3339::fmt(p0, p1);
+crate::format::well_known::rfc3339::fmt(p0, p1);
-----------------
src/format/well_known.rs format::well_known::rfc3339::parse
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut "a"; // None+&str
+format::well_known::rfc3339::parse(p0, p1);
+crate::format::well_known::rfc3339::parse(p0, p1);
+crate::format::well_known::rfc3339::parse(p0, p1);
-----------------
src/format/mod.rs format::format_specifier
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
let mut p1 = MaybeUninit::uninit().assume_init(); // std::option::Option<date::Date>
let mut p2 = MaybeUninit::uninit().assume_init(); // std::option::Option<time_mod::Time>
let mut p3 = MaybeUninit::uninit().assume_init(); // std::option::Option<utc_offset::UtcOffset>
let mut p4 = MaybeUninit::uninit().assume_init(); // format::Specifier
+format::format_specifier(p0, p1, p2, p3, p4);
+crate::format::format_specifier(p0, p1, p2, p3, p4);
+crate::format::format_specifier(p0, p1, p2, p3, p4);
-----------------
src/internals.rs internals::jan_weekday
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
let mut p1 = 0i32; // None+i32
+internals::jan_weekday(p0, p1);
+crate::internals::jan_weekday(p0, p1);
+crate::internals::jan_weekday(p0, p1);
-----------------
src/time_mod.rs time_mod::Time::try_from_parsed_items::hour_12_to_24
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU8
let mut p1 = MaybeUninit::uninit().assume_init(); // format::parse::AmPm
+time_mod::Time::try_from_parsed_items::hour_12_to_24(p0, p1);
+crate::time_mod::Time::try_from_parsed_items::hour_12_to_24(p0, p1);
+<time_mod::Time>::try_from_parsed_items::hour_12_to_24(p0, p1);
-----------------
src/utc_offset.rs utc_offset::try_local_offset_at
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+utc_offset::try_local_offset_at(p0);
+crate::utc_offset::try_local_offset_at(p0);
+crate::utc_offset::try_local_offset_at(p0);
-----------------
src/util.rs util::validate_format_string
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"util::validate_format_string":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"util::validate_format_string":{"impl AsRef<str>":["std::ffi::CStr","core::num::dec2flt::common::AsciiStr<'a>","std::rc::Rc<T>","std::slice::Iter<'_, T>","std::ffi::CString","std::borrow::Cow<'_, std::ffi::OsStr>","<&T as std::convert::AsRef<U>>","std::vec::IntoIter<T, A>","<&mut T as std::convert::AsRef<U>>","std::sync::Arc<T>","std::slice::IterMut<'_, T>","std::vec::Drain<'a, T, A>","std::borrow::Cow<'_, T>","std::boxed::Box<T, A>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+util::validate_format_string(p0);
+crate::util::validate_format_string(p0);
+crate::util::validate_format_string(p0);
-----------------
src/util.rs util::days_in_year_month
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
let mut p1 = 0u8; // None+u8
+util::days_in_year_month(p0, p1);
+crate::util::days_in_year_month(p0, p1);
+crate::util::days_in_year_month(p0, p1);
-----------------
src/util.rs util::is_leap_year
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+util::is_leap_year(p0);
+crate::util::is_leap_year(p0);
+crate::util::is_leap_year(p0);
-----------------
src/util.rs util::days_in_year
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+util::days_in_year(p0);
+crate::util::days_in_year(p0);
+crate::util::days_in_year(p0);
-----------------
src/util.rs util::weeks_in_year
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+util::weeks_in_year(p0);
+crate::util::weeks_in_year(p0);
+crate::util::weeks_in_year(p0);
-----------------
src/lib.rs parse
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"parse":{"T":["private::Parsable","std::marker::Sized"],"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"parse":{"T":["date::Date","primitive_date_time::PrimitiveDateTime","utc_offset::UtcOffset","time_mod::Time","offset_date_time::OffsetDateTime"],"impl AsRef<str>":["<&mut T as std::convert::AsRef<U>>","std::sync::Arc<T>","std::vec::Drain<'a, T, A>","std::borrow::Cow<'_, std::ffi::OsStr>","std::rc::Rc<T>","core::num::dec2flt::common::AsciiStr<'a>","std::vec::IntoIter<T, A>","std::ffi::CString","<&T as std::convert::AsRef<U>>","std::boxed::Box<T, A>","std::ffi::CStr","std::slice::Iter<'_, T>","std::borrow::Cow<'_, T>","std::slice::IterMut<'_, T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+parse(p0, p1);
+crate::parse(p0, p1);
+crate::parse(p0, p1);
-----------------
src/lib.rs precise_time_ns
deps:{}
candidates:{}
+precise_time_ns();
+crate::precise_time_ns();
+crate::precise_time_ns();
-----------------
src/lib.rs precise_time_s
deps:{}
candidates:{}
+precise_time_s();
+crate::precise_time_s();
+crate::precise_time_s();
-----------------
src/ext.rs ext::NumericalDuration::nanoseconds
deps:{"ext::NumericalDuration::nanoseconds":{"Self":["ext::NumericalDuration"]}}
candidates:{"ext::NumericalDuration::nanoseconds":{"Self":["std::num::NonZeroU8","std::num::NonZeroI64","std::num::NonZeroU16","std::num::NonZeroI16","std::num::NonZeroI32","std::num::NonZeroU32","std::num::NonZeroI8"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.nanoseconds();
+ext::NumericalDuration::nanoseconds(p0);
+crate::ext::NumericalDuration::nanoseconds(p0);
+crate::ext::NumericalDuration::nanoseconds(p0);
-----------------
src/ext.rs ext::NumericalDuration::microseconds
deps:{"ext::NumericalDuration::microseconds":{"Self":["ext::NumericalDuration"]}}
candidates:{"ext::NumericalDuration::microseconds":{"Self":["std::num::NonZeroU16","std::num::NonZeroI32","std::num::NonZeroI8","std::num::NonZeroI16","std::num::NonZeroU8","std::num::NonZeroI64","std::num::NonZeroU32"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.microseconds();
+ext::NumericalDuration::microseconds(p0);
+crate::ext::NumericalDuration::microseconds(p0);
+crate::ext::NumericalDuration::microseconds(p0);
-----------------
src/ext.rs ext::NumericalDuration::milliseconds
deps:{"ext::NumericalDuration::milliseconds":{"Self":["ext::NumericalDuration"]}}
candidates:{"ext::NumericalDuration::milliseconds":{"Self":["std::num::NonZeroU8","std::num::NonZeroI64","std::num::NonZeroI16","std::num::NonZeroI32","std::num::NonZeroU32","std::num::NonZeroI8","std::num::NonZeroU16"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.milliseconds();
+ext::NumericalDuration::milliseconds(p0);
+crate::ext::NumericalDuration::milliseconds(p0);
+crate::ext::NumericalDuration::milliseconds(p0);
-----------------
src/ext.rs ext::NumericalDuration::seconds
deps:{"ext::NumericalDuration::seconds":{"Self":["ext::NumericalDuration"]}}
candidates:{"ext::NumericalDuration::seconds":{"Self":["std::num::NonZeroI64","std::num::NonZeroU32","std::num::NonZeroI16","std::num::NonZeroU16","std::num::NonZeroI32","std::num::NonZeroU8","std::num::NonZeroI8"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.seconds();
+ext::NumericalDuration::seconds(p0);
+crate::ext::NumericalDuration::seconds(p0);
+crate::ext::NumericalDuration::seconds(p0);
-----------------
src/ext.rs ext::NumericalDuration::minutes
deps:{"ext::NumericalDuration::minutes":{"Self":["ext::NumericalDuration"]}}
candidates:{"ext::NumericalDuration::minutes":{"Self":["std::num::NonZeroI16","std::num::NonZeroI32","std::num::NonZeroU16","std::num::NonZeroU32","std::num::NonZeroU8","std::num::NonZeroI8","std::num::NonZeroI64"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.minutes();
+ext::NumericalDuration::minutes(p0);
+crate::ext::NumericalDuration::minutes(p0);
+crate::ext::NumericalDuration::minutes(p0);
-----------------
src/ext.rs ext::NumericalDuration::hours
deps:{"ext::NumericalDuration::hours":{"Self":["ext::NumericalDuration"]}}
candidates:{"ext::NumericalDuration::hours":{"Self":["std::num::NonZeroU32","std::num::NonZeroI32","std::num::NonZeroU8","std::num::NonZeroI8","std::num::NonZeroI64","std::num::NonZeroU16","std::num::NonZeroI16"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.hours();
+ext::NumericalDuration::hours(p0);
+crate::ext::NumericalDuration::hours(p0);
+crate::ext::NumericalDuration::hours(p0);
-----------------
src/ext.rs ext::NumericalDuration::days
deps:{"ext::NumericalDuration::days":{"Self":["ext::NumericalDuration"]}}
candidates:{"ext::NumericalDuration::days":{"Self":["std::num::NonZeroI32","std::num::NonZeroU16","std::num::NonZeroI64","std::num::NonZeroI8","std::num::NonZeroU32","std::num::NonZeroU8","std::num::NonZeroI16"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.days();
+ext::NumericalDuration::days(p0);
+crate::ext::NumericalDuration::days(p0);
+crate::ext::NumericalDuration::days(p0);
-----------------
src/ext.rs ext::NumericalDuration::weeks
deps:{"ext::NumericalDuration::weeks":{"Self":["ext::NumericalDuration"]}}
candidates:{"ext::NumericalDuration::weeks":{"Self":["std::num::NonZeroU16","std::num::NonZeroI32","std::num::NonZeroI16","std::num::NonZeroU8","std::num::NonZeroI64","std::num::NonZeroU32","std::num::NonZeroI8"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.weeks();
+ext::NumericalDuration::weeks(p0);
+crate::ext::NumericalDuration::weeks(p0);
+crate::ext::NumericalDuration::weeks(p0);
-----------------
src/ext.rs ext::NumericalStdDuration::std_nanoseconds
deps:{"ext::NumericalStdDuration::std_nanoseconds":{"Self":["ext::NumericalStdDuration"]}}
candidates:{"ext::NumericalStdDuration::std_nanoseconds":{"Self":["std::num::NonZeroU32","std::num::NonZeroU8","std::num::NonZeroU64","std::num::NonZeroU16"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.std_nanoseconds();
+ext::NumericalStdDuration::std_nanoseconds(p0);
+crate::ext::NumericalStdDuration::std_nanoseconds(p0);
+crate::ext::NumericalStdDuration::std_nanoseconds(p0);
-----------------
src/ext.rs ext::NumericalStdDuration::std_microseconds
deps:{"ext::NumericalStdDuration::std_microseconds":{"Self":["ext::NumericalStdDuration"]}}
candidates:{"ext::NumericalStdDuration::std_microseconds":{"Self":["std::num::NonZeroU32","std::num::NonZeroU16","std::num::NonZeroU64","std::num::NonZeroU8"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.std_microseconds();
+ext::NumericalStdDuration::std_microseconds(p0);
+crate::ext::NumericalStdDuration::std_microseconds(p0);
+crate::ext::NumericalStdDuration::std_microseconds(p0);
-----------------
src/ext.rs ext::NumericalStdDuration::std_milliseconds
deps:{"ext::NumericalStdDuration::std_milliseconds":{"Self":["ext::NumericalStdDuration"]}}
candidates:{"ext::NumericalStdDuration::std_milliseconds":{"Self":["std::num::NonZeroU32","std::num::NonZeroU64","std::num::NonZeroU16","std::num::NonZeroU8"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.std_milliseconds();
+ext::NumericalStdDuration::std_milliseconds(p0);
+crate::ext::NumericalStdDuration::std_milliseconds(p0);
+crate::ext::NumericalStdDuration::std_milliseconds(p0);
-----------------
src/ext.rs ext::NumericalStdDuration::std_seconds
deps:{"ext::NumericalStdDuration::std_seconds":{"Self":["ext::NumericalStdDuration"]}}
candidates:{"ext::NumericalStdDuration::std_seconds":{"Self":["std::num::NonZeroU32","std::num::NonZeroU16","std::num::NonZeroU8","std::num::NonZeroU64"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.std_seconds();
+ext::NumericalStdDuration::std_seconds(p0);
+crate::ext::NumericalStdDuration::std_seconds(p0);
+crate::ext::NumericalStdDuration::std_seconds(p0);
-----------------
src/ext.rs ext::NumericalStdDuration::std_minutes
deps:{"ext::NumericalStdDuration::std_minutes":{"Self":["ext::NumericalStdDuration"]}}
candidates:{"ext::NumericalStdDuration::std_minutes":{"Self":["std::num::NonZeroU64","std::num::NonZeroU8","std::num::NonZeroU32","std::num::NonZeroU16"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.std_minutes();
+ext::NumericalStdDuration::std_minutes(p0);
+crate::ext::NumericalStdDuration::std_minutes(p0);
+crate::ext::NumericalStdDuration::std_minutes(p0);
-----------------
src/ext.rs ext::NumericalStdDuration::std_hours
deps:{"ext::NumericalStdDuration::std_hours":{"Self":["ext::NumericalStdDuration"]}}
candidates:{"ext::NumericalStdDuration::std_hours":{"Self":["std::num::NonZeroU32","std::num::NonZeroU64","std::num::NonZeroU8","std::num::NonZeroU16"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.std_hours();
+ext::NumericalStdDuration::std_hours(p0);
+crate::ext::NumericalStdDuration::std_hours(p0);
+crate::ext::NumericalStdDuration::std_hours(p0);
-----------------
src/ext.rs ext::NumericalStdDuration::std_days
deps:{"ext::NumericalStdDuration::std_days":{"Self":["ext::NumericalStdDuration"]}}
candidates:{"ext::NumericalStdDuration::std_days":{"Self":["std::num::NonZeroU16","std::num::NonZeroU32","std::num::NonZeroU64","std::num::NonZeroU8"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.std_days();
+ext::NumericalStdDuration::std_days(p0);
+crate::ext::NumericalStdDuration::std_days(p0);
+crate::ext::NumericalStdDuration::std_days(p0);
-----------------
src/ext.rs ext::NumericalStdDuration::std_weeks
deps:{"ext::NumericalStdDuration::std_weeks":{"Self":["ext::NumericalStdDuration"]}}
candidates:{"ext::NumericalStdDuration::std_weeks":{"Self":["std::num::NonZeroU8","std::num::NonZeroU64","std::num::NonZeroU32","std::num::NonZeroU16"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.std_weeks();
+ext::NumericalStdDuration::std_weeks(p0);
+crate::ext::NumericalStdDuration::std_weeks(p0);
+crate::ext::NumericalStdDuration::std_weeks(p0);
-----------------
src/ext.rs ext::NumericalStdDurationShort::nanoseconds
deps:{"<T as ext::NumericalStdDurationShort>":{"T":["ext::NumericalStdDuration","std::marker::Sized"]},"ext::NumericalStdDurationShort::nanoseconds":{"Self":["ext::NumericalStdDurationShort"]}}
candidates:{"<T as ext::NumericalStdDurationShort>":{"T":["std::num::NonZeroU32","std::num::NonZeroU8","std::num::NonZeroU64","std::num::NonZeroU16"]},"ext::NumericalStdDurationShort::nanoseconds":{"Self":["<T as ext::NumericalStdDurationShort>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.nanoseconds();
+ext::NumericalStdDurationShort::nanoseconds(p0);
+crate::ext::NumericalStdDurationShort::nanoseconds(p0);
+crate::ext::NumericalStdDurationShort::nanoseconds(p0);
-----------------
src/ext.rs ext::NumericalStdDurationShort::microseconds
deps:{"<T as ext::NumericalStdDurationShort>":{"T":["std::marker::Sized","ext::NumericalStdDuration"]},"ext::NumericalStdDurationShort::microseconds":{"Self":["ext::NumericalStdDurationShort"]}}
candidates:{"<T as ext::NumericalStdDurationShort>":{"T":["std::num::NonZeroU64","std::num::NonZeroU16","std::num::NonZeroU8","std::num::NonZeroU32"]},"ext::NumericalStdDurationShort::microseconds":{"Self":["<T as ext::NumericalStdDurationShort>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.microseconds();
+ext::NumericalStdDurationShort::microseconds(p0);
+crate::ext::NumericalStdDurationShort::microseconds(p0);
+crate::ext::NumericalStdDurationShort::microseconds(p0);
-----------------
src/ext.rs ext::NumericalStdDurationShort::milliseconds
deps:{"<T as ext::NumericalStdDurationShort>":{"T":["ext::NumericalStdDuration","std::marker::Sized"]},"ext::NumericalStdDurationShort::milliseconds":{"Self":["ext::NumericalStdDurationShort"]}}
candidates:{"<T as ext::NumericalStdDurationShort>":{"T":["std::num::NonZeroU64","std::num::NonZeroU8","std::num::NonZeroU16","std::num::NonZeroU32"]},"ext::NumericalStdDurationShort::milliseconds":{"Self":["<T as ext::NumericalStdDurationShort>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.milliseconds();
+ext::NumericalStdDurationShort::milliseconds(p0);
+crate::ext::NumericalStdDurationShort::milliseconds(p0);
+crate::ext::NumericalStdDurationShort::milliseconds(p0);
-----------------
src/ext.rs ext::NumericalStdDurationShort::seconds
deps:{"<T as ext::NumericalStdDurationShort>":{"T":["ext::NumericalStdDuration","std::marker::Sized"]},"ext::NumericalStdDurationShort::seconds":{"Self":["ext::NumericalStdDurationShort"]}}
candidates:{"<T as ext::NumericalStdDurationShort>":{"T":["std::num::NonZeroU32","std::num::NonZeroU64","std::num::NonZeroU8","std::num::NonZeroU16"]},"ext::NumericalStdDurationShort::seconds":{"Self":["<T as ext::NumericalStdDurationShort>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.seconds();
+ext::NumericalStdDurationShort::seconds(p0);
+crate::ext::NumericalStdDurationShort::seconds(p0);
+crate::ext::NumericalStdDurationShort::seconds(p0);
-----------------
src/ext.rs ext::NumericalStdDurationShort::minutes
deps:{"<T as ext::NumericalStdDurationShort>":{"T":["ext::NumericalStdDuration","std::marker::Sized"]},"ext::NumericalStdDurationShort::minutes":{"Self":["ext::NumericalStdDurationShort"]}}
candidates:{"<T as ext::NumericalStdDurationShort>":{"T":["std::num::NonZeroU8","std::num::NonZeroU16","std::num::NonZeroU32","std::num::NonZeroU64"]},"ext::NumericalStdDurationShort::minutes":{"Self":["<T as ext::NumericalStdDurationShort>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.minutes();
+ext::NumericalStdDurationShort::minutes(p0);
+crate::ext::NumericalStdDurationShort::minutes(p0);
+crate::ext::NumericalStdDurationShort::minutes(p0);
-----------------
src/ext.rs ext::NumericalStdDurationShort::hours
deps:{"<T as ext::NumericalStdDurationShort>":{"T":["ext::NumericalStdDuration","std::marker::Sized"]},"ext::NumericalStdDurationShort::hours":{"Self":["ext::NumericalStdDurationShort"]}}
candidates:{"<T as ext::NumericalStdDurationShort>":{"T":["std::num::NonZeroU16","std::num::NonZeroU64","std::num::NonZeroU8","std::num::NonZeroU32"]},"ext::NumericalStdDurationShort::hours":{"Self":["<T as ext::NumericalStdDurationShort>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.hours();
+ext::NumericalStdDurationShort::hours(p0);
+crate::ext::NumericalStdDurationShort::hours(p0);
+crate::ext::NumericalStdDurationShort::hours(p0);
-----------------
src/ext.rs ext::NumericalStdDurationShort::days
deps:{"<T as ext::NumericalStdDurationShort>":{"T":["ext::NumericalStdDuration","std::marker::Sized"]},"ext::NumericalStdDurationShort::days":{"Self":["ext::NumericalStdDurationShort"]}}
candidates:{"<T as ext::NumericalStdDurationShort>":{"T":["std::num::NonZeroU16","std::num::NonZeroU64","std::num::NonZeroU8","std::num::NonZeroU32"]},"ext::NumericalStdDurationShort::days":{"Self":["<T as ext::NumericalStdDurationShort>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.days();
+ext::NumericalStdDurationShort::days(p0);
+crate::ext::NumericalStdDurationShort::days(p0);
+crate::ext::NumericalStdDurationShort::days(p0);
-----------------
src/ext.rs ext::NumericalStdDurationShort::weeks
deps:{"<T as ext::NumericalStdDurationShort>":{"T":["ext::NumericalStdDuration","std::marker::Sized"]},"ext::NumericalStdDurationShort::weeks":{"Self":["ext::NumericalStdDurationShort"]}}
candidates:{"<T as ext::NumericalStdDurationShort>":{"T":["std::num::NonZeroU32","std::num::NonZeroU8","std::num::NonZeroU64","std::num::NonZeroU16"]},"ext::NumericalStdDurationShort::weeks":{"Self":["<T as ext::NumericalStdDurationShort>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.weeks();
+ext::NumericalStdDurationShort::weeks(p0);
+crate::ext::NumericalStdDurationShort::weeks(p0);
+crate::ext::NumericalStdDurationShort::weeks(p0);
-----------------
src/lib.rs private::Parsable::parse
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"private::Parsable::parse":{"Self":["std::marker::Sized","private::Parsable"],"impl AsRef<str>":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"private::Parsable::parse":{"Self":["offset_date_time::OffsetDateTime","utc_offset::UtcOffset","primitive_date_time::PrimitiveDateTime","date::Date","time_mod::Time"],"impl AsRef<str>":["<&T as std::convert::AsRef<U>>","std::ffi::CString","<&mut T as std::convert::AsRef<U>>","std::rc::Rc<T>","std::slice::Iter<'_, T>","std::vec::IntoIter<T, A>","std::slice::IterMut<'_, T>","std::borrow::Cow<'_, T>","core::num::dec2flt::common::AsciiStr<'a>","std::sync::Arc<T>","std::vec::Drain<'a, T, A>","std::boxed::Box<T, A>","std::ffi::CStr","std::borrow::Cow<'_, std::ffi::OsStr>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+private::Parsable::parse(p0, p1);
+crate::private::Parsable::parse(p0, p1);
+crate::private::Parsable::parse(p0, p1);
-----------------
src/date.rs <date::Date as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Date
+p0.clone();
+<date::Date as std::clone::Clone>::clone(p0);
+crate::<date::Date as std::clone::Clone>::clone(p0);
+<date::Date>::clone(p0);
-----------------
src/date.rs <date::Date as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = & MaybeUninit::uninit().assume_init(); // date::Date
+p0.eq(p1);
+<date::Date as std::cmp::PartialEq>::eq(p0, p1);
+crate::<date::Date as std::cmp::PartialEq>::eq(p0, p1);
+<date::Date>::eq(p0, p1);
-----------------
src/date.rs <date::Date as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Date
+p0.assert_receiver_is_total_eq();
+<date::Date as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<date::Date as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<date::Date>::assert_receiver_is_total_eq(p0);
-----------------
src/date.rs <date::Date as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<date::Date as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<date::Date as std::hash::Hash>::hash":{"__H":["std::collections::hash_map::DefaultHasher","<&mut H as std::hash::Hasher>","std::hash::SipHasher","std::hash::sip::Hasher<S>","std::hash::SipHasher13","std::boxed::Box<T, A>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<date::Date as std::hash::Hash>::hash(p0, p1);
+crate::<date::Date as std::hash::Hash>::hash(p0, p1);
+<date::Date>::hash(p0, p1);
-----------------
src/date.rs <date::Date as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<date::Date as std::fmt::Debug>::fmt(p0, p1);
+crate::<date::Date as std::fmt::Debug>::fmt(p0, p1);
+<date::Date>::fmt(p0, p1);
-----------------
src/date.rs date::Date::try_from_ymd
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
let mut p1 = 0u8; // None+u8
let mut p2 = 0u8; // None+u8
+date::Date::try_from_ymd(p0, p1, p2);
+crate::date::Date::try_from_ymd(p0, p1, p2);
+<date::Date>::try_from_ymd(p0, p1, p2);
-----------------
src/date.rs date::Date::try_from_yo
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
let mut p1 = 0u16; // None+u16
+date::Date::try_from_yo(p0, p1);
+crate::date::Date::try_from_yo(p0, p1);
+<date::Date>::try_from_yo(p0, p1);
-----------------
src/date.rs date::Date::try_from_iso_ywd
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
let mut p1 = 0u8; // None+u8
let mut p2 = MaybeUninit::uninit().assume_init(); // weekday::Weekday
+date::Date::try_from_iso_ywd(p0, p1, p2);
+crate::date::Date::try_from_iso_ywd(p0, p1, p2);
+<date::Date>::try_from_iso_ywd(p0, p1, p2);
-----------------
src/date.rs date::Date::today
deps:{}
candidates:{}
+date::Date::today();
+crate::date::Date::today();
+<date::Date>::today();
-----------------
src/date.rs date::Date::year
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.year();
+date::Date::year(p0);
+crate::date::Date::year(p0);
+<date::Date>::year(p0);
-----------------
src/date.rs date::Date::month
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.month();
+date::Date::month(p0);
+crate::date::Date::month(p0);
+<date::Date>::month(p0);
-----------------
src/date.rs date::Date::day
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.day();
+date::Date::day(p0);
+crate::date::Date::day(p0);
+<date::Date>::day(p0);
-----------------
src/date.rs date::Date::month_day
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.month_day();
+date::Date::month_day(p0);
+crate::date::Date::month_day(p0);
+<date::Date>::month_day(p0);
-----------------
src/date.rs date::Date::ordinal
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.ordinal();
+date::Date::ordinal(p0);
+crate::date::Date::ordinal(p0);
+<date::Date>::ordinal(p0);
-----------------
src/date.rs date::Date::iso_year_week
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.iso_year_week();
+date::Date::iso_year_week(p0);
+crate::date::Date::iso_year_week(p0);
+<date::Date>::iso_year_week(p0);
-----------------
src/date.rs date::Date::week
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.week();
+date::Date::week(p0);
+crate::date::Date::week(p0);
+<date::Date>::week(p0);
-----------------
src/date.rs date::Date::sunday_based_week
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.sunday_based_week();
+date::Date::sunday_based_week(p0);
+crate::date::Date::sunday_based_week(p0);
+<date::Date>::sunday_based_week(p0);
-----------------
src/date.rs date::Date::monday_based_week
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.monday_based_week();
+date::Date::monday_based_week(p0);
+crate::date::Date::monday_based_week(p0);
+<date::Date>::monday_based_week(p0);
-----------------
src/date.rs date::Date::as_ymd
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.as_ymd();
+date::Date::as_ymd(p0);
+crate::date::Date::as_ymd(p0);
+<date::Date>::as_ymd(p0);
-----------------
src/date.rs date::Date::as_yo
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.as_yo();
+date::Date::as_yo(p0);
+crate::date::Date::as_yo(p0);
+<date::Date>::as_yo(p0);
-----------------
src/date.rs date::Date::iso_weekday_number
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.iso_weekday_number();
+date::Date::iso_weekday_number(p0);
+crate::date::Date::iso_weekday_number(p0);
+<date::Date>::iso_weekday_number(p0);
-----------------
src/date.rs date::Date::number_days_from_sunday
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.number_days_from_sunday();
+date::Date::number_days_from_sunday(p0);
+crate::date::Date::number_days_from_sunday(p0);
+<date::Date>::number_days_from_sunday(p0);
-----------------
src/date.rs date::Date::number_days_from_monday
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.number_days_from_monday();
+date::Date::number_days_from_monday(p0);
+crate::date::Date::number_days_from_monday(p0);
+<date::Date>::number_days_from_monday(p0);
-----------------
src/date.rs date::Date::weekday
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.weekday();
+date::Date::weekday(p0);
+crate::date::Date::weekday(p0);
+<date::Date>::weekday(p0);
-----------------
src/date.rs date::Date::next_day
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.next_day();
+date::Date::next_day(p0);
+crate::date::Date::next_day(p0);
+<date::Date>::next_day(p0);
-----------------
src/date.rs date::Date::previous_day
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.previous_day();
+date::Date::previous_day(p0);
+crate::date::Date::previous_day(p0);
+<date::Date>::previous_day(p0);
-----------------
src/date.rs date::Date::julian_day
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.julian_day();
+date::Date::julian_day(p0);
+crate::date::Date::julian_day(p0);
+<date::Date>::julian_day(p0);
-----------------
src/date.rs date::Date::from_julian_day
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+date::Date::from_julian_day(p0);
+crate::date::Date::from_julian_day(p0);
+<date::Date>::from_julian_day(p0);
-----------------
src/date.rs date::Date::midnight
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.midnight();
+date::Date::midnight(p0);
+crate::date::Date::midnight(p0);
+<date::Date>::midnight(p0);
-----------------
src/date.rs date::Date::with_time
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = MaybeUninit::uninit().assume_init(); // time_mod::Time
+p0.with_time(p1);
+date::Date::with_time(p0, p1);
+crate::date::Date::with_time(p0, p1);
+<date::Date>::with_time(p0, p1);
-----------------
src/date.rs date::Date::try_with_hms
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = 0u8; // None+u8
let mut p2 = 0u8; // None+u8
let mut p3 = 0u8; // None+u8
+p0.try_with_hms(p1, p2, p3);
+date::Date::try_with_hms(p0, p1, p2, p3);
+crate::date::Date::try_with_hms(p0, p1, p2, p3);
+<date::Date>::try_with_hms(p0, p1, p2, p3);
-----------------
src/date.rs date::Date::try_with_hms_milli
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = 0u8; // None+u8
let mut p2 = 0u8; // None+u8
let mut p3 = 0u8; // None+u8
let mut p4 = 0u16; // None+u16
+p0.try_with_hms_milli(p1, p2, p3, p4);
+date::Date::try_with_hms_milli(p0, p1, p2, p3, p4);
+crate::date::Date::try_with_hms_milli(p0, p1, p2, p3, p4);
+<date::Date>::try_with_hms_milli(p0, p1, p2, p3, p4);
-----------------
src/date.rs date::Date::try_with_hms_micro
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = 0u8; // None+u8
let mut p2 = 0u8; // None+u8
let mut p3 = 0u8; // None+u8
let mut p4 = 0u32; // None+u32
+p0.try_with_hms_micro(p1, p2, p3, p4);
+date::Date::try_with_hms_micro(p0, p1, p2, p3, p4);
+crate::date::Date::try_with_hms_micro(p0, p1, p2, p3, p4);
+<date::Date>::try_with_hms_micro(p0, p1, p2, p3, p4);
-----------------
src/date.rs date::Date::try_with_hms_nano
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = 0u8; // None+u8
let mut p2 = 0u8; // None+u8
let mut p3 = 0u8; // None+u8
let mut p4 = 0u32; // None+u32
+p0.try_with_hms_nano(p1, p2, p3, p4);
+date::Date::try_with_hms_nano(p0, p1, p2, p3, p4);
+crate::date::Date::try_with_hms_nano(p0, p1, p2, p3, p4);
+<date::Date>::try_with_hms_nano(p0, p1, p2, p3, p4);
-----------------
src/date.rs date::Date::format
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"date::Date::format":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"date::Date::format":{"impl AsRef<str>":["std::vec::IntoIter<T, A>","std::ffi::CString","std::vec::Drain<'a, T, A>","<&T as std::convert::AsRef<U>>","std::ffi::CStr","core::num::dec2flt::common::AsciiStr<'a>","std::borrow::Cow<'_, std::ffi::OsStr>","std::slice::Iter<'_, T>","std::boxed::Box<T, A>","std::sync::Arc<T>","std::borrow::Cow<'_, T>","std::rc::Rc<T>","std::slice::IterMut<'_, T>","<&mut T as std::convert::AsRef<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+p0.format(p1);
+date::Date::format(p0, p1);
+crate::date::Date::format(p0, p1);
+<date::Date>::format(p0, p1);
-----------------
src/date.rs date::Date::lazy_format
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"date::Date::lazy_format":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"date::Date::lazy_format":{"impl AsRef<str>":["std::ffi::CStr","<&mut T as std::convert::AsRef<U>>","std::vec::Drain<'a, T, A>","core::num::dec2flt::common::AsciiStr<'a>","std::slice::Iter<'_, T>","std::ffi::CString","std::borrow::Cow<'_, T>","std::borrow::Cow<'_, std::ffi::OsStr>","std::vec::IntoIter<T, A>","std::slice::IterMut<'_, T>","std::sync::Arc<T>","std::rc::Rc<T>","std::boxed::Box<T, A>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+p0.lazy_format(p1);
+date::Date::lazy_format(p0, p1);
+crate::date::Date::lazy_format(p0, p1);
+<date::Date>::lazy_format(p0, p1);
-----------------
src/date.rs date::Date::parse
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"date::Date::parse":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"date::Date::parse":{"impl AsRef<str>":["std::sync::Arc<T>","std::slice::Iter<'_, T>","std::borrow::Cow<'_, T>","std::rc::Rc<T>","std::vec::IntoIter<T, A>","std::ffi::CStr","core::num::dec2flt::common::AsciiStr<'a>","std::boxed::Box<T, A>","std::ffi::CString","<&mut T as std::convert::AsRef<U>>","std::vec::Drain<'a, T, A>","std::borrow::Cow<'_, std::ffi::OsStr>","<&T as std::convert::AsRef<U>>","std::slice::IterMut<'_, T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+date::Date::parse(p0, p1);
+crate::date::Date::parse(p0, p1);
+<date::Date>::parse(p0, p1);
-----------------
src/date.rs date::Date::try_from_parsed_items
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
+date::Date::try_from_parsed_items(p0);
+crate::date::Date::try_from_parsed_items(p0);
+<date::Date>::try_from_parsed_items(p0);
-----------------
src/date.rs <date::Date as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<date::Date as std::fmt::Display>::fmt(p0, p1);
+crate::<date::Date as std::fmt::Display>::fmt(p0, p1);
+<date::Date>::fmt(p0, p1);
-----------------
src/date.rs <date::Date as std::ops::Add<duration::Duration>>::add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.add(p1);
+<date::Date as std::ops::Add<duration::Duration>>::add(p0, p1);
+crate::<date::Date as std::ops::Add<duration::Duration>>::add(p0, p1);
+<date::Date>::add(p0, p1);
-----------------
src/date.rs <date::Date as std::ops::Add<std::time::Duration>>::add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.add(p1);
+<date::Date as std::ops::Add<std::time::Duration>>::add(p0, p1);
+crate::<date::Date as std::ops::Add<std::time::Duration>>::add(p0, p1);
+<date::Date>::add(p0, p1);
-----------------
src/date.rs <date::Date as std::ops::AddAssign<duration::Duration>>::add_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.add_assign(p1);
+<date::Date as std::ops::AddAssign<duration::Duration>>::add_assign(p0, p1);
+crate::<date::Date as std::ops::AddAssign<duration::Duration>>::add_assign(p0, p1);
+<date::Date>::add_assign(p0, p1);
-----------------
src/date.rs <date::Date as std::ops::AddAssign<std::time::Duration>>::add_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.add_assign(p1);
+<date::Date as std::ops::AddAssign<std::time::Duration>>::add_assign(p0, p1);
+crate::<date::Date as std::ops::AddAssign<std::time::Duration>>::add_assign(p0, p1);
+<date::Date>::add_assign(p0, p1);
-----------------
src/date.rs <date::Date as std::ops::Sub<duration::Duration>>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub(p1);
+<date::Date as std::ops::Sub<duration::Duration>>::sub(p0, p1);
+crate::<date::Date as std::ops::Sub<duration::Duration>>::sub(p0, p1);
+<date::Date>::sub(p0, p1);
-----------------
src/date.rs <date::Date as std::ops::Sub<std::time::Duration>>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.sub(p1);
+<date::Date as std::ops::Sub<std::time::Duration>>::sub(p0, p1);
+crate::<date::Date as std::ops::Sub<std::time::Duration>>::sub(p0, p1);
+<date::Date>::sub(p0, p1);
-----------------
src/date.rs <date::Date as std::ops::SubAssign<duration::Duration>>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub_assign(p1);
+<date::Date as std::ops::SubAssign<duration::Duration>>::sub_assign(p0, p1);
+crate::<date::Date as std::ops::SubAssign<duration::Duration>>::sub_assign(p0, p1);
+<date::Date>::sub_assign(p0, p1);
-----------------
src/date.rs <date::Date as std::ops::SubAssign<std::time::Duration>>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.sub_assign(p1);
+<date::Date as std::ops::SubAssign<std::time::Duration>>::sub_assign(p0, p1);
+crate::<date::Date as std::ops::SubAssign<std::time::Duration>>::sub_assign(p0, p1);
+<date::Date>::sub_assign(p0, p1);
-----------------
src/date.rs <date::Date as std::ops::Sub>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.sub(p1);
+<date::Date as std::ops::Sub>::sub(p0, p1);
+crate::<date::Date as std::ops::Sub>::sub(p0, p1);
+<date::Date>::sub(p0, p1);
-----------------
src/date.rs <date::Date as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = & MaybeUninit::uninit().assume_init(); // date::Date
+p0.partial_cmp(p1);
+<date::Date as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<date::Date as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<date::Date>::partial_cmp(p0, p1);
-----------------
src/date.rs <date::Date as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = & MaybeUninit::uninit().assume_init(); // date::Date
+p0.cmp(p1);
+<date::Date as std::cmp::Ord>::cmp(p0, p1);
+crate::<date::Date as std::cmp::Ord>::cmp(p0, p1);
+<date::Date>::cmp(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.clone();
+<duration::Duration as std::clone::Clone>::clone(p0);
+crate::<duration::Duration as std::clone::Clone>::clone(p0);
+<duration::Duration>::clone(p0);
-----------------
src/duration.rs <duration::Duration as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<duration::Duration as std::fmt::Debug>::fmt(p0, p1);
+crate::<duration::Duration as std::fmt::Debug>::fmt(p0, p1);
+<duration::Duration>::fmt(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::default::Default>::default
deps:{}
candidates:{}
+<duration::Duration as std::default::Default>::default();
+crate::<duration::Duration as std::default::Default>::default();
+<duration::Duration>::default();
-----------------
src/duration.rs <duration::Duration as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = & MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.eq(p1);
+<duration::Duration as std::cmp::PartialEq>::eq(p0, p1);
+crate::<duration::Duration as std::cmp::PartialEq>::eq(p0, p1);
+<duration::Duration>::eq(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.assert_receiver_is_total_eq();
+<duration::Duration as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<duration::Duration as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<duration::Duration>::assert_receiver_is_total_eq(p0);
-----------------
src/duration.rs <duration::Duration as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<duration::Duration as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<duration::Duration as std::hash::Hash>::hash":{"__H":["std::boxed::Box<T, A>","std::hash::SipHasher","std::hash::sip::Hasher<S>","<&mut H as std::hash::Hasher>","std::collections::hash_map::DefaultHasher","std::hash::SipHasher13"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<duration::Duration as std::hash::Hash>::hash(p0, p1);
+crate::<duration::Duration as std::hash::Hash>::hash(p0, p1);
+<duration::Duration>::hash(p0, p1);
-----------------
src/duration.rs duration::Duration::zero
deps:{}
candidates:{}
+duration::Duration::zero();
+crate::duration::Duration::zero();
+<duration::Duration>::zero();
-----------------
src/duration.rs duration::Duration::nanosecond
deps:{}
candidates:{}
+duration::Duration::nanosecond();
+crate::duration::Duration::nanosecond();
+<duration::Duration>::nanosecond();
-----------------
src/duration.rs duration::Duration::microsecond
deps:{}
candidates:{}
+duration::Duration::microsecond();
+crate::duration::Duration::microsecond();
+<duration::Duration>::microsecond();
-----------------
src/duration.rs duration::Duration::millisecond
deps:{}
candidates:{}
+duration::Duration::millisecond();
+crate::duration::Duration::millisecond();
+<duration::Duration>::millisecond();
-----------------
src/duration.rs duration::Duration::second
deps:{}
candidates:{}
+duration::Duration::second();
+crate::duration::Duration::second();
+<duration::Duration>::second();
-----------------
src/duration.rs duration::Duration::minute
deps:{}
candidates:{}
+duration::Duration::minute();
+crate::duration::Duration::minute();
+<duration::Duration>::minute();
-----------------
src/duration.rs duration::Duration::hour
deps:{}
candidates:{}
+duration::Duration::hour();
+crate::duration::Duration::hour();
+<duration::Duration>::hour();
-----------------
src/duration.rs duration::Duration::day
deps:{}
candidates:{}
+duration::Duration::day();
+crate::duration::Duration::day();
+<duration::Duration>::day();
-----------------
src/duration.rs duration::Duration::week
deps:{}
candidates:{}
+duration::Duration::week();
+crate::duration::Duration::week();
+<duration::Duration>::week();
-----------------
src/duration.rs duration::Duration::max_value
deps:{}
candidates:{}
+duration::Duration::max_value();
+crate::duration::Duration::max_value();
+<duration::Duration>::max_value();
-----------------
src/duration.rs duration::Duration::min_value
deps:{}
candidates:{}
+duration::Duration::min_value();
+crate::duration::Duration::min_value();
+<duration::Duration>::min_value();
-----------------
src/duration.rs duration::Duration::is_zero
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.is_zero();
+duration::Duration::is_zero(p0);
+crate::duration::Duration::is_zero(p0);
+<duration::Duration>::is_zero(p0);
-----------------
src/duration.rs duration::Duration::is_negative
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.is_negative();
+duration::Duration::is_negative(p0);
+crate::duration::Duration::is_negative(p0);
+<duration::Duration>::is_negative(p0);
-----------------
src/duration.rs duration::Duration::is_positive
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.is_positive();
+duration::Duration::is_positive(p0);
+crate::duration::Duration::is_positive(p0);
+<duration::Duration>::is_positive(p0);
-----------------
src/duration.rs duration::Duration::sign
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sign();
+duration::Duration::sign(p0);
+crate::duration::Duration::sign(p0);
+<duration::Duration>::sign(p0);
-----------------
src/duration.rs duration::Duration::abs
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.abs();
+duration::Duration::abs(p0);
+crate::duration::Duration::abs(p0);
+<duration::Duration>::abs(p0);
-----------------
src/duration.rs duration::Duration::abs_std
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.abs_std();
+duration::Duration::abs_std(p0);
+crate::duration::Duration::abs_std(p0);
+<duration::Duration>::abs_std(p0);
-----------------
src/duration.rs duration::Duration::new
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
let mut p1 = 0i32; // None+i32
+duration::Duration::new(p0, p1);
+crate::duration::Duration::new(p0, p1);
+<duration::Duration>::new(p0, p1);
-----------------
src/duration.rs duration::Duration::weeks
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+duration::Duration::weeks(p0);
+crate::duration::Duration::weeks(p0);
+<duration::Duration>::weeks(p0);
-----------------
src/duration.rs duration::Duration::whole_weeks
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.whole_weeks();
+duration::Duration::whole_weeks(p0);
+crate::duration::Duration::whole_weeks(p0);
+<duration::Duration>::whole_weeks(p0);
-----------------
src/duration.rs duration::Duration::days
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+duration::Duration::days(p0);
+crate::duration::Duration::days(p0);
+<duration::Duration>::days(p0);
-----------------
src/duration.rs duration::Duration::whole_days
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.whole_days();
+duration::Duration::whole_days(p0);
+crate::duration::Duration::whole_days(p0);
+<duration::Duration>::whole_days(p0);
-----------------
src/duration.rs duration::Duration::hours
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+duration::Duration::hours(p0);
+crate::duration::Duration::hours(p0);
+<duration::Duration>::hours(p0);
-----------------
src/duration.rs duration::Duration::whole_hours
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.whole_hours();
+duration::Duration::whole_hours(p0);
+crate::duration::Duration::whole_hours(p0);
+<duration::Duration>::whole_hours(p0);
-----------------
src/duration.rs duration::Duration::minutes
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+duration::Duration::minutes(p0);
+crate::duration::Duration::minutes(p0);
+<duration::Duration>::minutes(p0);
-----------------
src/duration.rs duration::Duration::whole_minutes
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.whole_minutes();
+duration::Duration::whole_minutes(p0);
+crate::duration::Duration::whole_minutes(p0);
+<duration::Duration>::whole_minutes(p0);
-----------------
src/duration.rs duration::Duration::seconds
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+duration::Duration::seconds(p0);
+crate::duration::Duration::seconds(p0);
+<duration::Duration>::seconds(p0);
-----------------
src/duration.rs duration::Duration::whole_seconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.whole_seconds();
+duration::Duration::whole_seconds(p0);
+crate::duration::Duration::whole_seconds(p0);
+<duration::Duration>::whole_seconds(p0);
-----------------
src/duration.rs duration::Duration::seconds_f64
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
+duration::Duration::seconds_f64(p0);
+crate::duration::Duration::seconds_f64(p0);
+<duration::Duration>::seconds_f64(p0);
-----------------
src/duration.rs duration::Duration::as_seconds_f64
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.as_seconds_f64();
+duration::Duration::as_seconds_f64(p0);
+crate::duration::Duration::as_seconds_f64(p0);
+<duration::Duration>::as_seconds_f64(p0);
-----------------
src/duration.rs duration::Duration::seconds_f32
deps:{}
candidates:{}
let mut p0 = 0f32; // None+f32
+duration::Duration::seconds_f32(p0);
+crate::duration::Duration::seconds_f32(p0);
+<duration::Duration>::seconds_f32(p0);
-----------------
src/duration.rs duration::Duration::as_seconds_f32
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.as_seconds_f32();
+duration::Duration::as_seconds_f32(p0);
+crate::duration::Duration::as_seconds_f32(p0);
+<duration::Duration>::as_seconds_f32(p0);
-----------------
src/duration.rs duration::Duration::milliseconds
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+duration::Duration::milliseconds(p0);
+crate::duration::Duration::milliseconds(p0);
+<duration::Duration>::milliseconds(p0);
-----------------
src/duration.rs duration::Duration::whole_milliseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.whole_milliseconds();
+duration::Duration::whole_milliseconds(p0);
+crate::duration::Duration::whole_milliseconds(p0);
+<duration::Duration>::whole_milliseconds(p0);
-----------------
src/duration.rs duration::Duration::subsec_milliseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.subsec_milliseconds();
+duration::Duration::subsec_milliseconds(p0);
+crate::duration::Duration::subsec_milliseconds(p0);
+<duration::Duration>::subsec_milliseconds(p0);
-----------------
src/duration.rs duration::Duration::microseconds
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+duration::Duration::microseconds(p0);
+crate::duration::Duration::microseconds(p0);
+<duration::Duration>::microseconds(p0);
-----------------
src/duration.rs duration::Duration::whole_microseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.whole_microseconds();
+duration::Duration::whole_microseconds(p0);
+crate::duration::Duration::whole_microseconds(p0);
+<duration::Duration>::whole_microseconds(p0);
-----------------
src/duration.rs duration::Duration::subsec_microseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.subsec_microseconds();
+duration::Duration::subsec_microseconds(p0);
+crate::duration::Duration::subsec_microseconds(p0);
+<duration::Duration>::subsec_microseconds(p0);
-----------------
src/duration.rs duration::Duration::nanoseconds
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+duration::Duration::nanoseconds(p0);
+crate::duration::Duration::nanoseconds(p0);
+<duration::Duration>::nanoseconds(p0);
-----------------
src/duration.rs duration::Duration::nanoseconds_i128
deps:{}
candidates:{}
let mut p0 = 0i128; // None+i128
+duration::Duration::nanoseconds_i128(p0);
+crate::duration::Duration::nanoseconds_i128(p0);
+<duration::Duration>::nanoseconds_i128(p0);
-----------------
src/duration.rs duration::Duration::whole_nanoseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.whole_nanoseconds();
+duration::Duration::whole_nanoseconds(p0);
+crate::duration::Duration::whole_nanoseconds(p0);
+<duration::Duration>::whole_nanoseconds(p0);
-----------------
src/duration.rs duration::Duration::subsec_nanoseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.subsec_nanoseconds();
+duration::Duration::subsec_nanoseconds(p0);
+crate::duration::Duration::subsec_nanoseconds(p0);
+<duration::Duration>::subsec_nanoseconds(p0);
-----------------
src/duration.rs duration::Duration::checked_add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.checked_add(p1);
+duration::Duration::checked_add(p0, p1);
+crate::duration::Duration::checked_add(p0, p1);
+<duration::Duration>::checked_add(p0, p1);
-----------------
src/duration.rs duration::Duration::checked_sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.checked_sub(p1);
+duration::Duration::checked_sub(p0, p1);
+crate::duration::Duration::checked_sub(p0, p1);
+<duration::Duration>::checked_sub(p0, p1);
-----------------
src/duration.rs duration::Duration::checked_mul
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0i32; // None+i32
+p0.checked_mul(p1);
+duration::Duration::checked_mul(p0, p1);
+crate::duration::Duration::checked_mul(p0, p1);
+<duration::Duration>::checked_mul(p0, p1);
-----------------
src/duration.rs duration::Duration::checked_div
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0i32; // None+i32
+p0.checked_div(p1);
+duration::Duration::checked_div(p0, p1);
+crate::duration::Duration::checked_div(p0, p1);
+<duration::Duration>::checked_div(p0, p1);
-----------------
src/duration.rs duration::Duration::time_fn
deps:{"duration::Duration::time_fn":{"T":["std::marker::Sized"],"impl FnOnce() -> T":["std::marker::Sized","std::ops::FnOnce"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
candidates:{"duration::Duration::time_fn":{"T":["RUG_ANY"],"impl FnOnce() -> T":["core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::str::CharEscapeDefault","std::panic::AssertUnwindSafe<F>","core::str::IsNotEmpty"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // impl FnOnce() -> T
+duration::Duration::time_fn(p0);
+crate::duration::Duration::time_fn(p0);
+<duration::Duration>::time_fn(p0);
-----------------
src/duration.rs duration::Duration::num_weeks
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.num_weeks();
+duration::Duration::num_weeks(p0);
+crate::duration::Duration::num_weeks(p0);
+<duration::Duration>::num_weeks(p0);
-----------------
src/duration.rs duration::Duration::num_days
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.num_days();
+duration::Duration::num_days(p0);
+crate::duration::Duration::num_days(p0);
+<duration::Duration>::num_days(p0);
-----------------
src/duration.rs duration::Duration::num_hours
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.num_hours();
+duration::Duration::num_hours(p0);
+crate::duration::Duration::num_hours(p0);
+<duration::Duration>::num_hours(p0);
-----------------
src/duration.rs duration::Duration::num_minutes
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.num_minutes();
+duration::Duration::num_minutes(p0);
+crate::duration::Duration::num_minutes(p0);
+<duration::Duration>::num_minutes(p0);
-----------------
src/duration.rs duration::Duration::num_seconds
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.num_seconds();
+duration::Duration::num_seconds(p0);
+crate::duration::Duration::num_seconds(p0);
+<duration::Duration>::num_seconds(p0);
-----------------
src/duration.rs duration::Duration::num_milliseconds
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.num_milliseconds();
+duration::Duration::num_milliseconds(p0);
+crate::duration::Duration::num_milliseconds(p0);
+<duration::Duration>::num_milliseconds(p0);
-----------------
src/duration.rs duration::Duration::num_microseconds
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.num_microseconds();
+duration::Duration::num_microseconds(p0);
+crate::duration::Duration::num_microseconds(p0);
+<duration::Duration>::num_microseconds(p0);
-----------------
src/duration.rs duration::Duration::num_nanoseconds
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.num_nanoseconds();
+duration::Duration::num_nanoseconds(p0);
+crate::duration::Duration::num_nanoseconds(p0);
+<duration::Duration>::num_nanoseconds(p0);
-----------------
src/duration.rs duration::Duration::span
deps:{"duration::Duration::span":{"F":["std::marker::Sized","std::ops::FnOnce"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
candidates:{"duration::Duration::span":{"F":["core::str::IsNotEmpty","core::str::IsWhitespace","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","std::panic::AssertUnwindSafe<F>","core::str::LinesAnyMap","core::str::IsAsciiWhitespace","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::boxed::Box<F, A>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>","core::str::CharEscapeUnicode"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // F
+duration::Duration::span(p0);
+crate::duration::Duration::span(p0);
+<duration::Duration>::span(p0);
-----------------
src/duration.rs duration::Duration::from_std
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+duration::Duration::from_std(p0);
+crate::duration::Duration::from_std(p0);
+<duration::Duration>::from_std(p0);
-----------------
src/duration.rs duration::Duration::to_std
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.to_std();
+duration::Duration::to_std(p0);
+crate::duration::Duration::to_std(p0);
+<duration::Duration>::to_std(p0);
-----------------
src/duration.rs <duration::Duration as std::convert::TryFrom<std::time::Duration>>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+<duration::Duration as std::convert::TryFrom<std::time::Duration>>::try_from(p0);
+crate::<duration::Duration as std::convert::TryFrom<std::time::Duration>>::try_from(p0);
+<duration::Duration>::try_from(p0);
-----------------
src/duration.rs duration::<impl std::convert::TryFrom<duration::Duration> for std::time::Duration>::try_from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+duration::<impl std::convert::TryFrom<duration::Duration> for std::time::Duration>::try_from(p0);
+crate::duration::<impl std::convert::TryFrom<duration::Duration> for std::time::Duration>::try_from(p0);
+<std::time::Duration>::try_from(p0);
-----------------
src/duration.rs <duration::Duration as std::ops::Add>::add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.add(p1);
+<duration::Duration as std::ops::Add>::add(p0, p1);
+crate::<duration::Duration as std::ops::Add>::add(p0, p1);
+<duration::Duration>::add(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Add<std::time::Duration>>::add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.add(p1);
+<duration::Duration as std::ops::Add<std::time::Duration>>::add(p0, p1);
+crate::<duration::Duration as std::ops::Add<std::time::Duration>>::add(p0, p1);
+<duration::Duration>::add(p0, p1);
-----------------
src/duration.rs duration::<impl std::ops::Add<duration::Duration> for std::time::Duration>::add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::time::Duration
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.add(p1);
+duration::<impl std::ops::Add<duration::Duration> for std::time::Duration>::add(p0, p1);
+crate::duration::<impl std::ops::Add<duration::Duration> for std::time::Duration>::add(p0, p1);
+<std::time::Duration>::add(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::AddAssign>::add_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.add_assign(p1);
+<duration::Duration as std::ops::AddAssign>::add_assign(p0, p1);
+crate::<duration::Duration as std::ops::AddAssign>::add_assign(p0, p1);
+<duration::Duration>::add_assign(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::AddAssign<std::time::Duration>>::add_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.add_assign(p1);
+<duration::Duration as std::ops::AddAssign<std::time::Duration>>::add_assign(p0, p1);
+crate::<duration::Duration as std::ops::AddAssign<std::time::Duration>>::add_assign(p0, p1);
+<duration::Duration>::add_assign(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Neg>::neg
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.neg();
+<duration::Duration as std::ops::Neg>::neg(p0);
+crate::<duration::Duration as std::ops::Neg>::neg(p0);
+<duration::Duration>::neg(p0);
-----------------
src/duration.rs <duration::Duration as std::ops::Sub>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub(p1);
+<duration::Duration as std::ops::Sub>::sub(p0, p1);
+crate::<duration::Duration as std::ops::Sub>::sub(p0, p1);
+<duration::Duration>::sub(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Sub<std::time::Duration>>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.sub(p1);
+<duration::Duration as std::ops::Sub<std::time::Duration>>::sub(p0, p1);
+crate::<duration::Duration as std::ops::Sub<std::time::Duration>>::sub(p0, p1);
+<duration::Duration>::sub(p0, p1);
-----------------
src/duration.rs duration::<impl std::ops::Sub<duration::Duration> for std::time::Duration>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::time::Duration
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub(p1);
+duration::<impl std::ops::Sub<duration::Duration> for std::time::Duration>::sub(p0, p1);
+crate::duration::<impl std::ops::Sub<duration::Duration> for std::time::Duration>::sub(p0, p1);
+<std::time::Duration>::sub(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::SubAssign>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub_assign(p1);
+<duration::Duration as std::ops::SubAssign>::sub_assign(p0, p1);
+crate::<duration::Duration as std::ops::SubAssign>::sub_assign(p0, p1);
+<duration::Duration>::sub_assign(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::SubAssign<std::time::Duration>>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.sub_assign(p1);
+<duration::Duration as std::ops::SubAssign<std::time::Duration>>::sub_assign(p0, p1);
+crate::<duration::Duration as std::ops::SubAssign<std::time::Duration>>::sub_assign(p0, p1);
+<duration::Duration>::sub_assign(p0, p1);
-----------------
src/duration.rs duration::<impl std::ops::SubAssign<duration::Duration> for std::time::Duration>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::time::Duration
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub_assign(p1);
+duration::<impl std::ops::SubAssign<duration::Duration> for std::time::Duration>::sub_assign(p0, p1);
+crate::duration::<impl std::ops::SubAssign<duration::Duration> for std::time::Duration>::sub_assign(p0, p1);
+<std::time::Duration>::sub_assign(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Mul<i8>>::mul
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0i8; // None+i8
+p0.mul(p1);
+<duration::Duration as std::ops::Mul<i8>>::mul(p0, p1);
+crate::<duration::Duration as std::ops::Mul<i8>>::mul(p0, p1);
+<duration::Duration>::mul(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::MulAssign<i8>>::mul_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0i8; // None+i8
+p0.mul_assign(p1);
+<duration::Duration as std::ops::MulAssign<i8>>::mul_assign(p0, p1);
+crate::<duration::Duration as std::ops::MulAssign<i8>>::mul_assign(p0, p1);
+<duration::Duration>::mul_assign(p0, p1);
-----------------
src/duration.rs duration::<impl std::ops::Mul<duration::Duration> for i8>::mul
deps:{}
candidates:{}
let mut p0 = 0i8; // None+i8
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.mul(p1);
+duration::<impl std::ops::Mul<duration::Duration> for i8>::mul(p0, p1);
+crate::duration::<impl std::ops::Mul<duration::Duration> for i8>::mul(p0, p1);
+<i8>::mul(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Div<i8>>::div
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0i8; // None+i8
+p0.div(p1);
+<duration::Duration as std::ops::Div<i8>>::div(p0, p1);
+crate::<duration::Duration as std::ops::Div<i8>>::div(p0, p1);
+<duration::Duration>::div(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::DivAssign<i8>>::div_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0i8; // None+i8
+p0.div_assign(p1);
+<duration::Duration as std::ops::DivAssign<i8>>::div_assign(p0, p1);
+crate::<duration::Duration as std::ops::DivAssign<i8>>::div_assign(p0, p1);
+<duration::Duration>::div_assign(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Mul<i16>>::mul
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0i16; // None+i16
+p0.mul(p1);
+<duration::Duration as std::ops::Mul<i16>>::mul(p0, p1);
+crate::<duration::Duration as std::ops::Mul<i16>>::mul(p0, p1);
+<duration::Duration>::mul(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::MulAssign<i16>>::mul_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0i16; // None+i16
+p0.mul_assign(p1);
+<duration::Duration as std::ops::MulAssign<i16>>::mul_assign(p0, p1);
+crate::<duration::Duration as std::ops::MulAssign<i16>>::mul_assign(p0, p1);
+<duration::Duration>::mul_assign(p0, p1);
-----------------
src/duration.rs duration::<impl std::ops::Mul<duration::Duration> for i16>::mul
deps:{}
candidates:{}
let mut p0 = 0i16; // None+i16
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.mul(p1);
+duration::<impl std::ops::Mul<duration::Duration> for i16>::mul(p0, p1);
+crate::duration::<impl std::ops::Mul<duration::Duration> for i16>::mul(p0, p1);
+<i16>::mul(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Div<i16>>::div
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0i16; // None+i16
+p0.div(p1);
+<duration::Duration as std::ops::Div<i16>>::div(p0, p1);
+crate::<duration::Duration as std::ops::Div<i16>>::div(p0, p1);
+<duration::Duration>::div(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::DivAssign<i16>>::div_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0i16; // None+i16
+p0.div_assign(p1);
+<duration::Duration as std::ops::DivAssign<i16>>::div_assign(p0, p1);
+crate::<duration::Duration as std::ops::DivAssign<i16>>::div_assign(p0, p1);
+<duration::Duration>::div_assign(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Mul<i32>>::mul
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0i32; // None+i32
+p0.mul(p1);
+<duration::Duration as std::ops::Mul<i32>>::mul(p0, p1);
+crate::<duration::Duration as std::ops::Mul<i32>>::mul(p0, p1);
+<duration::Duration>::mul(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::MulAssign<i32>>::mul_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0i32; // None+i32
+p0.mul_assign(p1);
+<duration::Duration as std::ops::MulAssign<i32>>::mul_assign(p0, p1);
+crate::<duration::Duration as std::ops::MulAssign<i32>>::mul_assign(p0, p1);
+<duration::Duration>::mul_assign(p0, p1);
-----------------
src/duration.rs duration::<impl std::ops::Mul<duration::Duration> for i32>::mul
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.mul(p1);
+duration::<impl std::ops::Mul<duration::Duration> for i32>::mul(p0, p1);
+crate::duration::<impl std::ops::Mul<duration::Duration> for i32>::mul(p0, p1);
+<i32>::mul(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Div<i32>>::div
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0i32; // None+i32
+p0.div(p1);
+<duration::Duration as std::ops::Div<i32>>::div(p0, p1);
+crate::<duration::Duration as std::ops::Div<i32>>::div(p0, p1);
+<duration::Duration>::div(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::DivAssign<i32>>::div_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0i32; // None+i32
+p0.div_assign(p1);
+<duration::Duration as std::ops::DivAssign<i32>>::div_assign(p0, p1);
+crate::<duration::Duration as std::ops::DivAssign<i32>>::div_assign(p0, p1);
+<duration::Duration>::div_assign(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Mul<u8>>::mul
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0u8; // None+u8
+p0.mul(p1);
+<duration::Duration as std::ops::Mul<u8>>::mul(p0, p1);
+crate::<duration::Duration as std::ops::Mul<u8>>::mul(p0, p1);
+<duration::Duration>::mul(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::MulAssign<u8>>::mul_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0u8; // None+u8
+p0.mul_assign(p1);
+<duration::Duration as std::ops::MulAssign<u8>>::mul_assign(p0, p1);
+crate::<duration::Duration as std::ops::MulAssign<u8>>::mul_assign(p0, p1);
+<duration::Duration>::mul_assign(p0, p1);
-----------------
src/duration.rs duration::<impl std::ops::Mul<duration::Duration> for u8>::mul
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.mul(p1);
+duration::<impl std::ops::Mul<duration::Duration> for u8>::mul(p0, p1);
+crate::duration::<impl std::ops::Mul<duration::Duration> for u8>::mul(p0, p1);
+<u8>::mul(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Div<u8>>::div
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0u8; // None+u8
+p0.div(p1);
+<duration::Duration as std::ops::Div<u8>>::div(p0, p1);
+crate::<duration::Duration as std::ops::Div<u8>>::div(p0, p1);
+<duration::Duration>::div(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::DivAssign<u8>>::div_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0u8; // None+u8
+p0.div_assign(p1);
+<duration::Duration as std::ops::DivAssign<u8>>::div_assign(p0, p1);
+crate::<duration::Duration as std::ops::DivAssign<u8>>::div_assign(p0, p1);
+<duration::Duration>::div_assign(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Mul<u16>>::mul
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0u16; // None+u16
+p0.mul(p1);
+<duration::Duration as std::ops::Mul<u16>>::mul(p0, p1);
+crate::<duration::Duration as std::ops::Mul<u16>>::mul(p0, p1);
+<duration::Duration>::mul(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::MulAssign<u16>>::mul_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0u16; // None+u16
+p0.mul_assign(p1);
+<duration::Duration as std::ops::MulAssign<u16>>::mul_assign(p0, p1);
+crate::<duration::Duration as std::ops::MulAssign<u16>>::mul_assign(p0, p1);
+<duration::Duration>::mul_assign(p0, p1);
-----------------
src/duration.rs duration::<impl std::ops::Mul<duration::Duration> for u16>::mul
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.mul(p1);
+duration::<impl std::ops::Mul<duration::Duration> for u16>::mul(p0, p1);
+crate::duration::<impl std::ops::Mul<duration::Duration> for u16>::mul(p0, p1);
+<u16>::mul(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Div<u16>>::div
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0u16; // None+u16
+p0.div(p1);
+<duration::Duration as std::ops::Div<u16>>::div(p0, p1);
+crate::<duration::Duration as std::ops::Div<u16>>::div(p0, p1);
+<duration::Duration>::div(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::DivAssign<u16>>::div_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0u16; // None+u16
+p0.div_assign(p1);
+<duration::Duration as std::ops::DivAssign<u16>>::div_assign(p0, p1);
+crate::<duration::Duration as std::ops::DivAssign<u16>>::div_assign(p0, p1);
+<duration::Duration>::div_assign(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Mul<u32>>::mul
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0u32; // None+u32
+p0.mul(p1);
+<duration::Duration as std::ops::Mul<u32>>::mul(p0, p1);
+crate::<duration::Duration as std::ops::Mul<u32>>::mul(p0, p1);
+<duration::Duration>::mul(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::MulAssign<u32>>::mul_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0u32; // None+u32
+p0.mul_assign(p1);
+<duration::Duration as std::ops::MulAssign<u32>>::mul_assign(p0, p1);
+crate::<duration::Duration as std::ops::MulAssign<u32>>::mul_assign(p0, p1);
+<duration::Duration>::mul_assign(p0, p1);
-----------------
src/duration.rs duration::<impl std::ops::Mul<duration::Duration> for u32>::mul
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.mul(p1);
+duration::<impl std::ops::Mul<duration::Duration> for u32>::mul(p0, p1);
+crate::duration::<impl std::ops::Mul<duration::Duration> for u32>::mul(p0, p1);
+<u32>::mul(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Div<u32>>::div
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0u32; // None+u32
+p0.div(p1);
+<duration::Duration as std::ops::Div<u32>>::div(p0, p1);
+crate::<duration::Duration as std::ops::Div<u32>>::div(p0, p1);
+<duration::Duration>::div(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::DivAssign<u32>>::div_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0u32; // None+u32
+p0.div_assign(p1);
+<duration::Duration as std::ops::DivAssign<u32>>::div_assign(p0, p1);
+crate::<duration::Duration as std::ops::DivAssign<u32>>::div_assign(p0, p1);
+<duration::Duration>::div_assign(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Mul<f32>>::mul
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0f32; // None+f32
+p0.mul(p1);
+<duration::Duration as std::ops::Mul<f32>>::mul(p0, p1);
+crate::<duration::Duration as std::ops::Mul<f32>>::mul(p0, p1);
+<duration::Duration>::mul(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::MulAssign<f32>>::mul_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0f32; // None+f32
+p0.mul_assign(p1);
+<duration::Duration as std::ops::MulAssign<f32>>::mul_assign(p0, p1);
+crate::<duration::Duration as std::ops::MulAssign<f32>>::mul_assign(p0, p1);
+<duration::Duration>::mul_assign(p0, p1);
-----------------
src/duration.rs duration::<impl std::ops::Mul<duration::Duration> for f32>::mul
deps:{}
candidates:{}
let mut p0 = 0f32; // None+f32
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.mul(p1);
+duration::<impl std::ops::Mul<duration::Duration> for f32>::mul(p0, p1);
+crate::duration::<impl std::ops::Mul<duration::Duration> for f32>::mul(p0, p1);
+<f32>::mul(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Mul<f64>>::mul
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0f64; // None+f64
+p0.mul(p1);
+<duration::Duration as std::ops::Mul<f64>>::mul(p0, p1);
+crate::<duration::Duration as std::ops::Mul<f64>>::mul(p0, p1);
+<duration::Duration>::mul(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::MulAssign<f64>>::mul_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0f64; // None+f64
+p0.mul_assign(p1);
+<duration::Duration as std::ops::MulAssign<f64>>::mul_assign(p0, p1);
+crate::<duration::Duration as std::ops::MulAssign<f64>>::mul_assign(p0, p1);
+<duration::Duration>::mul_assign(p0, p1);
-----------------
src/duration.rs duration::<impl std::ops::Mul<duration::Duration> for f64>::mul
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.mul(p1);
+duration::<impl std::ops::Mul<duration::Duration> for f64>::mul(p0, p1);
+crate::duration::<impl std::ops::Mul<duration::Duration> for f64>::mul(p0, p1);
+<f64>::mul(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Div<f32>>::div
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0f32; // None+f32
+p0.div(p1);
+<duration::Duration as std::ops::Div<f32>>::div(p0, p1);
+crate::<duration::Duration as std::ops::Div<f32>>::div(p0, p1);
+<duration::Duration>::div(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::DivAssign<f32>>::div_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0f32; // None+f32
+p0.div_assign(p1);
+<duration::Duration as std::ops::DivAssign<f32>>::div_assign(p0, p1);
+crate::<duration::Duration as std::ops::DivAssign<f32>>::div_assign(p0, p1);
+<duration::Duration>::div_assign(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Div<f64>>::div
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0f64; // None+f64
+p0.div(p1);
+<duration::Duration as std::ops::Div<f64>>::div(p0, p1);
+crate::<duration::Duration as std::ops::Div<f64>>::div(p0, p1);
+<duration::Duration>::div(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::DivAssign<f64>>::div_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = 0f64; // None+f64
+p0.div_assign(p1);
+<duration::Duration as std::ops::DivAssign<f64>>::div_assign(p0, p1);
+crate::<duration::Duration as std::ops::DivAssign<f64>>::div_assign(p0, p1);
+<duration::Duration>::div_assign(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Div>::div
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.div(p1);
+<duration::Duration as std::ops::Div>::div(p0, p1);
+crate::<duration::Duration as std::ops::Div>::div(p0, p1);
+<duration::Duration>::div(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::ops::Div<std::time::Duration>>::div
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.div(p1);
+<duration::Duration as std::ops::Div<std::time::Duration>>::div(p0, p1);
+crate::<duration::Duration as std::ops::Div<std::time::Duration>>::div(p0, p1);
+<duration::Duration>::div(p0, p1);
-----------------
src/duration.rs duration::<impl std::ops::Div<duration::Duration> for std::time::Duration>::div
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::time::Duration
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.div(p1);
+duration::<impl std::ops::Div<duration::Duration> for std::time::Duration>::div(p0, p1);
+crate::duration::<impl std::ops::Div<duration::Duration> for std::time::Duration>::div(p0, p1);
+<std::time::Duration>::div(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::cmp::PartialEq<std::time::Duration>>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.eq(p1);
+<duration::Duration as std::cmp::PartialEq<std::time::Duration>>::eq(p0, p1);
+crate::<duration::Duration as std::cmp::PartialEq<std::time::Duration>>::eq(p0, p1);
+<duration::Duration>::eq(p0, p1);
-----------------
src/duration.rs duration::<impl std::cmp::PartialEq<duration::Duration> for std::time::Duration>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::time::Duration
let mut p1 = & MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.eq(p1);
+duration::<impl std::cmp::PartialEq<duration::Duration> for std::time::Duration>::eq(p0, p1);
+crate::duration::<impl std::cmp::PartialEq<duration::Duration> for std::time::Duration>::eq(p0, p1);
+<std::time::Duration>::eq(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = & MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.partial_cmp(p1);
+<duration::Duration as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<duration::Duration as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<duration::Duration>::partial_cmp(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::cmp::PartialOrd<std::time::Duration>>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.partial_cmp(p1);
+<duration::Duration as std::cmp::PartialOrd<std::time::Duration>>::partial_cmp(p0, p1);
+crate::<duration::Duration as std::cmp::PartialOrd<std::time::Duration>>::partial_cmp(p0, p1);
+<duration::Duration>::partial_cmp(p0, p1);
-----------------
src/duration.rs duration::<impl std::cmp::PartialOrd<duration::Duration> for std::time::Duration>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::time::Duration
let mut p1 = & MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.partial_cmp(p1);
+duration::<impl std::cmp::PartialOrd<duration::Duration> for std::time::Duration>::partial_cmp(p0, p1);
+crate::duration::<impl std::cmp::PartialOrd<duration::Duration> for std::time::Duration>::partial_cmp(p0, p1);
+<std::time::Duration>::partial_cmp(p0, p1);
-----------------
src/duration.rs <duration::Duration as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // duration::Duration
let mut p1 = & MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.cmp(p1);
+<duration::Duration as std::cmp::Ord>::cmp(p0, p1);
+crate::<duration::Duration as std::cmp::Ord>::cmp(p0, p1);
+<duration::Duration>::cmp(p0, p1);
-----------------
src/error.rs <error::Error as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Error
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<error::Error as std::fmt::Debug>::fmt(p0, p1);
+crate::<error::Error as std::fmt::Debug>::fmt(p0, p1);
+<error::Error>::fmt(p0, p1);
-----------------
src/error.rs <error::Error as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Error
+p0.clone();
+<error::Error as std::clone::Clone>::clone(p0);
+crate::<error::Error as std::clone::Clone>::clone(p0);
+<error::Error>::clone(p0);
-----------------
src/error.rs <error::Error as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Error
let mut p1 = & MaybeUninit::uninit().assume_init(); // error::Error
+p0.eq(p1);
+<error::Error as std::cmp::PartialEq>::eq(p0, p1);
+crate::<error::Error as std::cmp::PartialEq>::eq(p0, p1);
+<error::Error>::eq(p0, p1);
-----------------
src/error.rs <error::Error as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Error
+p0.assert_receiver_is_total_eq();
+<error::Error as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<error::Error as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<error::Error>::assert_receiver_is_total_eq(p0);
-----------------
src/error.rs <error::Error as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Error
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<error::Error as std::fmt::Display>::fmt(p0, p1);
+crate::<error::Error as std::fmt::Display>::fmt(p0, p1);
+<error::Error>::fmt(p0, p1);
-----------------
src/error.rs <error::Error as std::error::Error>::source
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Error
+p0.source();
+<error::Error as std::error::Error>::source(p0);
+crate::<error::Error as std::error::Error>::source(p0);
+<error::Error>::source(p0);
-----------------
src/error.rs <error::ConversionRange as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ConversionRange
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<error::ConversionRange as std::fmt::Debug>::fmt(p0, p1);
+crate::<error::ConversionRange as std::fmt::Debug>::fmt(p0, p1);
+<error::ConversionRange>::fmt(p0, p1);
-----------------
src/error.rs <error::ConversionRange as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ConversionRange
+p0.clone();
+<error::ConversionRange as std::clone::Clone>::clone(p0);
+crate::<error::ConversionRange as std::clone::Clone>::clone(p0);
+<error::ConversionRange>::clone(p0);
-----------------
src/error.rs <error::ConversionRange as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ConversionRange
let mut p1 = & MaybeUninit::uninit().assume_init(); // error::ConversionRange
+p0.eq(p1);
+<error::ConversionRange as std::cmp::PartialEq>::eq(p0, p1);
+crate::<error::ConversionRange as std::cmp::PartialEq>::eq(p0, p1);
+<error::ConversionRange>::eq(p0, p1);
-----------------
src/error.rs <error::ConversionRange as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ConversionRange
+p0.assert_receiver_is_total_eq();
+<error::ConversionRange as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<error::ConversionRange as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<error::ConversionRange>::assert_receiver_is_total_eq(p0);
-----------------
src/error.rs <error::ConversionRange as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ConversionRange
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<error::ConversionRange as std::fmt::Display>::fmt(p0, p1);
+crate::<error::ConversionRange as std::fmt::Display>::fmt(p0, p1);
+<error::ConversionRange>::fmt(p0, p1);
-----------------
src/error.rs <error::Error as std::convert::From<error::ConversionRange>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // error::ConversionRange
+<error::Error as std::convert::From<error::ConversionRange>>::from(p0);
+crate::<error::Error as std::convert::From<error::ConversionRange>>::from(p0);
+<error::Error>::from(p0);
-----------------
src/error.rs <error::ComponentRange as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ComponentRange
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<error::ComponentRange as std::fmt::Debug>::fmt(p0, p1);
+crate::<error::ComponentRange as std::fmt::Debug>::fmt(p0, p1);
+<error::ComponentRange>::fmt(p0, p1);
-----------------
src/error.rs <error::ComponentRange as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ComponentRange
+p0.clone();
+<error::ComponentRange as std::clone::Clone>::clone(p0);
+crate::<error::ComponentRange as std::clone::Clone>::clone(p0);
+<error::ComponentRange>::clone(p0);
-----------------
src/error.rs <error::ComponentRange as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ComponentRange
let mut p1 = & MaybeUninit::uninit().assume_init(); // error::ComponentRange
+p0.eq(p1);
+<error::ComponentRange as std::cmp::PartialEq>::eq(p0, p1);
+crate::<error::ComponentRange as std::cmp::PartialEq>::eq(p0, p1);
+<error::ComponentRange>::eq(p0, p1);
-----------------
src/error.rs <error::ComponentRange as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ComponentRange
+p0.assert_receiver_is_total_eq();
+<error::ComponentRange as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<error::ComponentRange as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<error::ComponentRange>::assert_receiver_is_total_eq(p0);
-----------------
src/error.rs <error::ComponentRange as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<error::ComponentRange as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<error::ComponentRange as std::hash::Hash>::hash":{"__H":["std::boxed::Box<T, A>","std::hash::SipHasher13","std::collections::hash_map::DefaultHasher","std::hash::SipHasher","std::hash::sip::Hasher<S>","<&mut H as std::hash::Hasher>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ComponentRange
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<error::ComponentRange as std::hash::Hash>::hash(p0, p1);
+crate::<error::ComponentRange as std::hash::Hash>::hash(p0, p1);
+<error::ComponentRange>::hash(p0, p1);
-----------------
src/error.rs <error::ComponentRange as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::ComponentRange
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<error::ComponentRange as std::fmt::Display>::fmt(p0, p1);
+crate::<error::ComponentRange as std::fmt::Display>::fmt(p0, p1);
+<error::ComponentRange>::fmt(p0, p1);
-----------------
src/error.rs <error::Error as std::convert::From<error::ComponentRange>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // error::ComponentRange
+<error::Error as std::convert::From<error::ComponentRange>>::from(p0);
+crate::<error::Error as std::convert::From<error::ComponentRange>>::from(p0);
+<error::Error>::from(p0);
-----------------
src/error.rs <error::Error as std::convert::From<format::parse::Error>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // format::parse::Error
+<error::Error as std::convert::From<format::parse::Error>>::from(p0);
+crate::<error::Error as std::convert::From<format::parse::Error>>::from(p0);
+<error::Error>::from(p0);
-----------------
src/error.rs <error::IndeterminateOffset as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::IndeterminateOffset
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<error::IndeterminateOffset as std::fmt::Debug>::fmt(p0, p1);
+crate::<error::IndeterminateOffset as std::fmt::Debug>::fmt(p0, p1);
+<error::IndeterminateOffset>::fmt(p0, p1);
-----------------
src/error.rs <error::IndeterminateOffset as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::IndeterminateOffset
+p0.clone();
+<error::IndeterminateOffset as std::clone::Clone>::clone(p0);
+crate::<error::IndeterminateOffset as std::clone::Clone>::clone(p0);
+<error::IndeterminateOffset>::clone(p0);
-----------------
src/error.rs <error::IndeterminateOffset as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::IndeterminateOffset
let mut p1 = & MaybeUninit::uninit().assume_init(); // error::IndeterminateOffset
+p0.eq(p1);
+<error::IndeterminateOffset as std::cmp::PartialEq>::eq(p0, p1);
+crate::<error::IndeterminateOffset as std::cmp::PartialEq>::eq(p0, p1);
+<error::IndeterminateOffset>::eq(p0, p1);
-----------------
src/error.rs <error::IndeterminateOffset as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::IndeterminateOffset
+p0.assert_receiver_is_total_eq();
+<error::IndeterminateOffset as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<error::IndeterminateOffset as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<error::IndeterminateOffset>::assert_receiver_is_total_eq(p0);
-----------------
src/error.rs <error::IndeterminateOffset as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::IndeterminateOffset
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<error::IndeterminateOffset as std::fmt::Display>::fmt(p0, p1);
+crate::<error::IndeterminateOffset as std::fmt::Display>::fmt(p0, p1);
+<error::IndeterminateOffset>::fmt(p0, p1);
-----------------
src/error.rs <error::Error as std::convert::From<error::IndeterminateOffset>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // error::IndeterminateOffset
+<error::Error as std::convert::From<error::IndeterminateOffset>>::from(p0);
+crate::<error::Error as std::convert::From<error::IndeterminateOffset>>::from(p0);
+<error::Error>::from(p0);
-----------------
src/error.rs <error::Format as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Format
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<error::Format as std::fmt::Debug>::fmt(p0, p1);
+crate::<error::Format as std::fmt::Debug>::fmt(p0, p1);
+<error::Format>::fmt(p0, p1);
-----------------
src/error.rs <error::Format as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Format
+p0.clone();
+<error::Format as std::clone::Clone>::clone(p0);
+crate::<error::Format as std::clone::Clone>::clone(p0);
+<error::Format>::clone(p0);
-----------------
src/error.rs <error::Format as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Format
let mut p1 = & MaybeUninit::uninit().assume_init(); // error::Format
+p0.eq(p1);
+<error::Format as std::cmp::PartialEq>::eq(p0, p1);
+crate::<error::Format as std::cmp::PartialEq>::eq(p0, p1);
+<error::Format>::eq(p0, p1);
-----------------
src/error.rs <error::Format as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Format
+p0.assert_receiver_is_total_eq();
+<error::Format as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<error::Format as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<error::Format>::assert_receiver_is_total_eq(p0);
-----------------
src/error.rs <error::Format as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<error::Format as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<error::Format as std::hash::Hash>::hash":{"__H":["std::hash::sip::Hasher<S>","std::boxed::Box<T, A>","std::collections::hash_map::DefaultHasher","<&mut H as std::hash::Hasher>","std::hash::SipHasher","std::hash::SipHasher13"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Format
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<error::Format as std::hash::Hash>::hash(p0, p1);
+crate::<error::Format as std::hash::Hash>::hash(p0, p1);
+<error::Format>::hash(p0, p1);
-----------------
src/error.rs <error::Format as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Format
let mut p1 = & MaybeUninit::uninit().assume_init(); // error::Format
+p0.partial_cmp(p1);
+<error::Format as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<error::Format as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<error::Format>::partial_cmp(p0, p1);
-----------------
src/error.rs <error::Format as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Format
let mut p1 = & MaybeUninit::uninit().assume_init(); // error::Format
+p0.cmp(p1);
+<error::Format as std::cmp::Ord>::cmp(p0, p1);
+crate::<error::Format as std::cmp::Ord>::cmp(p0, p1);
+<error::Format>::cmp(p0, p1);
-----------------
src/error.rs <error::Format as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Format
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<error::Format as std::fmt::Display>::fmt(p0, p1);
+crate::<error::Format as std::fmt::Display>::fmt(p0, p1);
+<error::Format>::fmt(p0, p1);
-----------------
src/error.rs <error::Format as std::error::Error>::source
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // error::Format
+p0.source();
+<error::Format as std::error::Error>::source(p0);
+crate::<error::Format as std::error::Error>::source(p0);
+<error::Format>::source(p0);
-----------------
src/error.rs <error::Format as std::convert::From<std::fmt::Error>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::fmt::Error
+<error::Format as std::convert::From<std::fmt::Error>>::from(p0);
+crate::<error::Format as std::convert::From<std::fmt::Error>>::from(p0);
+<error::Format>::from(p0);
-----------------
src/error.rs <error::Error as std::convert::From<error::Format>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // error::Format
+<error::Error as std::convert::From<error::Format>>::from(p0);
+crate::<error::Error as std::convert::From<error::Format>>::from(p0);
+<error::Error>::from(p0);
-----------------
src/ext.rs <u8 as ext::NumericalDuration>::nanoseconds
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.nanoseconds();
+<u8 as ext::NumericalDuration>::nanoseconds(p0);
+crate::<u8 as ext::NumericalDuration>::nanoseconds(p0);
+<u8>::nanoseconds(p0);
-----------------
src/ext.rs <u8 as ext::NumericalDuration>::microseconds
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.microseconds();
+<u8 as ext::NumericalDuration>::microseconds(p0);
+crate::<u8 as ext::NumericalDuration>::microseconds(p0);
+<u8>::microseconds(p0);
-----------------
src/ext.rs <u8 as ext::NumericalDuration>::milliseconds
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.milliseconds();
+<u8 as ext::NumericalDuration>::milliseconds(p0);
+crate::<u8 as ext::NumericalDuration>::milliseconds(p0);
+<u8>::milliseconds(p0);
-----------------
src/ext.rs <u8 as ext::NumericalDuration>::seconds
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.seconds();
+<u8 as ext::NumericalDuration>::seconds(p0);
+crate::<u8 as ext::NumericalDuration>::seconds(p0);
+<u8>::seconds(p0);
-----------------
src/ext.rs <u8 as ext::NumericalDuration>::minutes
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.minutes();
+<u8 as ext::NumericalDuration>::minutes(p0);
+crate::<u8 as ext::NumericalDuration>::minutes(p0);
+<u8>::minutes(p0);
-----------------
src/ext.rs <u8 as ext::NumericalDuration>::hours
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.hours();
+<u8 as ext::NumericalDuration>::hours(p0);
+crate::<u8 as ext::NumericalDuration>::hours(p0);
+<u8>::hours(p0);
-----------------
src/ext.rs <u8 as ext::NumericalDuration>::days
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.days();
+<u8 as ext::NumericalDuration>::days(p0);
+crate::<u8 as ext::NumericalDuration>::days(p0);
+<u8>::days(p0);
-----------------
src/ext.rs <u8 as ext::NumericalDuration>::weeks
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.weeks();
+<u8 as ext::NumericalDuration>::weeks(p0);
+crate::<u8 as ext::NumericalDuration>::weeks(p0);
+<u8>::weeks(p0);
-----------------
src/ext.rs <u16 as ext::NumericalDuration>::nanoseconds
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+p0.nanoseconds();
+<u16 as ext::NumericalDuration>::nanoseconds(p0);
+crate::<u16 as ext::NumericalDuration>::nanoseconds(p0);
+<u16>::nanoseconds(p0);
-----------------
src/ext.rs <u16 as ext::NumericalDuration>::microseconds
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+p0.microseconds();
+<u16 as ext::NumericalDuration>::microseconds(p0);
+crate::<u16 as ext::NumericalDuration>::microseconds(p0);
+<u16>::microseconds(p0);
-----------------
src/ext.rs <u16 as ext::NumericalDuration>::milliseconds
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+p0.milliseconds();
+<u16 as ext::NumericalDuration>::milliseconds(p0);
+crate::<u16 as ext::NumericalDuration>::milliseconds(p0);
+<u16>::milliseconds(p0);
-----------------
src/ext.rs <u16 as ext::NumericalDuration>::seconds
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+p0.seconds();
+<u16 as ext::NumericalDuration>::seconds(p0);
+crate::<u16 as ext::NumericalDuration>::seconds(p0);
+<u16>::seconds(p0);
-----------------
src/ext.rs <u16 as ext::NumericalDuration>::minutes
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+p0.minutes();
+<u16 as ext::NumericalDuration>::minutes(p0);
+crate::<u16 as ext::NumericalDuration>::minutes(p0);
+<u16>::minutes(p0);
-----------------
src/ext.rs <u16 as ext::NumericalDuration>::hours
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+p0.hours();
+<u16 as ext::NumericalDuration>::hours(p0);
+crate::<u16 as ext::NumericalDuration>::hours(p0);
+<u16>::hours(p0);
-----------------
src/ext.rs <u16 as ext::NumericalDuration>::days
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+p0.days();
+<u16 as ext::NumericalDuration>::days(p0);
+crate::<u16 as ext::NumericalDuration>::days(p0);
+<u16>::days(p0);
-----------------
src/ext.rs <u16 as ext::NumericalDuration>::weeks
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+p0.weeks();
+<u16 as ext::NumericalDuration>::weeks(p0);
+crate::<u16 as ext::NumericalDuration>::weeks(p0);
+<u16>::weeks(p0);
-----------------
src/ext.rs <u32 as ext::NumericalDuration>::nanoseconds
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+p0.nanoseconds();
+<u32 as ext::NumericalDuration>::nanoseconds(p0);
+crate::<u32 as ext::NumericalDuration>::nanoseconds(p0);
+<u32>::nanoseconds(p0);
-----------------
src/ext.rs <u32 as ext::NumericalDuration>::microseconds
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+p0.microseconds();
+<u32 as ext::NumericalDuration>::microseconds(p0);
+crate::<u32 as ext::NumericalDuration>::microseconds(p0);
+<u32>::microseconds(p0);
-----------------
src/ext.rs <u32 as ext::NumericalDuration>::milliseconds
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+p0.milliseconds();
+<u32 as ext::NumericalDuration>::milliseconds(p0);
+crate::<u32 as ext::NumericalDuration>::milliseconds(p0);
+<u32>::milliseconds(p0);
-----------------
src/ext.rs <u32 as ext::NumericalDuration>::seconds
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+p0.seconds();
+<u32 as ext::NumericalDuration>::seconds(p0);
+crate::<u32 as ext::NumericalDuration>::seconds(p0);
+<u32>::seconds(p0);
-----------------
src/ext.rs <u32 as ext::NumericalDuration>::minutes
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+p0.minutes();
+<u32 as ext::NumericalDuration>::minutes(p0);
+crate::<u32 as ext::NumericalDuration>::minutes(p0);
+<u32>::minutes(p0);
-----------------
src/ext.rs <u32 as ext::NumericalDuration>::hours
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+p0.hours();
+<u32 as ext::NumericalDuration>::hours(p0);
+crate::<u32 as ext::NumericalDuration>::hours(p0);
+<u32>::hours(p0);
-----------------
src/ext.rs <u32 as ext::NumericalDuration>::days
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+p0.days();
+<u32 as ext::NumericalDuration>::days(p0);
+crate::<u32 as ext::NumericalDuration>::days(p0);
+<u32>::days(p0);
-----------------
src/ext.rs <u32 as ext::NumericalDuration>::weeks
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+p0.weeks();
+<u32 as ext::NumericalDuration>::weeks(p0);
+crate::<u32 as ext::NumericalDuration>::weeks(p0);
+<u32>::weeks(p0);
-----------------
src/ext.rs <i8 as ext::NumericalDuration>::nanoseconds
deps:{}
candidates:{}
let mut p0 = 0i8; // None+i8
+p0.nanoseconds();
+<i8 as ext::NumericalDuration>::nanoseconds(p0);
+crate::<i8 as ext::NumericalDuration>::nanoseconds(p0);
+<i8>::nanoseconds(p0);
-----------------
src/ext.rs <i8 as ext::NumericalDuration>::microseconds
deps:{}
candidates:{}
let mut p0 = 0i8; // None+i8
+p0.microseconds();
+<i8 as ext::NumericalDuration>::microseconds(p0);
+crate::<i8 as ext::NumericalDuration>::microseconds(p0);
+<i8>::microseconds(p0);
-----------------
src/ext.rs <i8 as ext::NumericalDuration>::milliseconds
deps:{}
candidates:{}
let mut p0 = 0i8; // None+i8
+p0.milliseconds();
+<i8 as ext::NumericalDuration>::milliseconds(p0);
+crate::<i8 as ext::NumericalDuration>::milliseconds(p0);
+<i8>::milliseconds(p0);
-----------------
src/ext.rs <i8 as ext::NumericalDuration>::seconds
deps:{}
candidates:{}
let mut p0 = 0i8; // None+i8
+p0.seconds();
+<i8 as ext::NumericalDuration>::seconds(p0);
+crate::<i8 as ext::NumericalDuration>::seconds(p0);
+<i8>::seconds(p0);
-----------------
src/ext.rs <i8 as ext::NumericalDuration>::minutes
deps:{}
candidates:{}
let mut p0 = 0i8; // None+i8
+p0.minutes();
+<i8 as ext::NumericalDuration>::minutes(p0);
+crate::<i8 as ext::NumericalDuration>::minutes(p0);
+<i8>::minutes(p0);
-----------------
src/ext.rs <i8 as ext::NumericalDuration>::hours
deps:{}
candidates:{}
let mut p0 = 0i8; // None+i8
+p0.hours();
+<i8 as ext::NumericalDuration>::hours(p0);
+crate::<i8 as ext::NumericalDuration>::hours(p0);
+<i8>::hours(p0);
-----------------
src/ext.rs <i8 as ext::NumericalDuration>::days
deps:{}
candidates:{}
let mut p0 = 0i8; // None+i8
+p0.days();
+<i8 as ext::NumericalDuration>::days(p0);
+crate::<i8 as ext::NumericalDuration>::days(p0);
+<i8>::days(p0);
-----------------
src/ext.rs <i8 as ext::NumericalDuration>::weeks
deps:{}
candidates:{}
let mut p0 = 0i8; // None+i8
+p0.weeks();
+<i8 as ext::NumericalDuration>::weeks(p0);
+crate::<i8 as ext::NumericalDuration>::weeks(p0);
+<i8>::weeks(p0);
-----------------
src/ext.rs <i16 as ext::NumericalDuration>::nanoseconds
deps:{}
candidates:{}
let mut p0 = 0i16; // None+i16
+p0.nanoseconds();
+<i16 as ext::NumericalDuration>::nanoseconds(p0);
+crate::<i16 as ext::NumericalDuration>::nanoseconds(p0);
+<i16>::nanoseconds(p0);
-----------------
src/ext.rs <i16 as ext::NumericalDuration>::microseconds
deps:{}
candidates:{}
let mut p0 = 0i16; // None+i16
+p0.microseconds();
+<i16 as ext::NumericalDuration>::microseconds(p0);
+crate::<i16 as ext::NumericalDuration>::microseconds(p0);
+<i16>::microseconds(p0);
-----------------
src/ext.rs <i16 as ext::NumericalDuration>::milliseconds
deps:{}
candidates:{}
let mut p0 = 0i16; // None+i16
+p0.milliseconds();
+<i16 as ext::NumericalDuration>::milliseconds(p0);
+crate::<i16 as ext::NumericalDuration>::milliseconds(p0);
+<i16>::milliseconds(p0);
-----------------
src/ext.rs <i16 as ext::NumericalDuration>::seconds
deps:{}
candidates:{}
let mut p0 = 0i16; // None+i16
+p0.seconds();
+<i16 as ext::NumericalDuration>::seconds(p0);
+crate::<i16 as ext::NumericalDuration>::seconds(p0);
+<i16>::seconds(p0);
-----------------
src/ext.rs <i16 as ext::NumericalDuration>::minutes
deps:{}
candidates:{}
let mut p0 = 0i16; // None+i16
+p0.minutes();
+<i16 as ext::NumericalDuration>::minutes(p0);
+crate::<i16 as ext::NumericalDuration>::minutes(p0);
+<i16>::minutes(p0);
-----------------
src/ext.rs <i16 as ext::NumericalDuration>::hours
deps:{}
candidates:{}
let mut p0 = 0i16; // None+i16
+p0.hours();
+<i16 as ext::NumericalDuration>::hours(p0);
+crate::<i16 as ext::NumericalDuration>::hours(p0);
+<i16>::hours(p0);
-----------------
src/ext.rs <i16 as ext::NumericalDuration>::days
deps:{}
candidates:{}
let mut p0 = 0i16; // None+i16
+p0.days();
+<i16 as ext::NumericalDuration>::days(p0);
+crate::<i16 as ext::NumericalDuration>::days(p0);
+<i16>::days(p0);
-----------------
src/ext.rs <i16 as ext::NumericalDuration>::weeks
deps:{}
candidates:{}
let mut p0 = 0i16; // None+i16
+p0.weeks();
+<i16 as ext::NumericalDuration>::weeks(p0);
+crate::<i16 as ext::NumericalDuration>::weeks(p0);
+<i16>::weeks(p0);
-----------------
src/ext.rs <i32 as ext::NumericalDuration>::nanoseconds
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+p0.nanoseconds();
+<i32 as ext::NumericalDuration>::nanoseconds(p0);
+crate::<i32 as ext::NumericalDuration>::nanoseconds(p0);
+<i32>::nanoseconds(p0);
-----------------
src/ext.rs <i32 as ext::NumericalDuration>::microseconds
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+p0.microseconds();
+<i32 as ext::NumericalDuration>::microseconds(p0);
+crate::<i32 as ext::NumericalDuration>::microseconds(p0);
+<i32>::microseconds(p0);
-----------------
src/ext.rs <i32 as ext::NumericalDuration>::milliseconds
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+p0.milliseconds();
+<i32 as ext::NumericalDuration>::milliseconds(p0);
+crate::<i32 as ext::NumericalDuration>::milliseconds(p0);
+<i32>::milliseconds(p0);
-----------------
src/ext.rs <i32 as ext::NumericalDuration>::seconds
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+p0.seconds();
+<i32 as ext::NumericalDuration>::seconds(p0);
+crate::<i32 as ext::NumericalDuration>::seconds(p0);
+<i32>::seconds(p0);
-----------------
src/ext.rs <i32 as ext::NumericalDuration>::minutes
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+p0.minutes();
+<i32 as ext::NumericalDuration>::minutes(p0);
+crate::<i32 as ext::NumericalDuration>::minutes(p0);
+<i32>::minutes(p0);
-----------------
src/ext.rs <i32 as ext::NumericalDuration>::hours
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+p0.hours();
+<i32 as ext::NumericalDuration>::hours(p0);
+crate::<i32 as ext::NumericalDuration>::hours(p0);
+<i32>::hours(p0);
-----------------
src/ext.rs <i32 as ext::NumericalDuration>::days
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+p0.days();
+<i32 as ext::NumericalDuration>::days(p0);
+crate::<i32 as ext::NumericalDuration>::days(p0);
+<i32>::days(p0);
-----------------
src/ext.rs <i32 as ext::NumericalDuration>::weeks
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+p0.weeks();
+<i32 as ext::NumericalDuration>::weeks(p0);
+crate::<i32 as ext::NumericalDuration>::weeks(p0);
+<i32>::weeks(p0);
-----------------
src/ext.rs <i64 as ext::NumericalDuration>::nanoseconds
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+p0.nanoseconds();
+<i64 as ext::NumericalDuration>::nanoseconds(p0);
+crate::<i64 as ext::NumericalDuration>::nanoseconds(p0);
+<i64>::nanoseconds(p0);
-----------------
src/ext.rs <i64 as ext::NumericalDuration>::microseconds
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+p0.microseconds();
+<i64 as ext::NumericalDuration>::microseconds(p0);
+crate::<i64 as ext::NumericalDuration>::microseconds(p0);
+<i64>::microseconds(p0);
-----------------
src/ext.rs <i64 as ext::NumericalDuration>::milliseconds
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+p0.milliseconds();
+<i64 as ext::NumericalDuration>::milliseconds(p0);
+crate::<i64 as ext::NumericalDuration>::milliseconds(p0);
+<i64>::milliseconds(p0);
-----------------
src/ext.rs <i64 as ext::NumericalDuration>::seconds
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+p0.seconds();
+<i64 as ext::NumericalDuration>::seconds(p0);
+crate::<i64 as ext::NumericalDuration>::seconds(p0);
+<i64>::seconds(p0);
-----------------
src/ext.rs <i64 as ext::NumericalDuration>::minutes
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+p0.minutes();
+<i64 as ext::NumericalDuration>::minutes(p0);
+crate::<i64 as ext::NumericalDuration>::minutes(p0);
+<i64>::minutes(p0);
-----------------
src/ext.rs <i64 as ext::NumericalDuration>::hours
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+p0.hours();
+<i64 as ext::NumericalDuration>::hours(p0);
+crate::<i64 as ext::NumericalDuration>::hours(p0);
+<i64>::hours(p0);
-----------------
src/ext.rs <i64 as ext::NumericalDuration>::days
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+p0.days();
+<i64 as ext::NumericalDuration>::days(p0);
+crate::<i64 as ext::NumericalDuration>::days(p0);
+<i64>::days(p0);
-----------------
src/ext.rs <i64 as ext::NumericalDuration>::weeks
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+p0.weeks();
+<i64 as ext::NumericalDuration>::weeks(p0);
+crate::<i64 as ext::NumericalDuration>::weeks(p0);
+<i64>::weeks(p0);
-----------------
src/ext.rs <std::num::NonZeroU8 as ext::NumericalDuration>::nanoseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU8
+p0.nanoseconds();
+<std::num::NonZeroU8 as ext::NumericalDuration>::nanoseconds(p0);
+crate::<std::num::NonZeroU8 as ext::NumericalDuration>::nanoseconds(p0);
+<std::num::NonZeroU8>::nanoseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU8 as ext::NumericalDuration>::microseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU8
+p0.microseconds();
+<std::num::NonZeroU8 as ext::NumericalDuration>::microseconds(p0);
+crate::<std::num::NonZeroU8 as ext::NumericalDuration>::microseconds(p0);
+<std::num::NonZeroU8>::microseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU8 as ext::NumericalDuration>::milliseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU8
+p0.milliseconds();
+<std::num::NonZeroU8 as ext::NumericalDuration>::milliseconds(p0);
+crate::<std::num::NonZeroU8 as ext::NumericalDuration>::milliseconds(p0);
+<std::num::NonZeroU8>::milliseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU8 as ext::NumericalDuration>::seconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU8
+p0.seconds();
+<std::num::NonZeroU8 as ext::NumericalDuration>::seconds(p0);
+crate::<std::num::NonZeroU8 as ext::NumericalDuration>::seconds(p0);
+<std::num::NonZeroU8>::seconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU8 as ext::NumericalDuration>::minutes
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU8
+p0.minutes();
+<std::num::NonZeroU8 as ext::NumericalDuration>::minutes(p0);
+crate::<std::num::NonZeroU8 as ext::NumericalDuration>::minutes(p0);
+<std::num::NonZeroU8>::minutes(p0);
-----------------
src/ext.rs <std::num::NonZeroU8 as ext::NumericalDuration>::hours
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU8
+p0.hours();
+<std::num::NonZeroU8 as ext::NumericalDuration>::hours(p0);
+crate::<std::num::NonZeroU8 as ext::NumericalDuration>::hours(p0);
+<std::num::NonZeroU8>::hours(p0);
-----------------
src/ext.rs <std::num::NonZeroU8 as ext::NumericalDuration>::days
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU8
+p0.days();
+<std::num::NonZeroU8 as ext::NumericalDuration>::days(p0);
+crate::<std::num::NonZeroU8 as ext::NumericalDuration>::days(p0);
+<std::num::NonZeroU8>::days(p0);
-----------------
src/ext.rs <std::num::NonZeroU8 as ext::NumericalDuration>::weeks
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU8
+p0.weeks();
+<std::num::NonZeroU8 as ext::NumericalDuration>::weeks(p0);
+crate::<std::num::NonZeroU8 as ext::NumericalDuration>::weeks(p0);
+<std::num::NonZeroU8>::weeks(p0);
-----------------
src/ext.rs <std::num::NonZeroU16 as ext::NumericalDuration>::nanoseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU16
+p0.nanoseconds();
+<std::num::NonZeroU16 as ext::NumericalDuration>::nanoseconds(p0);
+crate::<std::num::NonZeroU16 as ext::NumericalDuration>::nanoseconds(p0);
+<std::num::NonZeroU16>::nanoseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU16 as ext::NumericalDuration>::microseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU16
+p0.microseconds();
+<std::num::NonZeroU16 as ext::NumericalDuration>::microseconds(p0);
+crate::<std::num::NonZeroU16 as ext::NumericalDuration>::microseconds(p0);
+<std::num::NonZeroU16>::microseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU16 as ext::NumericalDuration>::milliseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU16
+p0.milliseconds();
+<std::num::NonZeroU16 as ext::NumericalDuration>::milliseconds(p0);
+crate::<std::num::NonZeroU16 as ext::NumericalDuration>::milliseconds(p0);
+<std::num::NonZeroU16>::milliseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU16 as ext::NumericalDuration>::seconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU16
+p0.seconds();
+<std::num::NonZeroU16 as ext::NumericalDuration>::seconds(p0);
+crate::<std::num::NonZeroU16 as ext::NumericalDuration>::seconds(p0);
+<std::num::NonZeroU16>::seconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU16 as ext::NumericalDuration>::minutes
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU16
+p0.minutes();
+<std::num::NonZeroU16 as ext::NumericalDuration>::minutes(p0);
+crate::<std::num::NonZeroU16 as ext::NumericalDuration>::minutes(p0);
+<std::num::NonZeroU16>::minutes(p0);
-----------------
src/ext.rs <std::num::NonZeroU16 as ext::NumericalDuration>::hours
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU16
+p0.hours();
+<std::num::NonZeroU16 as ext::NumericalDuration>::hours(p0);
+crate::<std::num::NonZeroU16 as ext::NumericalDuration>::hours(p0);
+<std::num::NonZeroU16>::hours(p0);
-----------------
src/ext.rs <std::num::NonZeroU16 as ext::NumericalDuration>::days
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU16
+p0.days();
+<std::num::NonZeroU16 as ext::NumericalDuration>::days(p0);
+crate::<std::num::NonZeroU16 as ext::NumericalDuration>::days(p0);
+<std::num::NonZeroU16>::days(p0);
-----------------
src/ext.rs <std::num::NonZeroU16 as ext::NumericalDuration>::weeks
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU16
+p0.weeks();
+<std::num::NonZeroU16 as ext::NumericalDuration>::weeks(p0);
+crate::<std::num::NonZeroU16 as ext::NumericalDuration>::weeks(p0);
+<std::num::NonZeroU16>::weeks(p0);
-----------------
src/ext.rs <std::num::NonZeroU32 as ext::NumericalDuration>::nanoseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU32
+p0.nanoseconds();
+<std::num::NonZeroU32 as ext::NumericalDuration>::nanoseconds(p0);
+crate::<std::num::NonZeroU32 as ext::NumericalDuration>::nanoseconds(p0);
+<std::num::NonZeroU32>::nanoseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU32 as ext::NumericalDuration>::microseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU32
+p0.microseconds();
+<std::num::NonZeroU32 as ext::NumericalDuration>::microseconds(p0);
+crate::<std::num::NonZeroU32 as ext::NumericalDuration>::microseconds(p0);
+<std::num::NonZeroU32>::microseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU32 as ext::NumericalDuration>::milliseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU32
+p0.milliseconds();
+<std::num::NonZeroU32 as ext::NumericalDuration>::milliseconds(p0);
+crate::<std::num::NonZeroU32 as ext::NumericalDuration>::milliseconds(p0);
+<std::num::NonZeroU32>::milliseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU32 as ext::NumericalDuration>::seconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU32
+p0.seconds();
+<std::num::NonZeroU32 as ext::NumericalDuration>::seconds(p0);
+crate::<std::num::NonZeroU32 as ext::NumericalDuration>::seconds(p0);
+<std::num::NonZeroU32>::seconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU32 as ext::NumericalDuration>::minutes
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU32
+p0.minutes();
+<std::num::NonZeroU32 as ext::NumericalDuration>::minutes(p0);
+crate::<std::num::NonZeroU32 as ext::NumericalDuration>::minutes(p0);
+<std::num::NonZeroU32>::minutes(p0);
-----------------
src/ext.rs <std::num::NonZeroU32 as ext::NumericalDuration>::hours
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU32
+p0.hours();
+<std::num::NonZeroU32 as ext::NumericalDuration>::hours(p0);
+crate::<std::num::NonZeroU32 as ext::NumericalDuration>::hours(p0);
+<std::num::NonZeroU32>::hours(p0);
-----------------
src/ext.rs <std::num::NonZeroU32 as ext::NumericalDuration>::days
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU32
+p0.days();
+<std::num::NonZeroU32 as ext::NumericalDuration>::days(p0);
+crate::<std::num::NonZeroU32 as ext::NumericalDuration>::days(p0);
+<std::num::NonZeroU32>::days(p0);
-----------------
src/ext.rs <std::num::NonZeroU32 as ext::NumericalDuration>::weeks
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU32
+p0.weeks();
+<std::num::NonZeroU32 as ext::NumericalDuration>::weeks(p0);
+crate::<std::num::NonZeroU32 as ext::NumericalDuration>::weeks(p0);
+<std::num::NonZeroU32>::weeks(p0);
-----------------
src/ext.rs <std::num::NonZeroI8 as ext::NumericalDuration>::nanoseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI8
+p0.nanoseconds();
+<std::num::NonZeroI8 as ext::NumericalDuration>::nanoseconds(p0);
+crate::<std::num::NonZeroI8 as ext::NumericalDuration>::nanoseconds(p0);
+<std::num::NonZeroI8>::nanoseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroI8 as ext::NumericalDuration>::microseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI8
+p0.microseconds();
+<std::num::NonZeroI8 as ext::NumericalDuration>::microseconds(p0);
+crate::<std::num::NonZeroI8 as ext::NumericalDuration>::microseconds(p0);
+<std::num::NonZeroI8>::microseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroI8 as ext::NumericalDuration>::milliseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI8
+p0.milliseconds();
+<std::num::NonZeroI8 as ext::NumericalDuration>::milliseconds(p0);
+crate::<std::num::NonZeroI8 as ext::NumericalDuration>::milliseconds(p0);
+<std::num::NonZeroI8>::milliseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroI8 as ext::NumericalDuration>::seconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI8
+p0.seconds();
+<std::num::NonZeroI8 as ext::NumericalDuration>::seconds(p0);
+crate::<std::num::NonZeroI8 as ext::NumericalDuration>::seconds(p0);
+<std::num::NonZeroI8>::seconds(p0);
-----------------
src/ext.rs <std::num::NonZeroI8 as ext::NumericalDuration>::minutes
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI8
+p0.minutes();
+<std::num::NonZeroI8 as ext::NumericalDuration>::minutes(p0);
+crate::<std::num::NonZeroI8 as ext::NumericalDuration>::minutes(p0);
+<std::num::NonZeroI8>::minutes(p0);
-----------------
src/ext.rs <std::num::NonZeroI8 as ext::NumericalDuration>::hours
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI8
+p0.hours();
+<std::num::NonZeroI8 as ext::NumericalDuration>::hours(p0);
+crate::<std::num::NonZeroI8 as ext::NumericalDuration>::hours(p0);
+<std::num::NonZeroI8>::hours(p0);
-----------------
src/ext.rs <std::num::NonZeroI8 as ext::NumericalDuration>::days
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI8
+p0.days();
+<std::num::NonZeroI8 as ext::NumericalDuration>::days(p0);
+crate::<std::num::NonZeroI8 as ext::NumericalDuration>::days(p0);
+<std::num::NonZeroI8>::days(p0);
-----------------
src/ext.rs <std::num::NonZeroI8 as ext::NumericalDuration>::weeks
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI8
+p0.weeks();
+<std::num::NonZeroI8 as ext::NumericalDuration>::weeks(p0);
+crate::<std::num::NonZeroI8 as ext::NumericalDuration>::weeks(p0);
+<std::num::NonZeroI8>::weeks(p0);
-----------------
src/ext.rs <std::num::NonZeroI16 as ext::NumericalDuration>::nanoseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI16
+p0.nanoseconds();
+<std::num::NonZeroI16 as ext::NumericalDuration>::nanoseconds(p0);
+crate::<std::num::NonZeroI16 as ext::NumericalDuration>::nanoseconds(p0);
+<std::num::NonZeroI16>::nanoseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroI16 as ext::NumericalDuration>::microseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI16
+p0.microseconds();
+<std::num::NonZeroI16 as ext::NumericalDuration>::microseconds(p0);
+crate::<std::num::NonZeroI16 as ext::NumericalDuration>::microseconds(p0);
+<std::num::NonZeroI16>::microseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroI16 as ext::NumericalDuration>::milliseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI16
+p0.milliseconds();
+<std::num::NonZeroI16 as ext::NumericalDuration>::milliseconds(p0);
+crate::<std::num::NonZeroI16 as ext::NumericalDuration>::milliseconds(p0);
+<std::num::NonZeroI16>::milliseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroI16 as ext::NumericalDuration>::seconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI16
+p0.seconds();
+<std::num::NonZeroI16 as ext::NumericalDuration>::seconds(p0);
+crate::<std::num::NonZeroI16 as ext::NumericalDuration>::seconds(p0);
+<std::num::NonZeroI16>::seconds(p0);
-----------------
src/ext.rs <std::num::NonZeroI16 as ext::NumericalDuration>::minutes
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI16
+p0.minutes();
+<std::num::NonZeroI16 as ext::NumericalDuration>::minutes(p0);
+crate::<std::num::NonZeroI16 as ext::NumericalDuration>::minutes(p0);
+<std::num::NonZeroI16>::minutes(p0);
-----------------
src/ext.rs <std::num::NonZeroI16 as ext::NumericalDuration>::hours
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI16
+p0.hours();
+<std::num::NonZeroI16 as ext::NumericalDuration>::hours(p0);
+crate::<std::num::NonZeroI16 as ext::NumericalDuration>::hours(p0);
+<std::num::NonZeroI16>::hours(p0);
-----------------
src/ext.rs <std::num::NonZeroI16 as ext::NumericalDuration>::days
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI16
+p0.days();
+<std::num::NonZeroI16 as ext::NumericalDuration>::days(p0);
+crate::<std::num::NonZeroI16 as ext::NumericalDuration>::days(p0);
+<std::num::NonZeroI16>::days(p0);
-----------------
src/ext.rs <std::num::NonZeroI16 as ext::NumericalDuration>::weeks
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI16
+p0.weeks();
+<std::num::NonZeroI16 as ext::NumericalDuration>::weeks(p0);
+crate::<std::num::NonZeroI16 as ext::NumericalDuration>::weeks(p0);
+<std::num::NonZeroI16>::weeks(p0);
-----------------
src/ext.rs <std::num::NonZeroI32 as ext::NumericalDuration>::nanoseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI32
+p0.nanoseconds();
+<std::num::NonZeroI32 as ext::NumericalDuration>::nanoseconds(p0);
+crate::<std::num::NonZeroI32 as ext::NumericalDuration>::nanoseconds(p0);
+<std::num::NonZeroI32>::nanoseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroI32 as ext::NumericalDuration>::microseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI32
+p0.microseconds();
+<std::num::NonZeroI32 as ext::NumericalDuration>::microseconds(p0);
+crate::<std::num::NonZeroI32 as ext::NumericalDuration>::microseconds(p0);
+<std::num::NonZeroI32>::microseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroI32 as ext::NumericalDuration>::milliseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI32
+p0.milliseconds();
+<std::num::NonZeroI32 as ext::NumericalDuration>::milliseconds(p0);
+crate::<std::num::NonZeroI32 as ext::NumericalDuration>::milliseconds(p0);
+<std::num::NonZeroI32>::milliseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroI32 as ext::NumericalDuration>::seconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI32
+p0.seconds();
+<std::num::NonZeroI32 as ext::NumericalDuration>::seconds(p0);
+crate::<std::num::NonZeroI32 as ext::NumericalDuration>::seconds(p0);
+<std::num::NonZeroI32>::seconds(p0);
-----------------
src/ext.rs <std::num::NonZeroI32 as ext::NumericalDuration>::minutes
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI32
+p0.minutes();
+<std::num::NonZeroI32 as ext::NumericalDuration>::minutes(p0);
+crate::<std::num::NonZeroI32 as ext::NumericalDuration>::minutes(p0);
+<std::num::NonZeroI32>::minutes(p0);
-----------------
src/ext.rs <std::num::NonZeroI32 as ext::NumericalDuration>::hours
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI32
+p0.hours();
+<std::num::NonZeroI32 as ext::NumericalDuration>::hours(p0);
+crate::<std::num::NonZeroI32 as ext::NumericalDuration>::hours(p0);
+<std::num::NonZeroI32>::hours(p0);
-----------------
src/ext.rs <std::num::NonZeroI32 as ext::NumericalDuration>::days
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI32
+p0.days();
+<std::num::NonZeroI32 as ext::NumericalDuration>::days(p0);
+crate::<std::num::NonZeroI32 as ext::NumericalDuration>::days(p0);
+<std::num::NonZeroI32>::days(p0);
-----------------
src/ext.rs <std::num::NonZeroI32 as ext::NumericalDuration>::weeks
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI32
+p0.weeks();
+<std::num::NonZeroI32 as ext::NumericalDuration>::weeks(p0);
+crate::<std::num::NonZeroI32 as ext::NumericalDuration>::weeks(p0);
+<std::num::NonZeroI32>::weeks(p0);
-----------------
src/ext.rs <std::num::NonZeroI64 as ext::NumericalDuration>::nanoseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI64
+p0.nanoseconds();
+<std::num::NonZeroI64 as ext::NumericalDuration>::nanoseconds(p0);
+crate::<std::num::NonZeroI64 as ext::NumericalDuration>::nanoseconds(p0);
+<std::num::NonZeroI64>::nanoseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroI64 as ext::NumericalDuration>::microseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI64
+p0.microseconds();
+<std::num::NonZeroI64 as ext::NumericalDuration>::microseconds(p0);
+crate::<std::num::NonZeroI64 as ext::NumericalDuration>::microseconds(p0);
+<std::num::NonZeroI64>::microseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroI64 as ext::NumericalDuration>::milliseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI64
+p0.milliseconds();
+<std::num::NonZeroI64 as ext::NumericalDuration>::milliseconds(p0);
+crate::<std::num::NonZeroI64 as ext::NumericalDuration>::milliseconds(p0);
+<std::num::NonZeroI64>::milliseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroI64 as ext::NumericalDuration>::seconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI64
+p0.seconds();
+<std::num::NonZeroI64 as ext::NumericalDuration>::seconds(p0);
+crate::<std::num::NonZeroI64 as ext::NumericalDuration>::seconds(p0);
+<std::num::NonZeroI64>::seconds(p0);
-----------------
src/ext.rs <std::num::NonZeroI64 as ext::NumericalDuration>::minutes
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI64
+p0.minutes();
+<std::num::NonZeroI64 as ext::NumericalDuration>::minutes(p0);
+crate::<std::num::NonZeroI64 as ext::NumericalDuration>::minutes(p0);
+<std::num::NonZeroI64>::minutes(p0);
-----------------
src/ext.rs <std::num::NonZeroI64 as ext::NumericalDuration>::hours
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI64
+p0.hours();
+<std::num::NonZeroI64 as ext::NumericalDuration>::hours(p0);
+crate::<std::num::NonZeroI64 as ext::NumericalDuration>::hours(p0);
+<std::num::NonZeroI64>::hours(p0);
-----------------
src/ext.rs <std::num::NonZeroI64 as ext::NumericalDuration>::days
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI64
+p0.days();
+<std::num::NonZeroI64 as ext::NumericalDuration>::days(p0);
+crate::<std::num::NonZeroI64 as ext::NumericalDuration>::days(p0);
+<std::num::NonZeroI64>::days(p0);
-----------------
src/ext.rs <std::num::NonZeroI64 as ext::NumericalDuration>::weeks
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroI64
+p0.weeks();
+<std::num::NonZeroI64 as ext::NumericalDuration>::weeks(p0);
+crate::<std::num::NonZeroI64 as ext::NumericalDuration>::weeks(p0);
+<std::num::NonZeroI64>::weeks(p0);
-----------------
src/ext.rs <f32 as ext::NumericalDuration>::nanoseconds
deps:{}
candidates:{}
let mut p0 = 0f32; // None+f32
+p0.nanoseconds();
+<f32 as ext::NumericalDuration>::nanoseconds(p0);
+crate::<f32 as ext::NumericalDuration>::nanoseconds(p0);
+<f32>::nanoseconds(p0);
-----------------
src/ext.rs <f32 as ext::NumericalDuration>::microseconds
deps:{}
candidates:{}
let mut p0 = 0f32; // None+f32
+p0.microseconds();
+<f32 as ext::NumericalDuration>::microseconds(p0);
+crate::<f32 as ext::NumericalDuration>::microseconds(p0);
+<f32>::microseconds(p0);
-----------------
src/ext.rs <f32 as ext::NumericalDuration>::milliseconds
deps:{}
candidates:{}
let mut p0 = 0f32; // None+f32
+p0.milliseconds();
+<f32 as ext::NumericalDuration>::milliseconds(p0);
+crate::<f32 as ext::NumericalDuration>::milliseconds(p0);
+<f32>::milliseconds(p0);
-----------------
src/ext.rs <f32 as ext::NumericalDuration>::seconds
deps:{}
candidates:{}
let mut p0 = 0f32; // None+f32
+p0.seconds();
+<f32 as ext::NumericalDuration>::seconds(p0);
+crate::<f32 as ext::NumericalDuration>::seconds(p0);
+<f32>::seconds(p0);
-----------------
src/ext.rs <f32 as ext::NumericalDuration>::minutes
deps:{}
candidates:{}
let mut p0 = 0f32; // None+f32
+p0.minutes();
+<f32 as ext::NumericalDuration>::minutes(p0);
+crate::<f32 as ext::NumericalDuration>::minutes(p0);
+<f32>::minutes(p0);
-----------------
src/ext.rs <f32 as ext::NumericalDuration>::hours
deps:{}
candidates:{}
let mut p0 = 0f32; // None+f32
+p0.hours();
+<f32 as ext::NumericalDuration>::hours(p0);
+crate::<f32 as ext::NumericalDuration>::hours(p0);
+<f32>::hours(p0);
-----------------
src/ext.rs <f32 as ext::NumericalDuration>::days
deps:{}
candidates:{}
let mut p0 = 0f32; // None+f32
+p0.days();
+<f32 as ext::NumericalDuration>::days(p0);
+crate::<f32 as ext::NumericalDuration>::days(p0);
+<f32>::days(p0);
-----------------
src/ext.rs <f32 as ext::NumericalDuration>::weeks
deps:{}
candidates:{}
let mut p0 = 0f32; // None+f32
+p0.weeks();
+<f32 as ext::NumericalDuration>::weeks(p0);
+crate::<f32 as ext::NumericalDuration>::weeks(p0);
+<f32>::weeks(p0);
-----------------
src/ext.rs <f64 as ext::NumericalDuration>::nanoseconds
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
+p0.nanoseconds();
+<f64 as ext::NumericalDuration>::nanoseconds(p0);
+crate::<f64 as ext::NumericalDuration>::nanoseconds(p0);
+<f64>::nanoseconds(p0);
-----------------
src/ext.rs <f64 as ext::NumericalDuration>::microseconds
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
+p0.microseconds();
+<f64 as ext::NumericalDuration>::microseconds(p0);
+crate::<f64 as ext::NumericalDuration>::microseconds(p0);
+<f64>::microseconds(p0);
-----------------
src/ext.rs <f64 as ext::NumericalDuration>::milliseconds
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
+p0.milliseconds();
+<f64 as ext::NumericalDuration>::milliseconds(p0);
+crate::<f64 as ext::NumericalDuration>::milliseconds(p0);
+<f64>::milliseconds(p0);
-----------------
src/ext.rs <f64 as ext::NumericalDuration>::seconds
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
+p0.seconds();
+<f64 as ext::NumericalDuration>::seconds(p0);
+crate::<f64 as ext::NumericalDuration>::seconds(p0);
+<f64>::seconds(p0);
-----------------
src/ext.rs <f64 as ext::NumericalDuration>::minutes
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
+p0.minutes();
+<f64 as ext::NumericalDuration>::minutes(p0);
+crate::<f64 as ext::NumericalDuration>::minutes(p0);
+<f64>::minutes(p0);
-----------------
src/ext.rs <f64 as ext::NumericalDuration>::hours
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
+p0.hours();
+<f64 as ext::NumericalDuration>::hours(p0);
+crate::<f64 as ext::NumericalDuration>::hours(p0);
+<f64>::hours(p0);
-----------------
src/ext.rs <f64 as ext::NumericalDuration>::days
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
+p0.days();
+<f64 as ext::NumericalDuration>::days(p0);
+crate::<f64 as ext::NumericalDuration>::days(p0);
+<f64>::days(p0);
-----------------
src/ext.rs <f64 as ext::NumericalDuration>::weeks
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
+p0.weeks();
+<f64 as ext::NumericalDuration>::weeks(p0);
+crate::<f64 as ext::NumericalDuration>::weeks(p0);
+<f64>::weeks(p0);
-----------------
src/ext.rs <u8 as ext::NumericalStdDuration>::std_nanoseconds
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.std_nanoseconds();
+<u8 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+crate::<u8 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+<u8>::std_nanoseconds(p0);
-----------------
src/ext.rs <u8 as ext::NumericalStdDuration>::std_microseconds
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.std_microseconds();
+<u8 as ext::NumericalStdDuration>::std_microseconds(p0);
+crate::<u8 as ext::NumericalStdDuration>::std_microseconds(p0);
+<u8>::std_microseconds(p0);
-----------------
src/ext.rs <u8 as ext::NumericalStdDuration>::std_milliseconds
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.std_milliseconds();
+<u8 as ext::NumericalStdDuration>::std_milliseconds(p0);
+crate::<u8 as ext::NumericalStdDuration>::std_milliseconds(p0);
+<u8>::std_milliseconds(p0);
-----------------
src/ext.rs <u8 as ext::NumericalStdDuration>::std_seconds
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.std_seconds();
+<u8 as ext::NumericalStdDuration>::std_seconds(p0);
+crate::<u8 as ext::NumericalStdDuration>::std_seconds(p0);
+<u8>::std_seconds(p0);
-----------------
src/ext.rs <u8 as ext::NumericalStdDuration>::std_minutes
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.std_minutes();
+<u8 as ext::NumericalStdDuration>::std_minutes(p0);
+crate::<u8 as ext::NumericalStdDuration>::std_minutes(p0);
+<u8>::std_minutes(p0);
-----------------
src/ext.rs <u8 as ext::NumericalStdDuration>::std_hours
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.std_hours();
+<u8 as ext::NumericalStdDuration>::std_hours(p0);
+crate::<u8 as ext::NumericalStdDuration>::std_hours(p0);
+<u8>::std_hours(p0);
-----------------
src/ext.rs <u8 as ext::NumericalStdDuration>::std_days
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.std_days();
+<u8 as ext::NumericalStdDuration>::std_days(p0);
+crate::<u8 as ext::NumericalStdDuration>::std_days(p0);
+<u8>::std_days(p0);
-----------------
src/ext.rs <u8 as ext::NumericalStdDuration>::std_weeks
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+p0.std_weeks();
+<u8 as ext::NumericalStdDuration>::std_weeks(p0);
+crate::<u8 as ext::NumericalStdDuration>::std_weeks(p0);
+<u8>::std_weeks(p0);
-----------------
src/ext.rs <u16 as ext::NumericalStdDuration>::std_nanoseconds
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+p0.std_nanoseconds();
+<u16 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+crate::<u16 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+<u16>::std_nanoseconds(p0);
-----------------
src/ext.rs <u16 as ext::NumericalStdDuration>::std_microseconds
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+p0.std_microseconds();
+<u16 as ext::NumericalStdDuration>::std_microseconds(p0);
+crate::<u16 as ext::NumericalStdDuration>::std_microseconds(p0);
+<u16>::std_microseconds(p0);
-----------------
src/ext.rs <u16 as ext::NumericalStdDuration>::std_milliseconds
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+p0.std_milliseconds();
+<u16 as ext::NumericalStdDuration>::std_milliseconds(p0);
+crate::<u16 as ext::NumericalStdDuration>::std_milliseconds(p0);
+<u16>::std_milliseconds(p0);
-----------------
src/ext.rs <u16 as ext::NumericalStdDuration>::std_seconds
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+p0.std_seconds();
+<u16 as ext::NumericalStdDuration>::std_seconds(p0);
+crate::<u16 as ext::NumericalStdDuration>::std_seconds(p0);
+<u16>::std_seconds(p0);
-----------------
src/ext.rs <u16 as ext::NumericalStdDuration>::std_minutes
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+p0.std_minutes();
+<u16 as ext::NumericalStdDuration>::std_minutes(p0);
+crate::<u16 as ext::NumericalStdDuration>::std_minutes(p0);
+<u16>::std_minutes(p0);
-----------------
src/ext.rs <u16 as ext::NumericalStdDuration>::std_hours
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+p0.std_hours();
+<u16 as ext::NumericalStdDuration>::std_hours(p0);
+crate::<u16 as ext::NumericalStdDuration>::std_hours(p0);
+<u16>::std_hours(p0);
-----------------
src/ext.rs <u16 as ext::NumericalStdDuration>::std_days
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+p0.std_days();
+<u16 as ext::NumericalStdDuration>::std_days(p0);
+crate::<u16 as ext::NumericalStdDuration>::std_days(p0);
+<u16>::std_days(p0);
-----------------
src/ext.rs <u16 as ext::NumericalStdDuration>::std_weeks
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+p0.std_weeks();
+<u16 as ext::NumericalStdDuration>::std_weeks(p0);
+crate::<u16 as ext::NumericalStdDuration>::std_weeks(p0);
+<u16>::std_weeks(p0);
-----------------
src/ext.rs <u32 as ext::NumericalStdDuration>::std_nanoseconds
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+p0.std_nanoseconds();
+<u32 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+crate::<u32 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+<u32>::std_nanoseconds(p0);
-----------------
src/ext.rs <u32 as ext::NumericalStdDuration>::std_microseconds
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+p0.std_microseconds();
+<u32 as ext::NumericalStdDuration>::std_microseconds(p0);
+crate::<u32 as ext::NumericalStdDuration>::std_microseconds(p0);
+<u32>::std_microseconds(p0);
-----------------
src/ext.rs <u32 as ext::NumericalStdDuration>::std_milliseconds
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+p0.std_milliseconds();
+<u32 as ext::NumericalStdDuration>::std_milliseconds(p0);
+crate::<u32 as ext::NumericalStdDuration>::std_milliseconds(p0);
+<u32>::std_milliseconds(p0);
-----------------
src/ext.rs <u32 as ext::NumericalStdDuration>::std_seconds
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+p0.std_seconds();
+<u32 as ext::NumericalStdDuration>::std_seconds(p0);
+crate::<u32 as ext::NumericalStdDuration>::std_seconds(p0);
+<u32>::std_seconds(p0);
-----------------
src/ext.rs <u32 as ext::NumericalStdDuration>::std_minutes
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+p0.std_minutes();
+<u32 as ext::NumericalStdDuration>::std_minutes(p0);
+crate::<u32 as ext::NumericalStdDuration>::std_minutes(p0);
+<u32>::std_minutes(p0);
-----------------
src/ext.rs <u32 as ext::NumericalStdDuration>::std_hours
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+p0.std_hours();
+<u32 as ext::NumericalStdDuration>::std_hours(p0);
+crate::<u32 as ext::NumericalStdDuration>::std_hours(p0);
+<u32>::std_hours(p0);
-----------------
src/ext.rs <u32 as ext::NumericalStdDuration>::std_days
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+p0.std_days();
+<u32 as ext::NumericalStdDuration>::std_days(p0);
+crate::<u32 as ext::NumericalStdDuration>::std_days(p0);
+<u32>::std_days(p0);
-----------------
src/ext.rs <u32 as ext::NumericalStdDuration>::std_weeks
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+p0.std_weeks();
+<u32 as ext::NumericalStdDuration>::std_weeks(p0);
+crate::<u32 as ext::NumericalStdDuration>::std_weeks(p0);
+<u32>::std_weeks(p0);
-----------------
src/ext.rs <u64 as ext::NumericalStdDuration>::std_nanoseconds
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
+p0.std_nanoseconds();
+<u64 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+crate::<u64 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+<u64>::std_nanoseconds(p0);
-----------------
src/ext.rs <u64 as ext::NumericalStdDuration>::std_microseconds
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
+p0.std_microseconds();
+<u64 as ext::NumericalStdDuration>::std_microseconds(p0);
+crate::<u64 as ext::NumericalStdDuration>::std_microseconds(p0);
+<u64>::std_microseconds(p0);
-----------------
src/ext.rs <u64 as ext::NumericalStdDuration>::std_milliseconds
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
+p0.std_milliseconds();
+<u64 as ext::NumericalStdDuration>::std_milliseconds(p0);
+crate::<u64 as ext::NumericalStdDuration>::std_milliseconds(p0);
+<u64>::std_milliseconds(p0);
-----------------
src/ext.rs <u64 as ext::NumericalStdDuration>::std_seconds
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
+p0.std_seconds();
+<u64 as ext::NumericalStdDuration>::std_seconds(p0);
+crate::<u64 as ext::NumericalStdDuration>::std_seconds(p0);
+<u64>::std_seconds(p0);
-----------------
src/ext.rs <u64 as ext::NumericalStdDuration>::std_minutes
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
+p0.std_minutes();
+<u64 as ext::NumericalStdDuration>::std_minutes(p0);
+crate::<u64 as ext::NumericalStdDuration>::std_minutes(p0);
+<u64>::std_minutes(p0);
-----------------
src/ext.rs <u64 as ext::NumericalStdDuration>::std_hours
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
+p0.std_hours();
+<u64 as ext::NumericalStdDuration>::std_hours(p0);
+crate::<u64 as ext::NumericalStdDuration>::std_hours(p0);
+<u64>::std_hours(p0);
-----------------
src/ext.rs <u64 as ext::NumericalStdDuration>::std_days
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
+p0.std_days();
+<u64 as ext::NumericalStdDuration>::std_days(p0);
+crate::<u64 as ext::NumericalStdDuration>::std_days(p0);
+<u64>::std_days(p0);
-----------------
src/ext.rs <u64 as ext::NumericalStdDuration>::std_weeks
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
+p0.std_weeks();
+<u64 as ext::NumericalStdDuration>::std_weeks(p0);
+crate::<u64 as ext::NumericalStdDuration>::std_weeks(p0);
+<u64>::std_weeks(p0);
-----------------
src/ext.rs <std::num::NonZeroU8 as ext::NumericalStdDuration>::std_nanoseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU8
+p0.std_nanoseconds();
+<std::num::NonZeroU8 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+crate::<std::num::NonZeroU8 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+<std::num::NonZeroU8>::std_nanoseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU8 as ext::NumericalStdDuration>::std_microseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU8
+p0.std_microseconds();
+<std::num::NonZeroU8 as ext::NumericalStdDuration>::std_microseconds(p0);
+crate::<std::num::NonZeroU8 as ext::NumericalStdDuration>::std_microseconds(p0);
+<std::num::NonZeroU8>::std_microseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU8 as ext::NumericalStdDuration>::std_milliseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU8
+p0.std_milliseconds();
+<std::num::NonZeroU8 as ext::NumericalStdDuration>::std_milliseconds(p0);
+crate::<std::num::NonZeroU8 as ext::NumericalStdDuration>::std_milliseconds(p0);
+<std::num::NonZeroU8>::std_milliseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU8 as ext::NumericalStdDuration>::std_seconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU8
+p0.std_seconds();
+<std::num::NonZeroU8 as ext::NumericalStdDuration>::std_seconds(p0);
+crate::<std::num::NonZeroU8 as ext::NumericalStdDuration>::std_seconds(p0);
+<std::num::NonZeroU8>::std_seconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU8 as ext::NumericalStdDuration>::std_minutes
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU8
+p0.std_minutes();
+<std::num::NonZeroU8 as ext::NumericalStdDuration>::std_minutes(p0);
+crate::<std::num::NonZeroU8 as ext::NumericalStdDuration>::std_minutes(p0);
+<std::num::NonZeroU8>::std_minutes(p0);
-----------------
src/ext.rs <std::num::NonZeroU8 as ext::NumericalStdDuration>::std_hours
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU8
+p0.std_hours();
+<std::num::NonZeroU8 as ext::NumericalStdDuration>::std_hours(p0);
+crate::<std::num::NonZeroU8 as ext::NumericalStdDuration>::std_hours(p0);
+<std::num::NonZeroU8>::std_hours(p0);
-----------------
src/ext.rs <std::num::NonZeroU8 as ext::NumericalStdDuration>::std_days
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU8
+p0.std_days();
+<std::num::NonZeroU8 as ext::NumericalStdDuration>::std_days(p0);
+crate::<std::num::NonZeroU8 as ext::NumericalStdDuration>::std_days(p0);
+<std::num::NonZeroU8>::std_days(p0);
-----------------
src/ext.rs <std::num::NonZeroU8 as ext::NumericalStdDuration>::std_weeks
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU8
+p0.std_weeks();
+<std::num::NonZeroU8 as ext::NumericalStdDuration>::std_weeks(p0);
+crate::<std::num::NonZeroU8 as ext::NumericalStdDuration>::std_weeks(p0);
+<std::num::NonZeroU8>::std_weeks(p0);
-----------------
src/ext.rs <std::num::NonZeroU16 as ext::NumericalStdDuration>::std_nanoseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU16
+p0.std_nanoseconds();
+<std::num::NonZeroU16 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+crate::<std::num::NonZeroU16 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+<std::num::NonZeroU16>::std_nanoseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU16 as ext::NumericalStdDuration>::std_microseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU16
+p0.std_microseconds();
+<std::num::NonZeroU16 as ext::NumericalStdDuration>::std_microseconds(p0);
+crate::<std::num::NonZeroU16 as ext::NumericalStdDuration>::std_microseconds(p0);
+<std::num::NonZeroU16>::std_microseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU16 as ext::NumericalStdDuration>::std_milliseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU16
+p0.std_milliseconds();
+<std::num::NonZeroU16 as ext::NumericalStdDuration>::std_milliseconds(p0);
+crate::<std::num::NonZeroU16 as ext::NumericalStdDuration>::std_milliseconds(p0);
+<std::num::NonZeroU16>::std_milliseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU16 as ext::NumericalStdDuration>::std_seconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU16
+p0.std_seconds();
+<std::num::NonZeroU16 as ext::NumericalStdDuration>::std_seconds(p0);
+crate::<std::num::NonZeroU16 as ext::NumericalStdDuration>::std_seconds(p0);
+<std::num::NonZeroU16>::std_seconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU16 as ext::NumericalStdDuration>::std_minutes
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU16
+p0.std_minutes();
+<std::num::NonZeroU16 as ext::NumericalStdDuration>::std_minutes(p0);
+crate::<std::num::NonZeroU16 as ext::NumericalStdDuration>::std_minutes(p0);
+<std::num::NonZeroU16>::std_minutes(p0);
-----------------
src/ext.rs <std::num::NonZeroU16 as ext::NumericalStdDuration>::std_hours
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU16
+p0.std_hours();
+<std::num::NonZeroU16 as ext::NumericalStdDuration>::std_hours(p0);
+crate::<std::num::NonZeroU16 as ext::NumericalStdDuration>::std_hours(p0);
+<std::num::NonZeroU16>::std_hours(p0);
-----------------
src/ext.rs <std::num::NonZeroU16 as ext::NumericalStdDuration>::std_days
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU16
+p0.std_days();
+<std::num::NonZeroU16 as ext::NumericalStdDuration>::std_days(p0);
+crate::<std::num::NonZeroU16 as ext::NumericalStdDuration>::std_days(p0);
+<std::num::NonZeroU16>::std_days(p0);
-----------------
src/ext.rs <std::num::NonZeroU16 as ext::NumericalStdDuration>::std_weeks
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU16
+p0.std_weeks();
+<std::num::NonZeroU16 as ext::NumericalStdDuration>::std_weeks(p0);
+crate::<std::num::NonZeroU16 as ext::NumericalStdDuration>::std_weeks(p0);
+<std::num::NonZeroU16>::std_weeks(p0);
-----------------
src/ext.rs <std::num::NonZeroU32 as ext::NumericalStdDuration>::std_nanoseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU32
+p0.std_nanoseconds();
+<std::num::NonZeroU32 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+crate::<std::num::NonZeroU32 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+<std::num::NonZeroU32>::std_nanoseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU32 as ext::NumericalStdDuration>::std_microseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU32
+p0.std_microseconds();
+<std::num::NonZeroU32 as ext::NumericalStdDuration>::std_microseconds(p0);
+crate::<std::num::NonZeroU32 as ext::NumericalStdDuration>::std_microseconds(p0);
+<std::num::NonZeroU32>::std_microseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU32 as ext::NumericalStdDuration>::std_milliseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU32
+p0.std_milliseconds();
+<std::num::NonZeroU32 as ext::NumericalStdDuration>::std_milliseconds(p0);
+crate::<std::num::NonZeroU32 as ext::NumericalStdDuration>::std_milliseconds(p0);
+<std::num::NonZeroU32>::std_milliseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU32 as ext::NumericalStdDuration>::std_seconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU32
+p0.std_seconds();
+<std::num::NonZeroU32 as ext::NumericalStdDuration>::std_seconds(p0);
+crate::<std::num::NonZeroU32 as ext::NumericalStdDuration>::std_seconds(p0);
+<std::num::NonZeroU32>::std_seconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU32 as ext::NumericalStdDuration>::std_minutes
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU32
+p0.std_minutes();
+<std::num::NonZeroU32 as ext::NumericalStdDuration>::std_minutes(p0);
+crate::<std::num::NonZeroU32 as ext::NumericalStdDuration>::std_minutes(p0);
+<std::num::NonZeroU32>::std_minutes(p0);
-----------------
src/ext.rs <std::num::NonZeroU32 as ext::NumericalStdDuration>::std_hours
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU32
+p0.std_hours();
+<std::num::NonZeroU32 as ext::NumericalStdDuration>::std_hours(p0);
+crate::<std::num::NonZeroU32 as ext::NumericalStdDuration>::std_hours(p0);
+<std::num::NonZeroU32>::std_hours(p0);
-----------------
src/ext.rs <std::num::NonZeroU32 as ext::NumericalStdDuration>::std_days
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU32
+p0.std_days();
+<std::num::NonZeroU32 as ext::NumericalStdDuration>::std_days(p0);
+crate::<std::num::NonZeroU32 as ext::NumericalStdDuration>::std_days(p0);
+<std::num::NonZeroU32>::std_days(p0);
-----------------
src/ext.rs <std::num::NonZeroU32 as ext::NumericalStdDuration>::std_weeks
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU32
+p0.std_weeks();
+<std::num::NonZeroU32 as ext::NumericalStdDuration>::std_weeks(p0);
+crate::<std::num::NonZeroU32 as ext::NumericalStdDuration>::std_weeks(p0);
+<std::num::NonZeroU32>::std_weeks(p0);
-----------------
src/ext.rs <std::num::NonZeroU64 as ext::NumericalStdDuration>::std_nanoseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU64
+p0.std_nanoseconds();
+<std::num::NonZeroU64 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+crate::<std::num::NonZeroU64 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+<std::num::NonZeroU64>::std_nanoseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU64 as ext::NumericalStdDuration>::std_microseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU64
+p0.std_microseconds();
+<std::num::NonZeroU64 as ext::NumericalStdDuration>::std_microseconds(p0);
+crate::<std::num::NonZeroU64 as ext::NumericalStdDuration>::std_microseconds(p0);
+<std::num::NonZeroU64>::std_microseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU64 as ext::NumericalStdDuration>::std_milliseconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU64
+p0.std_milliseconds();
+<std::num::NonZeroU64 as ext::NumericalStdDuration>::std_milliseconds(p0);
+crate::<std::num::NonZeroU64 as ext::NumericalStdDuration>::std_milliseconds(p0);
+<std::num::NonZeroU64>::std_milliseconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU64 as ext::NumericalStdDuration>::std_seconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU64
+p0.std_seconds();
+<std::num::NonZeroU64 as ext::NumericalStdDuration>::std_seconds(p0);
+crate::<std::num::NonZeroU64 as ext::NumericalStdDuration>::std_seconds(p0);
+<std::num::NonZeroU64>::std_seconds(p0);
-----------------
src/ext.rs <std::num::NonZeroU64 as ext::NumericalStdDuration>::std_minutes
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU64
+p0.std_minutes();
+<std::num::NonZeroU64 as ext::NumericalStdDuration>::std_minutes(p0);
+crate::<std::num::NonZeroU64 as ext::NumericalStdDuration>::std_minutes(p0);
+<std::num::NonZeroU64>::std_minutes(p0);
-----------------
src/ext.rs <std::num::NonZeroU64 as ext::NumericalStdDuration>::std_hours
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU64
+p0.std_hours();
+<std::num::NonZeroU64 as ext::NumericalStdDuration>::std_hours(p0);
+crate::<std::num::NonZeroU64 as ext::NumericalStdDuration>::std_hours(p0);
+<std::num::NonZeroU64>::std_hours(p0);
-----------------
src/ext.rs <std::num::NonZeroU64 as ext::NumericalStdDuration>::std_days
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU64
+p0.std_days();
+<std::num::NonZeroU64 as ext::NumericalStdDuration>::std_days(p0);
+crate::<std::num::NonZeroU64 as ext::NumericalStdDuration>::std_days(p0);
+<std::num::NonZeroU64>::std_days(p0);
-----------------
src/ext.rs <std::num::NonZeroU64 as ext::NumericalStdDuration>::std_weeks
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::num::NonZeroU64
+p0.std_weeks();
+<std::num::NonZeroU64 as ext::NumericalStdDuration>::std_weeks(p0);
+crate::<std::num::NonZeroU64 as ext::NumericalStdDuration>::std_weeks(p0);
+<std::num::NonZeroU64>::std_weeks(p0);
-----------------
src/ext.rs <i32 as ext::NumericalStdDuration>::std_nanoseconds
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+p0.std_nanoseconds();
+<i32 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+crate::<i32 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+<i32>::std_nanoseconds(p0);
-----------------
src/ext.rs <i32 as ext::NumericalStdDuration>::std_microseconds
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+p0.std_microseconds();
+<i32 as ext::NumericalStdDuration>::std_microseconds(p0);
+crate::<i32 as ext::NumericalStdDuration>::std_microseconds(p0);
+<i32>::std_microseconds(p0);
-----------------
src/ext.rs <i32 as ext::NumericalStdDuration>::std_milliseconds
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+p0.std_milliseconds();
+<i32 as ext::NumericalStdDuration>::std_milliseconds(p0);
+crate::<i32 as ext::NumericalStdDuration>::std_milliseconds(p0);
+<i32>::std_milliseconds(p0);
-----------------
src/ext.rs <i32 as ext::NumericalStdDuration>::std_seconds
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+p0.std_seconds();
+<i32 as ext::NumericalStdDuration>::std_seconds(p0);
+crate::<i32 as ext::NumericalStdDuration>::std_seconds(p0);
+<i32>::std_seconds(p0);
-----------------
src/ext.rs <i32 as ext::NumericalStdDuration>::std_minutes
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+p0.std_minutes();
+<i32 as ext::NumericalStdDuration>::std_minutes(p0);
+crate::<i32 as ext::NumericalStdDuration>::std_minutes(p0);
+<i32>::std_minutes(p0);
-----------------
src/ext.rs <i32 as ext::NumericalStdDuration>::std_hours
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+p0.std_hours();
+<i32 as ext::NumericalStdDuration>::std_hours(p0);
+crate::<i32 as ext::NumericalStdDuration>::std_hours(p0);
+<i32>::std_hours(p0);
-----------------
src/ext.rs <i32 as ext::NumericalStdDuration>::std_days
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+p0.std_days();
+<i32 as ext::NumericalStdDuration>::std_days(p0);
+crate::<i32 as ext::NumericalStdDuration>::std_days(p0);
+<i32>::std_days(p0);
-----------------
src/ext.rs <i32 as ext::NumericalStdDuration>::std_weeks
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+p0.std_weeks();
+<i32 as ext::NumericalStdDuration>::std_weeks(p0);
+crate::<i32 as ext::NumericalStdDuration>::std_weeks(p0);
+<i32>::std_weeks(p0);
-----------------
src/ext.rs <f64 as ext::NumericalStdDuration>::std_nanoseconds
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
+p0.std_nanoseconds();
+<f64 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+crate::<f64 as ext::NumericalStdDuration>::std_nanoseconds(p0);
+<f64>::std_nanoseconds(p0);
-----------------
src/ext.rs <f64 as ext::NumericalStdDuration>::std_microseconds
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
+p0.std_microseconds();
+<f64 as ext::NumericalStdDuration>::std_microseconds(p0);
+crate::<f64 as ext::NumericalStdDuration>::std_microseconds(p0);
+<f64>::std_microseconds(p0);
-----------------
src/ext.rs <f64 as ext::NumericalStdDuration>::std_milliseconds
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
+p0.std_milliseconds();
+<f64 as ext::NumericalStdDuration>::std_milliseconds(p0);
+crate::<f64 as ext::NumericalStdDuration>::std_milliseconds(p0);
+<f64>::std_milliseconds(p0);
-----------------
src/ext.rs <f64 as ext::NumericalStdDuration>::std_seconds
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
+p0.std_seconds();
+<f64 as ext::NumericalStdDuration>::std_seconds(p0);
+crate::<f64 as ext::NumericalStdDuration>::std_seconds(p0);
+<f64>::std_seconds(p0);
-----------------
src/ext.rs <f64 as ext::NumericalStdDuration>::std_minutes
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
+p0.std_minutes();
+<f64 as ext::NumericalStdDuration>::std_minutes(p0);
+crate::<f64 as ext::NumericalStdDuration>::std_minutes(p0);
+<f64>::std_minutes(p0);
-----------------
src/ext.rs <f64 as ext::NumericalStdDuration>::std_hours
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
+p0.std_hours();
+<f64 as ext::NumericalStdDuration>::std_hours(p0);
+crate::<f64 as ext::NumericalStdDuration>::std_hours(p0);
+<f64>::std_hours(p0);
-----------------
src/ext.rs <f64 as ext::NumericalStdDuration>::std_days
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
+p0.std_days();
+<f64 as ext::NumericalStdDuration>::std_days(p0);
+crate::<f64 as ext::NumericalStdDuration>::std_days(p0);
+<f64>::std_days(p0);
-----------------
src/ext.rs <f64 as ext::NumericalStdDuration>::std_weeks
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
+p0.std_weeks();
+<f64 as ext::NumericalStdDuration>::std_weeks(p0);
+crate::<f64 as ext::NumericalStdDuration>::std_weeks(p0);
+<f64>::std_weeks(p0);
-----------------
src/ext.rs <T as ext::NumericalStdDurationShort>::nanoseconds
deps:{"<T as ext::NumericalStdDurationShort>::nanoseconds":{"T":["ext::NumericalStdDuration","std::marker::Sized"]}}
candidates:{"<T as ext::NumericalStdDurationShort>::nanoseconds":{"T":["std::num::NonZeroU64","std::num::NonZeroU8","std::num::NonZeroU32","std::num::NonZeroU16"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+p0.nanoseconds();
+<T as ext::NumericalStdDurationShort>::nanoseconds(p0);
+crate::<T as ext::NumericalStdDurationShort>::nanoseconds(p0);
+<T>::nanoseconds(p0);
-----------------
src/ext.rs <T as ext::NumericalStdDurationShort>::microseconds
deps:{"<T as ext::NumericalStdDurationShort>::microseconds":{"T":["std::marker::Sized","ext::NumericalStdDuration"]}}
candidates:{"<T as ext::NumericalStdDurationShort>::microseconds":{"T":["std::num::NonZeroU32","std::num::NonZeroU8","std::num::NonZeroU16","std::num::NonZeroU64"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+p0.microseconds();
+<T as ext::NumericalStdDurationShort>::microseconds(p0);
+crate::<T as ext::NumericalStdDurationShort>::microseconds(p0);
+<T>::microseconds(p0);
-----------------
src/ext.rs <T as ext::NumericalStdDurationShort>::milliseconds
deps:{"<T as ext::NumericalStdDurationShort>::milliseconds":{"T":["std::marker::Sized","ext::NumericalStdDuration"]}}
candidates:{"<T as ext::NumericalStdDurationShort>::milliseconds":{"T":["std::num::NonZeroU16","std::num::NonZeroU64","std::num::NonZeroU32","std::num::NonZeroU8"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+p0.milliseconds();
+<T as ext::NumericalStdDurationShort>::milliseconds(p0);
+crate::<T as ext::NumericalStdDurationShort>::milliseconds(p0);
+<T>::milliseconds(p0);
-----------------
src/ext.rs <T as ext::NumericalStdDurationShort>::seconds
deps:{"<T as ext::NumericalStdDurationShort>::seconds":{"T":["ext::NumericalStdDuration","std::marker::Sized"]}}
candidates:{"<T as ext::NumericalStdDurationShort>::seconds":{"T":["std::num::NonZeroU32","std::num::NonZeroU8","std::num::NonZeroU64","std::num::NonZeroU16"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+p0.seconds();
+<T as ext::NumericalStdDurationShort>::seconds(p0);
+crate::<T as ext::NumericalStdDurationShort>::seconds(p0);
+<T>::seconds(p0);
-----------------
src/ext.rs <T as ext::NumericalStdDurationShort>::minutes
deps:{"<T as ext::NumericalStdDurationShort>::minutes":{"T":["std::marker::Sized","ext::NumericalStdDuration"]}}
candidates:{"<T as ext::NumericalStdDurationShort>::minutes":{"T":["std::num::NonZeroU64","std::num::NonZeroU32","std::num::NonZeroU8","std::num::NonZeroU16"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+p0.minutes();
+<T as ext::NumericalStdDurationShort>::minutes(p0);
+crate::<T as ext::NumericalStdDurationShort>::minutes(p0);
+<T>::minutes(p0);
-----------------
src/ext.rs <T as ext::NumericalStdDurationShort>::hours
deps:{"<T as ext::NumericalStdDurationShort>::hours":{"T":["std::marker::Sized","ext::NumericalStdDuration"]}}
candidates:{"<T as ext::NumericalStdDurationShort>::hours":{"T":["std::num::NonZeroU16","std::num::NonZeroU32","std::num::NonZeroU8","std::num::NonZeroU64"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+p0.hours();
+<T as ext::NumericalStdDurationShort>::hours(p0);
+crate::<T as ext::NumericalStdDurationShort>::hours(p0);
+<T>::hours(p0);
-----------------
src/ext.rs <T as ext::NumericalStdDurationShort>::days
deps:{"<T as ext::NumericalStdDurationShort>::days":{"T":["ext::NumericalStdDuration","std::marker::Sized"]}}
candidates:{"<T as ext::NumericalStdDurationShort>::days":{"T":["std::num::NonZeroU8","std::num::NonZeroU16","std::num::NonZeroU32","std::num::NonZeroU64"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+p0.days();
+<T as ext::NumericalStdDurationShort>::days(p0);
+crate::<T as ext::NumericalStdDurationShort>::days(p0);
+<T>::days(p0);
-----------------
src/ext.rs <T as ext::NumericalStdDurationShort>::weeks
deps:{"<T as ext::NumericalStdDurationShort>::weeks":{"T":["ext::NumericalStdDuration","std::marker::Sized"]}}
candidates:{"<T as ext::NumericalStdDurationShort>::weeks":{"T":["std::num::NonZeroU32","std::num::NonZeroU64","std::num::NonZeroU8","std::num::NonZeroU16"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+p0.weeks();
+<T as ext::NumericalStdDurationShort>::weeks(p0);
+crate::<T as ext::NumericalStdDurationShort>::weeks(p0);
+<T>::weeks(p0);
-----------------
src/format/deferred_format.rs <format::deferred_format::DeferredFormat as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::deferred_format::DeferredFormat
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<format::deferred_format::DeferredFormat as std::fmt::Debug>::fmt(p0, p1);
+crate::<format::deferred_format::DeferredFormat as std::fmt::Debug>::fmt(p0, p1);
+<format::deferred_format::DeferredFormat>::fmt(p0, p1);
-----------------
src/format/deferred_format.rs <format::deferred_format::DeferredFormat as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::deferred_format::DeferredFormat
+p0.clone();
+<format::deferred_format::DeferredFormat as std::clone::Clone>::clone(p0);
+crate::<format::deferred_format::DeferredFormat as std::clone::Clone>::clone(p0);
+<format::deferred_format::DeferredFormat>::clone(p0);
-----------------
src/format/deferred_format.rs <format::deferred_format::DeferredFormat as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::deferred_format::DeferredFormat
let mut p1 = & MaybeUninit::uninit().assume_init(); // format::deferred_format::DeferredFormat
+p0.eq(p1);
+<format::deferred_format::DeferredFormat as std::cmp::PartialEq>::eq(p0, p1);
+crate::<format::deferred_format::DeferredFormat as std::cmp::PartialEq>::eq(p0, p1);
+<format::deferred_format::DeferredFormat>::eq(p0, p1);
-----------------
src/format/deferred_format.rs <format::deferred_format::DeferredFormat as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::deferred_format::DeferredFormat
+p0.assert_receiver_is_total_eq();
+<format::deferred_format::DeferredFormat as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<format::deferred_format::DeferredFormat as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<format::deferred_format::DeferredFormat>::assert_receiver_is_total_eq(p0);
-----------------
src/format/deferred_format.rs <format::deferred_format::DeferredFormat as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<format::deferred_format::DeferredFormat as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<format::deferred_format::DeferredFormat as std::hash::Hash>::hash":{"__H":["std::hash::sip::Hasher<S>","std::collections::hash_map::DefaultHasher","<&mut H as std::hash::Hasher>","std::hash::SipHasher","std::boxed::Box<T, A>","std::hash::SipHasher13"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::deferred_format::DeferredFormat
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<format::deferred_format::DeferredFormat as std::hash::Hash>::hash(p0, p1);
+crate::<format::deferred_format::DeferredFormat as std::hash::Hash>::hash(p0, p1);
+<format::deferred_format::DeferredFormat>::hash(p0, p1);
-----------------
src/format/deferred_format.rs format::deferred_format::DeferredFormat::new
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"format::deferred_format::DeferredFormat::new":{"impl Into<Format>":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"format::deferred_format::DeferredFormat::new":{"impl Into<Format>":["std::process::ExitStatusError","std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError","<T as std::convert::Into<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // impl Into<Format>
+format::deferred_format::DeferredFormat::new(p0);
+crate::format::deferred_format::DeferredFormat::new(p0);
+<format::deferred_format::DeferredFormat>::new(p0);
-----------------
src/format/deferred_format.rs format::deferred_format::DeferredFormat::with_date
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::deferred_format::DeferredFormat
let mut p1 = MaybeUninit::uninit().assume_init(); // date::Date
+p0.with_date(p1);
+format::deferred_format::DeferredFormat::with_date(p0, p1);
+crate::format::deferred_format::DeferredFormat::with_date(p0, p1);
+<format::deferred_format::DeferredFormat>::with_date(p0, p1);
-----------------
src/format/deferred_format.rs format::deferred_format::DeferredFormat::with_time
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::deferred_format::DeferredFormat
let mut p1 = MaybeUninit::uninit().assume_init(); // time_mod::Time
+p0.with_time(p1);
+format::deferred_format::DeferredFormat::with_time(p0, p1);
+crate::format::deferred_format::DeferredFormat::with_time(p0, p1);
+<format::deferred_format::DeferredFormat>::with_time(p0, p1);
-----------------
src/format/deferred_format.rs format::deferred_format::DeferredFormat::with_offset
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // format::deferred_format::DeferredFormat
let mut p1 = MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
+p0.with_offset(p1);
+format::deferred_format::DeferredFormat::with_offset(p0, p1);
+crate::format::deferred_format::DeferredFormat::with_offset(p0, p1);
+<format::deferred_format::DeferredFormat>::with_offset(p0, p1);
-----------------
src/format/deferred_format.rs format::deferred_format::DeferredFormat::date
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::deferred_format::DeferredFormat
+p0.date();
+format::deferred_format::DeferredFormat::date(p0);
+crate::format::deferred_format::DeferredFormat::date(p0);
+<format::deferred_format::DeferredFormat>::date(p0);
-----------------
src/format/deferred_format.rs format::deferred_format::DeferredFormat::time
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::deferred_format::DeferredFormat
+p0.time();
+format::deferred_format::DeferredFormat::time(p0);
+crate::format::deferred_format::DeferredFormat::time(p0);
+<format::deferred_format::DeferredFormat>::time(p0);
-----------------
src/format/deferred_format.rs format::deferred_format::DeferredFormat::offset
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::deferred_format::DeferredFormat
+p0.offset();
+format::deferred_format::DeferredFormat::offset(p0);
+crate::format::deferred_format::DeferredFormat::offset(p0);
+<format::deferred_format::DeferredFormat>::offset(p0);
-----------------
src/format/deferred_format.rs <format::deferred_format::DeferredFormat as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::deferred_format::DeferredFormat
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<format::deferred_format::DeferredFormat as std::fmt::Display>::fmt(p0, p1);
+crate::<format::deferred_format::DeferredFormat as std::fmt::Display>::fmt(p0, p1);
+<format::deferred_format::DeferredFormat>::fmt(p0, p1);
-----------------
src/format/format.rs <format::format::Format as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::format::Format
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<format::format::Format as std::fmt::Debug>::fmt(p0, p1);
+crate::<format::format::Format as std::fmt::Debug>::fmt(p0, p1);
+<format::format::Format>::fmt(p0, p1);
-----------------
src/format/format.rs <format::format::Format as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::format::Format
+p0.clone();
+<format::format::Format as std::clone::Clone>::clone(p0);
+crate::<format::format::Format as std::clone::Clone>::clone(p0);
+<format::format::Format>::clone(p0);
-----------------
src/format/format.rs <format::format::Format as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::format::Format
let mut p1 = & MaybeUninit::uninit().assume_init(); // format::format::Format
+p0.eq(p1);
+<format::format::Format as std::cmp::PartialEq>::eq(p0, p1);
+crate::<format::format::Format as std::cmp::PartialEq>::eq(p0, p1);
+<format::format::Format>::eq(p0, p1);
-----------------
src/format/format.rs <format::format::Format as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::format::Format
+p0.assert_receiver_is_total_eq();
+<format::format::Format as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<format::format::Format as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<format::format::Format>::assert_receiver_is_total_eq(p0);
-----------------
src/format/format.rs <format::format::Format as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<format::format::Format as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<format::format::Format as std::hash::Hash>::hash":{"__H":["std::collections::hash_map::DefaultHasher","std::boxed::Box<T, A>","std::hash::SipHasher13","<&mut H as std::hash::Hasher>","std::hash::SipHasher","std::hash::sip::Hasher<S>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::format::Format
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<format::format::Format as std::hash::Hash>::hash(p0, p1);
+crate::<format::format::Format as std::hash::Hash>::hash(p0, p1);
+<format::format::Format>::hash(p0, p1);
-----------------
src/format/format.rs <format::format::Format as std::convert::From<T>>::from
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<format::format::Format as std::convert::From<T>>::from":{"T":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<format::format::Format as std::convert::From<T>>::from":{"T":["std::borrow::Cow<'_, std::ffi::OsStr>","std::borrow::Cow<'_, T>","std::vec::IntoIter<T, A>","std::sync::Arc<T>","std::vec::Drain<'a, T, A>","std::ffi::CString","std::boxed::Box<T, A>","std::ffi::CStr","std::slice::Iter<'_, T>","std::rc::Rc<T>","<&T as std::convert::AsRef<U>>","std::slice::IterMut<'_, T>","core::num::dec2flt::common::AsciiStr<'a>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+<format::format::Format as std::convert::From<T>>::from(p0);
+crate::<format::format::Format as std::convert::From<T>>::from(p0);
+<format::format::Format>::from(p0);
-----------------
src/format/parse.rs <format::parse::Error as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::parse::Error
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<format::parse::Error as std::fmt::Debug>::fmt(p0, p1);
+crate::<format::parse::Error as std::fmt::Debug>::fmt(p0, p1);
+<format::parse::Error>::fmt(p0, p1);
-----------------
src/format/parse.rs <format::parse::Error as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::parse::Error
+p0.clone();
+<format::parse::Error as std::clone::Clone>::clone(p0);
+crate::<format::parse::Error as std::clone::Clone>::clone(p0);
+<format::parse::Error>::clone(p0);
-----------------
src/format/parse.rs <format::parse::Error as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::parse::Error
let mut p1 = & MaybeUninit::uninit().assume_init(); // format::parse::Error
+p0.eq(p1);
+<format::parse::Error as std::cmp::PartialEq>::eq(p0, p1);
+crate::<format::parse::Error as std::cmp::PartialEq>::eq(p0, p1);
+<format::parse::Error>::eq(p0, p1);
-----------------
src/format/parse.rs <format::parse::Error as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::parse::Error
+p0.assert_receiver_is_total_eq();
+<format::parse::Error as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<format::parse::Error as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<format::parse::Error>::assert_receiver_is_total_eq(p0);
-----------------
src/format/parse.rs <format::parse::Error as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<format::parse::Error as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<format::parse::Error as std::hash::Hash>::hash":{"__H":["std::hash::SipHasher13","<&mut H as std::hash::Hasher>","std::hash::SipHasher","std::boxed::Box<T, A>","std::hash::sip::Hasher<S>","std::collections::hash_map::DefaultHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::parse::Error
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<format::parse::Error as std::hash::Hash>::hash(p0, p1);
+crate::<format::parse::Error as std::hash::Hash>::hash(p0, p1);
+<format::parse::Error>::hash(p0, p1);
-----------------
src/format/parse.rs <format::parse::Error as std::convert::From<error::ComponentRange>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // error::ComponentRange
+<format::parse::Error as std::convert::From<error::ComponentRange>>::from(p0);
+crate::<format::parse::Error as std::convert::From<error::ComponentRange>>::from(p0);
+<format::parse::Error>::from(p0);
-----------------
src/format/parse.rs <format::parse::Error as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::parse::Error
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<format::parse::Error as std::fmt::Display>::fmt(p0, p1);
+crate::<format::parse::Error as std::fmt::Display>::fmt(p0, p1);
+<format::parse::Error>::fmt(p0, p1);
-----------------
src/format/parse.rs <format::parse::Error as std::error::Error>::source
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::parse::Error
+p0.source();
+<format::parse::Error as std::error::Error>::source(p0);
+crate::<format::parse::Error as std::error::Error>::source(p0);
+<format::parse::Error>::source(p0);
-----------------
src/format/parse.rs <format::parse::AmPm as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::parse::AmPm
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<format::parse::AmPm as std::fmt::Debug>::fmt(p0, p1);
+crate::<format::parse::AmPm as std::fmt::Debug>::fmt(p0, p1);
+<format::parse::AmPm>::fmt(p0, p1);
-----------------
src/format/parse.rs <format::parse::AmPm as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::parse::AmPm
+p0.clone();
+<format::parse::AmPm as std::clone::Clone>::clone(p0);
+crate::<format::parse::AmPm as std::clone::Clone>::clone(p0);
+<format::parse::AmPm>::clone(p0);
-----------------
src/format/parse.rs <format::parse::AmPm as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::parse::AmPm
let mut p1 = & MaybeUninit::uninit().assume_init(); // format::parse::AmPm
+p0.eq(p1);
+<format::parse::AmPm as std::cmp::PartialEq>::eq(p0, p1);
+crate::<format::parse::AmPm as std::cmp::PartialEq>::eq(p0, p1);
+<format::parse::AmPm>::eq(p0, p1);
-----------------
src/format/parse.rs <format::parse::AmPm as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::parse::AmPm
+p0.assert_receiver_is_total_eq();
+<format::parse::AmPm as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<format::parse::AmPm as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<format::parse::AmPm>::assert_receiver_is_total_eq(p0);
-----------------
src/format/parse.rs <format::parse::ParsedItems as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<format::parse::ParsedItems as std::fmt::Debug>::fmt(p0, p1);
+crate::<format::parse::ParsedItems as std::fmt::Debug>::fmt(p0, p1);
+<format::parse::ParsedItems>::fmt(p0, p1);
-----------------
src/format/parse.rs <format::parse::ParsedItems as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
+p0.clone();
+<format::parse::ParsedItems as std::clone::Clone>::clone(p0);
+crate::<format::parse::ParsedItems as std::clone::Clone>::clone(p0);
+<format::parse::ParsedItems>::clone(p0);
-----------------
src/format/parse.rs format::parse::ParsedItems::new
deps:{}
candidates:{}
+format::parse::ParsedItems::new();
+crate::format::parse::ParsedItems::new();
+<format::parse::ParsedItems>::new();
-----------------
src/format/mod.rs <format::Padding as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::Padding
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<format::Padding as std::fmt::Debug>::fmt(p0, p1);
+crate::<format::Padding as std::fmt::Debug>::fmt(p0, p1);
+<format::Padding>::fmt(p0, p1);
-----------------
src/format/mod.rs <format::Padding as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::Padding
+p0.clone();
+<format::Padding as std::clone::Clone>::clone(p0);
+crate::<format::Padding as std::clone::Clone>::clone(p0);
+<format::Padding>::clone(p0);
-----------------
src/format/mod.rs <format::Padding as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::Padding
let mut p1 = & MaybeUninit::uninit().assume_init(); // format::Padding
+p0.eq(p1);
+<format::Padding as std::cmp::PartialEq>::eq(p0, p1);
+crate::<format::Padding as std::cmp::PartialEq>::eq(p0, p1);
+<format::Padding>::eq(p0, p1);
-----------------
src/format/mod.rs <format::Padding as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::Padding
+p0.assert_receiver_is_total_eq();
+<format::Padding as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<format::Padding as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<format::Padding>::assert_receiver_is_total_eq(p0);
-----------------
src/format/mod.rs <format::Padding as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<format::Padding as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<format::Padding as std::hash::Hash>::hash":{"__H":["std::boxed::Box<T, A>","std::hash::SipHasher","std::collections::hash_map::DefaultHasher","std::hash::SipHasher13","std::hash::sip::Hasher<S>","<&mut H as std::hash::Hasher>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::Padding
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<format::Padding as std::hash::Hash>::hash(p0, p1);
+crate::<format::Padding as std::hash::Hash>::hash(p0, p1);
+<format::Padding>::hash(p0, p1);
-----------------
src/format/mod.rs <format::Specifier as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::Specifier
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<format::Specifier as std::fmt::Debug>::fmt(p0, p1);
+crate::<format::Specifier as std::fmt::Debug>::fmt(p0, p1);
+<format::Specifier>::fmt(p0, p1);
-----------------
src/format/mod.rs <format::Specifier as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::Specifier
+p0.clone();
+<format::Specifier as std::clone::Clone>::clone(p0);
+crate::<format::Specifier as std::clone::Clone>::clone(p0);
+<format::Specifier>::clone(p0);
-----------------
src/format/mod.rs <format::Specifier as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::Specifier
let mut p1 = & MaybeUninit::uninit().assume_init(); // format::Specifier
+p0.eq(p1);
+<format::Specifier as std::cmp::PartialEq>::eq(p0, p1);
+crate::<format::Specifier as std::cmp::PartialEq>::eq(p0, p1);
+<format::Specifier>::eq(p0, p1);
-----------------
src/format/mod.rs <format::Specifier as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::Specifier
+p0.assert_receiver_is_total_eq();
+<format::Specifier as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<format::Specifier as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<format::Specifier>::assert_receiver_is_total_eq(p0);
-----------------
src/format/mod.rs <format::Specifier as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<format::Specifier as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<format::Specifier as std::hash::Hash>::hash":{"__H":["std::hash::sip::Hasher<S>","<&mut H as std::hash::Hasher>","std::collections::hash_map::DefaultHasher","std::hash::SipHasher13","std::boxed::Box<T, A>","std::hash::SipHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::Specifier
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<format::Specifier as std::hash::Hash>::hash(p0, p1);
+crate::<format::Specifier as std::hash::Hash>::hash(p0, p1);
+<format::Specifier>::hash(p0, p1);
-----------------
src/format/mod.rs <format::FormatItem<'a> as std::fmt::Debug>::fmt
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::FormatItem<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<format::FormatItem<'a> as std::fmt::Debug>::fmt(p0, p1);
+crate::<format::FormatItem<'a> as std::fmt::Debug>::fmt(p0, p1);
+<format::FormatItem<'a>>::fmt(p0, p1);
-----------------
src/format/mod.rs <format::FormatItem<'a> as std::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::FormatItem<'a>
+p0.clone();
+<format::FormatItem<'a> as std::clone::Clone>::clone(p0);
+crate::<format::FormatItem<'a> as std::clone::Clone>::clone(p0);
+<format::FormatItem<'a>>::clone(p0);
-----------------
src/format/mod.rs <format::FormatItem<'a> as std::cmp::PartialEq>::eq
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::FormatItem<'a>
let mut p1 = & MaybeUninit::uninit().assume_init(); // format::FormatItem<'a>
+p0.eq(p1);
+<format::FormatItem<'a> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<format::FormatItem<'a> as std::cmp::PartialEq>::eq(p0, p1);
+<format::FormatItem<'a>>::eq(p0, p1);
-----------------
src/format/mod.rs <format::FormatItem<'a> as std::cmp::Eq>::assert_receiver_is_total_eq
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::FormatItem<'a>
+p0.assert_receiver_is_total_eq();
+<format::FormatItem<'a> as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<format::FormatItem<'a> as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<format::FormatItem<'a>>::assert_receiver_is_total_eq(p0);
-----------------
src/format/mod.rs <format::FormatItem<'a> as std::hash::Hash>::hash
'a
deps:{"<&mut H as std::hash::Hasher>":{},"<format::FormatItem<'a> as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<format::FormatItem<'a> as std::hash::Hash>::hash":{"__H":["std::hash::SipHasher13","std::collections::hash_map::DefaultHasher","std::boxed::Box<T, A>","<&mut H as std::hash::Hasher>","std::hash::sip::Hasher<S>","std::hash::SipHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // format::FormatItem<'a>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<format::FormatItem<'a> as std::hash::Hash>::hash(p0, p1);
+crate::<format::FormatItem<'a> as std::hash::Hash>::hash(p0, p1);
+<format::FormatItem<'a>>::hash(p0, p1);
-----------------
src/instant.rs <instant::Instant as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<instant::Instant as std::fmt::Debug>::fmt(p0, p1);
+crate::<instant::Instant as std::fmt::Debug>::fmt(p0, p1);
+<instant::Instant>::fmt(p0, p1);
-----------------
src/instant.rs <instant::Instant as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // instant::Instant
+p0.clone();
+<instant::Instant as std::clone::Clone>::clone(p0);
+crate::<instant::Instant as std::clone::Clone>::clone(p0);
+<instant::Instant>::clone(p0);
-----------------
src/instant.rs <instant::Instant as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = & MaybeUninit::uninit().assume_init(); // instant::Instant
+p0.eq(p1);
+<instant::Instant as std::cmp::PartialEq>::eq(p0, p1);
+crate::<instant::Instant as std::cmp::PartialEq>::eq(p0, p1);
+<instant::Instant>::eq(p0, p1);
-----------------
src/instant.rs <instant::Instant as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // instant::Instant
+p0.assert_receiver_is_total_eq();
+<instant::Instant as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<instant::Instant as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<instant::Instant>::assert_receiver_is_total_eq(p0);
-----------------
src/instant.rs <instant::Instant as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = & MaybeUninit::uninit().assume_init(); // instant::Instant
+p0.partial_cmp(p1);
+<instant::Instant as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<instant::Instant as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<instant::Instant>::partial_cmp(p0, p1);
-----------------
src/instant.rs <instant::Instant as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = & MaybeUninit::uninit().assume_init(); // instant::Instant
+p0.cmp(p1);
+<instant::Instant as std::cmp::Ord>::cmp(p0, p1);
+crate::<instant::Instant as std::cmp::Ord>::cmp(p0, p1);
+<instant::Instant>::cmp(p0, p1);
-----------------
src/instant.rs <instant::Instant as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<instant::Instant as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<instant::Instant as std::hash::Hash>::hash":{"__H":["<&mut H as std::hash::Hasher>","std::hash::SipHasher","std::hash::SipHasher13","std::hash::sip::Hasher<S>","std::collections::hash_map::DefaultHasher","std::boxed::Box<T, A>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<instant::Instant as std::hash::Hash>::hash(p0, p1);
+crate::<instant::Instant as std::hash::Hash>::hash(p0, p1);
+<instant::Instant>::hash(p0, p1);
-----------------
src/instant.rs instant::Instant::now
deps:{}
candidates:{}
+instant::Instant::now();
+crate::instant::Instant::now();
+<instant::Instant>::now();
-----------------
src/instant.rs instant::Instant::elapsed
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // instant::Instant
+p0.elapsed();
+instant::Instant::elapsed(p0);
+crate::instant::Instant::elapsed(p0);
+<instant::Instant>::elapsed(p0);
-----------------
src/instant.rs instant::Instant::checked_add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.checked_add(p1);
+instant::Instant::checked_add(p0, p1);
+crate::instant::Instant::checked_add(p0, p1);
+<instant::Instant>::checked_add(p0, p1);
-----------------
src/instant.rs instant::Instant::checked_sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.checked_sub(p1);
+instant::Instant::checked_sub(p0, p1);
+crate::instant::Instant::checked_sub(p0, p1);
+<instant::Instant>::checked_sub(p0, p1);
-----------------
src/instant.rs instant::Instant::to
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // instant::Instant
+p0.to(p1);
+instant::Instant::to(p0, p1);
+crate::instant::Instant::to(p0, p1);
+<instant::Instant>::to(p0, p1);
-----------------
src/instant.rs <instant::Instant as std::convert::From<std::time::Instant>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::time::Instant
+<instant::Instant as std::convert::From<std::time::Instant>>::from(p0);
+crate::<instant::Instant as std::convert::From<std::time::Instant>>::from(p0);
+<instant::Instant>::from(p0);
-----------------
src/instant.rs instant::<impl std::convert::From<instant::Instant> for std::time::Instant>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // instant::Instant
+instant::<impl std::convert::From<instant::Instant> for std::time::Instant>::from(p0);
+crate::instant::<impl std::convert::From<instant::Instant> for std::time::Instant>::from(p0);
+<std::time::Instant>::from(p0);
-----------------
src/instant.rs <instant::Instant as std::ops::Sub>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // instant::Instant
+p0.sub(p1);
+<instant::Instant as std::ops::Sub>::sub(p0, p1);
+crate::<instant::Instant as std::ops::Sub>::sub(p0, p1);
+<instant::Instant>::sub(p0, p1);
-----------------
src/instant.rs <instant::Instant as std::ops::Sub<std::time::Instant>>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Instant
+p0.sub(p1);
+<instant::Instant as std::ops::Sub<std::time::Instant>>::sub(p0, p1);
+crate::<instant::Instant as std::ops::Sub<std::time::Instant>>::sub(p0, p1);
+<instant::Instant>::sub(p0, p1);
-----------------
src/instant.rs instant::<impl std::ops::Sub<instant::Instant> for std::time::Instant>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::time::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // instant::Instant
+p0.sub(p1);
+instant::<impl std::ops::Sub<instant::Instant> for std::time::Instant>::sub(p0, p1);
+crate::instant::<impl std::ops::Sub<instant::Instant> for std::time::Instant>::sub(p0, p1);
+<std::time::Instant>::sub(p0, p1);
-----------------
src/instant.rs <instant::Instant as std::ops::Add<duration::Duration>>::add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.add(p1);
+<instant::Instant as std::ops::Add<duration::Duration>>::add(p0, p1);
+crate::<instant::Instant as std::ops::Add<duration::Duration>>::add(p0, p1);
+<instant::Instant>::add(p0, p1);
-----------------
src/instant.rs instant::<impl std::ops::Add<duration::Duration> for std::time::Instant>::add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::time::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.add(p1);
+instant::<impl std::ops::Add<duration::Duration> for std::time::Instant>::add(p0, p1);
+crate::instant::<impl std::ops::Add<duration::Duration> for std::time::Instant>::add(p0, p1);
+<std::time::Instant>::add(p0, p1);
-----------------
src/instant.rs <instant::Instant as std::ops::Add<std::time::Duration>>::add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.add(p1);
+<instant::Instant as std::ops::Add<std::time::Duration>>::add(p0, p1);
+crate::<instant::Instant as std::ops::Add<std::time::Duration>>::add(p0, p1);
+<instant::Instant>::add(p0, p1);
-----------------
src/instant.rs <instant::Instant as std::ops::AddAssign<duration::Duration>>::add_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.add_assign(p1);
+<instant::Instant as std::ops::AddAssign<duration::Duration>>::add_assign(p0, p1);
+crate::<instant::Instant as std::ops::AddAssign<duration::Duration>>::add_assign(p0, p1);
+<instant::Instant>::add_assign(p0, p1);
-----------------
src/instant.rs instant::<impl std::ops::AddAssign<duration::Duration> for std::time::Instant>::add_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::time::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.add_assign(p1);
+instant::<impl std::ops::AddAssign<duration::Duration> for std::time::Instant>::add_assign(p0, p1);
+crate::instant::<impl std::ops::AddAssign<duration::Duration> for std::time::Instant>::add_assign(p0, p1);
+<std::time::Instant>::add_assign(p0, p1);
-----------------
src/instant.rs <instant::Instant as std::ops::AddAssign<std::time::Duration>>::add_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.add_assign(p1);
+<instant::Instant as std::ops::AddAssign<std::time::Duration>>::add_assign(p0, p1);
+crate::<instant::Instant as std::ops::AddAssign<std::time::Duration>>::add_assign(p0, p1);
+<instant::Instant>::add_assign(p0, p1);
-----------------
src/instant.rs <instant::Instant as std::ops::Sub<duration::Duration>>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub(p1);
+<instant::Instant as std::ops::Sub<duration::Duration>>::sub(p0, p1);
+crate::<instant::Instant as std::ops::Sub<duration::Duration>>::sub(p0, p1);
+<instant::Instant>::sub(p0, p1);
-----------------
src/instant.rs instant::<impl std::ops::Sub<duration::Duration> for std::time::Instant>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::time::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub(p1);
+instant::<impl std::ops::Sub<duration::Duration> for std::time::Instant>::sub(p0, p1);
+crate::instant::<impl std::ops::Sub<duration::Duration> for std::time::Instant>::sub(p0, p1);
+<std::time::Instant>::sub(p0, p1);
-----------------
src/instant.rs <instant::Instant as std::ops::Sub<std::time::Duration>>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.sub(p1);
+<instant::Instant as std::ops::Sub<std::time::Duration>>::sub(p0, p1);
+crate::<instant::Instant as std::ops::Sub<std::time::Duration>>::sub(p0, p1);
+<instant::Instant>::sub(p0, p1);
-----------------
src/instant.rs <instant::Instant as std::ops::SubAssign<duration::Duration>>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub_assign(p1);
+<instant::Instant as std::ops::SubAssign<duration::Duration>>::sub_assign(p0, p1);
+crate::<instant::Instant as std::ops::SubAssign<duration::Duration>>::sub_assign(p0, p1);
+<instant::Instant>::sub_assign(p0, p1);
-----------------
src/instant.rs instant::<impl std::ops::SubAssign<duration::Duration> for std::time::Instant>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::time::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub_assign(p1);
+instant::<impl std::ops::SubAssign<duration::Duration> for std::time::Instant>::sub_assign(p0, p1);
+crate::instant::<impl std::ops::SubAssign<duration::Duration> for std::time::Instant>::sub_assign(p0, p1);
+<std::time::Instant>::sub_assign(p0, p1);
-----------------
src/instant.rs <instant::Instant as std::ops::SubAssign<std::time::Duration>>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.sub_assign(p1);
+<instant::Instant as std::ops::SubAssign<std::time::Duration>>::sub_assign(p0, p1);
+crate::<instant::Instant as std::ops::SubAssign<std::time::Duration>>::sub_assign(p0, p1);
+<instant::Instant>::sub_assign(p0, p1);
-----------------
src/instant.rs <instant::Instant as std::cmp::PartialEq<std::time::Instant>>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::time::Instant
+p0.eq(p1);
+<instant::Instant as std::cmp::PartialEq<std::time::Instant>>::eq(p0, p1);
+crate::<instant::Instant as std::cmp::PartialEq<std::time::Instant>>::eq(p0, p1);
+<instant::Instant>::eq(p0, p1);
-----------------
src/instant.rs instant::<impl std::cmp::PartialEq<instant::Instant> for std::time::Instant>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::time::Instant
let mut p1 = & MaybeUninit::uninit().assume_init(); // instant::Instant
+p0.eq(p1);
+instant::<impl std::cmp::PartialEq<instant::Instant> for std::time::Instant>::eq(p0, p1);
+crate::instant::<impl std::cmp::PartialEq<instant::Instant> for std::time::Instant>::eq(p0, p1);
+<std::time::Instant>::eq(p0, p1);
-----------------
src/instant.rs <instant::Instant as std::cmp::PartialOrd<std::time::Instant>>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // instant::Instant
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::time::Instant
+p0.partial_cmp(p1);
+<instant::Instant as std::cmp::PartialOrd<std::time::Instant>>::partial_cmp(p0, p1);
+crate::<instant::Instant as std::cmp::PartialOrd<std::time::Instant>>::partial_cmp(p0, p1);
+<instant::Instant>::partial_cmp(p0, p1);
-----------------
src/instant.rs instant::<impl std::cmp::PartialOrd<instant::Instant> for std::time::Instant>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::time::Instant
let mut p1 = & MaybeUninit::uninit().assume_init(); // instant::Instant
+p0.partial_cmp(p1);
+instant::<impl std::cmp::PartialOrd<instant::Instant> for std::time::Instant>::partial_cmp(p0, p1);
+crate::instant::<impl std::cmp::PartialOrd<instant::Instant> for std::time::Instant>::partial_cmp(p0, p1);
+<std::time::Instant>::partial_cmp(p0, p1);
-----------------
src/internals.rs internals::Time::from_hms_nanos_unchecked
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
let mut p1 = 0u8; // None+u8
let mut p2 = 0u8; // None+u8
let mut p3 = 0u32; // None+u32
+internals::Time::from_hms_nanos_unchecked(p0, p1, p2, p3);
+crate::internals::Time::from_hms_nanos_unchecked(p0, p1, p2, p3);
+<internals::Time>::from_hms_nanos_unchecked(p0, p1, p2, p3);
-----------------
src/internals.rs internals::Date::from_yo_unchecked
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
let mut p1 = 0u16; // None+u16
+internals::Date::from_yo_unchecked(p0, p1);
+crate::internals::Date::from_yo_unchecked(p0, p1);
+<internals::Date>::from_yo_unchecked(p0, p1);
-----------------
src/internals.rs internals::Date::from_ymd_unchecked
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
let mut p1 = 0u8; // None+u8
let mut p2 = 0u8; // None+u8
+internals::Date::from_ymd_unchecked(p0, p1, p2);
+crate::internals::Date::from_ymd_unchecked(p0, p1, p2);
+<internals::Date>::from_ymd_unchecked(p0, p1, p2);
-----------------
src/internals.rs internals::Date::from_iso_ywd_unchecked
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
let mut p1 = 0u8; // None+u8
let mut p2 = MaybeUninit::uninit().assume_init(); // weekday::Weekday
+internals::Date::from_iso_ywd_unchecked(p0, p1, p2);
+crate::internals::Date::from_iso_ywd_unchecked(p0, p1, p2);
+<internals::Date>::from_iso_ywd_unchecked(p0, p1, p2);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<offset_date_time::OffsetDateTime as std::fmt::Debug>::fmt(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::fmt::Debug>::fmt(p0, p1);
+<offset_date_time::OffsetDateTime>::fmt(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.clone();
+<offset_date_time::OffsetDateTime as std::clone::Clone>::clone(p0);
+crate::<offset_date_time::OffsetDateTime as std::clone::Clone>::clone(p0);
+<offset_date_time::OffsetDateTime>::clone(p0);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.assert_receiver_is_total_eq();
+<offset_date_time::OffsetDateTime as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<offset_date_time::OffsetDateTime as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<offset_date_time::OffsetDateTime>::assert_receiver_is_total_eq(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::new_assuming_offset
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
+offset_date_time::OffsetDateTime::new_assuming_offset(p0, p1);
+crate::offset_date_time::OffsetDateTime::new_assuming_offset(p0, p1);
+<offset_date_time::OffsetDateTime>::new_assuming_offset(p0, p1);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::new_assuming_utc
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+offset_date_time::OffsetDateTime::new_assuming_utc(p0);
+crate::offset_date_time::OffsetDateTime::new_assuming_utc(p0);
+<offset_date_time::OffsetDateTime>::new_assuming_utc(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::now
deps:{}
candidates:{}
+offset_date_time::OffsetDateTime::now();
+crate::offset_date_time::OffsetDateTime::now();
+<offset_date_time::OffsetDateTime>::now();
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::now_utc
deps:{}
candidates:{}
+offset_date_time::OffsetDateTime::now_utc();
+crate::offset_date_time::OffsetDateTime::now_utc();
+<offset_date_time::OffsetDateTime>::now_utc();
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::now_local
deps:{}
candidates:{}
+offset_date_time::OffsetDateTime::now_local();
+crate::offset_date_time::OffsetDateTime::now_local();
+<offset_date_time::OffsetDateTime>::now_local();
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::try_now_local
deps:{}
candidates:{}
+offset_date_time::OffsetDateTime::try_now_local();
+crate::offset_date_time::OffsetDateTime::try_now_local();
+<offset_date_time::OffsetDateTime>::try_now_local();
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::to_offset
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
+p0.to_offset(p1);
+offset_date_time::OffsetDateTime::to_offset(p0, p1);
+crate::offset_date_time::OffsetDateTime::to_offset(p0, p1);
+<offset_date_time::OffsetDateTime>::to_offset(p0, p1);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::unix_epoch
deps:{}
candidates:{}
+offset_date_time::OffsetDateTime::unix_epoch();
+crate::offset_date_time::OffsetDateTime::unix_epoch();
+<offset_date_time::OffsetDateTime>::unix_epoch();
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::from_unix_timestamp
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+offset_date_time::OffsetDateTime::from_unix_timestamp(p0);
+crate::offset_date_time::OffsetDateTime::from_unix_timestamp(p0);
+<offset_date_time::OffsetDateTime>::from_unix_timestamp(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::from_unix_timestamp_nanos
deps:{}
candidates:{}
let mut p0 = 0i128; // None+i128
+offset_date_time::OffsetDateTime::from_unix_timestamp_nanos(p0);
+crate::offset_date_time::OffsetDateTime::from_unix_timestamp_nanos(p0);
+<offset_date_time::OffsetDateTime>::from_unix_timestamp_nanos(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::offset
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.offset();
+offset_date_time::OffsetDateTime::offset(p0);
+crate::offset_date_time::OffsetDateTime::offset(p0);
+<offset_date_time::OffsetDateTime>::offset(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::unix_timestamp
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.unix_timestamp();
+offset_date_time::OffsetDateTime::unix_timestamp(p0);
+crate::offset_date_time::OffsetDateTime::unix_timestamp(p0);
+<offset_date_time::OffsetDateTime>::unix_timestamp(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::timestamp
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.timestamp();
+offset_date_time::OffsetDateTime::timestamp(p0);
+crate::offset_date_time::OffsetDateTime::timestamp(p0);
+<offset_date_time::OffsetDateTime>::timestamp(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::unix_timestamp_nanos
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.unix_timestamp_nanos();
+offset_date_time::OffsetDateTime::unix_timestamp_nanos(p0);
+crate::offset_date_time::OffsetDateTime::unix_timestamp_nanos(p0);
+<offset_date_time::OffsetDateTime>::unix_timestamp_nanos(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::timestamp_nanos
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.timestamp_nanos();
+offset_date_time::OffsetDateTime::timestamp_nanos(p0);
+crate::offset_date_time::OffsetDateTime::timestamp_nanos(p0);
+<offset_date_time::OffsetDateTime>::timestamp_nanos(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::date
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.date();
+offset_date_time::OffsetDateTime::date(p0);
+crate::offset_date_time::OffsetDateTime::date(p0);
+<offset_date_time::OffsetDateTime>::date(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::time
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.time();
+offset_date_time::OffsetDateTime::time(p0);
+crate::offset_date_time::OffsetDateTime::time(p0);
+<offset_date_time::OffsetDateTime>::time(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::year
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.year();
+offset_date_time::OffsetDateTime::year(p0);
+crate::offset_date_time::OffsetDateTime::year(p0);
+<offset_date_time::OffsetDateTime>::year(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::month
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.month();
+offset_date_time::OffsetDateTime::month(p0);
+crate::offset_date_time::OffsetDateTime::month(p0);
+<offset_date_time::OffsetDateTime>::month(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::day
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.day();
+offset_date_time::OffsetDateTime::day(p0);
+crate::offset_date_time::OffsetDateTime::day(p0);
+<offset_date_time::OffsetDateTime>::day(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::month_day
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.month_day();
+offset_date_time::OffsetDateTime::month_day(p0);
+crate::offset_date_time::OffsetDateTime::month_day(p0);
+<offset_date_time::OffsetDateTime>::month_day(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::ordinal
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.ordinal();
+offset_date_time::OffsetDateTime::ordinal(p0);
+crate::offset_date_time::OffsetDateTime::ordinal(p0);
+<offset_date_time::OffsetDateTime>::ordinal(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::iso_year_week
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.iso_year_week();
+offset_date_time::OffsetDateTime::iso_year_week(p0);
+crate::offset_date_time::OffsetDateTime::iso_year_week(p0);
+<offset_date_time::OffsetDateTime>::iso_year_week(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::week
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.week();
+offset_date_time::OffsetDateTime::week(p0);
+crate::offset_date_time::OffsetDateTime::week(p0);
+<offset_date_time::OffsetDateTime>::week(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::weekday
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.weekday();
+offset_date_time::OffsetDateTime::weekday(p0);
+crate::offset_date_time::OffsetDateTime::weekday(p0);
+<offset_date_time::OffsetDateTime>::weekday(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::hour
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.hour();
+offset_date_time::OffsetDateTime::hour(p0);
+crate::offset_date_time::OffsetDateTime::hour(p0);
+<offset_date_time::OffsetDateTime>::hour(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::minute
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.minute();
+offset_date_time::OffsetDateTime::minute(p0);
+crate::offset_date_time::OffsetDateTime::minute(p0);
+<offset_date_time::OffsetDateTime>::minute(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::second
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.second();
+offset_date_time::OffsetDateTime::second(p0);
+crate::offset_date_time::OffsetDateTime::second(p0);
+<offset_date_time::OffsetDateTime>::second(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::millisecond
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.millisecond();
+offset_date_time::OffsetDateTime::millisecond(p0);
+crate::offset_date_time::OffsetDateTime::millisecond(p0);
+<offset_date_time::OffsetDateTime>::millisecond(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::microsecond
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.microsecond();
+offset_date_time::OffsetDateTime::microsecond(p0);
+crate::offset_date_time::OffsetDateTime::microsecond(p0);
+<offset_date_time::OffsetDateTime>::microsecond(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::nanosecond
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.nanosecond();
+offset_date_time::OffsetDateTime::nanosecond(p0);
+crate::offset_date_time::OffsetDateTime::nanosecond(p0);
+<offset_date_time::OffsetDateTime>::nanosecond(p0);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::format
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"offset_date_time::OffsetDateTime::format":{"impl Into<Format>":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"offset_date_time::OffsetDateTime::format":{"impl Into<Format>":["std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected","std::process::ExitStatusError","<T as std::convert::Into<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // impl Into<Format>
+p0.format(p1);
+offset_date_time::OffsetDateTime::format(p0, p1);
+crate::offset_date_time::OffsetDateTime::format(p0, p1);
+<offset_date_time::OffsetDateTime>::format(p0, p1);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::lazy_format
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"offset_date_time::OffsetDateTime::lazy_format":{"impl Into<Format>":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"offset_date_time::OffsetDateTime::lazy_format":{"impl Into<Format>":["std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError","<T as std::convert::Into<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // impl Into<Format>
+p0.lazy_format(p1);
+offset_date_time::OffsetDateTime::lazy_format(p0, p1);
+crate::offset_date_time::OffsetDateTime::lazy_format(p0, p1);
+<offset_date_time::OffsetDateTime>::lazy_format(p0, p1);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::parse
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"offset_date_time::OffsetDateTime::parse":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"],"impl Into<Format>":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"offset_date_time::OffsetDateTime::parse":{"impl AsRef<str>":["core::num::dec2flt::common::AsciiStr<'a>","std::ffi::CStr","<&T as std::convert::AsRef<U>>","std::borrow::Cow<'_, T>","<&mut T as std::convert::AsRef<U>>","std::slice::Iter<'_, T>","std::boxed::Box<T, A>","std::sync::Arc<T>","std::rc::Rc<T>","std::slice::IterMut<'_, T>","std::vec::Drain<'a, T, A>","std::vec::IntoIter<T, A>","std::ffi::CString","std::borrow::Cow<'_, std::ffi::OsStr>"],"impl Into<Format>":["std::process::ExitStatusError","<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
let mut p1 = MaybeUninit::uninit().assume_init(); // impl Into<Format>
+offset_date_time::OffsetDateTime::parse(p0, p1);
+crate::offset_date_time::OffsetDateTime::parse(p0, p1);
+<offset_date_time::OffsetDateTime>::parse(p0, p1);
-----------------
src/offset_date_time.rs offset_date_time::OffsetDateTime::try_from_parsed_items
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
+offset_date_time::OffsetDateTime::try_from_parsed_items(p0);
+crate::offset_date_time::OffsetDateTime::try_from_parsed_items(p0);
+<offset_date_time::OffsetDateTime>::try_from_parsed_items(p0);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<offset_date_time::OffsetDateTime as std::fmt::Display>::fmt(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::fmt::Display>::fmt(p0, p1);
+<offset_date_time::OffsetDateTime>::fmt(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = & MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.eq(p1);
+<offset_date_time::OffsetDateTime as std::cmp::PartialEq>::eq(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::cmp::PartialEq>::eq(p0, p1);
+<offset_date_time::OffsetDateTime>::eq(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = & MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.partial_cmp(p1);
+<offset_date_time::OffsetDateTime as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<offset_date_time::OffsetDateTime>::partial_cmp(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = & MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.cmp(p1);
+<offset_date_time::OffsetDateTime as std::cmp::Ord>::cmp(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::cmp::Ord>::cmp(p0, p1);
+<offset_date_time::OffsetDateTime>::cmp(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<offset_date_time::OffsetDateTime as std::hash::Hash>::hash":{"H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<offset_date_time::OffsetDateTime as std::hash::Hash>::hash":{"H":["std::collections::hash_map::DefaultHasher","std::hash::SipHasher","std::boxed::Box<T, A>","std::hash::sip::Hasher<S>","<&mut H as std::hash::Hasher>","std::hash::SipHasher13"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // H
+p0.hash(p1);
+<offset_date_time::OffsetDateTime as std::hash::Hash>::hash(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::hash::Hash>::hash(p0, p1);
+<offset_date_time::OffsetDateTime>::hash(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::ops::Add<duration::Duration>>::add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.add(p1);
+<offset_date_time::OffsetDateTime as std::ops::Add<duration::Duration>>::add(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::ops::Add<duration::Duration>>::add(p0, p1);
+<offset_date_time::OffsetDateTime>::add(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::ops::Add<std::time::Duration>>::add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.add(p1);
+<offset_date_time::OffsetDateTime as std::ops::Add<std::time::Duration>>::add(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::ops::Add<std::time::Duration>>::add(p0, p1);
+<offset_date_time::OffsetDateTime>::add(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::ops::AddAssign<duration::Duration>>::add_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.add_assign(p1);
+<offset_date_time::OffsetDateTime as std::ops::AddAssign<duration::Duration>>::add_assign(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::ops::AddAssign<duration::Duration>>::add_assign(p0, p1);
+<offset_date_time::OffsetDateTime>::add_assign(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::ops::AddAssign<std::time::Duration>>::add_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.add_assign(p1);
+<offset_date_time::OffsetDateTime as std::ops::AddAssign<std::time::Duration>>::add_assign(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::ops::AddAssign<std::time::Duration>>::add_assign(p0, p1);
+<offset_date_time::OffsetDateTime>::add_assign(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::ops::Sub<duration::Duration>>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub(p1);
+<offset_date_time::OffsetDateTime as std::ops::Sub<duration::Duration>>::sub(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::ops::Sub<duration::Duration>>::sub(p0, p1);
+<offset_date_time::OffsetDateTime>::sub(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::ops::Sub<std::time::Duration>>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.sub(p1);
+<offset_date_time::OffsetDateTime as std::ops::Sub<std::time::Duration>>::sub(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::ops::Sub<std::time::Duration>>::sub(p0, p1);
+<offset_date_time::OffsetDateTime>::sub(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::ops::SubAssign<duration::Duration>>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub_assign(p1);
+<offset_date_time::OffsetDateTime as std::ops::SubAssign<duration::Duration>>::sub_assign(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::ops::SubAssign<duration::Duration>>::sub_assign(p0, p1);
+<offset_date_time::OffsetDateTime>::sub_assign(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::ops::SubAssign<std::time::Duration>>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.sub_assign(p1);
+<offset_date_time::OffsetDateTime as std::ops::SubAssign<std::time::Duration>>::sub_assign(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::ops::SubAssign<std::time::Duration>>::sub_assign(p0, p1);
+<offset_date_time::OffsetDateTime>::sub_assign(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::ops::Sub>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.sub(p1);
+<offset_date_time::OffsetDateTime as std::ops::Sub>::sub(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::ops::Sub>::sub(p0, p1);
+<offset_date_time::OffsetDateTime>::sub(p0, p1);
-----------------
src/offset_date_time.rs offset_date_time::<impl std::ops::Add<duration::Duration> for std::time::SystemTime>::add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::time::SystemTime
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.add(p1);
+offset_date_time::<impl std::ops::Add<duration::Duration> for std::time::SystemTime>::add(p0, p1);
+crate::offset_date_time::<impl std::ops::Add<duration::Duration> for std::time::SystemTime>::add(p0, p1);
+<std::time::SystemTime>::add(p0, p1);
-----------------
src/offset_date_time.rs offset_date_time::<impl std::ops::AddAssign<duration::Duration> for std::time::SystemTime>::add_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::time::SystemTime
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.add_assign(p1);
+offset_date_time::<impl std::ops::AddAssign<duration::Duration> for std::time::SystemTime>::add_assign(p0, p1);
+crate::offset_date_time::<impl std::ops::AddAssign<duration::Duration> for std::time::SystemTime>::add_assign(p0, p1);
+<std::time::SystemTime>::add_assign(p0, p1);
-----------------
src/offset_date_time.rs offset_date_time::<impl std::ops::Sub<duration::Duration> for std::time::SystemTime>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::time::SystemTime
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub(p1);
+offset_date_time::<impl std::ops::Sub<duration::Duration> for std::time::SystemTime>::sub(p0, p1);
+crate::offset_date_time::<impl std::ops::Sub<duration::Duration> for std::time::SystemTime>::sub(p0, p1);
+<std::time::SystemTime>::sub(p0, p1);
-----------------
src/offset_date_time.rs offset_date_time::<impl std::ops::SubAssign<duration::Duration> for std::time::SystemTime>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // std::time::SystemTime
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub_assign(p1);
+offset_date_time::<impl std::ops::SubAssign<duration::Duration> for std::time::SystemTime>::sub_assign(p0, p1);
+crate::offset_date_time::<impl std::ops::SubAssign<duration::Duration> for std::time::SystemTime>::sub_assign(p0, p1);
+<std::time::SystemTime>::sub_assign(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::ops::Sub<std::time::SystemTime>>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::SystemTime
+p0.sub(p1);
+<offset_date_time::OffsetDateTime as std::ops::Sub<std::time::SystemTime>>::sub(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::ops::Sub<std::time::SystemTime>>::sub(p0, p1);
+<offset_date_time::OffsetDateTime>::sub(p0, p1);
-----------------
src/offset_date_time.rs offset_date_time::<impl std::ops::Sub<offset_date_time::OffsetDateTime> for std::time::SystemTime>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::time::SystemTime
let mut p1 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.sub(p1);
+offset_date_time::<impl std::ops::Sub<offset_date_time::OffsetDateTime> for std::time::SystemTime>::sub(p0, p1);
+crate::offset_date_time::<impl std::ops::Sub<offset_date_time::OffsetDateTime> for std::time::SystemTime>::sub(p0, p1);
+<std::time::SystemTime>::sub(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::cmp::PartialEq<std::time::SystemTime>>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::time::SystemTime
+p0.eq(p1);
+<offset_date_time::OffsetDateTime as std::cmp::PartialEq<std::time::SystemTime>>::eq(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::cmp::PartialEq<std::time::SystemTime>>::eq(p0, p1);
+<offset_date_time::OffsetDateTime>::eq(p0, p1);
-----------------
src/offset_date_time.rs offset_date_time::<impl std::cmp::PartialEq<offset_date_time::OffsetDateTime> for std::time::SystemTime>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::time::SystemTime
let mut p1 = & MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.eq(p1);
+offset_date_time::<impl std::cmp::PartialEq<offset_date_time::OffsetDateTime> for std::time::SystemTime>::eq(p0, p1);
+crate::offset_date_time::<impl std::cmp::PartialEq<offset_date_time::OffsetDateTime> for std::time::SystemTime>::eq(p0, p1);
+<std::time::SystemTime>::eq(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::cmp::PartialOrd<std::time::SystemTime>>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::time::SystemTime
+p0.partial_cmp(p1);
+<offset_date_time::OffsetDateTime as std::cmp::PartialOrd<std::time::SystemTime>>::partial_cmp(p0, p1);
+crate::<offset_date_time::OffsetDateTime as std::cmp::PartialOrd<std::time::SystemTime>>::partial_cmp(p0, p1);
+<offset_date_time::OffsetDateTime>::partial_cmp(p0, p1);
-----------------
src/offset_date_time.rs offset_date_time::<impl std::cmp::PartialOrd<offset_date_time::OffsetDateTime> for std::time::SystemTime>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::time::SystemTime
let mut p1 = & MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+p0.partial_cmp(p1);
+offset_date_time::<impl std::cmp::PartialOrd<offset_date_time::OffsetDateTime> for std::time::SystemTime>::partial_cmp(p0, p1);
+crate::offset_date_time::<impl std::cmp::PartialOrd<offset_date_time::OffsetDateTime> for std::time::SystemTime>::partial_cmp(p0, p1);
+<std::time::SystemTime>::partial_cmp(p0, p1);
-----------------
src/offset_date_time.rs <offset_date_time::OffsetDateTime as std::convert::From<std::time::SystemTime>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::time::SystemTime
+<offset_date_time::OffsetDateTime as std::convert::From<std::time::SystemTime>>::from(p0);
+crate::<offset_date_time::OffsetDateTime as std::convert::From<std::time::SystemTime>>::from(p0);
+<offset_date_time::OffsetDateTime>::from(p0);
-----------------
src/offset_date_time.rs offset_date_time::<impl std::convert::From<offset_date_time::OffsetDateTime> for std::time::SystemTime>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+offset_date_time::<impl std::convert::From<offset_date_time::OffsetDateTime> for std::time::SystemTime>::from(p0);
+crate::offset_date_time::<impl std::convert::From<offset_date_time::OffsetDateTime> for std::time::SystemTime>::from(p0);
+<std::time::SystemTime>::from(p0);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<primitive_date_time::PrimitiveDateTime as std::fmt::Debug>::fmt(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::fmt::Debug>::fmt(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::fmt(p0, p1);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.clone();
+<primitive_date_time::PrimitiveDateTime as std::clone::Clone>::clone(p0);
+crate::<primitive_date_time::PrimitiveDateTime as std::clone::Clone>::clone(p0);
+<primitive_date_time::PrimitiveDateTime>::clone(p0);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = & MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.eq(p1);
+<primitive_date_time::PrimitiveDateTime as std::cmp::PartialEq>::eq(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::cmp::PartialEq>::eq(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::eq(p0, p1);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.assert_receiver_is_total_eq();
+<primitive_date_time::PrimitiveDateTime as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<primitive_date_time::PrimitiveDateTime as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<primitive_date_time::PrimitiveDateTime>::assert_receiver_is_total_eq(p0);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<primitive_date_time::PrimitiveDateTime as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<primitive_date_time::PrimitiveDateTime as std::hash::Hash>::hash":{"__H":["std::hash::SipHasher13","std::hash::SipHasher","<&mut H as std::hash::Hasher>","std::collections::hash_map::DefaultHasher","std::hash::sip::Hasher<S>","std::boxed::Box<T, A>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<primitive_date_time::PrimitiveDateTime as std::hash::Hash>::hash(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::hash::Hash>::hash(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::hash(p0, p1);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::new
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // date::Date
let mut p1 = MaybeUninit::uninit().assume_init(); // time_mod::Time
+primitive_date_time::PrimitiveDateTime::new(p0, p1);
+crate::primitive_date_time::PrimitiveDateTime::new(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::new(p0, p1);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::now
deps:{}
candidates:{}
+primitive_date_time::PrimitiveDateTime::now();
+crate::primitive_date_time::PrimitiveDateTime::now();
+<primitive_date_time::PrimitiveDateTime>::now();
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::unix_epoch
deps:{}
candidates:{}
+primitive_date_time::PrimitiveDateTime::unix_epoch();
+crate::primitive_date_time::PrimitiveDateTime::unix_epoch();
+<primitive_date_time::PrimitiveDateTime>::unix_epoch();
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::from_unix_timestamp
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
+primitive_date_time::PrimitiveDateTime::from_unix_timestamp(p0);
+crate::primitive_date_time::PrimitiveDateTime::from_unix_timestamp(p0);
+<primitive_date_time::PrimitiveDateTime>::from_unix_timestamp(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::timestamp
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.timestamp();
+primitive_date_time::PrimitiveDateTime::timestamp(p0);
+crate::primitive_date_time::PrimitiveDateTime::timestamp(p0);
+<primitive_date_time::PrimitiveDateTime>::timestamp(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::date
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.date();
+primitive_date_time::PrimitiveDateTime::date(p0);
+crate::primitive_date_time::PrimitiveDateTime::date(p0);
+<primitive_date_time::PrimitiveDateTime>::date(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::time
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.time();
+primitive_date_time::PrimitiveDateTime::time(p0);
+crate::primitive_date_time::PrimitiveDateTime::time(p0);
+<primitive_date_time::PrimitiveDateTime>::time(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::year
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.year();
+primitive_date_time::PrimitiveDateTime::year(p0);
+crate::primitive_date_time::PrimitiveDateTime::year(p0);
+<primitive_date_time::PrimitiveDateTime>::year(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::month
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.month();
+primitive_date_time::PrimitiveDateTime::month(p0);
+crate::primitive_date_time::PrimitiveDateTime::month(p0);
+<primitive_date_time::PrimitiveDateTime>::month(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::day
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.day();
+primitive_date_time::PrimitiveDateTime::day(p0);
+crate::primitive_date_time::PrimitiveDateTime::day(p0);
+<primitive_date_time::PrimitiveDateTime>::day(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::month_day
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.month_day();
+primitive_date_time::PrimitiveDateTime::month_day(p0);
+crate::primitive_date_time::PrimitiveDateTime::month_day(p0);
+<primitive_date_time::PrimitiveDateTime>::month_day(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::ordinal
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.ordinal();
+primitive_date_time::PrimitiveDateTime::ordinal(p0);
+crate::primitive_date_time::PrimitiveDateTime::ordinal(p0);
+<primitive_date_time::PrimitiveDateTime>::ordinal(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::iso_year_week
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.iso_year_week();
+primitive_date_time::PrimitiveDateTime::iso_year_week(p0);
+crate::primitive_date_time::PrimitiveDateTime::iso_year_week(p0);
+<primitive_date_time::PrimitiveDateTime>::iso_year_week(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::week
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.week();
+primitive_date_time::PrimitiveDateTime::week(p0);
+crate::primitive_date_time::PrimitiveDateTime::week(p0);
+<primitive_date_time::PrimitiveDateTime>::week(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::sunday_based_week
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.sunday_based_week();
+primitive_date_time::PrimitiveDateTime::sunday_based_week(p0);
+crate::primitive_date_time::PrimitiveDateTime::sunday_based_week(p0);
+<primitive_date_time::PrimitiveDateTime>::sunday_based_week(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::monday_based_week
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.monday_based_week();
+primitive_date_time::PrimitiveDateTime::monday_based_week(p0);
+crate::primitive_date_time::PrimitiveDateTime::monday_based_week(p0);
+<primitive_date_time::PrimitiveDateTime>::monday_based_week(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::weekday
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.weekday();
+primitive_date_time::PrimitiveDateTime::weekday(p0);
+crate::primitive_date_time::PrimitiveDateTime::weekday(p0);
+<primitive_date_time::PrimitiveDateTime>::weekday(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::hour
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.hour();
+primitive_date_time::PrimitiveDateTime::hour(p0);
+crate::primitive_date_time::PrimitiveDateTime::hour(p0);
+<primitive_date_time::PrimitiveDateTime>::hour(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::minute
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.minute();
+primitive_date_time::PrimitiveDateTime::minute(p0);
+crate::primitive_date_time::PrimitiveDateTime::minute(p0);
+<primitive_date_time::PrimitiveDateTime>::minute(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::second
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.second();
+primitive_date_time::PrimitiveDateTime::second(p0);
+crate::primitive_date_time::PrimitiveDateTime::second(p0);
+<primitive_date_time::PrimitiveDateTime>::second(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::millisecond
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.millisecond();
+primitive_date_time::PrimitiveDateTime::millisecond(p0);
+crate::primitive_date_time::PrimitiveDateTime::millisecond(p0);
+<primitive_date_time::PrimitiveDateTime>::millisecond(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::microsecond
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.microsecond();
+primitive_date_time::PrimitiveDateTime::microsecond(p0);
+crate::primitive_date_time::PrimitiveDateTime::microsecond(p0);
+<primitive_date_time::PrimitiveDateTime>::microsecond(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::nanosecond
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.nanosecond();
+primitive_date_time::PrimitiveDateTime::nanosecond(p0);
+crate::primitive_date_time::PrimitiveDateTime::nanosecond(p0);
+<primitive_date_time::PrimitiveDateTime>::nanosecond(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::using_offset
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
+p0.using_offset(p1);
+primitive_date_time::PrimitiveDateTime::using_offset(p0, p1);
+crate::primitive_date_time::PrimitiveDateTime::using_offset(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::using_offset(p0, p1);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::assume_offset
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
+p0.assume_offset(p1);
+primitive_date_time::PrimitiveDateTime::assume_offset(p0, p1);
+crate::primitive_date_time::PrimitiveDateTime::assume_offset(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::assume_offset(p0, p1);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::assume_utc
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.assume_utc();
+primitive_date_time::PrimitiveDateTime::assume_utc(p0);
+crate::primitive_date_time::PrimitiveDateTime::assume_utc(p0);
+<primitive_date_time::PrimitiveDateTime>::assume_utc(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::format
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"primitive_date_time::PrimitiveDateTime::format":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"primitive_date_time::PrimitiveDateTime::format":{"impl AsRef<str>":["std::ffi::CStr","std::boxed::Box<T, A>","std::vec::IntoIter<T, A>","std::borrow::Cow<'_, std::ffi::OsStr>","std::ffi::CString","std::slice::Iter<'_, T>","core::num::dec2flt::common::AsciiStr<'a>","std::vec::Drain<'a, T, A>","std::borrow::Cow<'_, T>","std::sync::Arc<T>","std::rc::Rc<T>","std::slice::IterMut<'_, T>","<&mut T as std::convert::AsRef<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+p0.format(p1);
+primitive_date_time::PrimitiveDateTime::format(p0, p1);
+crate::primitive_date_time::PrimitiveDateTime::format(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::format(p0, p1);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::lazy_format
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"primitive_date_time::PrimitiveDateTime::lazy_format":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"primitive_date_time::PrimitiveDateTime::lazy_format":{"impl AsRef<str>":["std::vec::Drain<'a, T, A>","std::vec::IntoIter<T, A>","std::slice::Iter<'_, T>","std::boxed::Box<T, A>","std::slice::IterMut<'_, T>","std::borrow::Cow<'_, std::ffi::OsStr>","std::ffi::CStr","std::borrow::Cow<'_, T>","std::ffi::CString","core::num::dec2flt::common::AsciiStr<'a>","std::sync::Arc<T>","std::rc::Rc<T>","<&mut T as std::convert::AsRef<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+p0.lazy_format(p1);
+primitive_date_time::PrimitiveDateTime::lazy_format(p0, p1);
+crate::primitive_date_time::PrimitiveDateTime::lazy_format(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::lazy_format(p0, p1);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::parse
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"primitive_date_time::PrimitiveDateTime::parse":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"primitive_date_time::PrimitiveDateTime::parse":{"impl AsRef<str>":["std::borrow::Cow<'_, std::ffi::OsStr>","std::slice::Iter<'_, T>","std::borrow::Cow<'_, T>","std::ffi::CStr","std::vec::Drain<'a, T, A>","std::slice::IterMut<'_, T>","std::vec::IntoIter<T, A>","core::num::dec2flt::common::AsciiStr<'a>","<&T as std::convert::AsRef<U>>","std::sync::Arc<T>","std::boxed::Box<T, A>","<&mut T as std::convert::AsRef<U>>","std::ffi::CString","std::rc::Rc<T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+primitive_date_time::PrimitiveDateTime::parse(p0, p1);
+crate::primitive_date_time::PrimitiveDateTime::parse(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::parse(p0, p1);
-----------------
src/primitive_date_time.rs primitive_date_time::PrimitiveDateTime::try_from_parsed_items
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
+primitive_date_time::PrimitiveDateTime::try_from_parsed_items(p0);
+crate::primitive_date_time::PrimitiveDateTime::try_from_parsed_items(p0);
+<primitive_date_time::PrimitiveDateTime>::try_from_parsed_items(p0);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<primitive_date_time::PrimitiveDateTime as std::fmt::Display>::fmt(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::fmt::Display>::fmt(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::fmt(p0, p1);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::ops::Add<duration::Duration>>::add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.add(p1);
+<primitive_date_time::PrimitiveDateTime as std::ops::Add<duration::Duration>>::add(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::ops::Add<duration::Duration>>::add(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::add(p0, p1);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::ops::Add<std::time::Duration>>::add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.add(p1);
+<primitive_date_time::PrimitiveDateTime as std::ops::Add<std::time::Duration>>::add(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::ops::Add<std::time::Duration>>::add(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::add(p0, p1);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::ops::AddAssign<duration::Duration>>::add_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.add_assign(p1);
+<primitive_date_time::PrimitiveDateTime as std::ops::AddAssign<duration::Duration>>::add_assign(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::ops::AddAssign<duration::Duration>>::add_assign(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::add_assign(p0, p1);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::ops::AddAssign<std::time::Duration>>::add_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.add_assign(p1);
+<primitive_date_time::PrimitiveDateTime as std::ops::AddAssign<std::time::Duration>>::add_assign(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::ops::AddAssign<std::time::Duration>>::add_assign(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::add_assign(p0, p1);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::ops::Sub<duration::Duration>>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub(p1);
+<primitive_date_time::PrimitiveDateTime as std::ops::Sub<duration::Duration>>::sub(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::ops::Sub<duration::Duration>>::sub(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::sub(p0, p1);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::ops::Sub<std::time::Duration>>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.sub(p1);
+<primitive_date_time::PrimitiveDateTime as std::ops::Sub<std::time::Duration>>::sub(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::ops::Sub<std::time::Duration>>::sub(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::sub(p0, p1);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::ops::SubAssign<duration::Duration>>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub_assign(p1);
+<primitive_date_time::PrimitiveDateTime as std::ops::SubAssign<duration::Duration>>::sub_assign(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::ops::SubAssign<duration::Duration>>::sub_assign(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::sub_assign(p0, p1);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::ops::SubAssign<std::time::Duration>>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.sub_assign(p1);
+<primitive_date_time::PrimitiveDateTime as std::ops::SubAssign<std::time::Duration>>::sub_assign(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::ops::SubAssign<std::time::Duration>>::sub_assign(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::sub_assign(p0, p1);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::ops::Sub>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.sub(p1);
+<primitive_date_time::PrimitiveDateTime as std::ops::Sub>::sub(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::ops::Sub>::sub(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::sub(p0, p1);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::ops::Sub<std::time::SystemTime>>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::SystemTime
+p0.sub(p1);
+<primitive_date_time::PrimitiveDateTime as std::ops::Sub<std::time::SystemTime>>::sub(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::ops::Sub<std::time::SystemTime>>::sub(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::sub(p0, p1);
-----------------
src/primitive_date_time.rs primitive_date_time::<impl std::ops::Sub<primitive_date_time::PrimitiveDateTime> for std::time::SystemTime>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::time::SystemTime
let mut p1 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.sub(p1);
+primitive_date_time::<impl std::ops::Sub<primitive_date_time::PrimitiveDateTime> for std::time::SystemTime>::sub(p0, p1);
+crate::primitive_date_time::<impl std::ops::Sub<primitive_date_time::PrimitiveDateTime> for std::time::SystemTime>::sub(p0, p1);
+<std::time::SystemTime>::sub(p0, p1);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = & MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.partial_cmp(p1);
+<primitive_date_time::PrimitiveDateTime as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::partial_cmp(p0, p1);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::cmp::PartialEq<std::time::SystemTime>>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::time::SystemTime
+p0.eq(p1);
+<primitive_date_time::PrimitiveDateTime as std::cmp::PartialEq<std::time::SystemTime>>::eq(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::cmp::PartialEq<std::time::SystemTime>>::eq(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::eq(p0, p1);
-----------------
src/primitive_date_time.rs primitive_date_time::<impl std::cmp::PartialEq<primitive_date_time::PrimitiveDateTime> for std::time::SystemTime>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::time::SystemTime
let mut p1 = & MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.eq(p1);
+primitive_date_time::<impl std::cmp::PartialEq<primitive_date_time::PrimitiveDateTime> for std::time::SystemTime>::eq(p0, p1);
+crate::primitive_date_time::<impl std::cmp::PartialEq<primitive_date_time::PrimitiveDateTime> for std::time::SystemTime>::eq(p0, p1);
+<std::time::SystemTime>::eq(p0, p1);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::cmp::PartialOrd<std::time::SystemTime>>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::time::SystemTime
+p0.partial_cmp(p1);
+<primitive_date_time::PrimitiveDateTime as std::cmp::PartialOrd<std::time::SystemTime>>::partial_cmp(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::cmp::PartialOrd<std::time::SystemTime>>::partial_cmp(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::partial_cmp(p0, p1);
-----------------
src/primitive_date_time.rs primitive_date_time::<impl std::cmp::PartialOrd<primitive_date_time::PrimitiveDateTime> for std::time::SystemTime>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::time::SystemTime
let mut p1 = & MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.partial_cmp(p1);
+primitive_date_time::<impl std::cmp::PartialOrd<primitive_date_time::PrimitiveDateTime> for std::time::SystemTime>::partial_cmp(p0, p1);
+crate::primitive_date_time::<impl std::cmp::PartialOrd<primitive_date_time::PrimitiveDateTime> for std::time::SystemTime>::partial_cmp(p0, p1);
+<std::time::SystemTime>::partial_cmp(p0, p1);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
let mut p1 = & MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+p0.cmp(p1);
+<primitive_date_time::PrimitiveDateTime as std::cmp::Ord>::cmp(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as std::cmp::Ord>::cmp(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::cmp(p0, p1);
-----------------
src/primitive_date_time.rs <primitive_date_time::PrimitiveDateTime as std::convert::From<std::time::SystemTime>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::time::SystemTime
+<primitive_date_time::PrimitiveDateTime as std::convert::From<std::time::SystemTime>>::from(p0);
+crate::<primitive_date_time::PrimitiveDateTime as std::convert::From<std::time::SystemTime>>::from(p0);
+<primitive_date_time::PrimitiveDateTime>::from(p0);
-----------------
src/primitive_date_time.rs primitive_date_time::<impl std::convert::From<primitive_date_time::PrimitiveDateTime> for std::time::SystemTime>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // primitive_date_time::PrimitiveDateTime
+primitive_date_time::<impl std::convert::From<primitive_date_time::PrimitiveDateTime> for std::time::SystemTime>::from(p0);
+crate::primitive_date_time::<impl std::convert::From<primitive_date_time::PrimitiveDateTime> for std::time::SystemTime>::from(p0);
+<std::time::SystemTime>::from(p0);
-----------------
src/sign.rs <sign::Sign as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.clone();
+<sign::Sign as std::clone::Clone>::clone(p0);
+crate::<sign::Sign as std::clone::Clone>::clone(p0);
+<sign::Sign>::clone(p0);
-----------------
src/sign.rs <sign::Sign as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // sign::Sign
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<sign::Sign as std::fmt::Debug>::fmt(p0, p1);
+crate::<sign::Sign as std::fmt::Debug>::fmt(p0, p1);
+<sign::Sign>::fmt(p0, p1);
-----------------
src/sign.rs <sign::Sign as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.assert_receiver_is_total_eq();
+<sign::Sign as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<sign::Sign as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<sign::Sign>::assert_receiver_is_total_eq(p0);
-----------------
src/sign.rs <sign::Sign as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<sign::Sign as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<sign::Sign as std::hash::Hash>::hash":{"__H":["std::hash::sip::Hasher<S>","std::collections::hash_map::DefaultHasher","std::boxed::Box<T, A>","<&mut H as std::hash::Hasher>","std::hash::SipHasher","std::hash::SipHasher13"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // sign::Sign
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<sign::Sign as std::hash::Hash>::hash(p0, p1);
+crate::<sign::Sign as std::hash::Hash>::hash(p0, p1);
+<sign::Sign>::hash(p0, p1);
-----------------
src/sign.rs <sign::Sign as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // sign::Sign
let mut p1 = & MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.eq(p1);
+<sign::Sign as std::cmp::PartialEq>::eq(p0, p1);
+crate::<sign::Sign as std::cmp::PartialEq>::eq(p0, p1);
+<sign::Sign>::eq(p0, p1);
-----------------
src/sign.rs <sign::Sign as std::default::Default>::default
deps:{}
candidates:{}
+<sign::Sign as std::default::Default>::default();
+crate::<sign::Sign as std::default::Default>::default();
+<sign::Sign>::default();
-----------------
src/sign.rs <sign::Sign as std::ops::Mul<i8>>::mul
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // sign::Sign
let mut p1 = 0i8; // None+i8
+p0.mul(p1);
+<sign::Sign as std::ops::Mul<i8>>::mul(p0, p1);
+crate::<sign::Sign as std::ops::Mul<i8>>::mul(p0, p1);
+<sign::Sign>::mul(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::Mul<sign::Sign> for i8>::mul
deps:{}
candidates:{}
let mut p0 = 0i8; // None+i8
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.mul(p1);
+sign::<impl std::ops::Mul<sign::Sign> for i8>::mul(p0, p1);
+crate::sign::<impl std::ops::Mul<sign::Sign> for i8>::mul(p0, p1);
+<i8>::mul(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::MulAssign<sign::Sign> for i8>::mul_assign
deps:{}
candidates:{}
let mut p0 = &mut 0i8; // None+i8
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.mul_assign(p1);
+sign::<impl std::ops::MulAssign<sign::Sign> for i8>::mul_assign(p0, p1);
+crate::sign::<impl std::ops::MulAssign<sign::Sign> for i8>::mul_assign(p0, p1);
+<i8>::mul_assign(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::Div<sign::Sign> for i8>::div
deps:{}
candidates:{}
let mut p0 = 0i8; // None+i8
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.div(p1);
+sign::<impl std::ops::Div<sign::Sign> for i8>::div(p0, p1);
+crate::sign::<impl std::ops::Div<sign::Sign> for i8>::div(p0, p1);
+<i8>::div(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::DivAssign<sign::Sign> for i8>::div_assign
deps:{}
candidates:{}
let mut p0 = &mut 0i8; // None+i8
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.div_assign(p1);
+sign::<impl std::ops::DivAssign<sign::Sign> for i8>::div_assign(p0, p1);
+crate::sign::<impl std::ops::DivAssign<sign::Sign> for i8>::div_assign(p0, p1);
+<i8>::div_assign(p0, p1);
-----------------
src/sign.rs <sign::Sign as std::ops::Mul<i16>>::mul
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // sign::Sign
let mut p1 = 0i16; // None+i16
+p0.mul(p1);
+<sign::Sign as std::ops::Mul<i16>>::mul(p0, p1);
+crate::<sign::Sign as std::ops::Mul<i16>>::mul(p0, p1);
+<sign::Sign>::mul(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::Mul<sign::Sign> for i16>::mul
deps:{}
candidates:{}
let mut p0 = 0i16; // None+i16
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.mul(p1);
+sign::<impl std::ops::Mul<sign::Sign> for i16>::mul(p0, p1);
+crate::sign::<impl std::ops::Mul<sign::Sign> for i16>::mul(p0, p1);
+<i16>::mul(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::MulAssign<sign::Sign> for i16>::mul_assign
deps:{}
candidates:{}
let mut p0 = &mut 0i16; // None+i16
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.mul_assign(p1);
+sign::<impl std::ops::MulAssign<sign::Sign> for i16>::mul_assign(p0, p1);
+crate::sign::<impl std::ops::MulAssign<sign::Sign> for i16>::mul_assign(p0, p1);
+<i16>::mul_assign(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::Div<sign::Sign> for i16>::div
deps:{}
candidates:{}
let mut p0 = 0i16; // None+i16
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.div(p1);
+sign::<impl std::ops::Div<sign::Sign> for i16>::div(p0, p1);
+crate::sign::<impl std::ops::Div<sign::Sign> for i16>::div(p0, p1);
+<i16>::div(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::DivAssign<sign::Sign> for i16>::div_assign
deps:{}
candidates:{}
let mut p0 = &mut 0i16; // None+i16
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.div_assign(p1);
+sign::<impl std::ops::DivAssign<sign::Sign> for i16>::div_assign(p0, p1);
+crate::sign::<impl std::ops::DivAssign<sign::Sign> for i16>::div_assign(p0, p1);
+<i16>::div_assign(p0, p1);
-----------------
src/sign.rs <sign::Sign as std::ops::Mul<i32>>::mul
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // sign::Sign
let mut p1 = 0i32; // None+i32
+p0.mul(p1);
+<sign::Sign as std::ops::Mul<i32>>::mul(p0, p1);
+crate::<sign::Sign as std::ops::Mul<i32>>::mul(p0, p1);
+<sign::Sign>::mul(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::Mul<sign::Sign> for i32>::mul
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.mul(p1);
+sign::<impl std::ops::Mul<sign::Sign> for i32>::mul(p0, p1);
+crate::sign::<impl std::ops::Mul<sign::Sign> for i32>::mul(p0, p1);
+<i32>::mul(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::MulAssign<sign::Sign> for i32>::mul_assign
deps:{}
candidates:{}
let mut p0 = &mut 0i32; // None+i32
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.mul_assign(p1);
+sign::<impl std::ops::MulAssign<sign::Sign> for i32>::mul_assign(p0, p1);
+crate::sign::<impl std::ops::MulAssign<sign::Sign> for i32>::mul_assign(p0, p1);
+<i32>::mul_assign(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::Div<sign::Sign> for i32>::div
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.div(p1);
+sign::<impl std::ops::Div<sign::Sign> for i32>::div(p0, p1);
+crate::sign::<impl std::ops::Div<sign::Sign> for i32>::div(p0, p1);
+<i32>::div(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::DivAssign<sign::Sign> for i32>::div_assign
deps:{}
candidates:{}
let mut p0 = &mut 0i32; // None+i32
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.div_assign(p1);
+sign::<impl std::ops::DivAssign<sign::Sign> for i32>::div_assign(p0, p1);
+crate::sign::<impl std::ops::DivAssign<sign::Sign> for i32>::div_assign(p0, p1);
+<i32>::div_assign(p0, p1);
-----------------
src/sign.rs <sign::Sign as std::ops::Mul<i64>>::mul
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // sign::Sign
let mut p1 = 0i64; // None+i64
+p0.mul(p1);
+<sign::Sign as std::ops::Mul<i64>>::mul(p0, p1);
+crate::<sign::Sign as std::ops::Mul<i64>>::mul(p0, p1);
+<sign::Sign>::mul(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::Mul<sign::Sign> for i64>::mul
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.mul(p1);
+sign::<impl std::ops::Mul<sign::Sign> for i64>::mul(p0, p1);
+crate::sign::<impl std::ops::Mul<sign::Sign> for i64>::mul(p0, p1);
+<i64>::mul(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::MulAssign<sign::Sign> for i64>::mul_assign
deps:{}
candidates:{}
let mut p0 = &mut 0i64; // None+i64
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.mul_assign(p1);
+sign::<impl std::ops::MulAssign<sign::Sign> for i64>::mul_assign(p0, p1);
+crate::sign::<impl std::ops::MulAssign<sign::Sign> for i64>::mul_assign(p0, p1);
+<i64>::mul_assign(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::Div<sign::Sign> for i64>::div
deps:{}
candidates:{}
let mut p0 = 0i64; // None+i64
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.div(p1);
+sign::<impl std::ops::Div<sign::Sign> for i64>::div(p0, p1);
+crate::sign::<impl std::ops::Div<sign::Sign> for i64>::div(p0, p1);
+<i64>::div(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::DivAssign<sign::Sign> for i64>::div_assign
deps:{}
candidates:{}
let mut p0 = &mut 0i64; // None+i64
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.div_assign(p1);
+sign::<impl std::ops::DivAssign<sign::Sign> for i64>::div_assign(p0, p1);
+crate::sign::<impl std::ops::DivAssign<sign::Sign> for i64>::div_assign(p0, p1);
+<i64>::div_assign(p0, p1);
-----------------
src/sign.rs <sign::Sign as std::ops::Mul<i128>>::mul
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // sign::Sign
let mut p1 = 0i128; // None+i128
+p0.mul(p1);
+<sign::Sign as std::ops::Mul<i128>>::mul(p0, p1);
+crate::<sign::Sign as std::ops::Mul<i128>>::mul(p0, p1);
+<sign::Sign>::mul(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::Mul<sign::Sign> for i128>::mul
deps:{}
candidates:{}
let mut p0 = 0i128; // None+i128
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.mul(p1);
+sign::<impl std::ops::Mul<sign::Sign> for i128>::mul(p0, p1);
+crate::sign::<impl std::ops::Mul<sign::Sign> for i128>::mul(p0, p1);
+<i128>::mul(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::MulAssign<sign::Sign> for i128>::mul_assign
deps:{}
candidates:{}
let mut p0 = &mut 0i128; // None+i128
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.mul_assign(p1);
+sign::<impl std::ops::MulAssign<sign::Sign> for i128>::mul_assign(p0, p1);
+crate::sign::<impl std::ops::MulAssign<sign::Sign> for i128>::mul_assign(p0, p1);
+<i128>::mul_assign(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::Div<sign::Sign> for i128>::div
deps:{}
candidates:{}
let mut p0 = 0i128; // None+i128
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.div(p1);
+sign::<impl std::ops::Div<sign::Sign> for i128>::div(p0, p1);
+crate::sign::<impl std::ops::Div<sign::Sign> for i128>::div(p0, p1);
+<i128>::div(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::DivAssign<sign::Sign> for i128>::div_assign
deps:{}
candidates:{}
let mut p0 = &mut 0i128; // None+i128
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.div_assign(p1);
+sign::<impl std::ops::DivAssign<sign::Sign> for i128>::div_assign(p0, p1);
+crate::sign::<impl std::ops::DivAssign<sign::Sign> for i128>::div_assign(p0, p1);
+<i128>::div_assign(p0, p1);
-----------------
src/sign.rs <sign::Sign as std::ops::Mul<f32>>::mul
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // sign::Sign
let mut p1 = 0f32; // None+f32
+p0.mul(p1);
+<sign::Sign as std::ops::Mul<f32>>::mul(p0, p1);
+crate::<sign::Sign as std::ops::Mul<f32>>::mul(p0, p1);
+<sign::Sign>::mul(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::Mul<sign::Sign> for f32>::mul
deps:{}
candidates:{}
let mut p0 = 0f32; // None+f32
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.mul(p1);
+sign::<impl std::ops::Mul<sign::Sign> for f32>::mul(p0, p1);
+crate::sign::<impl std::ops::Mul<sign::Sign> for f32>::mul(p0, p1);
+<f32>::mul(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::MulAssign<sign::Sign> for f32>::mul_assign
deps:{}
candidates:{}
let mut p0 = &mut 0f32; // None+f32
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.mul_assign(p1);
+sign::<impl std::ops::MulAssign<sign::Sign> for f32>::mul_assign(p0, p1);
+crate::sign::<impl std::ops::MulAssign<sign::Sign> for f32>::mul_assign(p0, p1);
+<f32>::mul_assign(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::Div<sign::Sign> for f32>::div
deps:{}
candidates:{}
let mut p0 = 0f32; // None+f32
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.div(p1);
+sign::<impl std::ops::Div<sign::Sign> for f32>::div(p0, p1);
+crate::sign::<impl std::ops::Div<sign::Sign> for f32>::div(p0, p1);
+<f32>::div(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::DivAssign<sign::Sign> for f32>::div_assign
deps:{}
candidates:{}
let mut p0 = &mut 0f32; // None+f32
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.div_assign(p1);
+sign::<impl std::ops::DivAssign<sign::Sign> for f32>::div_assign(p0, p1);
+crate::sign::<impl std::ops::DivAssign<sign::Sign> for f32>::div_assign(p0, p1);
+<f32>::div_assign(p0, p1);
-----------------
src/sign.rs <sign::Sign as std::ops::Mul<f64>>::mul
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // sign::Sign
let mut p1 = 0f64; // None+f64
+p0.mul(p1);
+<sign::Sign as std::ops::Mul<f64>>::mul(p0, p1);
+crate::<sign::Sign as std::ops::Mul<f64>>::mul(p0, p1);
+<sign::Sign>::mul(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::Mul<sign::Sign> for f64>::mul
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.mul(p1);
+sign::<impl std::ops::Mul<sign::Sign> for f64>::mul(p0, p1);
+crate::sign::<impl std::ops::Mul<sign::Sign> for f64>::mul(p0, p1);
+<f64>::mul(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::MulAssign<sign::Sign> for f64>::mul_assign
deps:{}
candidates:{}
let mut p0 = &mut 0f64; // None+f64
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.mul_assign(p1);
+sign::<impl std::ops::MulAssign<sign::Sign> for f64>::mul_assign(p0, p1);
+crate::sign::<impl std::ops::MulAssign<sign::Sign> for f64>::mul_assign(p0, p1);
+<f64>::mul_assign(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::Div<sign::Sign> for f64>::div
deps:{}
candidates:{}
let mut p0 = 0f64; // None+f64
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.div(p1);
+sign::<impl std::ops::Div<sign::Sign> for f64>::div(p0, p1);
+crate::sign::<impl std::ops::Div<sign::Sign> for f64>::div(p0, p1);
+<f64>::div(p0, p1);
-----------------
src/sign.rs sign::<impl std::ops::DivAssign<sign::Sign> for f64>::div_assign
deps:{}
candidates:{}
let mut p0 = &mut 0f64; // None+f64
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.div_assign(p1);
+sign::<impl std::ops::DivAssign<sign::Sign> for f64>::div_assign(p0, p1);
+crate::sign::<impl std::ops::DivAssign<sign::Sign> for f64>::div_assign(p0, p1);
+<f64>::div_assign(p0, p1);
-----------------
src/sign.rs <sign::Sign as std::ops::Mul>::mul
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // sign::Sign
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.mul(p1);
+<sign::Sign as std::ops::Mul>::mul(p0, p1);
+crate::<sign::Sign as std::ops::Mul>::mul(p0, p1);
+<sign::Sign>::mul(p0, p1);
-----------------
src/sign.rs <sign::Sign as std::ops::MulAssign>::mul_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // sign::Sign
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.mul_assign(p1);
+<sign::Sign as std::ops::MulAssign>::mul_assign(p0, p1);
+crate::<sign::Sign as std::ops::MulAssign>::mul_assign(p0, p1);
+<sign::Sign>::mul_assign(p0, p1);
-----------------
src/sign.rs <sign::Sign as std::ops::Div>::div
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // sign::Sign
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.div(p1);
+<sign::Sign as std::ops::Div>::div(p0, p1);
+crate::<sign::Sign as std::ops::Div>::div(p0, p1);
+<sign::Sign>::div(p0, p1);
-----------------
src/sign.rs <sign::Sign as std::ops::DivAssign>::div_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // sign::Sign
let mut p1 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.div_assign(p1);
+<sign::Sign as std::ops::DivAssign>::div_assign(p0, p1);
+crate::<sign::Sign as std::ops::DivAssign>::div_assign(p0, p1);
+<sign::Sign>::div_assign(p0, p1);
-----------------
src/sign.rs <sign::Sign as std::ops::Neg>::neg
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.neg();
+<sign::Sign as std::ops::Neg>::neg(p0);
+crate::<sign::Sign as std::ops::Neg>::neg(p0);
+<sign::Sign>::neg(p0);
-----------------
src/sign.rs <sign::Sign as std::ops::Not>::not
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.not();
+<sign::Sign as std::ops::Not>::not(p0);
+crate::<sign::Sign as std::ops::Not>::not(p0);
+<sign::Sign>::not(p0);
-----------------
src/sign.rs sign::Sign::negate
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.negate();
+sign::Sign::negate(p0);
+crate::sign::Sign::negate(p0);
+<sign::Sign>::negate(p0);
-----------------
src/sign.rs sign::Sign::is_positive
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.is_positive();
+sign::Sign::is_positive(p0);
+crate::sign::Sign::is_positive(p0);
+<sign::Sign>::is_positive(p0);
-----------------
src/sign.rs sign::Sign::is_negative
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.is_negative();
+sign::Sign::is_negative(p0);
+crate::sign::Sign::is_negative(p0);
+<sign::Sign>::is_negative(p0);
-----------------
src/sign.rs sign::Sign::is_zero
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // sign::Sign
+p0.is_zero();
+sign::Sign::is_zero(p0);
+crate::sign::Sign::is_zero(p0);
+<sign::Sign>::is_zero(p0);
-----------------
src/time_mod.rs <time_mod::Time as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<time_mod::Time as std::fmt::Debug>::fmt(p0, p1);
+crate::<time_mod::Time as std::fmt::Debug>::fmt(p0, p1);
+<time_mod::Time>::fmt(p0, p1);
-----------------
src/time_mod.rs <time_mod::Time as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // time_mod::Time
+p0.clone();
+<time_mod::Time as std::clone::Clone>::clone(p0);
+crate::<time_mod::Time as std::clone::Clone>::clone(p0);
+<time_mod::Time>::clone(p0);
-----------------
src/time_mod.rs <time_mod::Time as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p1 = & MaybeUninit::uninit().assume_init(); // time_mod::Time
+p0.eq(p1);
+<time_mod::Time as std::cmp::PartialEq>::eq(p0, p1);
+crate::<time_mod::Time as std::cmp::PartialEq>::eq(p0, p1);
+<time_mod::Time>::eq(p0, p1);
-----------------
src/time_mod.rs <time_mod::Time as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // time_mod::Time
+p0.assert_receiver_is_total_eq();
+<time_mod::Time as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<time_mod::Time as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<time_mod::Time>::assert_receiver_is_total_eq(p0);
-----------------
src/time_mod.rs <time_mod::Time as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<time_mod::Time as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<time_mod::Time as std::hash::Hash>::hash":{"__H":["<&mut H as std::hash::Hasher>","std::hash::sip::Hasher<S>","std::boxed::Box<T, A>","std::collections::hash_map::DefaultHasher","std::hash::SipHasher13","std::hash::SipHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<time_mod::Time as std::hash::Hash>::hash(p0, p1);
+crate::<time_mod::Time as std::hash::Hash>::hash(p0, p1);
+<time_mod::Time>::hash(p0, p1);
-----------------
src/time_mod.rs time_mod::Time::midnight
deps:{}
candidates:{}
+time_mod::Time::midnight();
+crate::time_mod::Time::midnight();
+<time_mod::Time>::midnight();
-----------------
src/time_mod.rs time_mod::Time::try_from_hms
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
let mut p1 = 0u8; // None+u8
let mut p2 = 0u8; // None+u8
+time_mod::Time::try_from_hms(p0, p1, p2);
+crate::time_mod::Time::try_from_hms(p0, p1, p2);
+<time_mod::Time>::try_from_hms(p0, p1, p2);
-----------------
src/time_mod.rs time_mod::Time::try_from_hms_milli
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
let mut p1 = 0u8; // None+u8
let mut p2 = 0u8; // None+u8
let mut p3 = 0u16; // None+u16
+time_mod::Time::try_from_hms_milli(p0, p1, p2, p3);
+crate::time_mod::Time::try_from_hms_milli(p0, p1, p2, p3);
+<time_mod::Time>::try_from_hms_milli(p0, p1, p2, p3);
-----------------
src/time_mod.rs time_mod::Time::try_from_hms_micro
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
let mut p1 = 0u8; // None+u8
let mut p2 = 0u8; // None+u8
let mut p3 = 0u32; // None+u32
+time_mod::Time::try_from_hms_micro(p0, p1, p2, p3);
+crate::time_mod::Time::try_from_hms_micro(p0, p1, p2, p3);
+<time_mod::Time>::try_from_hms_micro(p0, p1, p2, p3);
-----------------
src/time_mod.rs time_mod::Time::try_from_hms_nano
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
let mut p1 = 0u8; // None+u8
let mut p2 = 0u8; // None+u8
let mut p3 = 0u32; // None+u32
+time_mod::Time::try_from_hms_nano(p0, p1, p2, p3);
+crate::time_mod::Time::try_from_hms_nano(p0, p1, p2, p3);
+<time_mod::Time>::try_from_hms_nano(p0, p1, p2, p3);
-----------------
src/time_mod.rs time_mod::Time::now
deps:{}
candidates:{}
+time_mod::Time::now();
+crate::time_mod::Time::now();
+<time_mod::Time>::now();
-----------------
src/time_mod.rs time_mod::Time::hour
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // time_mod::Time
+p0.hour();
+time_mod::Time::hour(p0);
+crate::time_mod::Time::hour(p0);
+<time_mod::Time>::hour(p0);
-----------------
src/time_mod.rs time_mod::Time::minute
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // time_mod::Time
+p0.minute();
+time_mod::Time::minute(p0);
+crate::time_mod::Time::minute(p0);
+<time_mod::Time>::minute(p0);
-----------------
src/time_mod.rs time_mod::Time::second
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // time_mod::Time
+p0.second();
+time_mod::Time::second(p0);
+crate::time_mod::Time::second(p0);
+<time_mod::Time>::second(p0);
-----------------
src/time_mod.rs time_mod::Time::millisecond
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // time_mod::Time
+p0.millisecond();
+time_mod::Time::millisecond(p0);
+crate::time_mod::Time::millisecond(p0);
+<time_mod::Time>::millisecond(p0);
-----------------
src/time_mod.rs time_mod::Time::microsecond
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // time_mod::Time
+p0.microsecond();
+time_mod::Time::microsecond(p0);
+crate::time_mod::Time::microsecond(p0);
+<time_mod::Time>::microsecond(p0);
-----------------
src/time_mod.rs time_mod::Time::nanosecond
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // time_mod::Time
+p0.nanosecond();
+time_mod::Time::nanosecond(p0);
+crate::time_mod::Time::nanosecond(p0);
+<time_mod::Time>::nanosecond(p0);
-----------------
src/time_mod.rs time_mod::Time::nanoseconds_since_midnight
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // time_mod::Time
+p0.nanoseconds_since_midnight();
+time_mod::Time::nanoseconds_since_midnight(p0);
+crate::time_mod::Time::nanoseconds_since_midnight(p0);
+<time_mod::Time>::nanoseconds_since_midnight(p0);
-----------------
src/time_mod.rs time_mod::Time::from_nanoseconds_since_midnight
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
+time_mod::Time::from_nanoseconds_since_midnight(p0);
+crate::time_mod::Time::from_nanoseconds_since_midnight(p0);
+<time_mod::Time>::from_nanoseconds_since_midnight(p0);
-----------------
src/time_mod.rs time_mod::Time::format
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"time_mod::Time::format":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"time_mod::Time::format":{"impl AsRef<str>":["std::slice::Iter<'_, T>","std::boxed::Box<T, A>","std::vec::IntoIter<T, A>","std::ffi::CString","<&T as std::convert::AsRef<U>>","std::borrow::Cow<'_, T>","core::num::dec2flt::common::AsciiStr<'a>","std::sync::Arc<T>","std::rc::Rc<T>","std::slice::IterMut<'_, T>","<&mut T as std::convert::AsRef<U>>","std::ffi::CStr","std::vec::Drain<'a, T, A>","std::borrow::Cow<'_, std::ffi::OsStr>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+p0.format(p1);
+time_mod::Time::format(p0, p1);
+crate::time_mod::Time::format(p0, p1);
+<time_mod::Time>::format(p0, p1);
-----------------
src/time_mod.rs time_mod::Time::lazy_format
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"time_mod::Time::lazy_format":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"time_mod::Time::lazy_format":{"impl AsRef<str>":["<&mut T as std::convert::AsRef<U>>","std::sync::Arc<T>","std::ffi::CStr","std::vec::Drain<'a, T, A>","std::slice::Iter<'_, T>","std::borrow::Cow<'_, std::ffi::OsStr>","std::boxed::Box<T, A>","std::rc::Rc<T>","std::vec::IntoIter<T, A>","core::num::dec2flt::common::AsciiStr<'a>","std::ffi::CString","std::borrow::Cow<'_, T>","std::slice::IterMut<'_, T>","<&T as std::convert::AsRef<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+p0.lazy_format(p1);
+time_mod::Time::lazy_format(p0, p1);
+crate::time_mod::Time::lazy_format(p0, p1);
+<time_mod::Time>::lazy_format(p0, p1);
-----------------
src/time_mod.rs time_mod::Time::parse
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"time_mod::Time::parse":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"time_mod::Time::parse":{"impl AsRef<str>":["std::vec::IntoIter<T, A>","std::slice::Iter<'_, T>","std::ffi::CString","std::ffi::CStr","<&T as std::convert::AsRef<U>>","<&mut T as std::convert::AsRef<U>>","std::slice::IterMut<'_, T>","std::vec::Drain<'a, T, A>","std::sync::Arc<T>","core::num::dec2flt::common::AsciiStr<'a>","std::borrow::Cow<'_, T>","std::boxed::Box<T, A>","std::borrow::Cow<'_, std::ffi::OsStr>","std::rc::Rc<T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+time_mod::Time::parse(p0, p1);
+crate::time_mod::Time::parse(p0, p1);
+<time_mod::Time>::parse(p0, p1);
-----------------
src/time_mod.rs time_mod::Time::try_from_parsed_items
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
+time_mod::Time::try_from_parsed_items(p0);
+crate::time_mod::Time::try_from_parsed_items(p0);
+<time_mod::Time>::try_from_parsed_items(p0);
-----------------
src/time_mod.rs <time_mod::Time as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<time_mod::Time as std::fmt::Display>::fmt(p0, p1);
+crate::<time_mod::Time as std::fmt::Display>::fmt(p0, p1);
+<time_mod::Time>::fmt(p0, p1);
-----------------
src/time_mod.rs <time_mod::Time as std::ops::Add<duration::Duration>>::add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.add(p1);
+<time_mod::Time as std::ops::Add<duration::Duration>>::add(p0, p1);
+crate::<time_mod::Time as std::ops::Add<duration::Duration>>::add(p0, p1);
+<time_mod::Time>::add(p0, p1);
-----------------
src/time_mod.rs <time_mod::Time as std::ops::Add<std::time::Duration>>::add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.add(p1);
+<time_mod::Time as std::ops::Add<std::time::Duration>>::add(p0, p1);
+crate::<time_mod::Time as std::ops::Add<std::time::Duration>>::add(p0, p1);
+<time_mod::Time>::add(p0, p1);
-----------------
src/time_mod.rs <time_mod::Time as std::ops::AddAssign<duration::Duration>>::add_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.add_assign(p1);
+<time_mod::Time as std::ops::AddAssign<duration::Duration>>::add_assign(p0, p1);
+crate::<time_mod::Time as std::ops::AddAssign<duration::Duration>>::add_assign(p0, p1);
+<time_mod::Time>::add_assign(p0, p1);
-----------------
src/time_mod.rs <time_mod::Time as std::ops::AddAssign<std::time::Duration>>::add_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.add_assign(p1);
+<time_mod::Time as std::ops::AddAssign<std::time::Duration>>::add_assign(p0, p1);
+crate::<time_mod::Time as std::ops::AddAssign<std::time::Duration>>::add_assign(p0, p1);
+<time_mod::Time>::add_assign(p0, p1);
-----------------
src/time_mod.rs <time_mod::Time as std::ops::Sub<duration::Duration>>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub(p1);
+<time_mod::Time as std::ops::Sub<duration::Duration>>::sub(p0, p1);
+crate::<time_mod::Time as std::ops::Sub<duration::Duration>>::sub(p0, p1);
+<time_mod::Time>::sub(p0, p1);
-----------------
src/time_mod.rs <time_mod::Time as std::ops::Sub<std::time::Duration>>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.sub(p1);
+<time_mod::Time as std::ops::Sub<std::time::Duration>>::sub(p0, p1);
+crate::<time_mod::Time as std::ops::Sub<std::time::Duration>>::sub(p0, p1);
+<time_mod::Time>::sub(p0, p1);
-----------------
src/time_mod.rs <time_mod::Time as std::ops::SubAssign<duration::Duration>>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p1 = MaybeUninit::uninit().assume_init(); // duration::Duration
+p0.sub_assign(p1);
+<time_mod::Time as std::ops::SubAssign<duration::Duration>>::sub_assign(p0, p1);
+crate::<time_mod::Time as std::ops::SubAssign<duration::Duration>>::sub_assign(p0, p1);
+<time_mod::Time>::sub_assign(p0, p1);
-----------------
src/time_mod.rs <time_mod::Time as std::ops::SubAssign<std::time::Duration>>::sub_assign
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p1 = MaybeUninit::uninit().assume_init(); // std::time::Duration
+p0.sub_assign(p1);
+<time_mod::Time as std::ops::SubAssign<std::time::Duration>>::sub_assign(p0, p1);
+crate::<time_mod::Time as std::ops::SubAssign<std::time::Duration>>::sub_assign(p0, p1);
+<time_mod::Time>::sub_assign(p0, p1);
-----------------
src/time_mod.rs <time_mod::Time as std::ops::Sub>::sub
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p1 = MaybeUninit::uninit().assume_init(); // time_mod::Time
+p0.sub(p1);
+<time_mod::Time as std::ops::Sub>::sub(p0, p1);
+crate::<time_mod::Time as std::ops::Sub>::sub(p0, p1);
+<time_mod::Time>::sub(p0, p1);
-----------------
src/time_mod.rs <time_mod::Time as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p1 = & MaybeUninit::uninit().assume_init(); // time_mod::Time
+p0.partial_cmp(p1);
+<time_mod::Time as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<time_mod::Time as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<time_mod::Time>::partial_cmp(p0, p1);
-----------------
src/time_mod.rs <time_mod::Time as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // time_mod::Time
let mut p1 = & MaybeUninit::uninit().assume_init(); // time_mod::Time
+p0.cmp(p1);
+<time_mod::Time as std::cmp::Ord>::cmp(p0, p1);
+crate::<time_mod::Time as std::cmp::Ord>::cmp(p0, p1);
+<time_mod::Time>::cmp(p0, p1);
-----------------
src/utc_offset.rs <utc_offset::UtcOffset as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<utc_offset::UtcOffset as std::fmt::Debug>::fmt(p0, p1);
+crate::<utc_offset::UtcOffset as std::fmt::Debug>::fmt(p0, p1);
+<utc_offset::UtcOffset>::fmt(p0, p1);
-----------------
src/utc_offset.rs <utc_offset::UtcOffset as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
+p0.clone();
+<utc_offset::UtcOffset as std::clone::Clone>::clone(p0);
+crate::<utc_offset::UtcOffset as std::clone::Clone>::clone(p0);
+<utc_offset::UtcOffset>::clone(p0);
-----------------
src/utc_offset.rs <utc_offset::UtcOffset as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
let mut p1 = & MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
+p0.eq(p1);
+<utc_offset::UtcOffset as std::cmp::PartialEq>::eq(p0, p1);
+crate::<utc_offset::UtcOffset as std::cmp::PartialEq>::eq(p0, p1);
+<utc_offset::UtcOffset>::eq(p0, p1);
-----------------
src/utc_offset.rs <utc_offset::UtcOffset as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
+p0.assert_receiver_is_total_eq();
+<utc_offset::UtcOffset as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<utc_offset::UtcOffset as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<utc_offset::UtcOffset>::assert_receiver_is_total_eq(p0);
-----------------
src/utc_offset.rs <utc_offset::UtcOffset as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<utc_offset::UtcOffset as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<utc_offset::UtcOffset as std::hash::Hash>::hash":{"__H":["std::collections::hash_map::DefaultHasher","std::hash::SipHasher13","std::boxed::Box<T, A>","std::hash::SipHasher","<&mut H as std::hash::Hasher>","std::hash::sip::Hasher<S>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<utc_offset::UtcOffset as std::hash::Hash>::hash(p0, p1);
+crate::<utc_offset::UtcOffset as std::hash::Hash>::hash(p0, p1);
+<utc_offset::UtcOffset>::hash(p0, p1);
-----------------
src/utc_offset.rs <utc_offset::UtcOffset as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
let mut p1 = & MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
+p0.partial_cmp(p1);
+<utc_offset::UtcOffset as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<utc_offset::UtcOffset as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<utc_offset::UtcOffset>::partial_cmp(p0, p1);
-----------------
src/utc_offset.rs <utc_offset::UtcOffset as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
let mut p1 = & MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
+p0.cmp(p1);
+<utc_offset::UtcOffset as std::cmp::Ord>::cmp(p0, p1);
+crate::<utc_offset::UtcOffset as std::cmp::Ord>::cmp(p0, p1);
+<utc_offset::UtcOffset>::cmp(p0, p1);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::east_hours
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+utc_offset::UtcOffset::east_hours(p0);
+crate::utc_offset::UtcOffset::east_hours(p0);
+<utc_offset::UtcOffset>::east_hours(p0);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::west_hours
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+utc_offset::UtcOffset::west_hours(p0);
+crate::utc_offset::UtcOffset::west_hours(p0);
+<utc_offset::UtcOffset>::west_hours(p0);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::hours
deps:{}
candidates:{}
let mut p0 = 0i8; // None+i8
+utc_offset::UtcOffset::hours(p0);
+crate::utc_offset::UtcOffset::hours(p0);
+<utc_offset::UtcOffset>::hours(p0);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::east_minutes
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+utc_offset::UtcOffset::east_minutes(p0);
+crate::utc_offset::UtcOffset::east_minutes(p0);
+<utc_offset::UtcOffset>::east_minutes(p0);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::west_minutes
deps:{}
candidates:{}
let mut p0 = 0u16; // None+u16
+utc_offset::UtcOffset::west_minutes(p0);
+crate::utc_offset::UtcOffset::west_minutes(p0);
+<utc_offset::UtcOffset>::west_minutes(p0);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::minutes
deps:{}
candidates:{}
let mut p0 = 0i16; // None+i16
+utc_offset::UtcOffset::minutes(p0);
+crate::utc_offset::UtcOffset::minutes(p0);
+<utc_offset::UtcOffset>::minutes(p0);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::east_seconds
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+utc_offset::UtcOffset::east_seconds(p0);
+crate::utc_offset::UtcOffset::east_seconds(p0);
+<utc_offset::UtcOffset>::east_seconds(p0);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::west_seconds
deps:{}
candidates:{}
let mut p0 = 0u32; // None+u32
+utc_offset::UtcOffset::west_seconds(p0);
+crate::utc_offset::UtcOffset::west_seconds(p0);
+<utc_offset::UtcOffset>::west_seconds(p0);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::seconds
deps:{}
candidates:{}
let mut p0 = 0i32; // None+i32
+utc_offset::UtcOffset::seconds(p0);
+crate::utc_offset::UtcOffset::seconds(p0);
+<utc_offset::UtcOffset>::seconds(p0);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::as_seconds
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
+p0.as_seconds();
+utc_offset::UtcOffset::as_seconds(p0);
+crate::utc_offset::UtcOffset::as_seconds(p0);
+<utc_offset::UtcOffset>::as_seconds(p0);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::as_minutes
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
+p0.as_minutes();
+utc_offset::UtcOffset::as_minutes(p0);
+crate::utc_offset::UtcOffset::as_minutes(p0);
+<utc_offset::UtcOffset>::as_minutes(p0);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::as_hours
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
+p0.as_hours();
+utc_offset::UtcOffset::as_hours(p0);
+crate::utc_offset::UtcOffset::as_hours(p0);
+<utc_offset::UtcOffset>::as_hours(p0);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::as_duration
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
+p0.as_duration();
+utc_offset::UtcOffset::as_duration(p0);
+crate::utc_offset::UtcOffset::as_duration(p0);
+<utc_offset::UtcOffset>::as_duration(p0);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::local_offset_at
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+utc_offset::UtcOffset::local_offset_at(p0);
+crate::utc_offset::UtcOffset::local_offset_at(p0);
+<utc_offset::UtcOffset>::local_offset_at(p0);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::try_local_offset_at
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // offset_date_time::OffsetDateTime
+utc_offset::UtcOffset::try_local_offset_at(p0);
+crate::utc_offset::UtcOffset::try_local_offset_at(p0);
+<utc_offset::UtcOffset>::try_local_offset_at(p0);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::current_local_offset
deps:{}
candidates:{}
+utc_offset::UtcOffset::current_local_offset();
+crate::utc_offset::UtcOffset::current_local_offset();
+<utc_offset::UtcOffset>::current_local_offset();
-----------------
src/utc_offset.rs utc_offset::UtcOffset::try_current_local_offset
deps:{}
candidates:{}
+utc_offset::UtcOffset::try_current_local_offset();
+crate::utc_offset::UtcOffset::try_current_local_offset();
+<utc_offset::UtcOffset>::try_current_local_offset();
-----------------
src/utc_offset.rs utc_offset::UtcOffset::format
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"utc_offset::UtcOffset::format":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"utc_offset::UtcOffset::format":{"impl AsRef<str>":["std::ffi::CString","std::vec::Drain<'a, T, A>","<&T as std::convert::AsRef<U>>","std::vec::IntoIter<T, A>","std::slice::Iter<'_, T>","std::ffi::CStr","<&mut T as std::convert::AsRef<U>>","std::rc::Rc<T>","std::slice::IterMut<'_, T>","std::borrow::Cow<'_, T>","std::sync::Arc<T>","std::boxed::Box<T, A>","core::num::dec2flt::common::AsciiStr<'a>","std::borrow::Cow<'_, std::ffi::OsStr>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+p0.format(p1);
+utc_offset::UtcOffset::format(p0, p1);
+crate::utc_offset::UtcOffset::format(p0, p1);
+<utc_offset::UtcOffset>::format(p0, p1);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::lazy_format
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"utc_offset::UtcOffset::lazy_format":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"utc_offset::UtcOffset::lazy_format":{"impl AsRef<str>":["std::boxed::Box<T, A>","std::rc::Rc<T>","std::slice::IterMut<'_, T>","<&T as std::convert::AsRef<U>>","std::sync::Arc<T>","std::ffi::CStr","core::num::dec2flt::common::AsciiStr<'a>","std::borrow::Cow<'_, T>","std::ffi::CString","std::borrow::Cow<'_, std::ffi::OsStr>","std::vec::Drain<'a, T, A>","std::slice::Iter<'_, T>","std::vec::IntoIter<T, A>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+p0.lazy_format(p1);
+utc_offset::UtcOffset::lazy_format(p0, p1);
+crate::utc_offset::UtcOffset::lazy_format(p0, p1);
+<utc_offset::UtcOffset>::lazy_format(p0, p1);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::parse
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"utc_offset::UtcOffset::parse":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"utc_offset::UtcOffset::parse":{"impl AsRef<str>":["std::slice::IterMut<'_, T>","std::borrow::Cow<'_, T>","<&T as std::convert::AsRef<U>>","<&mut T as std::convert::AsRef<U>>","std::slice::Iter<'_, T>","std::rc::Rc<T>","std::vec::IntoIter<T, A>","core::num::dec2flt::common::AsciiStr<'a>","std::ffi::CStr","std::ffi::CString","std::vec::Drain<'a, T, A>","std::boxed::Box<T, A>","std::sync::Arc<T>","std::borrow::Cow<'_, std::ffi::OsStr>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+utc_offset::UtcOffset::parse(p0, p1);
+crate::utc_offset::UtcOffset::parse(p0, p1);
+<utc_offset::UtcOffset>::parse(p0, p1);
-----------------
src/utc_offset.rs utc_offset::UtcOffset::try_from_parsed_items
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // format::parse::ParsedItems
+utc_offset::UtcOffset::try_from_parsed_items(p0);
+crate::utc_offset::UtcOffset::try_from_parsed_items(p0);
+<utc_offset::UtcOffset>::try_from_parsed_items(p0);
-----------------
src/utc_offset.rs <utc_offset::UtcOffset as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // utc_offset::UtcOffset
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<utc_offset::UtcOffset as std::fmt::Display>::fmt(p0, p1);
+crate::<utc_offset::UtcOffset as std::fmt::Display>::fmt(p0, p1);
+<utc_offset::UtcOffset>::fmt(p0, p1);
-----------------
src/weekday.rs <weekday::Weekday as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // weekday::Weekday
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<weekday::Weekday as std::fmt::Debug>::fmt(p0, p1);
+crate::<weekday::Weekday as std::fmt::Debug>::fmt(p0, p1);
+<weekday::Weekday>::fmt(p0, p1);
-----------------
src/weekday.rs <weekday::Weekday as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // weekday::Weekday
+p0.clone();
+<weekday::Weekday as std::clone::Clone>::clone(p0);
+crate::<weekday::Weekday as std::clone::Clone>::clone(p0);
+<weekday::Weekday>::clone(p0);
-----------------
src/weekday.rs <weekday::Weekday as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // weekday::Weekday
let mut p1 = & MaybeUninit::uninit().assume_init(); // weekday::Weekday
+p0.eq(p1);
+<weekday::Weekday as std::cmp::PartialEq>::eq(p0, p1);
+crate::<weekday::Weekday as std::cmp::PartialEq>::eq(p0, p1);
+<weekday::Weekday>::eq(p0, p1);
-----------------
src/weekday.rs <weekday::Weekday as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // weekday::Weekday
+p0.assert_receiver_is_total_eq();
+<weekday::Weekday as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<weekday::Weekday as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<weekday::Weekday>::assert_receiver_is_total_eq(p0);
-----------------
src/weekday.rs <weekday::Weekday as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<weekday::Weekday as std::hash::Hash>::hash":{"__H":["std::marker::Sized","std::hash::Hasher"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<weekday::Weekday as std::hash::Hash>::hash":{"__H":["<&mut H as std::hash::Hasher>","std::hash::sip::Hasher<S>","std::hash::SipHasher13","std::boxed::Box<T, A>","std::hash::SipHasher","std::collections::hash_map::DefaultHasher"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // weekday::Weekday
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<weekday::Weekday as std::hash::Hash>::hash(p0, p1);
+crate::<weekday::Weekday as std::hash::Hash>::hash(p0, p1);
+<weekday::Weekday>::hash(p0, p1);
-----------------
src/weekday.rs weekday::Weekday::previous
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // weekday::Weekday
+p0.previous();
+weekday::Weekday::previous(p0);
+crate::weekday::Weekday::previous(p0);
+<weekday::Weekday>::previous(p0);
-----------------
src/weekday.rs weekday::Weekday::next
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // weekday::Weekday
+p0.next();
+weekday::Weekday::next(p0);
+crate::weekday::Weekday::next(p0);
+<weekday::Weekday>::next(p0);
-----------------
src/weekday.rs weekday::Weekday::iso_weekday_number
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // weekday::Weekday
+p0.iso_weekday_number();
+weekday::Weekday::iso_weekday_number(p0);
+crate::weekday::Weekday::iso_weekday_number(p0);
+<weekday::Weekday>::iso_weekday_number(p0);
-----------------
src/weekday.rs weekday::Weekday::number_from_monday
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // weekday::Weekday
+p0.number_from_monday();
+weekday::Weekday::number_from_monday(p0);
+crate::weekday::Weekday::number_from_monday(p0);
+<weekday::Weekday>::number_from_monday(p0);
-----------------
src/weekday.rs weekday::Weekday::number_from_sunday
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // weekday::Weekday
+p0.number_from_sunday();
+weekday::Weekday::number_from_sunday(p0);
+crate::weekday::Weekday::number_from_sunday(p0);
+<weekday::Weekday>::number_from_sunday(p0);
-----------------
src/weekday.rs weekday::Weekday::number_days_from_monday
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // weekday::Weekday
+p0.number_days_from_monday();
+weekday::Weekday::number_days_from_monday(p0);
+crate::weekday::Weekday::number_days_from_monday(p0);
+<weekday::Weekday>::number_days_from_monday(p0);
-----------------
src/weekday.rs weekday::Weekday::number_days_from_sunday
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // weekday::Weekday
+p0.number_days_from_sunday();
+weekday::Weekday::number_days_from_sunday(p0);
+crate::weekday::Weekday::number_days_from_sunday(p0);
+<weekday::Weekday>::number_days_from_sunday(p0);
-----------------
src/weekday.rs <weekday::Weekday as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // weekday::Weekday
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<weekday::Weekday as std::fmt::Display>::fmt(p0, p1);
+crate::<weekday::Weekday as std::fmt::Display>::fmt(p0, p1);
+<weekday::Weekday>::fmt(p0, p1);
-----------------
src/lib.rs <time_mod::Time as private::Parsable>::parse
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<time_mod::Time as private::Parsable>::parse":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<time_mod::Time as private::Parsable>::parse":{"impl AsRef<str>":["<&T as std::convert::AsRef<U>>","std::slice::IterMut<'_, T>","std::borrow::Cow<'_, T>","std::rc::Rc<T>","core::num::dec2flt::common::AsciiStr<'a>","std::sync::Arc<T>","std::borrow::Cow<'_, std::ffi::OsStr>","std::vec::IntoIter<T, A>","std::ffi::CStr","<&mut T as std::convert::AsRef<U>>","std::vec::Drain<'a, T, A>","std::slice::Iter<'_, T>","std::boxed::Box<T, A>","std::ffi::CString"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+<time_mod::Time as private::Parsable>::parse(p0, p1);
+crate::<time_mod::Time as private::Parsable>::parse(p0, p1);
+<time_mod::Time>::parse(p0, p1);
-----------------
src/lib.rs <date::Date as private::Parsable>::parse
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<date::Date as private::Parsable>::parse":{"impl AsRef<str>":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<date::Date as private::Parsable>::parse":{"impl AsRef<str>":["std::slice::IterMut<'_, T>","std::ffi::CString","<&T as std::convert::AsRef<U>>","std::ffi::CStr","std::borrow::Cow<'_, std::ffi::OsStr>","std::vec::IntoIter<T, A>","std::sync::Arc<T>","core::num::dec2flt::common::AsciiStr<'a>","<&mut T as std::convert::AsRef<U>>","std::borrow::Cow<'_, T>","std::vec::Drain<'a, T, A>","std::slice::Iter<'_, T>","std::rc::Rc<T>","std::boxed::Box<T, A>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+<date::Date as private::Parsable>::parse(p0, p1);
+crate::<date::Date as private::Parsable>::parse(p0, p1);
+<date::Date>::parse(p0, p1);
-----------------
src/lib.rs <utc_offset::UtcOffset as private::Parsable>::parse
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<utc_offset::UtcOffset as private::Parsable>::parse":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<utc_offset::UtcOffset as private::Parsable>::parse":{"impl AsRef<str>":["std::ffi::CStr","std::slice::IterMut<'_, T>","std::rc::Rc<T>","std::slice::Iter<'_, T>","core::num::dec2flt::common::AsciiStr<'a>","std::sync::Arc<T>","std::ffi::CString","<&mut T as std::convert::AsRef<U>>","std::vec::Drain<'a, T, A>","std::borrow::Cow<'_, T>","std::borrow::Cow<'_, std::ffi::OsStr>","std::vec::IntoIter<T, A>","<&T as std::convert::AsRef<U>>","std::boxed::Box<T, A>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+<utc_offset::UtcOffset as private::Parsable>::parse(p0, p1);
+crate::<utc_offset::UtcOffset as private::Parsable>::parse(p0, p1);
+<utc_offset::UtcOffset>::parse(p0, p1);
-----------------
src/lib.rs <primitive_date_time::PrimitiveDateTime as private::Parsable>::parse
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<primitive_date_time::PrimitiveDateTime as private::Parsable>::parse":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<primitive_date_time::PrimitiveDateTime as private::Parsable>::parse":{"impl AsRef<str>":["<&T as std::convert::AsRef<U>>","std::rc::Rc<T>","std::ffi::CStr","core::num::dec2flt::common::AsciiStr<'a>","std::borrow::Cow<'_, std::ffi::OsStr>","std::ffi::CString","std::slice::Iter<'_, T>","std::vec::IntoIter<T, A>","std::sync::Arc<T>","std::slice::IterMut<'_, T>","std::vec::Drain<'a, T, A>","<&mut T as std::convert::AsRef<U>>","std::borrow::Cow<'_, T>","std::boxed::Box<T, A>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+<primitive_date_time::PrimitiveDateTime as private::Parsable>::parse(p0, p1);
+crate::<primitive_date_time::PrimitiveDateTime as private::Parsable>::parse(p0, p1);
+<primitive_date_time::PrimitiveDateTime>::parse(p0, p1);
-----------------
src/lib.rs <offset_date_time::OffsetDateTime as private::Parsable>::parse
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<offset_date_time::OffsetDateTime as private::Parsable>::parse":{"impl AsRef<str>":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"<offset_date_time::OffsetDateTime as private::Parsable>::parse":{"impl AsRef<str>":["<&mut T as std::convert::AsRef<U>>","std::boxed::Box<T, A>","std::slice::IterMut<'_, T>","std::sync::Arc<T>","<&T as std::convert::AsRef<U>>","core::num::dec2flt::common::AsciiStr<'a>","std::borrow::Cow<'_, std::ffi::OsStr>","std::slice::Iter<'_, T>","std::rc::Rc<T>","std::vec::Drain<'a, T, A>","std::vec::IntoIter<T, A>","std::borrow::Cow<'_, T>","std::ffi::CStr","std::ffi::CString"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
let mut p1 = MaybeUninit::uninit().assume_init(); // impl AsRef<str>
+<offset_date_time::OffsetDateTime as private::Parsable>::parse(p0, p1);
+crate::<offset_date_time::OffsetDateTime as private::Parsable>::parse(p0, p1);
+<offset_date_time::OffsetDateTime>::parse(p0, p1);