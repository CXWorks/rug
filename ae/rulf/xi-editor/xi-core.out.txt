-----------------
unicode/src/lib.rs linebreak_property
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+linebreak_property(p0);
+crate::linebreak_property(p0);
+crate::linebreak_property(p0);
-----------------
unicode/src/lib.rs linebreak_property_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = 0usize; // None+usize
+linebreak_property_str(&p0, p1);
+crate::linebreak_property_str(&p0, p1);
+crate::linebreak_property_str(&p0, p1);
-----------------
unicode/src/lib.rs is_in_asc_list
deps:{"is_in_asc_list":{"T":["core::cmp::PartialOrd","core::marker::Sized"]}}
candidates:{"is_in_asc_list":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
let mut p1 = & MaybeUninit::uninit().assume_init(); // [T]
let mut p2 = 0usize; // None+usize
let mut p3 = 0usize; // None+usize
+is_in_asc_list(p0, p1, p2, p3);
+crate::is_in_asc_list(p0, p1, p2, p3);
+crate::is_in_asc_list(p0, p1, p2, p3);
-----------------
unicode/src/lib.rs is_variation_selector
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+is_variation_selector(p0);
+crate::is_variation_selector(p0);
+crate::is_variation_selector(p0);
-----------------
unicode/src/lib.rs is_keycap_base
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+is_keycap_base(p0);
+crate::is_keycap_base(p0);
+crate::is_keycap_base(p0);
-----------------
unicode/src/lib.rs EmojiExt::is_regional_indicator_symbol
deps:{"EmojiExt::is_regional_indicator_symbol":{"Self":["EmojiExt"]}}
candidates:{"EmojiExt::is_regional_indicator_symbol":{"Self":[]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.is_regional_indicator_symbol();
+EmojiExt::is_regional_indicator_symbol(p0);
+crate::EmojiExt::is_regional_indicator_symbol(p0);
+crate::EmojiExt::is_regional_indicator_symbol(p0);
-----------------
unicode/src/lib.rs EmojiExt::is_emoji_modifier
deps:{"EmojiExt::is_emoji_modifier":{"Self":["EmojiExt"]}}
candidates:{"EmojiExt::is_emoji_modifier":{"Self":[]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.is_emoji_modifier();
+EmojiExt::is_emoji_modifier(p0);
+crate::EmojiExt::is_emoji_modifier(p0);
+crate::EmojiExt::is_emoji_modifier(p0);
-----------------
unicode/src/lib.rs EmojiExt::is_emoji_combining_enclosing_keycap
deps:{"EmojiExt::is_emoji_combining_enclosing_keycap":{"Self":["EmojiExt"]}}
candidates:{"EmojiExt::is_emoji_combining_enclosing_keycap":{"Self":[]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.is_emoji_combining_enclosing_keycap();
+EmojiExt::is_emoji_combining_enclosing_keycap(p0);
+crate::EmojiExt::is_emoji_combining_enclosing_keycap(p0);
+crate::EmojiExt::is_emoji_combining_enclosing_keycap(p0);
-----------------
unicode/src/lib.rs EmojiExt::is_emoji
deps:{"EmojiExt::is_emoji":{"Self":["EmojiExt"]}}
candidates:{"EmojiExt::is_emoji":{"Self":[]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.is_emoji();
+EmojiExt::is_emoji(p0);
+crate::EmojiExt::is_emoji(p0);
+crate::EmojiExt::is_emoji(p0);
-----------------
unicode/src/lib.rs EmojiExt::is_emoji_modifier_base
deps:{"EmojiExt::is_emoji_modifier_base":{"Self":["EmojiExt"]}}
candidates:{"EmojiExt::is_emoji_modifier_base":{"Self":[]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.is_emoji_modifier_base();
+EmojiExt::is_emoji_modifier_base(p0);
+crate::EmojiExt::is_emoji_modifier_base(p0);
+crate::EmojiExt::is_emoji_modifier_base(p0);
-----------------
unicode/src/lib.rs EmojiExt::is_tag_spec_char
deps:{"EmojiExt::is_tag_spec_char":{"Self":["EmojiExt"]}}
candidates:{"EmojiExt::is_tag_spec_char":{"Self":[]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.is_tag_spec_char();
+EmojiExt::is_tag_spec_char(p0);
+crate::EmojiExt::is_tag_spec_char(p0);
+crate::EmojiExt::is_tag_spec_char(p0);
-----------------
unicode/src/lib.rs EmojiExt::is_emoji_cancel_tag
deps:{"EmojiExt::is_emoji_cancel_tag":{"Self":["EmojiExt"]}}
candidates:{"EmojiExt::is_emoji_cancel_tag":{"Self":[]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.is_emoji_cancel_tag();
+EmojiExt::is_emoji_cancel_tag(p0);
+crate::EmojiExt::is_emoji_cancel_tag(p0);
+crate::EmojiExt::is_emoji_cancel_tag(p0);
-----------------
unicode/src/lib.rs EmojiExt::is_zwj
deps:{"EmojiExt::is_zwj":{"Self":["EmojiExt"]}}
candidates:{"EmojiExt::is_zwj":{"Self":[]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
+p0.is_zwj();
+EmojiExt::is_zwj(p0);
+crate::EmojiExt::is_zwj(p0);
+crate::EmojiExt::is_zwj(p0);
-----------------
unicode/src/lib.rs <LineBreakIterator<'a> as core::clone::Clone>::clone
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // LineBreakIterator<'a>
+p0.clone();
+<LineBreakIterator<'a> as core::clone::Clone>::clone(p0);
+crate::<LineBreakIterator<'a> as core::clone::Clone>::clone(p0);
+<LineBreakIterator<'a>>::clone(p0);
-----------------
unicode/src/lib.rs <LineBreakIterator<'a> as core::iter::Iterator>::next
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // LineBreakIterator<'a>
+p0.next();
+<LineBreakIterator<'a> as core::iter::Iterator>::next(p0);
+crate::<LineBreakIterator<'a> as core::iter::Iterator>::next(p0);
+<LineBreakIterator<'a>>::next(p0);
-----------------
unicode/src/lib.rs LineBreakIterator::<'a>::new
'a
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+LineBreakIterator::<'a>::new(&p0);
+crate::LineBreakIterator::<'a>::new(&p0);
+<LineBreakIterator<'a>>::new(&p0);
-----------------
unicode/src/lib.rs <LineBreakLeafIter as core::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // LineBreakLeafIter
+p0.clone();
+<LineBreakLeafIter as core::clone::Clone>::clone(p0);
+crate::<LineBreakLeafIter as core::clone::Clone>::clone(p0);
+<LineBreakLeafIter>::clone(p0);
-----------------
unicode/src/lib.rs <LineBreakLeafIter as core::default::Default>::default
deps:{}
candidates:{}
+<LineBreakLeafIter as core::default::Default>::default();
+crate::<LineBreakLeafIter as core::default::Default>::default();
+<LineBreakLeafIter>::default();
-----------------
unicode/src/lib.rs LineBreakLeafIter::new
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = 0usize; // None+usize
+LineBreakLeafIter::new(&p0, p1);
+crate::LineBreakLeafIter::new(&p0, p1);
+<LineBreakLeafIter>::new(&p0, p1);
-----------------
unicode/src/lib.rs LineBreakLeafIter::next
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // LineBreakLeafIter
let mut p1 = "sample"; // None+&str
+p0.next(&p1);
+LineBreakLeafIter::next(p0, &p1);
+crate::LineBreakLeafIter::next(p0, &p1);
+<LineBreakLeafIter>::next(p0, &p1);
-----------------
unicode/src/lib.rs <char as EmojiExt>::is_regional_indicator_symbol
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+p0.is_regional_indicator_symbol();
+<char as EmojiExt>::is_regional_indicator_symbol(p0);
+crate::<char as EmojiExt>::is_regional_indicator_symbol(p0);
+<char>::is_regional_indicator_symbol(p0);
-----------------
unicode/src/lib.rs <char as EmojiExt>::is_emoji_modifier
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+p0.is_emoji_modifier();
+<char as EmojiExt>::is_emoji_modifier(p0);
+crate::<char as EmojiExt>::is_emoji_modifier(p0);
+<char>::is_emoji_modifier(p0);
-----------------
unicode/src/lib.rs <char as EmojiExt>::is_emoji_combining_enclosing_keycap
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+p0.is_emoji_combining_enclosing_keycap();
+<char as EmojiExt>::is_emoji_combining_enclosing_keycap(p0);
+crate::<char as EmojiExt>::is_emoji_combining_enclosing_keycap(p0);
+<char>::is_emoji_combining_enclosing_keycap(p0);
-----------------
unicode/src/lib.rs <char as EmojiExt>::is_emoji
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+p0.is_emoji();
+<char as EmojiExt>::is_emoji(p0);
+crate::<char as EmojiExt>::is_emoji(p0);
+<char>::is_emoji(p0);
-----------------
unicode/src/lib.rs <char as EmojiExt>::is_emoji_modifier_base
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+p0.is_emoji_modifier_base();
+<char as EmojiExt>::is_emoji_modifier_base(p0);
+crate::<char as EmojiExt>::is_emoji_modifier_base(p0);
+<char>::is_emoji_modifier_base(p0);
-----------------
unicode/src/lib.rs <char as EmojiExt>::is_tag_spec_char
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+p0.is_tag_spec_char();
+<char as EmojiExt>::is_tag_spec_char(p0);
+crate::<char as EmojiExt>::is_tag_spec_char(p0);
+<char>::is_tag_spec_char(p0);
-----------------
unicode/src/lib.rs <char as EmojiExt>::is_emoji_cancel_tag
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+p0.is_emoji_cancel_tag();
+<char as EmojiExt>::is_emoji_cancel_tag(p0);
+crate::<char as EmojiExt>::is_emoji_cancel_tag(p0);
+<char>::is_emoji_cancel_tag(p0);
-----------------
unicode/src/lib.rs <char as EmojiExt>::is_zwj
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+p0.is_zwj();
+<char as EmojiExt>::is_zwj(p0);
+crate::<char as EmojiExt>::is_zwj(p0);
+<char>::is_zwj(p0);
-----------------
rope/src/compare.rs compare::sse_compare_mask
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+compare::sse_compare_mask(p0, p1);
+crate::compare::sse_compare_mask(p0, p1);
+crate::compare::sse_compare_mask(p0, p1);
-----------------
rope/src/compare.rs compare::avx_compare_mask
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+compare::avx_compare_mask(p0, p1);
+crate::compare::avx_compare_mask(p0, p1);
+crate::compare::avx_compare_mask(p0, p1);
-----------------
rope/src/compare.rs compare::ne_idx
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+compare::ne_idx(p0, p1);
+crate::compare::ne_idx(p0, p1);
+crate::compare::ne_idx(p0, p1);
-----------------
rope/src/compare.rs compare::ne_idx_rev
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+compare::ne_idx_rev(p0, p1);
+crate::compare::ne_idx_rev(p0, p1);
+crate::compare::ne_idx_rev(p0, p1);
-----------------
rope/src/compare.rs compare::ne_idx_avx
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+compare::ne_idx_avx(p0, p1);
+crate::compare::ne_idx_avx(p0, p1);
+crate::compare::ne_idx_avx(p0, p1);
-----------------
rope/src/compare.rs compare::ne_idx_sse
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+compare::ne_idx_sse(p0, p1);
+crate::compare::ne_idx_sse(p0, p1);
+crate::compare::ne_idx_sse(p0, p1);
-----------------
rope/src/compare.rs compare::ne_idx_rev_sse
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+compare::ne_idx_rev_sse(p0, p1);
+crate::compare::ne_idx_rev_sse(p0, p1);
+crate::compare::ne_idx_rev_sse(p0, p1);
-----------------
rope/src/compare.rs compare::ne_idx_fallback
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+compare::ne_idx_fallback(p0, p1);
+crate::compare::ne_idx_fallback(p0, p1);
+crate::compare::ne_idx_fallback(p0, p1);
-----------------
rope/src/compare.rs compare::ne_idx_rev_fallback
deps:{}
candidates:{}
let mut p0 = [0u8,0,0].as_mut_slice(); // None+&[u8]
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+compare::ne_idx_rev_fallback(p0, p1);
+crate::compare::ne_idx_rev_fallback(p0, p1);
+crate::compare::ne_idx_rev_fallback(p0, p1);
-----------------
rope/src/diff.rs diff::expand_match
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p2 = 0usize; // None+usize
let mut p3 = 0usize; // None+usize
let mut p4 = 0usize; // None+usize
+diff::expand_match(p0, p1, p2, p3, p4);
+crate::diff::expand_match(p0, p1, p2, p3, p4);
+crate::diff::expand_match(p0, p1, p2, p3, p4);
-----------------
rope/src/diff.rs diff::longest_increasing_region_set
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // [(usize, usize)]
+diff::longest_increasing_region_set(p0);
+crate::diff::longest_increasing_region_set(p0);
+crate::diff::longest_increasing_region_set(p0);
-----------------
rope/src/diff.rs diff::non_ws_offset
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+diff::non_ws_offset(&p0);
+crate::diff::non_ws_offset(&p0);
+crate::diff::non_ws_offset(&p0);
-----------------
rope/src/diff.rs diff::make_line_hashes
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = 0usize; // None+usize
+diff::make_line_hashes(p0, p1);
+crate::diff::make_line_hashes(p0, p1);
+crate::diff::make_line_hashes(p0, p1);
-----------------
rope/src/engine.rs engine::default_session
deps:{}
candidates:{}
+engine::default_session();
+crate::engine::default_session();
+crate::engine::default_session();
-----------------
rope/src/engine.rs engine::initial_revision_counter
deps:{}
candidates:{}
+engine::initial_revision_counter();
+crate::engine::initial_revision_counter();
+crate::engine::initial_revision_counter();
-----------------
rope/src/engine.rs engine::shuffle_tombstones
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p2 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p3 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+engine::shuffle_tombstones(p0, p1, p2, p3);
+crate::engine::shuffle_tombstones(p0, p1, p2, p3);
+crate::engine::shuffle_tombstones(p0, p1, p2, p3);
-----------------
rope/src/engine.rs engine::shuffle
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p2 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p3 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+engine::shuffle(p0, p1, p2, p3);
+crate::engine::shuffle(p0, p1, p2, p3);
+crate::engine::shuffle(p0, p1, p2, p3);
-----------------
rope/src/engine.rs engine::find_base_index
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // [engine::Revision]
let mut p1 = & MaybeUninit::uninit().assume_init(); // [engine::Revision]
+engine::find_base_index(p0, p1);
+crate::engine::find_base_index(p0, p1);
+crate::engine::find_base_index(p0, p1);
-----------------
rope/src/engine.rs engine::find_common
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // [engine::Revision]
let mut p1 = & MaybeUninit::uninit().assume_init(); // [engine::Revision]
+engine::find_common(p0, p1);
+crate::engine::find_common(p0, p1);
+crate::engine::find_common(p0, p1);
-----------------
rope/src/engine.rs engine::rearrange
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // [engine::Revision]
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::collections::BTreeSet<engine::RevId>
let mut p2 = 0usize; // None+usize
+engine::rearrange(p0, p1, p2);
+crate::engine::rearrange(p0, p1, p2);
+crate::engine::rearrange(p0, p1, p2);
-----------------
rope/src/engine.rs engine::compute_deltas
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // [engine::Revision]
let mut p1 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p2 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p3 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+engine::compute_deltas(p0, p1, p2, p3);
+crate::engine::compute_deltas(p0, p1, p2, p3);
+crate::engine::compute_deltas(p0, p1, p2, p3);
-----------------
rope/src/engine.rs engine::compute_transforms
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::vec::Vec<engine::Revision>
+engine::compute_transforms(p0);
+crate::engine::compute_transforms(p0);
+crate::engine::compute_transforms(p0);
-----------------
rope/src/engine.rs engine::rebase
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::vec::Vec<(engine::FullPriority, multiset::Subset)>
let mut p1 = MaybeUninit::uninit().assume_init(); // std::vec::Vec<engine::DeltaOp>
let mut p2 = MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p3 = MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p4 = MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p5 = 0usize; // None+usize
+engine::rebase(p0, p1, p2, p3, p4, p5);
+crate::engine::rebase(p0, p1, p2, p3, p4, p5);
+crate::engine::rebase(p0, p1, p2, p3, p4, p5);
-----------------
rope/src/find.rs find::find
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'_, rope::RopeInfo>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // rope::LinesRaw<'_>
let mut p2 = MaybeUninit::uninit().assume_init(); // find::CaseMatching
let mut p3 = "sample"; // None+&str
let mut p4 = MaybeUninit::uninit().assume_init(); // std::option::Option<&regex::Regex>
+find::find(p0, p1, p2, &p3, p4);
+crate::find::find(p0, p1, p2, &p3, p4);
+crate::find::find(p0, p1, p2, &p3, p4);
-----------------
rope/src/find.rs find::find_progress
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'_, rope::RopeInfo>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // rope::LinesRaw<'_>
let mut p2 = MaybeUninit::uninit().assume_init(); // find::CaseMatching
let mut p3 = "sample"; // None+&str
let mut p4 = 0usize; // None+usize
let mut p5 = MaybeUninit::uninit().assume_init(); // std::option::Option<&regex::Regex>
+find::find_progress(p0, p1, p2, &p3, p4, p5);
+crate::find::find_progress(p0, p1, p2, &p3, p4, p5);
+crate::find::find_progress(p0, p1, p2, &p3, p4, p5);
-----------------
rope/src/find.rs find::find_progress_iter
deps:{"find::find_progress_iter":{"impl Fn(&mut Cursor<RopeInfo>, &mut LinesRaw, &str) -> Option<usize>":["std::marker::Sized","std::ops::Fn"],"impl Fn(&str) -> Option<usize>":["std::marker::Sized","std::ops::Fn"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
candidates:{"find::find_progress_iter":{"impl Fn(&mut Cursor<RopeInfo>, &mut LinesRaw, &str) -> Option<usize>":["core::str::IsNotEmpty","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::LinesAnyMap","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::CharEscapeDefault"],"impl Fn(&str) -> Option<usize>":["std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::CharEscapeDefault","core::str::IsWhitespace","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::slice::ascii::EscapeByte","core::str::IsNotEmpty","core::str::BytesIsNotEmpty","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'_, rope::RopeInfo>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // rope::LinesRaw<'_>
let mut p2 = "sample"; // None+&str
let mut p3 = MaybeUninit::uninit().assume_init(); // impl Fn(&str) -> Option<usize>
let mut p4 = MaybeUninit::uninit().assume_init(); // impl Fn(&mut Cursor<RopeInfo>, &mut LinesRaw, &str) -> Option<usize>
let mut p5 = 0usize; // None+usize
+find::find_progress_iter(p0, p1, &p2, p3, p4, p5);
+crate::find::find_progress_iter(p0, p1, &p2, p3, p4, p5);
+crate::find::find_progress_iter(p0, p1, &p2, p3, p4, p5);
-----------------
rope/src/find.rs find::find_core
deps:{"find::find_core":{"impl Fn(&mut Cursor<RopeInfo>, &mut LinesRaw, &str) -> Option<usize>":["std::ops::Fn","std::marker::Sized"],"impl Fn(&str) -> Option<usize>":["std::marker::Sized","std::ops::Fn"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
candidates:{"find::find_core":{"impl Fn(&mut Cursor<RopeInfo>, &mut LinesRaw, &str) -> Option<usize>":["core::str::IsWhitespace","core::str::UnsafeBytesToStr","core::str::BytesIsNotEmpty","core::slice::ascii::EscapeByte","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeDefault","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::LinesAnyMap","core::str::IsNotEmpty","core::str::CharEscapeUnicode"],"impl Fn(&str) -> Option<usize>":["core::str::UnsafeBytesToStr","core::str::IsAsciiWhitespace","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","std::boxed::Box<F, A>","core::str::LinesAnyMap","core::str::IsWhitespace","core::str::CharEscapeDefault","std::ops::function::impls::<impl std::ops::Fn<A> for &F>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::str::BytesIsNotEmpty"]},"std::ops::function::impls::<impl std::ops::Fn<A> for &F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'_, rope::RopeInfo>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // rope::LinesRaw<'_>
let mut p2 = "sample"; // None+&str
let mut p3 = MaybeUninit::uninit().assume_init(); // impl Fn(&str) -> Option<usize>
let mut p4 = MaybeUninit::uninit().assume_init(); // impl Fn(&mut Cursor<RopeInfo>, &mut LinesRaw, &str) -> Option<usize>
+find::find_core(p0, p1, &p2, p3, p4);
+crate::find::find_core(p0, p1, &p2, p3, p4);
+crate::find::find_core(p0, p1, &p2, p3, p4);
-----------------
rope/src/find.rs find::compare_cursor_str
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'_, rope::RopeInfo>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // rope::LinesRaw<'_>
let mut p2 = "sample"; // None+&str
+find::compare_cursor_str(p0, p1, &p2);
+crate::find::compare_cursor_str(p0, p1, &p2);
+crate::find::compare_cursor_str(p0, p1, &p2);
-----------------
rope/src/find.rs find::compare_cursor_str_casei
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'_, rope::RopeInfo>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // rope::LinesRaw<'_>
let mut p2 = "sample"; // None+&str
+find::compare_cursor_str_casei(p0, p1, &p2);
+crate::find::compare_cursor_str_casei(p0, p1, &p2);
+crate::find::compare_cursor_str_casei(p0, p1, &p2);
-----------------
rope/src/find.rs find::compare_cursor_regex
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'_, rope::RopeInfo>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // rope::LinesRaw<'_>
let mut p2 = "sample"; // None+&str
let mut p3 = & MaybeUninit::uninit().assume_init(); // regex::Regex
+find::compare_cursor_regex(p0, p1, &p2, p3);
+crate::find::compare_cursor_regex(p0, p1, &p2, p3);
+crate::find::compare_cursor_regex(p0, p1, &p2, p3);
-----------------
rope/src/find.rs find::is_multiline_regex
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+find::is_multiline_regex(&p0);
+crate::find::is_multiline_regex(&p0);
+crate::find::is_multiline_regex(&p0);
-----------------
rope/src/find.rs find::scan_lowercase
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
let mut p1 = "sample"; // None+&str
+find::scan_lowercase(p0, &p1);
+crate::find::scan_lowercase(p0, &p1);
+crate::find::scan_lowercase(p0, &p1);
-----------------
rope/src/rope.rs rope::len_utf8_from_first_byte
deps:{}
candidates:{}
let mut p0 = 0u8; // None+u8
+rope::len_utf8_from_first_byte(p0);
+crate::rope::len_utf8_from_first_byte(p0);
+crate::rope::len_utf8_from_first_byte(p0);
-----------------
rope/src/rope.rs rope::count_newlines
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+rope::count_newlines(&p0);
+crate::rope::count_newlines(&p0);
+crate::rope::count_newlines(&p0);
-----------------
rope/src/rope.rs rope::count_utf16_code_units
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+rope::count_utf16_code_units(&p0);
+crate::rope::count_utf16_code_units(&p0);
+crate::rope::count_utf16_code_units(&p0);
-----------------
rope/src/rope.rs rope::find_leaf_split_for_bulk
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+rope::find_leaf_split_for_bulk(&p0);
+crate::rope::find_leaf_split_for_bulk(&p0);
+crate::rope::find_leaf_split_for_bulk(&p0);
-----------------
rope/src/rope.rs rope::find_leaf_split_for_merge
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+rope::find_leaf_split_for_merge(&p0);
+crate::rope::find_leaf_split_for_merge(&p0);
+crate::rope::find_leaf_split_for_merge(&p0);
-----------------
rope/src/rope.rs rope::find_leaf_split
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
let mut p1 = 0usize; // None+usize
+rope::find_leaf_split(&p0, p1);
+crate::rope::find_leaf_split(&p0, p1);
+crate::rope::find_leaf_split(&p0, p1);
-----------------
rope/src/rope.rs rope::cow_append
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::borrow::Cow<'a, str>
let mut p1 = "sample"; // None+&str
+rope::cow_append(p0, &p1);
+crate::rope::cow_append(p0, &p1);
+crate::rope::cow_append(p0, &p1);
-----------------
rope/src/diff.rs diff::Diff::compute_delta
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"diff::Diff::compute_delta":{"N":["tree::NodeInfo","std::marker::Sized"],"Self":["diff::Diff"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","std::clone::Clone","tree::DefaultMetric","tree::NodeInfo"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"diff::Diff::compute_delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"],"Self":["diff::LineHashDiff"]},"spans::Span":{"T":["delta::DeltaElement","breaks::BreaksMetric","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for *mut T>","diff::DiffOp","find::CaseMatching","tree::NodeVal","spans::SpansInfo","multiset::Segment","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksInfo","rope::LinesMetric","spans::SpansLeaf","tree::Node","breaks::BreaksBaseMetric","interval::Interval","diff::DiffBuilder","breaks::BreaksLeaf","engine::RevId","rope::Utf16CodeUnitsMetric","tree::NodeBody","delta::InsertDelta","engine::Error","engine::DeltaOp","rope::BaseMetric","multiset::Subset","spans::Span","engine::FullPriority","rope::RopeInfo","engine::Contents","delta::Delta","multiset::CountMatcher"]},"spans::SpansInfo":{"T":["tree::Node","spans::Span","engine::FullPriority","delta::InsertDelta","multiset::CountMatcher","interval::Interval","rope::BaseMetric","spans::SpansLeaf","breaks::BreaksInfo","tree::NodeVal","diff::DiffOp","breaks::BreaksBaseMetric","tree::NodeBody","engine::DeltaOp","delta::Delta","spans::SpansInfo","multiset::Subset","engine::RevId","multiset::ZipSegment","engine::Error","rope::LinesMetric","rope::RopeInfo","breaks::BreaksMetric","engine::Contents","delta::DeltaElement","multiset::Segment","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksLeaf","find::CaseMatching","diff::DiffBuilder","rope::Utf16CodeUnitsMetric"]},"spans::SpansLeaf":{"T":["std::clone::impls::<impl std::clone::Clone for &T>","spans::Span","engine::RevId","multiset::CountMatcher","tree::NodeBody","tree::Node","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","engine::Contents","diff::DiffBuilder","engine::FullPriority","tree::NodeVal","spans::SpansLeaf","multiset::Subset","rope::RopeInfo","engine::Error","interval::Interval","delta::InsertDelta","find::CaseMatching","rope::LinesMetric","breaks::BreaksInfo","breaks::BreaksMetric","spans::SpansInfo","delta::Delta","multiset::ZipSegment","delta::DeltaElement","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::DeltaOp","multiset::Segment","diff::DiffOp","breaks::BreaksLeaf"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
let mut p1 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
+diff::Diff::compute_delta(p0, p1);
+crate::diff::Diff::compute_delta(p0, p1);
+crate::diff::Diff::compute_delta(p0, p1);
-----------------
rope/src/interval.rs interval::IntervalBounds::into_interval
deps:{"<T as interval::IntervalBounds>":{"T":["std::marker::Sized","std::convert::Into"]},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"interval::IntervalBounds::into_interval":{"Self":["interval::IntervalBounds"]},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]}}
candidates:{"<T as interval::IntervalBounds>":{"T":["std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected","<T as std::convert::Into<U>>","std::process::ExitStatusError"]},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"interval::IntervalBounds::into_interval":{"Self":["std::ops::RangeFrom","<T as interval::IntervalBounds>","std::ops::RangeFull"]},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
+p0.into_interval(p1);
+interval::IntervalBounds::into_interval(p0, p1);
+crate::interval::IntervalBounds::into_interval(p0, p1);
+crate::interval::IntervalBounds::into_interval(p0, p1);
-----------------
rope/src/tree.rs tree::NodeInfo::accumulate
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeInfo::accumulate":{"Self":["std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["find::CaseMatching","tree::Node","engine::Contents","engine::FullPriority","engine::DeltaOp","multiset::Segment","breaks::BreaksLeaf","breaks::BreaksMetric","engine::RevId","rope::RopeInfo","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::CountMatcher","spans::SpansInfo","multiset::Subset","diff::DiffOp","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for &T>","rope::Utf16CodeUnitsMetric","tree::NodeBody","delta::DeltaElement","spans::SpansLeaf","breaks::BreaksBaseMetric","breaks::BreaksInfo","interval::Interval","multiset::ZipSegment","spans::Span","delta::InsertDelta","tree::NodeVal","diff::DiffBuilder","engine::Error","delta::Delta"]},"spans::SpansInfo":{"T":["delta::Delta","engine::RevId","std::clone::impls::<impl std::clone::Clone for &mut T>","spans::SpansInfo","delta::InsertDelta","diff::DiffBuilder","find::CaseMatching","breaks::BreaksBaseMetric","breaks::BreaksInfo","rope::Utf16CodeUnitsMetric","tree::NodeBody","engine::DeltaOp","interval::Interval","engine::Contents","rope::LinesMetric","diff::DiffOp","rope::RopeInfo","spans::Span","multiset::Segment","multiset::CountMatcher","multiset::ZipSegment","engine::Error","delta::DeltaElement","tree::Node","engine::FullPriority","rope::BaseMetric","breaks::BreaksLeaf","tree::NodeVal","spans::SpansLeaf","multiset::Subset","breaks::BreaksMetric"]},"spans::SpansLeaf":{"T":["find::CaseMatching","tree::Node","diff::DiffOp","engine::Error","tree::NodeBody","engine::FullPriority","breaks::BreaksInfo","spans::SpansLeaf","engine::DeltaOp","spans::SpansInfo","tree::NodeVal","multiset::ZipSegment","delta::InsertDelta","engine::RevId","rope::RopeInfo","interval::Interval","multiset::CountMatcher","diff::DiffBuilder","rope::Utf16CodeUnitsMetric","spans::Span","engine::Contents","multiset::Subset","breaks::BreaksLeaf","breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for &T>","rope::LinesMetric","breaks::BreaksBaseMetric","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::Segment","delta::DeltaElement","rope::BaseMetric","delta::Delta"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeInfo::accumulate":{"Self":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = & MaybeUninit::uninit().assume_init(); // Self
+p0.accumulate(p1);
+tree::NodeInfo::accumulate(p0, p1);
+crate::tree::NodeInfo::accumulate(p0, p1);
+crate::tree::NodeInfo::accumulate(p0, p1);
-----------------
rope/src/tree.rs tree::NodeInfo::compute_info
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo","tree::DefaultMetric"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeInfo::compute_info":{"Self":["tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["delta::Delta","rope::Utf16CodeUnitsMetric","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for &mut T>","interval::Interval","delta::InsertDelta","spans::SpansInfo","breaks::BreaksBaseMetric","diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::Segment","find::CaseMatching","tree::Node","rope::RopeInfo","rope::BaseMetric","spans::Span","multiset::ZipSegment","rope::LinesMetric","multiset::Subset","engine::RevId","engine::Contents","breaks::BreaksInfo","tree::NodeBody","delta::DeltaElement","spans::SpansLeaf","engine::Error","engine::DeltaOp","multiset::CountMatcher","breaks::BreaksMetric","diff::DiffOp","engine::FullPriority","tree::NodeVal"]},"spans::SpansInfo":{"T":["engine::Contents","rope::RopeInfo","rope::BaseMetric","tree::NodeVal","breaks::BreaksBaseMetric","breaks::BreaksInfo","rope::LinesMetric","breaks::BreaksLeaf","spans::SpansInfo","interval::Interval","delta::InsertDelta","breaks::BreaksMetric","diff::DiffOp","spans::SpansLeaf","engine::RevId","diff::DiffBuilder","engine::DeltaOp","multiset::Subset","std::clone::impls::<impl std::clone::Clone for &T>","engine::Error","multiset::ZipSegment","rope::Utf16CodeUnitsMetric","delta::Delta","delta::DeltaElement","multiset::Segment","tree::NodeBody","spans::Span","tree::Node","engine::FullPriority","multiset::CountMatcher","find::CaseMatching"]},"spans::SpansLeaf":{"T":["multiset::CountMatcher","diff::DiffBuilder","breaks::BreaksInfo","delta::InsertDelta","breaks::BreaksLeaf","engine::Contents","engine::Error","multiset::Subset","engine::FullPriority","breaks::BreaksBaseMetric","spans::Span","tree::NodeBody","std::clone::impls::<impl std::clone::Clone for *const T>","interval::Interval","rope::Utf16CodeUnitsMetric","breaks::BreaksMetric","diff::DiffOp","engine::DeltaOp","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for &T>","rope::LinesMetric","tree::Node","delta::DeltaElement","rope::RopeInfo","spans::SpansLeaf","spans::SpansInfo","multiset::ZipSegment","find::CaseMatching","delta::Delta","multiset::Segment","engine::RevId","tree::NodeVal"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeInfo::compute_info":{"Self":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // <Self as tree::NodeInfo>::L
+tree::NodeInfo::compute_info(p0);
+crate::tree::NodeInfo::compute_info(p0);
+crate::tree::NodeInfo::compute_info(p0);
-----------------
rope/src/tree.rs tree::NodeInfo::identity
deps:{"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"tree::NodeInfo::identity":{"Self":["tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"spans::Span":{"T":["delta::InsertDelta","engine::RevId","engine::FullPriority","find::CaseMatching","engine::DeltaOp","tree::NodeBody","spans::Span","breaks::BreaksInfo","delta::DeltaElement","tree::NodeVal","breaks::BreaksMetric","engine::Error","spans::SpansLeaf","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for *const T>","diff::DiffBuilder","rope::Utf16CodeUnitsMetric","rope::RopeInfo","multiset::Segment","delta::Delta","rope::LinesMetric","breaks::BreaksLeaf","tree::Node","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::CountMatcher","rope::BaseMetric","breaks::BreaksBaseMetric","multiset::Subset","engine::Contents","interval::Interval","spans::SpansInfo"]},"spans::SpansInfo":{"T":["delta::Delta","tree::NodeBody","diff::DiffOp","breaks::BreaksMetric","spans::Span","multiset::Subset","delta::InsertDelta","rope::RopeInfo","spans::SpansLeaf","tree::NodeVal","breaks::BreaksInfo","engine::FullPriority","multiset::ZipSegment","tree::Node","rope::Utf16CodeUnitsMetric","engine::Error","interval::Interval","delta::DeltaElement","engine::Contents","rope::LinesMetric","find::CaseMatching","multiset::CountMatcher","spans::SpansInfo","diff::DiffBuilder","breaks::BreaksLeaf","rope::BaseMetric","engine::RevId","std::clone::impls::<impl std::clone::Clone for &T>","engine::DeltaOp","breaks::BreaksBaseMetric","multiset::Segment"]},"spans::SpansLeaf":{"T":["std::clone::impls::<impl std::clone::Clone for *const T>","std::clone::impls::<impl std::clone::Clone for &mut T>","tree::NodeBody","spans::Span","breaks::BreaksMetric","rope::RopeInfo","spans::SpansLeaf","engine::FullPriority","spans::SpansInfo","multiset::ZipSegment","engine::Contents","breaks::BreaksInfo","interval::Interval","engine::DeltaOp","multiset::Subset","engine::RevId","multiset::Segment","find::CaseMatching","rope::Utf16CodeUnitsMetric","diff::DiffOp","delta::Delta","tree::NodeVal","tree::Node","rope::LinesMetric","rope::BaseMetric","breaks::BreaksLeaf","multiset::CountMatcher","delta::InsertDelta","delta::DeltaElement","engine::Error","diff::DiffBuilder","breaks::BreaksBaseMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeInfo::identity":{"Self":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]}}
+tree::NodeInfo::identity();
+crate::tree::NodeInfo::identity();
+crate::tree::NodeInfo::identity();
-----------------
rope/src/tree.rs tree::NodeInfo::interval
deps:{"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","tree::DefaultMetric","tree::NodeInfo","std::clone::Clone"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeInfo::interval":{"Self":["std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["delta::InsertDelta","rope::RopeInfo","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::CountMatcher","tree::Node","engine::Error","tree::NodeVal","engine::DeltaOp","breaks::BreaksLeaf","rope::LinesMetric","delta::Delta","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::BaseMetric","rope::Utf16CodeUnitsMetric","spans::SpansInfo","breaks::BreaksMetric","tree::NodeBody","multiset::Subset","diff::DiffOp","spans::SpansLeaf","multiset::Segment","breaks::BreaksBaseMetric","interval::Interval","diff::DiffBuilder","engine::Contents","delta::DeltaElement","find::CaseMatching","engine::RevId","spans::Span","multiset::ZipSegment"]},"spans::SpansInfo":{"T":["tree::Node","multiset::CountMatcher","delta::InsertDelta","rope::Utf16CodeUnitsMetric","rope::BaseMetric","spans::SpansLeaf","spans::Span","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for &T>","engine::Contents","breaks::BreaksMetric","diff::DiffBuilder","spans::SpansInfo","rope::LinesMetric","breaks::BreaksBaseMetric","rope::RopeInfo","breaks::BreaksLeaf","multiset::ZipSegment","multiset::Subset","delta::DeltaElement","diff::DiffOp","engine::RevId","engine::Error","find::CaseMatching","tree::NodeBody","breaks::BreaksInfo","interval::Interval","multiset::Segment","tree::NodeVal","delta::Delta","engine::DeltaOp"]},"spans::SpansLeaf":{"T":["engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for *const T>","spans::SpansInfo","engine::Error","rope::LinesMetric","delta::InsertDelta","breaks::BreaksMetric","engine::Contents","diff::DiffOp","rope::RopeInfo","breaks::BreaksInfo","spans::SpansLeaf","rope::Utf16CodeUnitsMetric","tree::Node","multiset::CountMatcher","find::CaseMatching","delta::DeltaElement","rope::BaseMetric","multiset::Segment","multiset::Subset","breaks::BreaksLeaf","interval::Interval","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for &mut T>","tree::NodeVal","delta::Delta","engine::RevId","multiset::ZipSegment","breaks::BreaksBaseMetric","tree::NodeBody","spans::Span","diff::DiffBuilder"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeInfo::interval":{"Self":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = 0usize; // None+usize
+p0.interval(p1);
+tree::NodeInfo::interval(p0, p1);
+crate::tree::NodeInfo::interval(p0, p1);
+crate::tree::NodeInfo::interval(p0, p1);
-----------------
trace/src/sys_pid.rs sys_pid::current_pid
deps:{}
candidates:{}
+sys_pid::current_pid();
+crate::sys_pid::current_pid();
+crate::sys_pid::current_pid();
-----------------
trace/src/sys_tid.rs sys_tid::current_tid
deps:{}
candidates:{}
+sys_tid::current_tid();
+crate::sys_tid::current_tid();
+crate::sys_tid::current_tid();
-----------------
trace/src/chrome_trace_dump.rs chrome_trace_dump::serialize
deps:{"chrome_trace_dump::serialize":{"W":["std::marker::Sized","std::io::Write"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
candidates:{"chrome_trace_dump::serialize":{"W":["std::io::Cursor<&mut std::vec::Vec<u8, A>>","std::io::Sink","&std::io::Stderr","std::io::stdio::StdoutRaw","std::boxed::Box<W>","&std::process::ChildStdin","std::io::Cursor<std::vec::Vec<u8, A>>","std::net::TcpStream","std::io::Stderr","std::io::BorrowedCursor<'a>","&std::io::Sink","std::os::unix::net::UnixStream","std::io::Cursor<std::boxed::Box<[u8], A>>","std::fs::File","&std::io::Stdout","std::io::Cursor<[u8; N]>","std::process::ChildStdin","std::io::StdoutLock<'_>","&std::net::TcpStream","std::sys::unix::stdio::Stdout","std::io::buffered::linewritershim::LineWriterShim<'a, W>","std::io::stdio::StderrRaw","std::io::BufWriter<W>","std::io::Cursor<&mut [u8]>","std::io::impls::<impl std::io::Write for &mut W>","std::io::LineWriter<W>","&std::fs::File","std::vec::Vec<u8, A>","&'a std::os::unix::net::UnixStream","std::sys::unix::stdio::Stderr","std::io::StderrLock<'_>","std::collections::VecDeque<u8, A>","std::io::Stdout"]},"std::io::impls::<impl std::io::Write for &mut W>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::vec::Vec<Sample>
let mut p1 = MaybeUninit::uninit().assume_init(); // W
+chrome_trace_dump::serialize(p0, p1);
+crate::chrome_trace_dump::serialize(p0, p1);
+crate::chrome_trace_dump::serialize(p0, p1);
-----------------
trace/src/chrome_trace_dump.rs chrome_trace_dump::to_value
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // std::vec::Vec<Sample>
+chrome_trace_dump::to_value(p0);
+crate::chrome_trace_dump::to_value(p0);
+crate::chrome_trace_dump::to_value(p0);
-----------------
trace/src/chrome_trace_dump.rs chrome_trace_dump::decode
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // serde_json::Value
+chrome_trace_dump::decode(p0);
+crate::chrome_trace_dump::decode(p0);
+crate::chrome_trace_dump::decode(p0);
-----------------
trace/src/chrome_trace_dump.rs chrome_trace_dump::deserialize
deps:{"chrome_trace_dump::deserialize":{"R":["std::marker::Sized","std::io::Read"]},"std::io::impls::<impl std::io::Read for &mut R>":{}}
candidates:{"chrome_trace_dump::deserialize":{"R":["std::fs::File","std::os::unix::net::UnixStream","std::io::Stdin","&std::net::TcpStream","std::io::Empty","&'a std::sys::unix::fd::FileDesc","std::sys::unix::stdio::Stdin","std::net::TcpStream","std::io::stdio::StdinRaw","std::process::ChildStdout","std::io::impls::<impl std::io::Read for &mut R>","&'a std::os::unix::net::UnixStream","std::io::Chain<T, U>","&std::fs::File","std::io::StdinLock<'_>","std::io::Repeat","std::process::ChildStderr","std::boxed::Box<R>","std::collections::VecDeque<u8, A>","std::io::BufReader<R>","std::io::Take<T>","std::io::Cursor<T>"]},"std::io::impls::<impl std::io::Read for &mut R>":{}}
let mut p0 = MaybeUninit::uninit().assume_init(); // R
+chrome_trace_dump::deserialize(p0);
+crate::chrome_trace_dump::deserialize(p0);
+crate::chrome_trace_dump::deserialize(p0);
-----------------
trace/src/lib.rs ns_to_us
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
+ns_to_us(p0);
+crate::ns_to_us(p0);
+crate::ns_to_us(p0);
-----------------
trace/src/lib.rs serialize_event_type
deps:{"<&'a mut serde_json::Serializer<W, F> as serde::Serializer>":{},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"serialize_event_type":{"S":["serde::Serializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as serde::Serializer>":{},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"serialize_event_type":{"S":["serde::private::ser::FlatMapSerializer<'a, M>","serde_json::value::Serializer","serde_json::ser::MapKeySerializer<'a, W, F>","serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>","serde::private::ser::content::ContentSerializer<E>","serde_json::value::ser::MapKeySerializer","<&'a mut serde_json::Serializer<W, F> as serde::Serializer>","serde::private::ser::TaggedSerializer<S>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // SampleEventType
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+serialize_event_type(p0, p1);
+crate::serialize_event_type(p0, p1);
+crate::serialize_event_type(p0, p1);
-----------------
trace/src/lib.rs deserialize_event_type
'de
deps:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"deserialize_event_type":{"D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"deserialize_event_type":{"D":["serde::de::value::U64Deserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::F64Deserializer<E>","serde::de::value::BoolDeserializer<E>","serde_json::value::de::SeqRefDeserializer<'de>","serde::de::value::UsizeDeserializer<E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::U16Deserializer<E>","serde_json::value::de::MapKeyDeserializer<'de>","&'a serde_json::Number","serde_json::Number","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::IsizeDeserializer<E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::I32Deserializer<E>","serde::de::value::StringDeserializer<E>","serde_json::value::de::SeqDeserializer","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::I8Deserializer<E>","serde::de::value::SeqDeserializer<I, E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_json::Value","serde::private::de::StrDeserializer<'a, E>","serde::de::value::I16Deserializer<E>","serde::de::value::SeqAccessDeserializer<A>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::private::de::content::MapDeserializer<'de, E>","serde_json::value::de::MapDeserializer","serde::de::value::I64Deserializer<E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::StrDeserializer<'a, E>","serde::de::value::PairDeserializer<A, B, E>","serde_json::de::MapKey<'a, R>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::CharDeserializer<E>","serde::de::value::U32Deserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","&'de serde_json::Value","serde::de::value::I128Deserializer<E>","serde::de::value::UnitDeserializer<E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::U8Deserializer<E>","<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>","serde::de::value::F32Deserializer<E>","serde::de::value::U128Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // D
+deserialize_event_type(p0);
+crate::deserialize_event_type(p0);
+crate::deserialize_event_type(p0);
-----------------
trace/src/lib.rs to_cow_str
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"to_cow_str":{"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"to_cow_str":{"S":["<T as std::convert::Into<U>>","std::process::ExitStatusError","std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // S
+to_cow_str(p0);
+crate::to_cow_str(p0);
+crate::to_cow_str(p0);
-----------------
trace/src/lib.rs exe_name
deps:{}
candidates:{}
+exe_name();
+crate::exe_name();
+crate::exe_name();
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs <TRACE as lazy_static::__Deref>::deref::__static_ref_initialize
deps:{}
candidates:{}
+<TRACE as lazy_static::__Deref>::deref::__static_ref_initialize();
+crate::<TRACE as lazy_static::__Deref>::deref::__static_ref_initialize();
+<TRACE>::deref::__static_ref_initialize();
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs <TRACE as lazy_static::__Deref>::deref::__stability
deps:{}
candidates:{}
+<TRACE as lazy_static::__Deref>::deref::__stability();
+crate::<TRACE as lazy_static::__Deref>::deref::__stability();
+<TRACE>::deref::__stability();
-----------------
trace/src/lib.rs enable_tracing
deps:{}
candidates:{}
+enable_tracing();
+crate::enable_tracing();
+crate::enable_tracing();
-----------------
trace/src/lib.rs enable_tracing_with_config
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // Config
+enable_tracing_with_config(p0);
+crate::enable_tracing_with_config(p0);
+crate::enable_tracing_with_config(p0);
-----------------
trace/src/lib.rs disable_tracing
deps:{}
candidates:{}
+disable_tracing();
+crate::disable_tracing();
+crate::disable_tracing();
-----------------
trace/src/lib.rs is_enabled
deps:{}
candidates:{}
+is_enabled();
+crate::is_enabled();
+crate::is_enabled();
-----------------
trace/src/lib.rs trace
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"trace":{"C":["std::convert::Into","std::marker::Sized"],"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"trace":{"C":["std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected","std::process::ExitStatusError","<T as std::convert::Into<U>>"],"S":["std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","<T as std::convert::Into<U>>","std::sync::mpmc::select::Selected"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // S
let mut p1 = MaybeUninit::uninit().assume_init(); // C
+trace(p0, p1);
+crate::trace(p0, p1);
+crate::trace(p0, p1);
-----------------
trace/src/lib.rs trace_payload
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"trace_payload":{"C":["std::convert::Into","std::marker::Sized"],"P":["std::marker::Sized","std::convert::Into"],"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"trace_payload":{"C":["std::process::ExitStatusError","<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected"],"P":["std::sync::mpmc::select::Selected","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","<T as std::convert::Into<U>>"],"S":["<T as std::convert::Into<U>>","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // S
let mut p1 = MaybeUninit::uninit().assume_init(); // C
let mut p2 = MaybeUninit::uninit().assume_init(); // P
+trace_payload(p0, p1, p2);
+crate::trace_payload(p0, p1, p2);
+crate::trace_payload(p0, p1, p2);
-----------------
trace/src/lib.rs trace_block
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"trace_block":{"C":["std::marker::Sized","std::convert::Into"],"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"trace_block":{"C":["<T as std::convert::Into<U>>","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected"],"S":["std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected","<T as std::convert::Into<U>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // S
let mut p1 = MaybeUninit::uninit().assume_init(); // C
+trace_block(p0, p1);
+crate::trace_block(p0, p1);
+crate::trace_block(p0, p1);
-----------------
trace/src/lib.rs trace_block_payload
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"trace_block_payload":{"C":["std::convert::Into","std::marker::Sized"],"P":["std::marker::Sized","std::convert::Into"],"S":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"trace_block_payload":{"C":["std::process::ExitStatusError","std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError","<T as std::convert::Into<U>>"],"P":["<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError","std::sync::mpmc::select::Selected"],"S":["std::process::ExitStatusError","std::sync::mpmc::select::Selected","<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // S
let mut p1 = MaybeUninit::uninit().assume_init(); // C
let mut p2 = MaybeUninit::uninit().assume_init(); // P
+trace_block_payload(p0, p1, p2);
+crate::trace_block_payload(p0, p1, p2);
+crate::trace_block_payload(p0, p1, p2);
-----------------
trace/src/lib.rs trace_closure
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"trace_closure":{"C":["std::marker::Sized","std::convert::Into"],"F":["std::ops::FnOnce","std::marker::Sized"],"R":["std::marker::Sized"],"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"trace_closure":{"C":["<T as std::convert::Into<U>>","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected"],"F":["std::panic::AssertUnwindSafe<F>","core::str::IsAsciiWhitespace","core::str::IsWhitespace","core::str::IsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDebugContinue","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","std::boxed::Box<F, A>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::BytesIsNotEmpty","std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>"],"R":["RUG_ANY"],"S":["<T as std::convert::Into<U>>","std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // S
let mut p1 = MaybeUninit::uninit().assume_init(); // C
let mut p2 = MaybeUninit::uninit().assume_init(); // F
+trace_closure(p0, p1, p2);
+crate::trace_closure(p0, p1, p2);
+crate::trace_closure(p0, p1, p2);
-----------------
trace/src/lib.rs trace_closure_payload
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"trace_closure_payload":{"C":["std::marker::Sized","std::convert::Into"],"F":["std::ops::FnOnce","std::marker::Sized"],"P":["std::convert::Into","std::marker::Sized"],"R":["std::marker::Sized"],"S":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"trace_closure_payload":{"C":["std::sync::mpmc::select::Selected","<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError"],"F":["std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::slice::ascii::EscapeByte","core::str::UnsafeBytesToStr","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::str::CharEscapeDefault","core::str::CharEscapeUnicode","core::str::IsAsciiWhitespace","core::str::CharEscapeDebugContinue","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::panic::AssertUnwindSafe<F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>"],"P":["<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError","std::sync::mpmc::select::Selected"],"R":["RUG_ANY"],"S":["std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected","<T as std::convert::Into<U>>","std::process::ExitStatusError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // S
let mut p1 = MaybeUninit::uninit().assume_init(); // C
let mut p2 = MaybeUninit::uninit().assume_init(); // F
let mut p3 = MaybeUninit::uninit().assume_init(); // P
+trace_closure_payload(p0, p1, p2, p3);
+crate::trace_closure_payload(p0, p1, p2, p3);
+crate::trace_closure_payload(p0, p1, p2, p3);
-----------------
trace/src/lib.rs samples_len
deps:{}
candidates:{}
+samples_len();
+crate::samples_len();
+crate::samples_len();
-----------------
trace/src/lib.rs samples_cloned_unsorted
deps:{}
candidates:{}
+samples_cloned_unsorted();
+crate::samples_cloned_unsorted();
+crate::samples_cloned_unsorted();
-----------------
trace/src/lib.rs samples_cloned_sorted
deps:{}
candidates:{}
+samples_cloned_sorted();
+crate::samples_cloned_sorted();
+crate::samples_cloned_sorted();
-----------------
trace/src/lib.rs save
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"save":{"P":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"save":{"P":["<&mut T as std::convert::AsRef<U>>","std::ffi::CStr","std::slice::Iter<'_, T>","std::vec::IntoIter<T, A>","std::rc::Rc<T>","std::ffi::CString","std::sync::Arc<T>","std::slice::IterMut<'_, T>","std::borrow::Cow<'_, T>","core::num::dec2flt::common::AsciiStr<'a>","std::vec::Drain<'a, T, A>","std::borrow::Cow<'_, std::ffi::OsStr>","std::boxed::Box<T, A>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // P
let mut p1 = true; // None+bool
+save(p0, p1);
+crate::save(p0, p1);
+crate::save(p0, p1);
-----------------
trace/src/lib.rs StringArrayEq::arr_eq
deps:{"<&A as std::alloc::Allocator>":{},"StringArrayEq::arr_eq":{"Self":["StringArrayEq"]},"std::vec::Vec":{"A":["std::marker::Sized","std::alloc::Allocator"],"T":["std::marker::Sized"]}}
candidates:{"<&A as std::alloc::Allocator>":{},"StringArrayEq::arr_eq":{"Self":["std::vec::Vec"]},"std::vec::Vec":{"A":["std::alloc::System","<&A as std::alloc::Allocator>","std::alloc::Global"],"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = & MaybeUninit::uninit().assume_init(); // Rhs
+p0.arr_eq(p1);
+StringArrayEq::arr_eq(p0, p1);
+crate::StringArrayEq::arr_eq(p0, p1);
+crate::StringArrayEq::arr_eq(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs <fixed_lifo_deque::FixedLifoDeque<T> as std::clone::Clone>::clone
deps:{"<fixed_lifo_deque::FixedLifoDeque<T> as std::clone::Clone>::clone":{"T":["std::clone::Clone","std::marker::Sized"]},"fixed_lifo_deque::FixedLifoDeque":{"T":["std::clone::Clone","std::marker::Sized","std::fmt::Debug","std::marker::Copy"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{}}
candidates:{"<fixed_lifo_deque::FixedLifoDeque<T> as std::clone::Clone>::clone":{"T":["MetadataType","std::clone::impls::<impl std::clone::Clone for *const T>","CategoriesT","chrome_trace_dump::ChromeTraceArrayEntries","Config","Sample","SampleEventType","fixed_lifo_deque::FixedLifoDeque","std::clone::impls::<impl std::clone::Clone for *mut T>","SampleArgs"]},"fixed_lifo_deque::FixedLifoDeque":{"T":["std::marker::copy_impls::<impl std::marker::Copy for &T>","SampleEventType"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.clone();
+<fixed_lifo_deque::FixedLifoDeque<T> as std::clone::Clone>::clone(p0);
+crate::<fixed_lifo_deque::FixedLifoDeque<T> as std::clone::Clone>::clone(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::clone(p0);
-----------------
trace/src/fixed_lifo_deque.rs <fixed_lifo_deque::FixedLifoDeque<T> as std::fmt::Debug>::fmt
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<fixed_lifo_deque::FixedLifoDeque<T> as std::fmt::Debug>::fmt":{"T":["std::marker::Sized","std::fmt::Debug"]},"fixed_lifo_deque::FixedLifoDeque":{"T":["std::marker::Sized","std::marker::Copy","std::clone::Clone","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<fixed_lifo_deque::FixedLifoDeque<T> as std::fmt::Debug>::fmt":{"T":["Sample","chrome_trace_dump::ChromeTraceArrayEntries","CategoriesT","MetadataType","SampleEventType","fixed_lifo_deque::FixedLifoDeque","<*mut T as std::fmt::Debug>","SampleArgs","chrome_trace_dump::Error"]},"fixed_lifo_deque::FixedLifoDeque":{"T":["std::clone::impls::<impl std::clone::Clone for *mut T>","SampleEventType"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<fixed_lifo_deque::FixedLifoDeque<T> as std::fmt::Debug>::fmt(p0, p1);
+crate::<fixed_lifo_deque::FixedLifoDeque<T> as std::fmt::Debug>::fmt(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<T>>::fmt(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::new
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::new":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::new":{"T":["RUG_ANY"]}}
+fixed_lifo_deque::FixedLifoDeque::<T>::new();
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::new();
+<fixed_lifo_deque::FixedLifoDeque<T>>::new();
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::with_limit
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::with_limit":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::with_limit":{"T":["RUG_ANY"]}}
let mut p0 = 0usize; // None+usize
+fixed_lifo_deque::FixedLifoDeque::<T>::with_limit(p0);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::with_limit(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::with_limit(p0);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::reset_limit
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::reset_limit":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::reset_limit":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
let mut p1 = 0usize; // None+usize
+p0.reset_limit(p1);
+fixed_lifo_deque::FixedLifoDeque::<T>::reset_limit(p0, p1);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::reset_limit(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<T>>::reset_limit(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::limit
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::limit":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::limit":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.limit();
+fixed_lifo_deque::FixedLifoDeque::<T>::limit(p0);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::limit(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::limit(p0);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::get
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::get":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::get":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
let mut p1 = 0usize; // None+usize
+p0.get(p1);
+fixed_lifo_deque::FixedLifoDeque::<T>::get(p0, p1);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::get(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<T>>::get(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::get_mut
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::get_mut":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::get_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
let mut p1 = 0usize; // None+usize
+p0.get_mut(p1);
+fixed_lifo_deque::FixedLifoDeque::<T>::get_mut(p0, p1);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::get_mut(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<T>>::get_mut(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::swap
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::swap":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::swap":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
+p0.swap(p1, p2);
+fixed_lifo_deque::FixedLifoDeque::<T>::swap(p0, p1, p2);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::swap(p0, p1, p2);
+<fixed_lifo_deque::FixedLifoDeque<T>>::swap(p0, p1, p2);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::capacity
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::capacity":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::capacity":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.capacity();
+fixed_lifo_deque::FixedLifoDeque::<T>::capacity(p0);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::capacity(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::capacity(p0);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::iter
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::iter":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::iter":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.iter();
+fixed_lifo_deque::FixedLifoDeque::<T>::iter(p0);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::iter(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::iter(p0);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::iter_mut
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::iter_mut":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::iter_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.iter_mut();
+fixed_lifo_deque::FixedLifoDeque::<T>::iter_mut(p0);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::iter_mut(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::iter_mut(p0);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::as_slices
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::as_slices":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::as_slices":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.as_slices();
+fixed_lifo_deque::FixedLifoDeque::<T>::as_slices(p0);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::as_slices(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::as_slices(p0);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::as_mut_slices
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::as_mut_slices":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::as_mut_slices":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.as_mut_slices();
+fixed_lifo_deque::FixedLifoDeque::<T>::as_mut_slices(p0);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::as_mut_slices(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::as_mut_slices(p0);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::len
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::len":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::len":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.len();
+fixed_lifo_deque::FixedLifoDeque::<T>::len(p0);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::len(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::len(p0);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::is_empty
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::is_empty":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::is_empty":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.is_empty();
+fixed_lifo_deque::FixedLifoDeque::<T>::is_empty(p0);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::is_empty(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::is_empty(p0);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::drain
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::drain":{"R":["std::ops::RangeBounds","std::marker::Sized"],"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::drain":{"R":["std::ops::Range<&T>","std::ops::Range<T>","std::ops::RangeToInclusive<T>","std::ops::RangeFrom<&T>","(std::collections::Bound<T>, std::collections::Bound<T>)","std::ops::RangeFrom<T>","std::ops::RangeInclusive<&T>","std::ops::RangeTo<T>","std::ops::RangeFull","std::ops::RangeInclusive<T>","(std::collections::Bound<&'a T>, std::collections::Bound<&'a T>)","std::ops::RangeToInclusive<&T>","std::ops::RangeTo<&T>"],"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // R
+p0.drain(p1);
+fixed_lifo_deque::FixedLifoDeque::<T>::drain(p0, p1);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::drain(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<T>>::drain(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::clear
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::clear":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::clear":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.clear();
+fixed_lifo_deque::FixedLifoDeque::<T>::clear(p0);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::clear(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::clear(p0);
-----------------
rope/src/tree.rs tree::Leaf::len
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Leaf::len":{"Self":["std::clone::Clone","std::marker::Sized","std::default::Default","tree::Leaf"]},"tree::Node":{"N":["std::clone::Clone","std::marker::Sized","tree::DefaultMetric","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["find::CaseMatching","tree::Node","diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for &T>","spans::Span","multiset::CountMatcher","engine::DeltaOp","breaks::BreaksBaseMetric","multiset::Subset","tree::NodeBody","delta::DeltaElement","interval::Interval","rope::RopeInfo","engine::Error","multiset::Segment","tree::NodeVal","spans::SpansInfo","breaks::BreaksLeaf","rope::LinesMetric","multiset::ZipSegment","spans::SpansLeaf","breaks::BreaksMetric","engine::FullPriority","diff::DiffOp","engine::RevId","rope::BaseMetric","delta::InsertDelta","rope::Utf16CodeUnitsMetric","breaks::BreaksInfo","engine::Contents","delta::Delta"]},"spans::SpansInfo":{"T":["spans::Span","delta::InsertDelta","spans::SpansInfo","delta::Delta","engine::FullPriority","engine::Error","diff::DiffOp","rope::Utf16CodeUnitsMetric","spans::SpansLeaf","engine::Contents","multiset::Segment","tree::Node","tree::NodeVal","breaks::BreaksBaseMetric","diff::DiffBuilder","engine::DeltaOp","find::CaseMatching","rope::BaseMetric","multiset::Subset","engine::RevId","std::clone::impls::<impl std::clone::Clone for *const T>","interval::Interval","multiset::CountMatcher","multiset::ZipSegment","rope::LinesMetric","delta::DeltaElement","rope::RopeInfo","breaks::BreaksInfo","breaks::BreaksMetric","breaks::BreaksLeaf","tree::NodeBody"]},"spans::SpansLeaf":{"T":["tree::NodeBody","tree::Node","delta::InsertDelta","engine::RevId","rope::LinesMetric","breaks::BreaksMetric","engine::DeltaOp","multiset::ZipSegment","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::BaseMetric","engine::FullPriority","tree::NodeVal","interval::Interval","rope::RopeInfo","rope::Utf16CodeUnitsMetric","multiset::Subset","breaks::BreaksLeaf","spans::SpansLeaf","spans::Span","find::CaseMatching","spans::SpansInfo","delta::Delta","breaks::BreaksBaseMetric","engine::Error","diff::DiffBuilder","multiset::CountMatcher","multiset::Segment","engine::Contents","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for &T>","delta::DeltaElement"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Leaf::len":{"Self":["breaks::BreaksLeaf","spans::SpansLeaf"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.len();
+tree::Leaf::len(p0);
+crate::tree::Leaf::len(p0);
+crate::tree::Leaf::len(p0);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::contains
deps:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"fixed_lifo_deque::FixedLifoDeque":{"T":["std::fmt::Debug","std::clone::Clone","std::marker::Sized","std::marker::Copy"]},"fixed_lifo_deque::FixedLifoDeque::<T>::contains":{"T":["std::marker::Sized","std::cmp::PartialEq"]},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"fixed_lifo_deque::FixedLifoDeque":{"T":["std::marker::copy_impls::<impl std::marker::Copy for &T>","SampleEventType"]},"fixed_lifo_deque::FixedLifoDeque::<T>::contains":{"T":["SampleEventType","SampleArgs","CategoriesT","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","MetadataType","fixed_lifo_deque::FixedLifoDeque","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","Sample"]},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
let mut p1 = & MaybeUninit::uninit().assume_init(); // T
+p0.contains(p1);
+fixed_lifo_deque::FixedLifoDeque::<T>::contains(p0, p1);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::contains(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<T>>::contains(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::front
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::front":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::front":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.front();
+fixed_lifo_deque::FixedLifoDeque::<T>::front(p0);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::front(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::front(p0);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::front_mut
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::front_mut":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::front_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.front_mut();
+fixed_lifo_deque::FixedLifoDeque::<T>::front_mut(p0);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::front_mut(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::front_mut(p0);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::back
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::back":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::back":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.back();
+fixed_lifo_deque::FixedLifoDeque::<T>::back(p0);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::back(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::back(p0);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::back_mut
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::back_mut":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::back_mut":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.back_mut();
+fixed_lifo_deque::FixedLifoDeque::<T>::back_mut(p0);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::back_mut(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::back_mut(p0);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::drop_excess_for_inserting
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::drop_excess_for_inserting":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::drop_excess_for_inserting":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
let mut p1 = 0usize; // None+usize
+p0.drop_excess_for_inserting(p1);
+fixed_lifo_deque::FixedLifoDeque::<T>::drop_excess_for_inserting(p0, p1);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::drop_excess_for_inserting(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<T>>::drop_excess_for_inserting(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::pop_front
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::pop_front":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::pop_front":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.pop_front();
+fixed_lifo_deque::FixedLifoDeque::<T>::pop_front(p0);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::pop_front(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::pop_front(p0);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::push_back
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::push_back":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::push_back":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.push_back(p1);
+fixed_lifo_deque::FixedLifoDeque::<T>::push_back(p0, p1);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::push_back(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<T>>::push_back(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::pop_back
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::pop_back":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::pop_back":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.pop_back();
+fixed_lifo_deque::FixedLifoDeque::<T>::pop_back(p0);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::pop_back(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::pop_back(p0);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::swap_remove_back
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::swap_remove_back":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::swap_remove_back":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
let mut p1 = 0usize; // None+usize
+p0.swap_remove_back(p1);
+fixed_lifo_deque::FixedLifoDeque::<T>::swap_remove_back(p0, p1);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::swap_remove_back(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<T>>::swap_remove_back(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::swap_remove_front
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::swap_remove_front":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::swap_remove_front":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
let mut p1 = 0usize; // None+usize
+p0.swap_remove_front(p1);
+fixed_lifo_deque::FixedLifoDeque::<T>::swap_remove_front(p0, p1);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::swap_remove_front(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<T>>::swap_remove_front(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::remove
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::remove":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::remove":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
let mut p1 = 0usize; // None+usize
+p0.remove(p1);
+fixed_lifo_deque::FixedLifoDeque::<T>::remove(p0, p1);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::remove(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<T>>::remove(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::split_off
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::split_off":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::split_off":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
let mut p1 = 0usize; // None+usize
+p0.split_off(p1);
+fixed_lifo_deque::FixedLifoDeque::<T>::split_off(p0, p1);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::split_off(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<T>>::split_off(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::append
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::append":{"T":["std::marker::Sized"]}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::append":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::collections::VecDeque<T>
+p0.append(p1);
+fixed_lifo_deque::FixedLifoDeque::<T>::append(p0, p1);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::append(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<T>>::append(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::retain
deps:{"fixed_lifo_deque::FixedLifoDeque::<T>::retain":{"F":["std::marker::Sized","std::ops::FnMut"],"T":["std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
candidates:{"fixed_lifo_deque::FixedLifoDeque::<T>::retain":{"F":["core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","core::str::IsWhitespace","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::IsAsciiWhitespace","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::str::UnsafeBytesToStr","core::str::IsNotEmpty","core::str::CharEscapeUnicode","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::CharEscapeDefault","core::slice::ascii::EscapeByte"],"T":["RUG_ANY"]},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // F
+p0.retain(p1);
+fixed_lifo_deque::FixedLifoDeque::<T>::retain(p0, p1);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::retain(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<T>>::retain(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs fixed_lifo_deque::FixedLifoDeque::<T>::resize
deps:{"fixed_lifo_deque::FixedLifoDeque":{"T":["std::marker::Copy","std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"fixed_lifo_deque::FixedLifoDeque::<T>::resize":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
candidates:{"fixed_lifo_deque::FixedLifoDeque":{"T":["std::clone::impls::<impl std::clone::Clone for &T>","SampleEventType"]},"fixed_lifo_deque::FixedLifoDeque::<T>::resize":{"T":["Sample","fixed_lifo_deque::FixedLifoDeque","CategoriesT","chrome_trace_dump::ChromeTraceArrayEntries","Config","SampleEventType","SampleArgs","MetadataType","std::clone::impls::<impl std::clone::Clone for &mut T>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
let mut p1 = 0usize; // None+usize
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+p0.resize(p1, p2);
+fixed_lifo_deque::FixedLifoDeque::<T>::resize(p0, p1, p2);
+crate::fixed_lifo_deque::FixedLifoDeque::<T>::resize(p0, p1, p2);
+<fixed_lifo_deque::FixedLifoDeque<T>>::resize(p0, p1, p2);
-----------------
trace/src/fixed_lifo_deque.rs <fixed_lifo_deque::FixedLifoDeque<A> as std::cmp::PartialEq>::eq
deps:{"<*const T as std::fmt::Debug>":{},"<fixed_lifo_deque::FixedLifoDeque<A> as std::cmp::PartialEq>::eq":{"A":["std::cmp::PartialEq","std::marker::Sized"]},"fixed_lifo_deque::FixedLifoDeque":{"T":["std::marker::Sized","std::fmt::Debug","std::clone::Clone","std::marker::Copy"]},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
candidates:{"<*const T as std::fmt::Debug>":{},"<fixed_lifo_deque::FixedLifoDeque<A> as std::cmp::PartialEq>::eq":{"A":["CategoriesT","SampleArgs","SampleEventType","Sample","MetadataType","std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>","std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>","fixed_lifo_deque::FixedLifoDeque"]},"fixed_lifo_deque::FixedLifoDeque":{"T":["std::marker::copy_impls::<impl std::marker::Copy for &T>","SampleEventType"]},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{},"std::ptr::const_ptr::<impl std::cmp::PartialEq for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialEq for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<A>
let mut p1 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<A>
+p0.eq(p1);
+<fixed_lifo_deque::FixedLifoDeque<A> as std::cmp::PartialEq>::eq(p0, p1);
+crate::<fixed_lifo_deque::FixedLifoDeque<A> as std::cmp::PartialEq>::eq(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<A>>::eq(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs <fixed_lifo_deque::FixedLifoDeque<A> as std::cmp::PartialOrd>::partial_cmp
deps:{"<&T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<fixed_lifo_deque::FixedLifoDeque<A> as std::cmp::PartialOrd>::partial_cmp":{"A":["std::marker::Sized","std::cmp::PartialOrd"]},"fixed_lifo_deque::FixedLifoDeque":{"T":["std::marker::Copy","std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::PartialOrd<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialOrd<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialOrd for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialOrd for *mut T>":{}}
candidates:{"<&T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<fixed_lifo_deque::FixedLifoDeque<A> as std::cmp::PartialOrd>::partial_cmp":{"A":["Sample","fixed_lifo_deque::FixedLifoDeque","std::ptr::const_ptr::<impl std::cmp::PartialOrd for *const T>","std::cmp::impls::<impl std::cmp::PartialOrd<&B> for &A>"]},"fixed_lifo_deque::FixedLifoDeque":{"T":["SampleEventType","std::clone::impls::<impl std::clone::Clone for *const T>"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::PartialOrd<&B> for &A>":{},"std::cmp::impls::<impl std::cmp::PartialOrd<&mut B> for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::PartialOrd for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::PartialOrd for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<A>
let mut p1 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<A>
+p0.partial_cmp(p1);
+<fixed_lifo_deque::FixedLifoDeque<A> as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<fixed_lifo_deque::FixedLifoDeque<A> as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<A>>::partial_cmp(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs <fixed_lifo_deque::FixedLifoDeque<A> as std::cmp::Ord>::cmp
deps:{"<*mut T as std::fmt::Debug>":{},"<fixed_lifo_deque::FixedLifoDeque<A> as std::cmp::Ord>::cmp":{"A":["std::cmp::Ord","std::marker::Sized"]},"fixed_lifo_deque::FixedLifoDeque":{"T":["std::marker::Copy","std::fmt::Debug","std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::Ord for &A>":{},"std::cmp::impls::<impl std::cmp::Ord for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Ord for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>":{}}
candidates:{"<*mut T as std::fmt::Debug>":{},"<fixed_lifo_deque::FixedLifoDeque<A> as std::cmp::Ord>::cmp":{"A":["Sample","std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>","fixed_lifo_deque::FixedLifoDeque","std::cmp::impls::<impl std::cmp::Ord for &A>"]},"fixed_lifo_deque::FixedLifoDeque":{"T":["SampleEventType","std::clone::impls::<impl std::clone::Clone for &T>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::cmp::impls::<impl std::cmp::Ord for &A>":{},"std::cmp::impls::<impl std::cmp::Ord for &mut A>":{},"std::ptr::const_ptr::<impl std::cmp::Ord for *const T>":{},"std::ptr::mut_ptr::<impl std::cmp::Ord for *mut T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<A>
let mut p1 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<A>
+p0.cmp(p1);
+<fixed_lifo_deque::FixedLifoDeque<A> as std::cmp::Ord>::cmp(p0, p1);
+crate::<fixed_lifo_deque::FixedLifoDeque<A> as std::cmp::Ord>::cmp(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<A>>::cmp(p0, p1);
-----------------
rope/src/tree.rs tree::Leaf::is_ok_child
deps:{"delta::Delta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Leaf::is_ok_child":{"Self":["std::default::Default","std::clone::Clone","std::marker::Sized","tree::Leaf"]},"tree::Node":{"N":["std::clone::Clone","tree::DefaultMetric","std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["diff::DiffBuilder","engine::FullPriority","tree::NodeVal","breaks::BreaksBaseMetric","spans::SpansLeaf","engine::Error","spans::SpansInfo","std::clone::impls::<impl std::clone::Clone for &T>","multiset::CountMatcher","diff::DiffOp","tree::NodeBody","delta::Delta","multiset::Segment","multiset::Subset","breaks::BreaksMetric","rope::RopeInfo","find::CaseMatching","rope::BaseMetric","engine::Contents","rope::Utf16CodeUnitsMetric","tree::Node","engine::DeltaOp","engine::RevId","interval::Interval","std::clone::impls::<impl std::clone::Clone for &mut T>","delta::DeltaElement","breaks::BreaksLeaf","spans::Span","delta::InsertDelta","rope::LinesMetric","multiset::ZipSegment","breaks::BreaksInfo"]},"spans::SpansInfo":{"T":["engine::RevId","engine::FullPriority","engine::Error","diff::DiffBuilder","breaks::BreaksInfo","breaks::BreaksMetric","spans::SpansInfo","multiset::Subset","delta::InsertDelta","tree::Node","rope::RopeInfo","spans::SpansLeaf","std::clone::impls::<impl std::clone::Clone for &T>","interval::Interval","multiset::ZipSegment","diff::DiffOp","engine::Contents","rope::LinesMetric","rope::BaseMetric","tree::NodeBody","rope::Utf16CodeUnitsMetric","delta::Delta","multiset::CountMatcher","breaks::BreaksBaseMetric","find::CaseMatching","tree::NodeVal","delta::DeltaElement","spans::Span","engine::DeltaOp","breaks::BreaksLeaf","multiset::Segment"]},"spans::SpansLeaf":{"T":["rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for *mut T>","std::clone::impls::<impl std::clone::Clone for *const T>","find::CaseMatching","tree::NodeVal","breaks::BreaksInfo","interval::Interval","engine::Error","multiset::Segment","multiset::Subset","rope::RopeInfo","breaks::BreaksLeaf","delta::Delta","engine::FullPriority","diff::DiffBuilder","delta::DeltaElement","tree::NodeBody","breaks::BreaksBaseMetric","engine::RevId","tree::Node","multiset::ZipSegment","rope::BaseMetric","diff::DiffOp","engine::DeltaOp","spans::SpansLeaf","spans::SpansInfo","spans::Span","multiset::CountMatcher","rope::LinesMetric","breaks::BreaksMetric","engine::Contents","delta::InsertDelta"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Leaf::is_ok_child":{"Self":["breaks::BreaksLeaf","std::string::String","spans::SpansLeaf"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
+p0.is_ok_child();
+tree::Leaf::is_ok_child(p0);
+crate::tree::Leaf::is_ok_child(p0);
+crate::tree::Leaf::is_ok_child(p0);
-----------------
trace/src/fixed_lifo_deque.rs <fixed_lifo_deque::FixedLifoDeque<A> as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<*const T as std::fmt::Debug>":{},"<fixed_lifo_deque::FixedLifoDeque<A> as std::hash::Hash>::hash":{"A":["std::marker::Sized","std::hash::Hash"],"H":["std::hash::Hasher","std::marker::Sized"]},"fixed_lifo_deque::FixedLifoDeque":{"T":["std::clone::Clone","std::marker::Copy","std::fmt::Debug","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for &T>":{},"std::hash::impls::<impl std::hash::Hash for &mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<*const T as std::fmt::Debug>":{},"<fixed_lifo_deque::FixedLifoDeque<A> as std::hash::Hash>::hash":{"A":["Sample","std::hash::impls::<impl std::hash::Hash for &mut T>","std::hash::impls::<impl std::hash::Hash for *mut T>","fixed_lifo_deque::FixedLifoDeque"],"H":["std::hash::SipHasher","std::collections::hash_map::DefaultHasher","<&mut H as std::hash::Hasher>","std::hash::SipHasher13","std::boxed::Box<T, A>","std::hash::sip::Hasher<S>"]},"fixed_lifo_deque::FixedLifoDeque":{"T":["SampleEventType","std::marker::copy_impls::<impl std::marker::Copy for &T>"]},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::hash::impls::<impl std::hash::Hash for &T>":{},"std::hash::impls::<impl std::hash::Hash for &mut T>":{},"std::hash::impls::<impl std::hash::Hash for *const T>":{},"std::hash::impls::<impl std::hash::Hash for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<A>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // H
+p0.hash(p1);
+<fixed_lifo_deque::FixedLifoDeque<A> as std::hash::Hash>::hash(p0, p1);
+crate::<fixed_lifo_deque::FixedLifoDeque<A> as std::hash::Hash>::hash(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<A>>::hash(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs <fixed_lifo_deque::FixedLifoDeque<A> as std::ops::Index<usize>>::index
deps:{"<fixed_lifo_deque::FixedLifoDeque<A> as std::ops::Index<usize>>::index":{"A":["std::marker::Sized"]}}
candidates:{"<fixed_lifo_deque::FixedLifoDeque<A> as std::ops::Index<usize>>::index":{"A":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<A>
let mut p1 = 0usize; // None+usize
+p0.index(p1);
+<fixed_lifo_deque::FixedLifoDeque<A> as std::ops::Index<usize>>::index(p0, p1);
+crate::<fixed_lifo_deque::FixedLifoDeque<A> as std::ops::Index<usize>>::index(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<A>>::index(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs <fixed_lifo_deque::FixedLifoDeque<A> as std::ops::IndexMut<usize>>::index_mut
deps:{"<fixed_lifo_deque::FixedLifoDeque<A> as std::ops::IndexMut<usize>>::index_mut":{"A":["std::marker::Sized"]}}
candidates:{"<fixed_lifo_deque::FixedLifoDeque<A> as std::ops::IndexMut<usize>>::index_mut":{"A":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<A>
let mut p1 = 0usize; // None+usize
+p0.index_mut(p1);
+<fixed_lifo_deque::FixedLifoDeque<A> as std::ops::IndexMut<usize>>::index_mut(p0, p1);
+crate::<fixed_lifo_deque::FixedLifoDeque<A> as std::ops::IndexMut<usize>>::index_mut(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<A>>::index_mut(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs <fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>::into_iter
deps:{"<fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>::into_iter":{"T":["std::marker::Sized"]}}
candidates:{"<fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>::into_iter":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.into_iter();
+<fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>::into_iter(p0);
+crate::<fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>::into_iter(p0);
+<fixed_lifo_deque::FixedLifoDeque<T>>::into_iter(p0);
-----------------
trace/src/fixed_lifo_deque.rs <&'a fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>::into_iter
'a
deps:{"<&'a fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>::into_iter":{"T":["std::marker::Sized"]}}
candidates:{"<&'a fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>::into_iter":{"T":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.into_iter();
+<&'a fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>::into_iter(p0);
+crate::<&'a fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>::into_iter(p0);
+<&'a fixed_lifo_deque::FixedLifoDeque<T>>::into_iter(p0);
-----------------
trace/src/fixed_lifo_deque.rs <&'a mut fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>::into_iter
'a
deps:{"<&'a mut fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>::into_iter":{"T":["std::marker::Sized"]}}
candidates:{"<&'a mut fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>::into_iter":{"T":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
+p0.into_iter();
+<&'a mut fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>::into_iter(p0);
+crate::<&'a mut fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>::into_iter(p0);
+<&'a mut fixed_lifo_deque::FixedLifoDeque<T>>::into_iter(p0);
-----------------
trace/src/fixed_lifo_deque.rs <fixed_lifo_deque::FixedLifoDeque<A> as std::iter::Extend<A>>::extend
deps:{"<&'a fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>":{},"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut serde_json::Map<std::string::String, serde_json::Value> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a serde_json::Map<std::string::String, serde_json::Value> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"<fixed_lifo_deque::FixedLifoDeque<A> as std::iter::Extend<A>>::extend":{"A":["std::marker::Sized"],"T":["std::marker::Sized","std::iter::IntoIterator"]},"fixed_lifo_deque::FixedLifoDeque":{"T":["std::marker::Sized","std::marker::Copy","std::fmt::Debug","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{}}
candidates:{"<&'a fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>":{},"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut serde_json::Map<std::string::String, serde_json::Value> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a serde_json::Map<std::string::String, serde_json::Value> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::os::unix::net::Incoming<'a>","std::slice::ArrayChunks<'a, T, N>","std::str::EscapeDebug<'a>","std::str::SplitTerminator<'a, P>","std::option::IterMut<'a, A>","std::char::EscapeDebug","std::os::unix::net::ScmRights<'a>","std::collections::vec_deque::IntoIter<T, A>","std::sync::mpsc::TryIter<'a, T>","std::slice::GroupBy<'a, T, P>","std::iter::Flatten<I>","std::iter::Filter<I, P>","std::boxed::Box<I, A>","std::iter::Peekable<I>","std::collections::hash_map::IterMut<'a, K, V>","std::char::EscapeUnicode","std::collections::hash_map::ValuesMut<'a, K, V>","std::iter::Copied<I>","std::iter::TakeWhile<I, P>","std::collections::btree_set::Range<'a, T>","std::sys_common::wstr::WStrUnits<'_>","std::str::SplitN<'a, P>","std::collections::btree_set::Union<'a, T>","std::iter::adapters::GenericShunt<'_, I, R>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::collections::btree_set::Iter<'a, T>","std::iter::Cycle<I>","std::result::IntoIter<T>","std::collections::hash_set::Intersection<'a, T, S>","std::sync::mpsc::Iter<'a, T>","std::collections::btree_map::ValuesMut<'a, K, V>","std::iter::Enumerate<I>","std::slice::SplitN<'a, T, P>","std::str::EscapeUnicode<'a>","std::sys::unix::os::SplitPaths<'a>","std::ops::RangeFrom<A>","std::slice::EscapeAscii<'a>","std::iter::OnceWith<F>","std::path::Components<'a>","std::ops::Range<A>","std::sys::unix::os::Env","std::sys::unix::args::Args","std::vec::DrainFilter<'_, T, F, A>","std::collections::hash_set::Union<'a, T, S>","std::slice::SplitMut<'a, T, P>","std::slice::ChunksExact<'a, T>","std::iter::Cloned<I>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::iter::Empty<T>","std::collections::btree_map::Keys<'a, K, V>","std::slice::ChunksMut<'a, T>","std::iter::SkipWhile<I, P>","std::collections::btree_map::IntoIter<K, V, A>","std::iter::Skip<I>","std::slice::ArrayWindows<'a, T, N>","std::iter::Map<I, F>","std::collections::linked_list::IterMut<'a, T>","std::env::Args","std::string::Drain<'_>","std::net::IntoIncoming","std::char::DecodeUtf16<I>","std::slice::ArrayChunksMut<'a, T, N>","std::os::unix::net::ScmCredentials<'a>","std::str::SplitWhitespace<'a>","std::slice::RChunks<'a, T>","std::ascii::EscapeDefault","<&mut I as std::iter::Iterator>","std::collections::hash_map::IntoKeys<K, V>","std::slice::RSplitNMut<'a, T, P>","std::net::Incoming<'a>","std::collections::btree_set::SymmetricDifference<'a, T>","std::slice::Iter<'a, T>","std::iter::Chain<A, B>","std::str::LinesAny<'a>","std::io::Lines<B>","std::slice::GroupByMut<'a, T, P>","std::slice::RChunksExactMut<'a, T>","std::iter::Fuse<I>","std::ops::RangeInclusive<A>","std::slice::RChunksMut<'a, T>","std::iter::StepBy<I>","std::iter::RepeatN<A>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::collections::binary_heap::Iter<'a, T>","std::collections::hash_set::DrainFilter<'_, K, F>","std::iter::FlatMap<I, U, F>","std::collections::linked_list::IntoIter<T>","std::char::ToLowercase","std::collections::btree_set::Intersection<'a, T, A>","std::iter::Scan<I, St, F>","std::collections::vec_deque::Iter<'a, T>","std::str::Utf8Chunks<'a>","std::slice::RSplitN<'a, T, P>","std::sync::mpsc::IntoIter<T>","std::iter::Successors<T, F>","std::path::Ancestors<'a>","std::slice::ChunksExactMut<'a, T>","std::option::IntoIter<A>","std::path::Iter<'a>","std::collections::hash_set::Iter<'a, K>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::collections::hash_map::Iter<'a, K, V>","std::collections::hash_map::IntoIter<K, V>","std::str::RSplit<'a, P>","std::slice::Chunks<'a, T>","std::collections::btree_map::IntoValues<K, V, A>","std::env::VarsOs","std::str::RSplitN<'a, P>","std::str::Chars<'a>","std::char::EscapeDefault","std::str::CharIndices<'a>","std::vec::IntoIter<T, A>","std::iter::ArrayChunks<I, N>","std::iter::IntersperseWith<I, G>","std::collections::hash_set::Drain<'a, K>","std::env::Vars","std::io::Bytes<R>","std::slice::Windows<'a, T>","std::slice::RChunksExact<'a, T>","std::iter::MapWhile<I, P>","std::process::CommandArgs<'a>","std::collections::hash_map::Drain<'a, K, V>","std::str::SplitAsciiWhitespace<'a>","std::slice::RSplitMut<'a, T, P>","std::collections::binary_heap::IntoIterSorted<T>","std::iter::Once<T>","std::str::Matches<'a, P>","std::sys_common::wtf8::EncodeWide<'a>","std::collections::btree_map::IterMut<'a, K, V>","std::collections::btree_map::IntoKeys<K, V, A>","std::str::RSplitTerminator<'a, P>","std::collections::btree_set::Difference<'a, T, A>","std::str::Split<'a, P>","std::vec::Drain<'_, T, A>","std::env::SplitPaths<'a>","core::error::Source<'a>","std::collections::hash_map::Values<'a, K, V>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::binary_heap::IntoIter<T>","std::str::Bytes<'_>","std::collections::btree_map::Iter<'a, K, V>","std::slice::RSplit<'a, T, P>","std::collections::hash_map::Keys<'a, K, V>","std::iter::RepeatWith<F>","std::slice::SplitInclusive<'a, T, P>","std::str::EscapeDefault<'a>","std::vec::Splice<'_, I, A>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::str::RMatches<'a, P>","std::str::RMatchIndices<'a, P>","std::collections::btree_set::IntoIter<T, A>","std::sys_common::net::LookupHost","std::iter::Take<I>","std::collections::binary_heap::Drain<'_, T>","std::collections::btree_map::Range<'a, K, V>","std::array::IntoIter<T, N>","std::sys::unix::fs::ReadDir","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::str::EncodeUtf16<'a>","std::slice::IterMut<'a, T>","std::iter::Repeat<A>","std::iter::Inspect<I, F>","std::collections::linked_list::DrainFilter<'_, T, F>","std::collections::hash_set::IntoIter<K>","std::iter::Zip<A, B>","std::iter::FromFn<F>","std::ops::index_range::IndexRange","std::fs::ReadDir","std::collections::linked_list::Iter<'a, T>","std::slice::Split<'a, T, P>","std::collections::btree_map::RangeMut<'a, K, V>","std::iter::Intersperse<I>","std::collections::hash_set::Difference<'a, T, S>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::os::unix::net::Messages<'a>","std::char::CaseMappingIter","std::str::MatchIndices<'a, P>","std::collections::hash_map::IntoValues<K, V>","std::iter::ByRefSized<'_, I>","std::collections::btree_map::Values<'a, K, V>","std::slice::SplitInclusiveMut<'a, T, P>","std::process::CommandEnvs<'a>","std::result::Iter<'a, T>","std::iter::Rev<I>","std::option::Iter<'a, A>","std::sys::unix::process::process_common::CommandArgs<'a>","std::option::Item<A>","std::collections::binary_heap::DrainSorted<'_, T>","std::iter::FilterMap<I, F>","std::collections::vec_deque::IterMut<'a, T>","std::char::ToUppercase","std::str::SplitInclusive<'a, P>","std::result::IterMut<'a, T>","core::slice::iter::GenericSplitN<I>","std::io::Split<B>","std::str::Lines<'a>","std::slice::SplitNMut<'a, T, P>","std::iter::sources::from_generator::FromGenerator<G>","std::env::ArgsOs"]},"<fixed_lifo_deque::FixedLifoDeque<A> as std::iter::Extend<A>>::extend":{"A":["RUG_ANY"],"T":["fixed_lifo_deque::FixedLifoDeque","<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>","<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>"]},"fixed_lifo_deque::FixedLifoDeque":{"T":["std::marker::copy_impls::<impl std::marker::Copy for *const T>","SampleEventType"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<A>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.extend(p1);
+<fixed_lifo_deque::FixedLifoDeque<A> as std::iter::Extend<A>>::extend(p0, p1);
+crate::<fixed_lifo_deque::FixedLifoDeque<A> as std::iter::Extend<A>>::extend(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<A>>::extend(p0, p1);
-----------------
trace/src/fixed_lifo_deque.rs <fixed_lifo_deque::FixedLifoDeque<T> as std::iter::Extend<&'a T>>::extend
'a
deps:{"<&'a fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>":{},"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut serde_json::Map<std::string::String, serde_json::Value> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a serde_json::Map<std::string::String, serde_json::Value> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"<fixed_lifo_deque::FixedLifoDeque<T> as std::iter::Extend<&'a T>>::extend":{"I":["std::marker::Sized","std::iter::IntoIterator"],"T":["std::marker::Sized","std::marker::Copy"]},"fixed_lifo_deque::FixedLifoDeque":{"T":["std::marker::Sized","std::clone::Clone","std::marker::Copy","std::fmt::Debug"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{}}
candidates:{"<&'a fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>":{},"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut fixed_lifo_deque::FixedLifoDeque<T> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut serde_json::Map<std::string::String, serde_json::Value> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a serde_json::Map<std::string::String, serde_json::Value> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&T as std::fmt::Debug>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::sync::mpsc::Iter<'a, T>","std::result::IntoIter<T>","std::env::Vars","std::iter::FilterMap<I, F>","std::str::SplitN<'a, P>","std::slice::RSplit<'a, T, P>","std::collections::hash_set::DrainFilter<'_, K, F>","std::iter::Filter<I, P>","std::iter::RepeatWith<F>","std::sys::unix::fs::ReadDir","std::collections::vec_deque::IntoIter<T, A>","std::iter::RepeatN<A>","std::iter::Intersperse<I>","std::slice::Iter<'a, T>","std::char::EscapeDefault","std::char::CaseMappingIter","std::env::ArgsOs","std::collections::hash_map::Drain<'a, K, V>","std::slice::GroupBy<'a, T, P>","std::collections::hash_set::Iter<'a, K>","std::str::Split<'a, P>","std::str::MatchIndices<'a, P>","std::str::SplitTerminator<'a, P>","std::iter::Cycle<I>","std::slice::ChunksMut<'a, T>","std::array::IntoIter<T, N>","std::collections::hash_set::Drain<'a, K>","std::collections::vec_deque::IterMut<'a, T>","std::sync::mpsc::IntoIter<T>","std::option::IntoIter<A>","std::collections::btree_set::Union<'a, T>","std::slice::RSplitMut<'a, T, P>","std::sys_common::wstr::WStrUnits<'_>","std::slice::SplitNMut<'a, T, P>","std::sys::unix::process::process_common::CommandArgs<'a>","std::result::IterMut<'a, T>","std::slice::ChunksExact<'a, T>","std::iter::Once<T>","std::iter::Take<I>","std::slice::ArrayChunks<'a, T, N>","std::collections::btree_map::IntoKeys<K, V, A>","std::str::RSplitN<'a, P>","std::net::Incoming<'a>","std::char::EscapeUnicode","std::collections::hash_map::IntoValues<K, V>","std::slice::ArrayWindows<'a, T, N>","std::iter::Chain<A, B>","std::collections::btree_map::Iter<'a, K, V>","std::str::SplitAsciiWhitespace<'a>","std::path::Ancestors<'a>","std::str::RMatches<'a, P>","std::collections::btree_map::Values<'a, K, V>","std::collections::hash_set::Intersection<'a, T, S>","std::iter::Enumerate<I>","std::collections::hash_map::Keys<'a, K, V>","std::path::Components<'a>","std::vec::Drain<'_, T, A>","std::os::unix::net::ScmCredentials<'a>","std::ops::Range<A>","std::collections::hash_set::SymmetricDifference<'a, T, S>","std::collections::binary_heap::IntoIterSorted<T>","std::str::EscapeUnicode<'a>","std::slice::RChunksExact<'a, T>","std::str::CharIndices<'a>","std::iter::adapters::GenericShunt<'_, I, R>","std::collections::hash_set::IntoIter<K>","std::str::EncodeUtf16<'a>","std::slice::SplitN<'a, T, P>","std::collections::btree_set::Difference<'a, T, A>","std::io::Lines<B>","std::collections::hash_map::DrainFilter<'_, K, V, F>","std::slice::RSplitN<'a, T, P>","std::option::Item<A>","std::collections::linked_list::DrainFilter<'_, T, F>","std::str::Utf8Chunks<'a>","<&mut I as std::iter::Iterator>","std::str::SplitWhitespace<'a>","std::iter::Copied<I>","std::os::unix::net::Incoming<'a>","std::iter::Repeat<A>","std::str::Chars<'a>","std::iter::Inspect<I, F>","std::collections::hash_set::Union<'a, T, S>","std::sys_common::wtf8::Wtf8CodePoints<'a>","std::iter::MapWhile<I, P>","std::str::SplitInclusive<'a, P>","std::collections::hash_map::Values<'a, K, V>","std::slice::IterMut<'a, T>","std::sys::unix::os::SplitPaths<'a>","std::boxed::Box<I, A>","std::slice::ArrayChunksMut<'a, T, N>","std::collections::btree_set::DrainFilter<'_, T, F, A>","std::iter::Scan<I, St, F>","std::str::Matches<'a, P>","std::collections::hash_set::Difference<'a, T, S>","std::slice::EscapeAscii<'a>","std::sys::unix::os::Env","std::iter::ByRefSized<'_, I>","std::env::VarsOs","std::collections::btree_set::Intersection<'a, T, A>","std::collections::hash_map::IntoKeys<K, V>","core::slice::iter::GenericSplitN<I>","std::sys::unix::args::Args","std::result::Iter<'a, T>","std::slice::SplitInclusive<'a, T, P>","std::iter::Flatten<I>","std::char::DecodeUtf16<I>","std::char::ToLowercase","std::option::IterMut<'a, A>","std::process::CommandEnvs<'a>","std::char::EscapeDebug","std::collections::hash_map::IterMut<'a, K, V>","std::os::unix::net::ScmRights<'a>","std::ops::index_range::IndexRange","std::str::Lines<'a>","std::collections::btree_map::DrainFilter<'_, K, V, F, A>","std::iter::Map<I, F>","std::iter::FlatMap<I, U, F>","std::collections::linked_list::Iter<'a, T>","std::str::RSplit<'a, P>","std::iter::Peekable<I>","std::collections::btree_set::SymmetricDifference<'a, T>","std::iter::Zip<A, B>","std::collections::btree_map::Range<'a, K, V>","std::process::CommandArgs<'a>","std::iter::Cloned<I>","std::collections::vec_deque::Drain<'_, T, A>","std::collections::hash_map::IntoIter<K, V>","std::slice::RSplitNMut<'a, T, P>","std::iter::sources::from_generator::FromGenerator<G>","core::error::Source<'a>","std::iter::FromFn<F>","std::ascii::EscapeDefault","std::sys_common::net::LookupHost","std::collections::binary_heap::IntoIter<T>","std::str::EscapeDefault<'a>","std::collections::btree_map::Keys<'a, K, V>","std::iter::Skip<I>","std::str::LinesAny<'a>","std::iter::Rev<I>","std::iter::adapters::flatten::FlattenCompat<I, U>","std::net::IntoIncoming","std::char::ToUppercase","std::collections::linked_list::IntoIter<T>","std::collections::hash_map::ValuesMut<'a, K, V>","std::collections::btree_map::ValuesMut<'a, K, V>","std::collections::btree_set::Iter<'a, T>","std::iter::TakeWhile<I, P>","std::slice::Windows<'a, T>","std::collections::btree_map::IntoIter<K, V, A>","std::os::unix::net::ancillary::AncillaryDataIter<'a, T>","std::iter::SkipWhile<I, P>","std::slice::SplitInclusiveMut<'a, T, P>","std::collections::btree_map::IterMut<'a, K, V>","std::str::RSplitTerminator<'a, P>","std::iter::OnceWith<F>","std::collections::linked_list::IterMut<'a, T>","std::str::EscapeDebug<'a>","std::vec::DrainFilter<'_, T, F, A>","std::env::Args","std::option::Iter<'a, A>","std::str::Bytes<'_>","std::slice::Split<'a, T, P>","std::path::Iter<'a>","std::collections::btree_map::IntoValues<K, V, A>","std::iter::StepBy<I>","std::slice::Chunks<'a, T>","std::collections::binary_heap::DrainSorted<'_, T>","std::slice::RChunksExactMut<'a, T>","std::iter::Empty<T>","std::iter::Successors<T, F>","std::ops::RangeInclusive<A>","std::collections::binary_heap::Iter<'a, T>","std::string::Drain<'_>","std::fs::ReadDir","std::slice::RChunksMut<'a, T>","std::collections::hash_map::Iter<'a, K, V>","std::str::RMatchIndices<'a, P>","std::slice::SplitMut<'a, T, P>","std::vec::Splice<'_, I, A>","std::env::SplitPaths<'a>","std::collections::btree_set::IntoIter<T, A>","std::io::Split<B>","std::collections::binary_heap::Drain<'_, T>","std::collections::btree_set::Range<'a, T>","std::iter::IntersperseWith<I, G>","std::sync::mpsc::TryIter<'a, T>","std::slice::GroupByMut<'a, T, P>","std::os::unix::net::Messages<'a>","std::collections::vec_deque::Iter<'a, T>","std::slice::ChunksExactMut<'a, T>","std::collections::btree_map::RangeMut<'a, K, V>","std::vec::IntoIter<T, A>","std::sys_common::wtf8::EncodeWide<'a>","std::iter::ArrayChunks<I, N>","std::iter::Fuse<I>","std::io::Bytes<R>","std::slice::RChunks<'a, T>","std::ops::RangeFrom<A>"]},"<fixed_lifo_deque::FixedLifoDeque<T> as std::iter::Extend<&'a T>>::extend":{"I":["fixed_lifo_deque::FixedLifoDeque","<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>","<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>"],"T":["std::marker::copy_impls::<impl std::marker::Copy for *const T>","std::marker::copy_impls::<impl std::marker::Copy for *mut T>","Config","SampleEventType"]},"fixed_lifo_deque::FixedLifoDeque":{"T":["std::clone::impls::<impl std::clone::Clone for *mut T>","SampleEventType"]},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::marker::copy_impls::<impl std::marker::Copy for &T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *const T>":{},"std::marker::copy_impls::<impl std::marker::Copy for *mut T>":{}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // fixed_lifo_deque::FixedLifoDeque<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // I
+p0.extend(p1);
+<fixed_lifo_deque::FixedLifoDeque<T> as std::iter::Extend<&'a T>>::extend(p0, p1);
+crate::<fixed_lifo_deque::FixedLifoDeque<T> as std::iter::Extend<&'a T>>::extend(p0, p1);
+<fixed_lifo_deque::FixedLifoDeque<T>>::extend(p0, p1);
-----------------
trace/src/chrome_trace_dump.rs <chrome_trace_dump::Error as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // chrome_trace_dump::Error
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<chrome_trace_dump::Error as std::fmt::Debug>::fmt(p0, p1);
+crate::<chrome_trace_dump::Error as std::fmt::Debug>::fmt(p0, p1);
+<chrome_trace_dump::Error>::fmt(p0, p1);
-----------------
trace/src/chrome_trace_dump.rs <chrome_trace_dump::Error as std::convert::From<std::io::Error>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::io::Error
+<chrome_trace_dump::Error as std::convert::From<std::io::Error>>::from(p0);
+crate::<chrome_trace_dump::Error as std::convert::From<std::io::Error>>::from(p0);
+<chrome_trace_dump::Error>::from(p0);
-----------------
trace/src/chrome_trace_dump.rs <chrome_trace_dump::Error as std::convert::From<serde_json::Error>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // serde_json::Error
+<chrome_trace_dump::Error as std::convert::From<serde_json::Error>>::from(p0);
+crate::<chrome_trace_dump::Error as std::convert::From<serde_json::Error>>::from(p0);
+<chrome_trace_dump::Error>::from(p0);
-----------------
trace/src/chrome_trace_dump.rs <chrome_trace_dump::Error as std::convert::From<std::string::String>>::from
deps:{}
candidates:{}
let mut p0 = std::string::String::new(); // None+std::string::String
+<chrome_trace_dump::Error as std::convert::From<std::string::String>>::from(p0);
+crate::<chrome_trace_dump::Error as std::convert::From<std::string::String>>::from(p0);
+<chrome_trace_dump::Error>::from(p0);
-----------------
trace/src/chrome_trace_dump.rs chrome_trace_dump::Error::already_exists
deps:{}
candidates:{}
+chrome_trace_dump::Error::already_exists();
+crate::chrome_trace_dump::Error::already_exists();
+<chrome_trace_dump::Error>::already_exists();
-----------------
trace/src/chrome_trace_dump.rs <chrome_trace_dump::ChromeTraceArrayEntries as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // chrome_trace_dump::ChromeTraceArrayEntries
+p0.clone();
+<chrome_trace_dump::ChromeTraceArrayEntries as std::clone::Clone>::clone(p0);
+crate::<chrome_trace_dump::ChromeTraceArrayEntries as std::clone::Clone>::clone(p0);
+<chrome_trace_dump::ChromeTraceArrayEntries>::clone(p0);
-----------------
trace/src/chrome_trace_dump.rs <chrome_trace_dump::ChromeTraceArrayEntries as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // chrome_trace_dump::ChromeTraceArrayEntries
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<chrome_trace_dump::ChromeTraceArrayEntries as std::fmt::Debug>::fmt(p0, p1);
+crate::<chrome_trace_dump::ChromeTraceArrayEntries as std::fmt::Debug>::fmt(p0, p1);
+<chrome_trace_dump::ChromeTraceArrayEntries>::fmt(p0, p1);
-----------------
trace/src/chrome_trace_dump.rs chrome_trace_dump::_IMPL_DESERIALIZE_FOR_ChromeTraceArrayEntries::<impl serde::Deserialize<'de> for chrome_trace_dump::ChromeTraceArrayEntries>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"chrome_trace_dump::_IMPL_DESERIALIZE_FOR_ChromeTraceArrayEntries::<impl serde::Deserialize<'de> for chrome_trace_dump::ChromeTraceArrayEntries>::deserialize":{"__D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"chrome_trace_dump::_IMPL_DESERIALIZE_FOR_ChromeTraceArrayEntries::<impl serde::Deserialize<'de> for chrome_trace_dump::ChromeTraceArrayEntries>::deserialize":{"__D":["serde::de::value::CharDeserializer<E>","&'de serde_json::Value","serde::de::value::U64Deserializer<E>","serde_json::Number","serde::de::value::I8Deserializer<E>","serde::de::value::F64Deserializer<E>","serde_json::value::de::SeqDeserializer","serde::private::de::content::ContentDeserializer<'de, E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::I16Deserializer<E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::I64Deserializer<E>","<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>","serde::de::value::I128Deserializer<E>","serde::de::value::U32Deserializer<E>","serde::private::de::content::MapDeserializer<'de, E>","serde_json::de::MapKey<'a, R>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde_json::Value","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::I32Deserializer<E>","&'a serde_json::Number","serde::de::value::U16Deserializer<E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::StrDeserializer<'a, E>","serde::de::value::U8Deserializer<E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::BoolDeserializer<E>","serde::de::value::UsizeDeserializer<E>","serde::private::de::StrDeserializer<'a, E>","serde_json::value::de::SeqRefDeserializer<'de>","serde_json::value::de::MapKeyDeserializer<'de>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::IsizeDeserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","serde::de::value::SeqDeserializer<I, E>","serde_json::value::de::MapDeserializer","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::F32Deserializer<E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::CowStrDeserializer<'a, E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::StringDeserializer<E>","serde::de::value::PairDeserializer<A, B, E>","serde::de::value::UnitDeserializer<E>","serde::de::value::U128Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+chrome_trace_dump::_IMPL_DESERIALIZE_FOR_ChromeTraceArrayEntries::<impl serde::Deserialize<'de> for chrome_trace_dump::ChromeTraceArrayEntries>::deserialize(p0);
+crate::chrome_trace_dump::_IMPL_DESERIALIZE_FOR_ChromeTraceArrayEntries::<impl serde::Deserialize<'de> for chrome_trace_dump::ChromeTraceArrayEntries>::deserialize(p0);
+<chrome_trace_dump::ChromeTraceArrayEntries>::deserialize(p0);
-----------------
trace/src/lib.rs <CategoriesT as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // CategoriesT
+p0.clone();
+<CategoriesT as std::clone::Clone>::clone(p0);
+crate::<CategoriesT as std::clone::Clone>::clone(p0);
+<CategoriesT>::clone(p0);
-----------------
trace/src/lib.rs <CategoriesT as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // CategoriesT
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<CategoriesT as std::fmt::Debug>::fmt(p0, p1);
+crate::<CategoriesT as std::fmt::Debug>::fmt(p0, p1);
+<CategoriesT>::fmt(p0, p1);
-----------------
trace/src/lib.rs <std::vec::Vec<std::string::String> as StringArrayEq<[&'static str]>>::arr_eq
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::vec::Vec<std::string::String>
let mut p1 = & ["a"].as_mut_slice(); // None+[&'static str]
+p0.arr_eq(p1);
+<std::vec::Vec<std::string::String> as StringArrayEq<[&'static str]>>::arr_eq(p0, p1);
+crate::<std::vec::Vec<std::string::String> as StringArrayEq<[&'static str]>>::arr_eq(p0, p1);
+<std::vec::Vec<std::string::String>>::arr_eq(p0, p1);
-----------------
trace/src/lib.rs <&'static [&'static str] as StringArrayEq<std::vec::Vec<std::string::String>>>::arr_eq
deps:{}
candidates:{}
let mut p0 = & ["a"].as_mut_slice(); // None+&'static [&'static str]
let mut p1 = & std::string::String::new(); // None+std::vec::Vec<std::string::String>
+p0.arr_eq(p1);
+<&'static [&'static str] as StringArrayEq<std::vec::Vec<std::string::String>>>::arr_eq(p0, p1);
+crate::<&'static [&'static str] as StringArrayEq<std::vec::Vec<std::string::String>>>::arr_eq(p0, p1);
+<&'static [&'static str]>::arr_eq(p0, p1);
-----------------
trace/src/lib.rs <CategoriesT as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // CategoriesT
let mut p1 = & MaybeUninit::uninit().assume_init(); // CategoriesT
+p0.eq(p1);
+<CategoriesT as std::cmp::PartialEq>::eq(p0, p1);
+crate::<CategoriesT as std::cmp::PartialEq>::eq(p0, p1);
+<CategoriesT>::eq(p0, p1);
-----------------
trace/src/lib.rs <CategoriesT as serde::Serialize>::serialize
deps:{"<&'a mut serde_json::Serializer<W, F> as serde::Serializer>":{},"<CategoriesT as serde::Serialize>::serialize":{"S":["std::marker::Sized","serde::Serializer"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as serde::Serializer>":{},"<CategoriesT as serde::Serialize>::serialize":{"S":["<&'a mut serde_json::Serializer<W, F> as serde::Serializer>","serde::private::ser::content::ContentSerializer<E>","serde_json::value::ser::MapKeySerializer","serde::private::ser::FlatMapSerializer<'a, M>","serde_json::value::Serializer","serde_json::ser::MapKeySerializer<'a, W, F>","serde::private::ser::TaggedSerializer<S>","serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // CategoriesT
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.serialize(p1);
+<CategoriesT as serde::Serialize>::serialize(p0, p1);
+crate::<CategoriesT as serde::Serialize>::serialize(p0, p1);
+<CategoriesT>::serialize(p0, p1);
-----------------
trace/src/lib.rs <CategoriesT as serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"<CategoriesT as serde::Deserialize<'de>>::deserialize":{"D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"<CategoriesT as serde::Deserialize<'de>>::deserialize":{"D":["serde_json::de::MapKey<'a, R>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::I8Deserializer<E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::PairDeserializer<A, B, E>","serde_json::value::de::SeqRefDeserializer<'de>","serde::de::value::UsizeDeserializer<E>","serde::de::value::StringDeserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde_json::Value","&'a serde_json::Number","serde::de::value::U128Deserializer<E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::StrDeserializer<'a, E>","serde::de::value::U32Deserializer<E>","serde::de::value::SeqDeserializer<I, E>","serde_json::value::de::MapDeserializer","&'de serde_json::Value","serde::de::value::I64Deserializer<E>","serde::de::value::I32Deserializer<E>","serde::de::value::F32Deserializer<E>","serde_json::value::de::SeqDeserializer","serde::private::de::content::ContentDeserializer<'de, E>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::BoolDeserializer<E>","serde::de::value::I128Deserializer<E>","serde::private::de::content::MapDeserializer<'de, E>","serde_json::Number","serde::de::value::I16Deserializer<E>","serde::de::value::F64Deserializer<E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::U8Deserializer<E>","serde::de::value::U64Deserializer<E>","serde::de::value::CharDeserializer<E>","serde::de::value::U16Deserializer<E>","serde::de::value::MapAccessDeserializer<A>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::private::de::BytesDeserializer<'a, E>","serde_json::value::de::MapKeyDeserializer<'de>","serde::de::value::SeqAccessDeserializer<A>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::UnitDeserializer<E>","<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // D
+<CategoriesT as serde::Deserialize<'de>>::deserialize(p0);
+crate::<CategoriesT as serde::Deserialize<'de>>::deserialize(p0);
+<CategoriesT>::deserialize(p0);
-----------------
trace/src/lib.rs <<CategoriesT as serde::Deserialize<'de>>::deserialize::CategoriesTVisitor as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // <CategoriesT as serde::Deserialize<'de>>::deserialize::CategoriesTVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<<CategoriesT as serde::Deserialize<'de>>::deserialize::CategoriesTVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<<CategoriesT as serde::Deserialize<'de>>::deserialize::CategoriesTVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+<<CategoriesT as serde::Deserialize<'de>>::deserialize::CategoriesTVisitor>::expecting(p0, p1);
-----------------
trace/src/lib.rs <<CategoriesT as serde::Deserialize<'de>>::deserialize::CategoriesTVisitor as serde::de::Visitor<'de>>::visit_str
'de
deps:{"<<CategoriesT as serde::Deserialize<'de>>::deserialize::CategoriesTVisitor as serde::de::Visitor<'de>>::visit_str":{"E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<<CategoriesT as serde::Deserialize<'de>>::deserialize::CategoriesTVisitor as serde::de::Visitor<'de>>::visit_str":{"E":["serde_json::Error","serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // <CategoriesT as serde::Deserialize<'de>>::deserialize::CategoriesTVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<<CategoriesT as serde::Deserialize<'de>>::deserialize::CategoriesTVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<<CategoriesT as serde::Deserialize<'de>>::deserialize::CategoriesTVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<<CategoriesT as serde::Deserialize<'de>>::deserialize::CategoriesTVisitor>::visit_str(p0, &p1);
-----------------
trace/src/lib.rs CategoriesT::join
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // CategoriesT
let mut p1 = "sample"; // None+&str
+p0.join(&p1);
+CategoriesT::join(p0, &p1);
+crate::CategoriesT::join(p0, &p1);
+<CategoriesT>::join(p0, &p1);
-----------------
trace/src/lib.rs <CategoriesT as std::convert::From<&'static [&'static str; 0]>>::from
deps:{}
candidates:{}
let mut p0 = & ["a";1]; // None+[&'static str; 0]
+<CategoriesT as std::convert::From<&'static [&'static str; 0]>>::from(p0);
+crate::<CategoriesT as std::convert::From<&'static [&'static str; 0]>>::from(p0);
+<CategoriesT>::from(p0);
-----------------
trace/src/lib.rs <CategoriesT as std::convert::From<&'static [&'static str; 1]>>::from
deps:{}
candidates:{}
let mut p0 = & ["a";1]; // None+[&'static str; 1]
+<CategoriesT as std::convert::From<&'static [&'static str; 1]>>::from(p0);
+crate::<CategoriesT as std::convert::From<&'static [&'static str; 1]>>::from(p0);
+<CategoriesT>::from(p0);
-----------------
trace/src/lib.rs <CategoriesT as std::convert::From<&'static [&'static str; 2]>>::from
deps:{}
candidates:{}
let mut p0 = & ["a";1]; // None+[&'static str; 2]
+<CategoriesT as std::convert::From<&'static [&'static str; 2]>>::from(p0);
+crate::<CategoriesT as std::convert::From<&'static [&'static str; 2]>>::from(p0);
+<CategoriesT>::from(p0);
-----------------
trace/src/lib.rs <CategoriesT as std::convert::From<&'static [&'static str; 3]>>::from
deps:{}
candidates:{}
let mut p0 = & ["a";1]; // None+[&'static str; 3]
+<CategoriesT as std::convert::From<&'static [&'static str; 3]>>::from(p0);
+crate::<CategoriesT as std::convert::From<&'static [&'static str; 3]>>::from(p0);
+<CategoriesT>::from(p0);
-----------------
trace/src/lib.rs <CategoriesT as std::convert::From<&'static [&'static str; 4]>>::from
deps:{}
candidates:{}
let mut p0 = & ["a";1]; // None+[&'static str; 4]
+<CategoriesT as std::convert::From<&'static [&'static str; 4]>>::from(p0);
+crate::<CategoriesT as std::convert::From<&'static [&'static str; 4]>>::from(p0);
+<CategoriesT>::from(p0);
-----------------
trace/src/lib.rs <CategoriesT as std::convert::From<&'static [&'static str; 5]>>::from
deps:{}
candidates:{}
let mut p0 = & ["a";1]; // None+[&'static str; 5]
+<CategoriesT as std::convert::From<&'static [&'static str; 5]>>::from(p0);
+crate::<CategoriesT as std::convert::From<&'static [&'static str; 5]>>::from(p0);
+<CategoriesT>::from(p0);
-----------------
trace/src/lib.rs <CategoriesT as std::convert::From<&'static [&'static str; 6]>>::from
deps:{}
candidates:{}
let mut p0 = & ["a";1]; // None+[&'static str; 6]
+<CategoriesT as std::convert::From<&'static [&'static str; 6]>>::from(p0);
+crate::<CategoriesT as std::convert::From<&'static [&'static str; 6]>>::from(p0);
+<CategoriesT>::from(p0);
-----------------
trace/src/lib.rs <CategoriesT as std::convert::From<&'static [&'static str; 7]>>::from
deps:{}
candidates:{}
let mut p0 = & ["a";1]; // None+[&'static str; 7]
+<CategoriesT as std::convert::From<&'static [&'static str; 7]>>::from(p0);
+crate::<CategoriesT as std::convert::From<&'static [&'static str; 7]>>::from(p0);
+<CategoriesT>::from(p0);
-----------------
trace/src/lib.rs <CategoriesT as std::convert::From<&'static [&'static str; 8]>>::from
deps:{}
candidates:{}
let mut p0 = & ["a";1]; // None+[&'static str; 8]
+<CategoriesT as std::convert::From<&'static [&'static str; 8]>>::from(p0);
+crate::<CategoriesT as std::convert::From<&'static [&'static str; 8]>>::from(p0);
+<CategoriesT>::from(p0);
-----------------
trace/src/lib.rs <CategoriesT as std::convert::From<&'static [&'static str; 9]>>::from
deps:{}
candidates:{}
let mut p0 = & ["a";1]; // None+[&'static str; 9]
+<CategoriesT as std::convert::From<&'static [&'static str; 9]>>::from(p0);
+crate::<CategoriesT as std::convert::From<&'static [&'static str; 9]>>::from(p0);
+<CategoriesT>::from(p0);
-----------------
trace/src/lib.rs <CategoriesT as std::convert::From<&'static [&'static str; 10]>>::from
deps:{}
candidates:{}
let mut p0 = & ["a";1]; // None+[&'static str; 10]
+<CategoriesT as std::convert::From<&'static [&'static str; 10]>>::from(p0);
+crate::<CategoriesT as std::convert::From<&'static [&'static str; 10]>>::from(p0);
+<CategoriesT>::from(p0);
-----------------
trace/src/lib.rs <CategoriesT as std::convert::From<std::vec::Vec<std::string::String>>>::from
deps:{}
candidates:{}
let mut p0 = std::string::String::new(); // None+std::vec::Vec<std::string::String>
+<CategoriesT as std::convert::From<std::vec::Vec<std::string::String>>>::from(p0);
+crate::<CategoriesT as std::convert::From<std::vec::Vec<std::string::String>>>::from(p0);
+<CategoriesT>::from(p0);
-----------------
trace/src/lib.rs <Config as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Config
+p0.clone();
+<Config as std::clone::Clone>::clone(p0);
+crate::<Config as std::clone::Clone>::clone(p0);
+<Config>::clone(p0);
-----------------
trace/src/lib.rs Config::with_limit_bytes
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
+Config::with_limit_bytes(p0);
+crate::Config::with_limit_bytes(p0);
+<Config>::with_limit_bytes(p0);
-----------------
trace/src/lib.rs Config::with_limit_count
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
+Config::with_limit_count(p0);
+crate::Config::with_limit_count(p0);
+<Config>::with_limit_count(p0);
-----------------
trace/src/lib.rs Config::default
deps:{}
candidates:{}
+Config::default();
+crate::Config::default();
+<Config>::default();
-----------------
trace/src/lib.rs Config::max_size_in_bytes
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // Config
+p0.max_size_in_bytes();
+Config::max_size_in_bytes(p0);
+crate::Config::max_size_in_bytes(p0);
+<Config>::max_size_in_bytes(p0);
-----------------
trace/src/lib.rs Config::max_samples
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // Config
+p0.max_samples();
+Config::max_samples(p0);
+crate::Config::max_samples(p0);
+<Config>::max_samples(p0);
-----------------
trace/src/lib.rs <SampleEventType as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // SampleEventType
+p0.clone();
+<SampleEventType as std::clone::Clone>::clone(p0);
+crate::<SampleEventType as std::clone::Clone>::clone(p0);
+<SampleEventType>::clone(p0);
-----------------
trace/src/lib.rs <SampleEventType as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // SampleEventType
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<SampleEventType as std::fmt::Debug>::fmt(p0, p1);
+crate::<SampleEventType as std::fmt::Debug>::fmt(p0, p1);
+<SampleEventType>::fmt(p0, p1);
-----------------
trace/src/lib.rs <SampleEventType as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // SampleEventType
let mut p1 = & MaybeUninit::uninit().assume_init(); // SampleEventType
+p0.eq(p1);
+<SampleEventType as std::cmp::PartialEq>::eq(p0, p1);
+crate::<SampleEventType as std::cmp::PartialEq>::eq(p0, p1);
+<SampleEventType>::eq(p0, p1);
-----------------
trace/src/lib.rs <SampleEventType as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // SampleEventType
+p0.assert_receiver_is_total_eq();
+<SampleEventType as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<SampleEventType as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<SampleEventType>::assert_receiver_is_total_eq(p0);
-----------------
trace/src/lib.rs SampleEventType::into_chrome_id
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // SampleEventType
+p0.into_chrome_id();
+SampleEventType::into_chrome_id(p0);
+crate::SampleEventType::into_chrome_id(p0);
+<SampleEventType>::into_chrome_id(p0);
-----------------
trace/src/lib.rs SampleEventType::from_chrome_id
deps:{}
candidates:{}
let mut p0 = 'a'; // None+char
+SampleEventType::from_chrome_id(p0);
+crate::SampleEventType::from_chrome_id(p0);
+<SampleEventType>::from_chrome_id(p0);
-----------------
trace/src/lib.rs <MetadataType as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // MetadataType
+p0.clone();
+<MetadataType as std::clone::Clone>::clone(p0);
+crate::<MetadataType as std::clone::Clone>::clone(p0);
+<MetadataType>::clone(p0);
-----------------
trace/src/lib.rs <MetadataType as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // MetadataType
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<MetadataType as std::fmt::Debug>::fmt(p0, p1);
+crate::<MetadataType as std::fmt::Debug>::fmt(p0, p1);
+<MetadataType>::fmt(p0, p1);
-----------------
trace/src/lib.rs <MetadataType as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // MetadataType
let mut p1 = & MaybeUninit::uninit().assume_init(); // MetadataType
+p0.eq(p1);
+<MetadataType as std::cmp::PartialEq>::eq(p0, p1);
+crate::<MetadataType as std::cmp::PartialEq>::eq(p0, p1);
+<MetadataType>::eq(p0, p1);
-----------------
trace/src/lib.rs <MetadataType as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // MetadataType
+p0.assert_receiver_is_total_eq();
+<MetadataType as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<MetadataType as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<MetadataType>::assert_receiver_is_total_eq(p0);
-----------------
trace/src/lib.rs MetadataType::sample_name
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // MetadataType
+p0.sample_name();
+MetadataType::sample_name(p0);
+crate::MetadataType::sample_name(p0);
+<MetadataType>::sample_name(p0);
-----------------
trace/src/lib.rs MetadataType::consume
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // MetadataType
+p0.consume();
+MetadataType::consume(p0);
+crate::MetadataType::consume(p0);
+<MetadataType>::consume(p0);
-----------------
trace/src/lib.rs _IMPL_SERIALIZE_FOR_SampleArgs::<impl serde::Serialize for SampleArgs>::serialize
deps:{"<&'a mut serde_json::Serializer<W, F> as serde::Serializer>":{},"_IMPL_SERIALIZE_FOR_SampleArgs::<impl serde::Serialize for SampleArgs>::serialize":{"__S":["std::marker::Sized","serde::Serializer"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as serde::Serializer>":{},"_IMPL_SERIALIZE_FOR_SampleArgs::<impl serde::Serialize for SampleArgs>::serialize":{"__S":["serde_json::ser::MapKeySerializer<'a, W, F>","serde::private::ser::TaggedSerializer<S>","serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>","serde::private::ser::content::ContentSerializer<E>","<&'a mut serde_json::Serializer<W, F> as serde::Serializer>","serde_json::value::Serializer","serde_json::value::ser::MapKeySerializer","serde::private::ser::FlatMapSerializer<'a, M>"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // SampleArgs
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+_IMPL_SERIALIZE_FOR_SampleArgs::<impl serde::Serialize for SampleArgs>::serialize(p0, p1);
+crate::_IMPL_SERIALIZE_FOR_SampleArgs::<impl serde::Serialize for SampleArgs>::serialize(p0, p1);
+<SampleArgs>::serialize(p0, p1);
-----------------
trace/src/lib.rs _IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize":{"__D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize":{"__D":["serde::de::value::U8Deserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::I32Deserializer<E>","serde::de::value::UsizeDeserializer<E>","serde::de::value::StrDeserializer<'a, E>","serde::de::value::StringDeserializer<E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::U128Deserializer<E>","serde::de::value::PairDeserializer<A, B, E>","serde_json::value::de::MapDeserializer","serde::de::value::F64Deserializer<E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde_json::Value","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::I64Deserializer<E>","<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>","serde::de::value::U32Deserializer<E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::U16Deserializer<E>","serde::private::de::content::MapDeserializer<'de, E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::MapAccessDeserializer<A>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","serde_json::de::MapKey<'a, R>","serde::de::value::I8Deserializer<E>","&'de serde_json::Value","serde_json::value::de::SeqRefDeserializer<'de>","serde::de::value::IsizeDeserializer<E>","serde::de::value::SeqDeserializer<I, E>","serde_json::value::de::SeqDeserializer","serde::de::value::CharDeserializer<E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::U64Deserializer<E>","&'a serde_json::Number","serde::de::value::I16Deserializer<E>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde_json::value::de::MapKeyDeserializer<'de>","serde::de::value::BoolDeserializer<E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::I128Deserializer<E>","serde::de::value::UnitDeserializer<E>","serde::de::value::F32Deserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_json::Number"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize(p0);
+crate::_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize(p0);
+<SampleArgs>::deserialize(p0);
-----------------
trace/src/lib.rs <_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // _IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
trace/src/lib.rs <_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde::de::Error","std::marker::Sized"]}}
candidates:{"<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // _IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
trace/src/lib.rs <_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str
'de
deps:{"<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::value::Error","serde_json::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // _IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
trace/src/lib.rs <_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde::de::Error","std::marker::Sized"]}}
candidates:{"<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_json::Error","serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // _IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
trace/src/lib.rs <_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Field as serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::de::value::StringDeserializer<E>","serde::de::value::I8Deserializer<E>","serde::de::value::I32Deserializer<E>","serde_json::value::de::SeqRefDeserializer<'de>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>","serde::de::value::UsizeDeserializer<E>","serde_json::Value","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::F32Deserializer<E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::U16Deserializer<E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::U8Deserializer<E>","serde_json::value::de::MapRefDeserializer<'de>","serde::de::value::I64Deserializer<E>","serde::de::value::PairDeserializer<A, B, E>","serde::de::value::SeqDeserializer<I, E>","serde_json::value::de::MapDeserializer","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::U64Deserializer<E>","serde::de::value::BoolDeserializer<E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::U128Deserializer<E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde_json::Number","serde::de::value::I16Deserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::I128Deserializer<E>","serde::de::value::StrDeserializer<'a, E>","serde_json::de::MapKey<'a, R>","serde::de::value::U32Deserializer<E>","&'a serde_json::Number","serde::de::value::IsizeDeserializer<E>","serde::de::value::UnitDeserializer<E>","serde::private::de::content::SeqDeserializer<'de, E>","&'de serde_json::Value","serde_json::value::de::SeqDeserializer","serde::de::value::CharDeserializer<E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::private::de::BytesDeserializer<'a, E>","serde_json::value::de::MapKeyDeserializer<'de>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::F64Deserializer<E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+crate::<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Field>::deserialize(p0);
-----------------
trace/src/lib.rs <_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // _IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
trace/src/lib.rs <_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["serde_json::value::de::SeqRefDeserializer<'de>","<&'a mut A as serde::de::SeqAccess<'de>>","serde::de::value::PairVisitor<A, B, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::private::de::content::SeqDeserializer<'de, E>","serde_json::value::de::SeqDeserializer","serde_json::de::SeqAccess<'a, R>","serde::de::value::SeqDeserializer<I, E>","serde::de::value::MapDeserializer<'de, I, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // _IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
trace/src/lib.rs <_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["serde::de::MapAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["serde_json::value::de::MapRefDeserializer<'de>","serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>","serde::private::de::content::MapDeserializer<'de, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde_json::value::de::MapDeserializer","<&'a mut A as serde::de::MapAccess<'de>>","serde::private::de::FlatMapAccess<'a, 'de, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::private::de::FlatStructAccess<'a, 'de, E>","serde_json::de::MapAccess<'a, R>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // _IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+<_IMPL_DESERIALIZE_FOR_SampleArgs::<impl serde::Deserialize<'de> for SampleArgs>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
trace/src/lib.rs <SampleArgs as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // SampleArgs
+p0.clone();
+<SampleArgs as std::clone::Clone>::clone(p0);
+crate::<SampleArgs as std::clone::Clone>::clone(p0);
+<SampleArgs>::clone(p0);
-----------------
trace/src/lib.rs <SampleArgs as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // SampleArgs
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<SampleArgs as std::fmt::Debug>::fmt(p0, p1);
+crate::<SampleArgs as std::fmt::Debug>::fmt(p0, p1);
+<SampleArgs>::fmt(p0, p1);
-----------------
trace/src/lib.rs <SampleArgs as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // SampleArgs
let mut p1 = & MaybeUninit::uninit().assume_init(); // SampleArgs
+p0.eq(p1);
+<SampleArgs as std::cmp::PartialEq>::eq(p0, p1);
+crate::<SampleArgs as std::cmp::PartialEq>::eq(p0, p1);
+<SampleArgs>::eq(p0, p1);
-----------------
trace/src/lib.rs _IMPL_SERIALIZE_FOR_Sample::<impl serde::Serialize for Sample>::serialize
deps:{"<&'a mut serde_json::Serializer<W, F> as serde::Serializer>":{},"_IMPL_SERIALIZE_FOR_Sample::<impl serde::Serialize for Sample>::serialize":{"__S":["std::marker::Sized","serde::Serializer"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as serde::Serializer>":{},"_IMPL_SERIALIZE_FOR_Sample::<impl serde::Serialize for Sample>::serialize":{"__S":["serde::private::ser::content::ContentSerializer<E>","serde::private::ser::FlatMapSerializer<'a, M>","serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>","serde_json::value::Serializer","serde_json::ser::MapKeySerializer<'a, W, F>","serde_json::value::ser::MapKeySerializer","serde::private::ser::TaggedSerializer<S>"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Sample
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+_IMPL_SERIALIZE_FOR_Sample::<impl serde::Serialize for Sample>::serialize(p0, p1);
+crate::_IMPL_SERIALIZE_FOR_Sample::<impl serde::Serialize for Sample>::serialize(p0, p1);
+<Sample>::serialize(p0, p1);
-----------------
trace/src/lib.rs <_IMPL_SERIALIZE_FOR_Sample::<impl serde::Serialize for Sample>::serialize::__SerializeWith<'__a> as serde::Serialize>::serialize
'__a
deps:{"<&'a mut serde_json::Serializer<W, F> as serde::Serializer>":{},"<_IMPL_SERIALIZE_FOR_Sample::<impl serde::Serialize for Sample>::serialize::__SerializeWith<'__a> as serde::Serialize>::serialize":{"__S":["std::marker::Sized","serde::Serializer"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
candidates:{"<&'a mut serde_json::Serializer<W, F> as serde::Serializer>":{},"<_IMPL_SERIALIZE_FOR_Sample::<impl serde::Serialize for Sample>::serialize::__SerializeWith<'__a> as serde::Serialize>::serialize":{"__S":["serde_json::value::ser::MapKeySerializer","serde::private::ser::TaggedSerializer<S>","<&'a mut serde_json::Serializer<W, F> as serde::Serializer>","serde::private::ser::FlatMapSerializer<'a, M>","serde_json::ser::MapKeySerializer<'a, W, F>","serde_json::value::Serializer","serde::private::ser::content::ContentSerializer<E>"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // _IMPL_SERIALIZE_FOR_Sample::<impl serde::Serialize for Sample>::serialize::__SerializeWith<'__a>
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+<_IMPL_SERIALIZE_FOR_Sample::<impl serde::Serialize for Sample>::serialize::__SerializeWith<'__a> as serde::Serialize>::serialize(p0, p1);
+crate::<_IMPL_SERIALIZE_FOR_Sample::<impl serde::Serialize for Sample>::serialize::__SerializeWith<'__a> as serde::Serialize>::serialize(p0, p1);
+<_IMPL_SERIALIZE_FOR_Sample::<impl serde::Serialize for Sample>::serialize::__SerializeWith<'__a>>::serialize(p0, p1);
-----------------
trace/src/lib.rs _IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize":{"__D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize":{"__D":["serde::de::value::UsizeDeserializer<E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde_json::value::de::SeqDeserializer","serde::de::value::SeqAccessDeserializer<A>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::private::de::content::SeqDeserializer<'de, E>","&'de serde_json::Value","serde_json::Number","serde::de::value::I16Deserializer<E>","serde_json::value::de::SeqRefDeserializer<'de>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::I32Deserializer<E>","serde::de::value::I64Deserializer<E>","<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>","serde::de::value::UnitDeserializer<E>","serde::de::value::CharDeserializer<E>","serde_json::de::MapKey<'a, R>","serde::de::value::BoolDeserializer<E>","serde::de::value::U16Deserializer<E>","serde::de::value::U8Deserializer<E>","serde::de::value::SeqDeserializer<I, E>","serde_json::value::de::MapRefDeserializer<'de>","serde_json::Value","serde_json::value::de::BorrowedCowStrDeserializer<'de>","serde_json::value::de::MapKeyDeserializer<'de>","serde::de::value::U32Deserializer<E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::F32Deserializer<E>","serde::de::value::I128Deserializer<E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::U128Deserializer<E>","&'a serde_json::Number","serde_json::value::de::MapDeserializer","serde::de::value::StringDeserializer<E>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::PairDeserializer<A, B, E>","serde::de::value::U64Deserializer<E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::StrDeserializer<'a, E>","serde::de::value::F64Deserializer<E>","serde::de::value::I8Deserializer<E>","serde::de::value::MapAccessDeserializer<A>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize(p0);
+crate::_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize(p0);
+<Sample>::deserialize(p0);
-----------------
trace/src/lib.rs <_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // _IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
trace/src/lib.rs <_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde::de::Error","std::marker::Sized"]}}
candidates:{"<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde_json::Error","serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // _IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
trace/src/lib.rs <_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str
'de
deps:{"<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::Error","std::marker::Sized"]}}
candidates:{"<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde_json::Error","serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // _IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
trace/src/lib.rs <_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde_json::Error","serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // _IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
trace/src/lib.rs <_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Field as serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::private::de::missing_field::MissingFieldDeserializer<E>","<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::MapAccessDeserializer<A>","serde_json::Number","serde::de::value::CharDeserializer<E>","serde::de::value::U128Deserializer<E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::U16Deserializer<E>","serde::de::value::UnitDeserializer<E>","serde::de::value::StrDeserializer<'a, E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::U64Deserializer<E>","serde::private::de::content::ContentDeserializer<'de, E>","serde_json::de::MapKey<'a, R>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde_json::value::de::MapDeserializer","serde_json::value::de::BorrowedCowStrDeserializer<'de>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::I64Deserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","serde_json::value::de::SeqRefDeserializer<'de>","serde_json::value::de::MapRefDeserializer<'de>","serde::de::value::I8Deserializer<E>","serde_json::value::de::MapKeyDeserializer<'de>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::U32Deserializer<E>","serde::de::value::PairDeserializer<A, B, E>","serde_json::Value","serde::de::value::I32Deserializer<E>","serde::de::value::StringDeserializer<E>","serde::de::value::F64Deserializer<E>","serde::de::value::F32Deserializer<E>","serde::private::de::content::MapDeserializer<'de, E>","&'de serde_json::Value","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::I16Deserializer<E>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::SeqDeserializer<I, E>","serde::de::value::I128Deserializer<E>","serde_json::value::de::SeqDeserializer","&'a serde_json::Number","serde::de::value::IsizeDeserializer<E>","serde::de::value::UsizeDeserializer<E>","serde::de::value::U8Deserializer<E>","serde::de::value::BoolDeserializer<E>","serde::de::value::SeqAccessDeserializer<A>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+crate::<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Field>::deserialize(p0);
-----------------
trace/src/lib.rs <_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // _IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
trace/src/lib.rs <_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["serde_json::de::SeqAccess<'a, R>","serde::de::value::PairVisitor<A, B, E>","serde::private::de::content::SeqDeserializer<'de, E>","serde_json::value::de::SeqDeserializer","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::MapDeserializer<'de, I, E>","serde_json::value::de::SeqRefDeserializer<'de>","serde::de::value::SeqDeserializer<I, E>","<&'a mut A as serde::de::SeqAccess<'de>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // _IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
trace/src/lib.rs <<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq::__DeserializeWith<'de> as serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"<<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq::__DeserializeWith<'de> as serde::Deserialize<'de>>::deserialize":{"__D":["serde::Deserializer","std::marker::Sized"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"<<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq::__DeserializeWith<'de> as serde::Deserialize<'de>>::deserialize":{"__D":["serde::de::value::SeqDeserializer<I, E>","serde_json::value::de::SeqDeserializer","serde_json::Value","serde_json::value::de::MapRefDeserializer<'de>","serde::de::value::StrDeserializer<'a, E>","serde::de::value::CowStrDeserializer<'a, E>","&'a serde_json::Number","serde::de::value::U16Deserializer<E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::StringDeserializer<E>","serde::de::value::F64Deserializer<E>","serde::de::value::U32Deserializer<E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::U64Deserializer<E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::I64Deserializer<E>","serde::private::de::content::MapDeserializer<'de, E>","serde_json::value::de::MapDeserializer","serde_json::value::de::SeqRefDeserializer<'de>","serde::de::value::I32Deserializer<E>","serde::de::value::U8Deserializer<E>","serde_json::de::MapKey<'a, R>","serde::de::value::UnitDeserializer<E>","serde::de::value::CharDeserializer<E>","serde::de::value::MapDeserializer<'de, I, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","&'de serde_json::Value","serde::de::value::I128Deserializer<E>","serde::de::value::PairDeserializer<A, B, E>","serde::de::value::I16Deserializer<E>","serde_json::Number","serde::de::value::BoolDeserializer<E>","serde_json::value::de::MapKeyDeserializer<'de>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::UsizeDeserializer<E>","serde::de::value::F32Deserializer<E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::U128Deserializer<E>","serde::de::value::I8Deserializer<E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::IsizeDeserializer<E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq::__DeserializeWith<'de> as serde::Deserialize<'de>>::deserialize(p0);
+crate::<<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq::__DeserializeWith<'de> as serde::Deserialize<'de>>::deserialize(p0);
+<<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq::__DeserializeWith<'de>>::deserialize(p0);
-----------------
trace/src/lib.rs <_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","serde::de::MapAccess"]}}
candidates:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["serde_json::value::de::MapDeserializer","serde::de::value::MapDeserializer<'de, I, E>","<&'a mut A as serde::de::MapAccess<'de>>","serde_json::de::MapAccess<'a, R>","serde::private::de::FlatMapAccess<'a, 'de, E>","serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>","serde_json::value::de::MapRefDeserializer<'de>","serde::private::de::content::MapDeserializer<'de, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::private::de::FlatStructAccess<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // _IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
trace/src/lib.rs <<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map::__DeserializeWith<'de> as serde::Deserialize<'de>>::deserialize
'de
deps:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"<<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map::__DeserializeWith<'de> as serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>":{},"<<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map::__DeserializeWith<'de> as serde::Deserialize<'de>>::deserialize":{"__D":["serde::de::value::SeqDeserializer<I, E>","serde::de::value::I16Deserializer<E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::CharDeserializer<E>","serde_json::value::de::MapDeserializer","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","&'a serde_json::Number","serde_json::de::MapKey<'a, R>","<&'a mut serde_json::Deserializer<R> as serde::Deserializer<'de>>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::PairDeserializer<A, B, E>","serde::de::value::SeqAccessDeserializer<A>","serde::private::de::StrDeserializer<'a, E>","serde_json::value::de::MapRefDeserializer<'de>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::I8Deserializer<E>","serde_json::value::de::SeqDeserializer","serde::de::value::UnitDeserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde_json::Number","serde_json::Value","serde::de::value::I32Deserializer<E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::I128Deserializer<E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::StrDeserializer<'a, E>","serde_json::value::de::SeqRefDeserializer<'de>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::StringDeserializer<E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::U8Deserializer<E>","serde::de::value::U64Deserializer<E>","serde::de::value::I64Deserializer<E>","serde::de::value::IsizeDeserializer<E>","serde_json::value::de::BorrowedCowStrDeserializer<'de>","serde_json::value::de::MapKeyDeserializer<'de>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::UsizeDeserializer<E>","&'de serde_json::Value","serde::de::value::U128Deserializer<E>","serde::de::value::U16Deserializer<E>","serde::de::value::U32Deserializer<E>","serde::de::value::F32Deserializer<E>","serde::de::value::F64Deserializer<E>","serde::de::value::BoolDeserializer<E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::private::de::content::MapDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map::__DeserializeWith<'de> as serde::Deserialize<'de>>::deserialize(p0);
+crate::<<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map::__DeserializeWith<'de> as serde::Deserialize<'de>>::deserialize(p0);
+<<_IMPL_DESERIALIZE_FOR_Sample::<impl serde::Deserialize<'de> for Sample>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map::__DeserializeWith<'de>>::deserialize(p0);
-----------------
trace/src/lib.rs <Sample as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Sample
+p0.clone();
+<Sample as std::clone::Clone>::clone(p0);
+crate::<Sample as std::clone::Clone>::clone(p0);
+<Sample>::clone(p0);
-----------------
trace/src/lib.rs <Sample as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Sample
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<Sample as std::fmt::Debug>::fmt(p0, p1);
+crate::<Sample as std::fmt::Debug>::fmt(p0, p1);
+<Sample>::fmt(p0, p1);
-----------------
trace/src/lib.rs Sample::thread_name
deps:{}
candidates:{}
+Sample::thread_name();
+crate::Sample::thread_name();
+<Sample>::thread_name();
-----------------
trace/src/lib.rs Sample::new_duration_marker
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"Sample::new_duration_marker":{"C":["std::convert::Into","std::marker::Sized"],"S":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"Sample::new_duration_marker":{"C":["std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected","<T as std::convert::Into<U>>"],"S":["std::sys::unix::process::process_inner::ExitStatusError","<T as std::convert::Into<U>>","std::process::ExitStatusError","std::sync::mpmc::select::Selected"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // S
let mut p1 = MaybeUninit::uninit().assume_init(); // C
let mut p2 = MaybeUninit::uninit().assume_init(); // std::option::Option<std::borrow::Cow<'static, str>>
let mut p3 = MaybeUninit::uninit().assume_init(); // SampleEventType
+Sample::new_duration_marker(p0, p1, p2, p3);
+crate::Sample::new_duration_marker(p0, p1, p2, p3);
+<Sample>::new_duration_marker(p0, p1, p2, p3);
-----------------
trace/src/lib.rs Sample::new_duration
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"Sample::new_duration":{"C":["std::marker::Sized","std::convert::Into"],"S":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"Sample::new_duration":{"C":["std::sync::mpmc::select::Selected","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","<T as std::convert::Into<U>>"],"S":["std::sync::mpmc::select::Selected","<T as std::convert::Into<U>>","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // S
let mut p1 = MaybeUninit::uninit().assume_init(); // C
let mut p2 = MaybeUninit::uninit().assume_init(); // std::option::Option<std::borrow::Cow<'static, str>>
let mut p3 = 0u64; // None+u64
let mut p4 = 0u64; // None+u64
+Sample::new_duration(p0, p1, p2, p3, p4);
+crate::Sample::new_duration(p0, p1, p2, p3, p4);
+<Sample>::new_duration(p0, p1, p2, p3, p4);
-----------------
trace/src/lib.rs Sample::new_instant
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"Sample::new_instant":{"C":["std::marker::Sized","std::convert::Into"],"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"Sample::new_instant":{"C":["std::process::ExitStatusError","<T as std::convert::Into<U>>","std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError"],"S":["<T as std::convert::Into<U>>","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // S
let mut p1 = MaybeUninit::uninit().assume_init(); // C
let mut p2 = MaybeUninit::uninit().assume_init(); // std::option::Option<std::borrow::Cow<'static, str>>
+Sample::new_instant(p0, p1, p2);
+crate::Sample::new_instant(p0, p1, p2);
+<Sample>::new_instant(p0, p1, p2);
-----------------
trace/src/lib.rs Sample::new_metadata
deps:{}
candidates:{}
let mut p0 = 0u64; // None+u64
let mut p1 = MaybeUninit::uninit().assume_init(); // MetadataType
let mut p2 = 0u64; // None+u64
+Sample::new_metadata(p0, p1, p2);
+crate::Sample::new_metadata(p0, p1, p2);
+<Sample>::new_metadata(p0, p1, p2);
-----------------
trace/src/lib.rs <Sample as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Sample
let mut p1 = & MaybeUninit::uninit().assume_init(); // Sample
+p0.eq(p1);
+<Sample as std::cmp::PartialEq>::eq(p0, p1);
+crate::<Sample as std::cmp::PartialEq>::eq(p0, p1);
+<Sample>::eq(p0, p1);
-----------------
trace/src/lib.rs <Sample as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Sample
let mut p1 = & MaybeUninit::uninit().assume_init(); // Sample
+p0.partial_cmp(p1);
+<Sample as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<Sample as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<Sample>::partial_cmp(p0, p1);
-----------------
trace/src/lib.rs <Sample as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Sample
let mut p1 = & MaybeUninit::uninit().assume_init(); // Sample
+p0.cmp(p1);
+<Sample as std::cmp::Ord>::cmp(p0, p1);
+crate::<Sample as std::cmp::Ord>::cmp(p0, p1);
+<Sample>::cmp(p0, p1);
-----------------
trace/src/lib.rs <Sample as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<Sample as std::hash::Hash>::hash":{"H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<Sample as std::hash::Hash>::hash":{"H":["std::collections::hash_map::DefaultHasher","std::hash::sip::Hasher<S>","std::hash::SipHasher13","std::hash::SipHasher","<&mut H as std::hash::Hasher>","std::boxed::Box<T, A>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Sample
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // H
+p0.hash(p1);
+<Sample as std::hash::Hash>::hash(p0, p1);
+crate::<Sample as std::hash::Hash>::hash(p0, p1);
+<Sample>::hash(p0, p1);
-----------------
trace/src/lib.rs SampleGuard::<'a>::new_disabled
'a
deps:{}
candidates:{}
+SampleGuard::<'a>::new_disabled();
+crate::SampleGuard::<'a>::new_disabled();
+<SampleGuard<'a>>::new_disabled();
-----------------
trace/src/lib.rs SampleGuard::<'a>::new
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"SampleGuard::<'a>::new":{"C":["std::convert::Into","std::marker::Sized"],"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"SampleGuard::<'a>::new":{"C":["std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected","<T as std::convert::Into<U>>","std::process::ExitStatusError"],"S":["<T as std::convert::Into<U>>","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Trace
let mut p1 = MaybeUninit::uninit().assume_init(); // S
let mut p2 = MaybeUninit::uninit().assume_init(); // C
let mut p3 = MaybeUninit::uninit().assume_init(); // std::option::Option<std::borrow::Cow<'static, str>>
+SampleGuard::<'a>::new(p0, p1, p2, p3);
+crate::SampleGuard::<'a>::new(p0, p1, p2, p3);
+<SampleGuard<'a>>::new(p0, p1, p2, p3);
-----------------
trace/src/lib.rs <SampleGuard<'a> as std::ops::Drop>::drop
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // SampleGuard<'a>
+p0.drop();
+<SampleGuard<'a> as std::ops::Drop>::drop(p0);
+crate::<SampleGuard<'a> as std::ops::Drop>::drop(p0);
+<SampleGuard<'a>>::drop(p0);
-----------------
trace/src/lib.rs Trace::disabled
deps:{}
candidates:{}
+Trace::disabled();
+crate::Trace::disabled();
+<Trace>::disabled();
-----------------
trace/src/lib.rs Trace::enabled
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // Config
+Trace::enabled(p0);
+crate::Trace::enabled(p0);
+<Trace>::enabled(p0);
-----------------
trace/src/lib.rs Trace::disable
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Trace
+p0.disable();
+Trace::disable(p0);
+crate::Trace::disable(p0);
+<Trace>::disable(p0);
-----------------
trace/src/lib.rs Trace::enable
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Trace
+p0.enable();
+Trace::enable(p0);
+crate::Trace::enable(p0);
+<Trace>::enable(p0);
-----------------
trace/src/lib.rs Trace::enable_config
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Trace
let mut p1 = MaybeUninit::uninit().assume_init(); // Config
+p0.enable_config(p1);
+Trace::enable_config(p0, p1);
+crate::Trace::enable_config(p0, p1);
+<Trace>::enable_config(p0, p1);
-----------------
trace/src/lib.rs Trace::get_samples_count
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Trace
+p0.get_samples_count();
+Trace::get_samples_count(p0);
+crate::Trace::get_samples_count(p0);
+<Trace>::get_samples_count(p0);
-----------------
trace/src/lib.rs Trace::get_samples_limit
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Trace
+p0.get_samples_limit();
+Trace::get_samples_limit(p0);
+crate::Trace::get_samples_limit(p0);
+<Trace>::get_samples_limit(p0);
-----------------
trace/src/lib.rs Trace::record
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Trace
let mut p1 = MaybeUninit::uninit().assume_init(); // Sample
+p0.record(p1);
+Trace::record(p0, p1);
+crate::Trace::record(p0, p1);
+<Trace>::record(p0, p1);
-----------------
trace/src/lib.rs Trace::is_enabled
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Trace
+p0.is_enabled();
+Trace::is_enabled(p0);
+crate::Trace::is_enabled(p0);
+<Trace>::is_enabled(p0);
-----------------
trace/src/lib.rs Trace::instant
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"Trace::instant":{"C":["std::convert::Into","std::marker::Sized"],"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"Trace::instant":{"C":["std::process::ExitStatusError","std::sync::mpmc::select::Selected","<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError"],"S":["<T as std::convert::Into<U>>","std::sync::mpmc::select::Selected","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Trace
let mut p1 = MaybeUninit::uninit().assume_init(); // S
let mut p2 = MaybeUninit::uninit().assume_init(); // C
+p0.instant(p1, p2);
+Trace::instant(p0, p1, p2);
+crate::Trace::instant(p0, p1, p2);
+<Trace>::instant(p0, p1, p2);
-----------------
trace/src/lib.rs Trace::instant_payload
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"Trace::instant_payload":{"C":["std::marker::Sized","std::convert::Into"],"P":["std::marker::Sized","std::convert::Into"],"S":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"Trace::instant_payload":{"C":["std::sync::mpmc::select::Selected","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","<T as std::convert::Into<U>>"],"P":["<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected","std::process::ExitStatusError"],"S":["std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected","<T as std::convert::Into<U>>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Trace
let mut p1 = MaybeUninit::uninit().assume_init(); // S
let mut p2 = MaybeUninit::uninit().assume_init(); // C
let mut p3 = MaybeUninit::uninit().assume_init(); // P
+p0.instant_payload(p1, p2, p3);
+Trace::instant_payload(p0, p1, p2, p3);
+crate::Trace::instant_payload(p0, p1, p2, p3);
+<Trace>::instant_payload(p0, p1, p2, p3);
-----------------
trace/src/lib.rs Trace::block
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"Trace::block":{"C":["std::convert::Into","std::marker::Sized"],"S":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"Trace::block":{"C":["std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError","<T as std::convert::Into<U>>","std::sync::mpmc::select::Selected"],"S":["std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected","std::process::ExitStatusError","<T as std::convert::Into<U>>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Trace
let mut p1 = MaybeUninit::uninit().assume_init(); // S
let mut p2 = MaybeUninit::uninit().assume_init(); // C
+p0.block(p1, p2);
+Trace::block(p0, p1, p2);
+crate::Trace::block(p0, p1, p2);
+<Trace>::block(p0, p1, p2);
-----------------
trace/src/lib.rs Trace::block_payload
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"Trace::block_payload":{"C":["std::marker::Sized","std::convert::Into"],"P":["std::marker::Sized","std::convert::Into"],"S":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"Trace::block_payload":{"C":["std::sync::mpmc::select::Selected","std::process::ExitStatusError","<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError"],"P":["std::sync::mpmc::select::Selected","std::process::ExitStatusError","<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError"],"S":["std::sys::unix::process::process_inner::ExitStatusError","<T as std::convert::Into<U>>","std::sync::mpmc::select::Selected","std::process::ExitStatusError"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Trace
let mut p1 = MaybeUninit::uninit().assume_init(); // S
let mut p2 = MaybeUninit::uninit().assume_init(); // C
let mut p3 = MaybeUninit::uninit().assume_init(); // P
+p0.block_payload(p1, p2, p3);
+Trace::block_payload(p0, p1, p2, p3);
+crate::Trace::block_payload(p0, p1, p2, p3);
+<Trace>::block_payload(p0, p1, p2, p3);
-----------------
trace/src/lib.rs Trace::closure
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"Trace::closure":{"C":["std::marker::Sized","std::convert::Into"],"F":["std::ops::FnOnce","std::marker::Sized"],"R":["std::marker::Sized"],"S":["std::marker::Sized","std::convert::Into"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"Trace::closure":{"C":["std::sync::mpmc::select::Selected","std::process::ExitStatusError","<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError"],"F":["core::str::LinesAnyMap","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::CharEscapeDebugContinue","std::panic::AssertUnwindSafe<F>","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::UnsafeBytesToStr","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsWhitespace","core::slice::ascii::EscapeByte","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>"],"R":["RUG_ANY"],"S":["std::sync::mpmc::select::Selected","<T as std::convert::Into<U>>","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Trace
let mut p1 = MaybeUninit::uninit().assume_init(); // S
let mut p2 = MaybeUninit::uninit().assume_init(); // C
let mut p3 = MaybeUninit::uninit().assume_init(); // F
+p0.closure(p1, p2, p3);
+Trace::closure(p0, p1, p2, p3);
+crate::Trace::closure(p0, p1, p2, p3);
+<Trace>::closure(p0, p1, p2, p3);
-----------------
trace/src/lib.rs Trace::closure_payload
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"Trace::closure_payload":{"C":["std::marker::Sized","std::convert::Into"],"F":["std::ops::FnOnce","std::marker::Sized"],"P":["std::marker::Sized","std::convert::Into"],"R":["std::marker::Sized"],"S":["std::convert::Into","std::marker::Sized"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"Trace::closure_payload":{"C":["std::process::ExitStatusError","<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected"],"F":["std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","std::panic::AssertUnwindSafe<F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::IsAsciiWhitespace","core::str::UnsafeBytesToStr","core::str::IsWhitespace","std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>","core::slice::ascii::EscapeByte","core::str::CharEscapeDebugContinue","core::str::BytesIsNotEmpty","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>"],"P":["<T as std::convert::Into<U>>","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected"],"R":["RUG_ANY"],"S":["<T as std::convert::Into<U>>","std::process::ExitStatusError","std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError"]},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Trace
let mut p1 = MaybeUninit::uninit().assume_init(); // S
let mut p2 = MaybeUninit::uninit().assume_init(); // C
let mut p3 = MaybeUninit::uninit().assume_init(); // F
let mut p4 = MaybeUninit::uninit().assume_init(); // P
+p0.closure_payload(p1, p2, p3, p4);
+Trace::closure_payload(p0, p1, p2, p3, p4);
+crate::Trace::closure_payload(p0, p1, p2, p3, p4);
+<Trace>::closure_payload(p0, p1, p2, p3, p4);
-----------------
trace/src/lib.rs Trace::samples_cloned_unsorted
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Trace
+p0.samples_cloned_unsorted();
+Trace::samples_cloned_unsorted(p0);
+crate::Trace::samples_cloned_unsorted(p0);
+<Trace>::samples_cloned_unsorted(p0);
-----------------
trace/src/lib.rs Trace::samples_cloned_sorted
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Trace
+p0.samples_cloned_sorted();
+Trace::samples_cloned_sorted(p0);
+crate::Trace::samples_cloned_sorted(p0);
+<Trace>::samples_cloned_sorted(p0);
-----------------
trace/src/lib.rs Trace::save
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"Trace::save":{"P":["std::marker::Sized","std::convert::AsRef"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"Trace::save":{"P":["std::vec::Drain<'a, T, A>","std::borrow::Cow<'_, std::ffi::OsStr>","std::slice::Iter<'_, T>","std::sync::Arc<T>","std::ffi::CStr","std::borrow::Cow<'_, T>","<&T as std::convert::AsRef<U>>","core::num::dec2flt::common::AsciiStr<'a>","std::boxed::Box<T, A>","std::slice::IterMut<'_, T>","std::vec::IntoIter<T, A>","std::ffi::CString","std::rc::Rc<T>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Trace
let mut p1 = MaybeUninit::uninit().assume_init(); // P
let mut p2 = true; // None+bool
+p0.save(p1, p2);
+Trace::save(p0, p1, p2);
+crate::Trace::save(p0, p1, p2);
+<Trace>::save(p0, p1, p2);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs <TRACE as lazy_static::__Deref>::deref
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // TRACE
+p0.deref();
+<TRACE as lazy_static::__Deref>::deref(p0);
+crate::<TRACE as lazy_static::__Deref>::deref(p0);
+<TRACE>::deref(p0);
-----------------
/home/xiang/.cargo/registry/src/github.com-1ecc6299db9ec823/lazy_static-1.4.0/src/lib.rs <TRACE as lazy_static::LazyStatic>::initialize
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // TRACE
+<TRACE as lazy_static::LazyStatic>::initialize(p0);
+crate::<TRACE as lazy_static::LazyStatic>::initialize(p0);
+<TRACE>::initialize(p0);
-----------------
trace/src/sys_pid.rs sys_pid::current_pid::getpid
deps:{}
candidates:{}
-----------------
rope/src/tree.rs tree::Leaf::push_maybe_split
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Leaf::push_maybe_split":{"Self":["std::marker::Sized","tree::Leaf","std::default::Default","std::clone::Clone"]},"tree::Node":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized","tree::DefaultMetric"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"spans::Span":{"T":["breaks::BreaksBaseMetric","breaks::BreaksMetric","breaks::BreaksInfo","multiset::CountMatcher","delta::InsertDelta","rope::Utf16CodeUnitsMetric","engine::FullPriority","interval::Interval","spans::SpansInfo","tree::Node","engine::Error","tree::NodeBody","engine::Contents","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::RopeInfo","multiset::Subset","find::CaseMatching","delta::Delta","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::DeltaOp","breaks::BreaksLeaf","diff::DiffBuilder","rope::LinesMetric","rope::BaseMetric","tree::NodeVal","spans::Span","multiset::ZipSegment","diff::DiffOp","spans::SpansLeaf","multiset::Segment","engine::RevId"]},"spans::SpansInfo":{"T":["engine::DeltaOp","find::CaseMatching","tree::NodeVal","spans::SpansLeaf","breaks::BreaksInfo","engine::Contents","spans::Span","breaks::BreaksMetric","rope::RopeInfo","multiset::CountMatcher","breaks::BreaksLeaf","tree::Node","multiset::ZipSegment","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","delta::Delta","rope::LinesMetric","engine::RevId","engine::FullPriority","tree::NodeBody","diff::DiffOp","rope::BaseMetric","interval::Interval","multiset::Subset","delta::DeltaElement","engine::Error","spans::SpansInfo","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for &mut T>","multiset::Segment","diff::DiffBuilder"]},"spans::SpansLeaf":{"T":["engine::FullPriority","find::CaseMatching","rope::BaseMetric","spans::SpansLeaf","tree::NodeBody","breaks::BreaksBaseMetric","diff::DiffBuilder","engine::Contents","breaks::BreaksLeaf","rope::Utf16CodeUnitsMetric","breaks::BreaksInfo","engine::RevId","engine::DeltaOp","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for &T>","diff::DiffOp","tree::Node","spans::Span","std::clone::impls::<impl std::clone::Clone for *mut T>","spans::SpansInfo","delta::Delta","delta::DeltaElement","multiset::ZipSegment","interval::Interval","breaks::BreaksMetric","engine::Error","multiset::CountMatcher","multiset::Segment","delta::InsertDelta","multiset::Subset","rope::RopeInfo","tree::NodeVal"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Leaf::push_maybe_split":{"Self":["spans::SpansLeaf","std::string::String","breaks::BreaksLeaf"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // Self
let mut p1 = & MaybeUninit::uninit().assume_init(); // Self
let mut p2 = MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.push_maybe_split(p1, p2);
+tree::Leaf::push_maybe_split(p0, p1, p2);
+crate::tree::Leaf::push_maybe_split(p0, p1, p2);
+crate::tree::Leaf::push_maybe_split(p0, p1, p2);
-----------------
rope/src/tree.rs tree::Leaf::subseq
deps:{"delta::Delta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Leaf::subseq":{"Self":["tree::Leaf","std::default::Default","std::clone::Clone","std::marker::Sized"]},"tree::Node":{"N":["std::clone::Clone","tree::DefaultMetric","tree::NodeInfo","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["interval::Interval","engine::Error","rope::BaseMetric","delta::DeltaElement","breaks::BreaksMetric","tree::Node","breaks::BreaksInfo","rope::RopeInfo","find::CaseMatching","spans::SpansInfo","multiset::CountMatcher","engine::DeltaOp","spans::SpansLeaf","tree::NodeBody","diff::DiffBuilder","breaks::BreaksLeaf","engine::FullPriority","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for *const T>","delta::InsertDelta","tree::NodeVal","rope::Utf16CodeUnitsMetric","delta::Delta","engine::Contents","breaks::BreaksBaseMetric","spans::Span","engine::RevId","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for &T>","multiset::Segment","multiset::Subset","rope::LinesMetric"]},"spans::SpansInfo":{"T":["delta::Delta","spans::SpansInfo","breaks::BreaksInfo","tree::NodeBody","find::CaseMatching","engine::DeltaOp","delta::DeltaElement","multiset::CountMatcher","interval::Interval","rope::RopeInfo","engine::Error","breaks::BreaksBaseMetric","engine::Contents","rope::Utf16CodeUnitsMetric","tree::Node","engine::FullPriority","tree::NodeVal","rope::LinesMetric","spans::Span","multiset::Segment","breaks::BreaksLeaf","rope::BaseMetric","spans::SpansLeaf","diff::DiffBuilder","engine::RevId","multiset::ZipSegment","diff::DiffOp","multiset::Subset","delta::InsertDelta","breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"spans::SpansLeaf":{"T":["breaks::BreaksLeaf","tree::NodeVal","spans::Span","rope::RopeInfo","rope::LinesMetric","engine::RevId","rope::BaseMetric","delta::InsertDelta","spans::SpansInfo","interval::Interval","delta::DeltaElement","spans::SpansLeaf","multiset::Subset","breaks::BreaksBaseMetric","tree::Node","multiset::ZipSegment","multiset::CountMatcher","find::CaseMatching","breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for *const T>","rope::Utf16CodeUnitsMetric","engine::Error","diff::DiffBuilder","multiset::Segment","breaks::BreaksInfo","delta::Delta","diff::DiffOp","tree::NodeBody","engine::DeltaOp","engine::Contents","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::FullPriority"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Leaf::subseq":{"Self":["breaks::BreaksLeaf","spans::SpansLeaf"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // Self
let mut p1 = MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.subseq(p1);
+tree::Leaf::subseq(p0, p1);
+crate::tree::Leaf::subseq(p0, p1);
+crate::tree::Leaf::subseq(p0, p1);
-----------------
rope/src/tree.rs tree::Metric::measure
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Metric::measure":{"N":["std::marker::Sized","tree::NodeInfo"],"Self":["tree::Metric"]},"tree::Node":{"N":["std::marker::Sized","tree::DefaultMetric","std::clone::Clone","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["engine::FullPriority","spans::SpansInfo","engine::Contents","rope::LinesMetric","engine::RevId","interval::Interval","multiset::Subset","tree::NodeVal","engine::Error","multiset::ZipSegment","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for &mut T>","multiset::Segment","breaks::BreaksMetric","diff::DiffOp","spans::Span","breaks::BreaksLeaf","delta::InsertDelta","engine::DeltaOp","multiset::CountMatcher","delta::Delta","tree::Node","find::CaseMatching","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","rope::RopeInfo","rope::BaseMetric","tree::NodeBody","delta::DeltaElement","diff::DiffBuilder","spans::SpansLeaf"]},"spans::SpansInfo":{"T":["rope::BaseMetric","delta::Delta","find::CaseMatching","multiset::ZipSegment","diff::DiffOp","multiset::Segment","tree::NodeBody","spans::Span","spans::SpansInfo","spans::SpansLeaf","multiset::CountMatcher","engine::FullPriority","engine::Contents","breaks::BreaksBaseMetric","breaks::BreaksLeaf","rope::RopeInfo","tree::NodeVal","tree::Node","delta::DeltaElement","breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::LinesMetric","delta::InsertDelta","rope::Utf16CodeUnitsMetric","breaks::BreaksInfo","multiset::Subset","diff::DiffBuilder","engine::DeltaOp","engine::RevId","engine::Error","interval::Interval"]},"spans::SpansLeaf":{"T":["engine::RevId","tree::Node","rope::LinesMetric","engine::FullPriority","breaks::BreaksBaseMetric","engine::Error","spans::SpansLeaf","multiset::Subset","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksLeaf","spans::SpansInfo","delta::InsertDelta","tree::NodeBody","delta::Delta","interval::Interval","diff::DiffOp","engine::DeltaOp","diff::DiffBuilder","spans::Span","breaks::BreaksInfo","multiset::ZipSegment","delta::DeltaElement","rope::BaseMetric","rope::Utf16CodeUnitsMetric","breaks::BreaksMetric","multiset::CountMatcher","tree::NodeVal","multiset::Segment","rope::RopeInfo","engine::Contents"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Metric::measure":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"],"Self":["breaks::BreaksMetric","rope::BaseMetric","rope::Utf16CodeUnitsMetric","rope::LinesMetric","breaks::BreaksBaseMetric"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // N
let mut p1 = 0usize; // None+usize
+tree::Metric::measure(p0, p1);
+crate::tree::Metric::measure(p0, p1);
+crate::tree::Metric::measure(p0, p1);
-----------------
rope/src/tree.rs tree::Metric::to_base_units
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Metric::to_base_units":{"N":["tree::NodeInfo","std::marker::Sized"],"Self":["tree::Metric"]},"tree::Node":{"N":["tree::DefaultMetric","std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["tree::Node","diff::DiffBuilder","delta::DeltaElement","breaks::BreaksMetric","tree::NodeVal","breaks::BreaksLeaf","diff::DiffOp","engine::DeltaOp","interval::Interval","multiset::Subset","engine::RevId","rope::Utf16CodeUnitsMetric","engine::FullPriority","engine::Error","breaks::BreaksBaseMetric","spans::SpansInfo","delta::InsertDelta","rope::BaseMetric","tree::NodeBody","delta::Delta","engine::Contents","multiset::ZipSegment","spans::SpansLeaf","multiset::Segment","multiset::CountMatcher","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for *const T>","rope::LinesMetric","find::CaseMatching","rope::RopeInfo","spans::Span","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"spans::SpansInfo":{"T":["rope::RopeInfo","tree::Node","multiset::ZipSegment","diff::DiffOp","engine::RevId","multiset::Segment","engine::Error","rope::Utf16CodeUnitsMetric","breaks::BreaksInfo","breaks::BreaksMetric","breaks::BreaksBaseMetric","interval::Interval","find::CaseMatching","engine::Contents","tree::NodeBody","spans::SpansLeaf","rope::BaseMetric","engine::FullPriority","diff::DiffBuilder","multiset::CountMatcher","rope::LinesMetric","multiset::Subset","spans::Span","delta::Delta","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::DeltaOp","delta::InsertDelta","breaks::BreaksLeaf","delta::DeltaElement","tree::NodeVal","spans::SpansInfo"]},"spans::SpansLeaf":{"T":["engine::FullPriority","std::clone::impls::<impl std::clone::Clone for *mut T>","breaks::BreaksLeaf","tree::Node","spans::Span","breaks::BreaksMetric","multiset::CountMatcher","rope::LinesMetric","tree::NodeBody","multiset::Subset","delta::DeltaElement","engine::Error","multiset::Segment","rope::Utf16CodeUnitsMetric","multiset::ZipSegment","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::RevId","engine::Contents","interval::Interval","rope::BaseMetric","tree::NodeVal","rope::RopeInfo","find::CaseMatching","diff::DiffOp","breaks::BreaksBaseMetric","spans::SpansLeaf","delta::Delta","delta::InsertDelta","breaks::BreaksInfo","diff::DiffBuilder","spans::SpansInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Metric::to_base_units":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"],"Self":["breaks::BreaksMetric","breaks::BreaksBaseMetric","rope::BaseMetric","rope::Utf16CodeUnitsMetric","rope::LinesMetric"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // <N as tree::NodeInfo>::L
let mut p1 = 0usize; // None+usize
+tree::Metric::to_base_units(p0, p1);
+crate::tree::Metric::to_base_units(p0, p1);
+crate::tree::Metric::to_base_units(p0, p1);
-----------------
rope/src/tree.rs tree::Metric::from_base_units
deps:{"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Metric::from_base_units":{"N":["std::marker::Sized","tree::NodeInfo"],"Self":["tree::Metric"]},"tree::Node":{"N":["tree::NodeInfo","std::marker::Sized","tree::DefaultMetric","std::clone::Clone"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"spans::Span":{"T":["breaks::BreaksInfo","delta::Delta","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for &T>","rope::RopeInfo","interval::Interval","diff::DiffBuilder","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::BaseMetric","multiset::Subset","tree::NodeVal","engine::Error","tree::NodeBody","find::CaseMatching","multiset::Segment","diff::DiffOp","breaks::BreaksMetric","spans::SpansLeaf","rope::LinesMetric","breaks::BreaksLeaf","engine::Contents","breaks::BreaksBaseMetric","tree::Node","engine::DeltaOp","delta::DeltaElement","engine::RevId","spans::Span","multiset::CountMatcher","engine::FullPriority","rope::Utf16CodeUnitsMetric","spans::SpansInfo"]},"spans::SpansInfo":{"T":["engine::Contents","rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for &T>","spans::SpansLeaf","breaks::BreaksMetric","tree::NodeBody","engine::DeltaOp","engine::Error","multiset::CountMatcher","engine::FullPriority","multiset::Subset","rope::RopeInfo","spans::SpansInfo","breaks::BreaksBaseMetric","delta::Delta","breaks::BreaksLeaf","tree::NodeVal","spans::Span","diff::DiffOp","engine::RevId","tree::Node","diff::DiffBuilder","delta::DeltaElement","breaks::BreaksInfo","multiset::ZipSegment","interval::Interval","rope::LinesMetric","find::CaseMatching","multiset::Segment","delta::InsertDelta","rope::BaseMetric"]},"spans::SpansLeaf":{"T":["std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::Subset","tree::Node","tree::NodeVal","spans::SpansInfo","engine::DeltaOp","find::CaseMatching","engine::RevId","rope::Utf16CodeUnitsMetric","tree::NodeBody","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::Contents","diff::DiffBuilder","delta::DeltaElement","breaks::BreaksInfo","rope::BaseMetric","spans::SpansLeaf","breaks::BreaksLeaf","engine::Error","multiset::CountMatcher","delta::Delta","multiset::ZipSegment","breaks::BreaksBaseMetric","interval::Interval","engine::FullPriority","multiset::Segment","spans::Span","breaks::BreaksMetric","delta::InsertDelta","rope::LinesMetric","rope::RopeInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Metric::from_base_units":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"],"Self":["breaks::BreaksMetric","rope::LinesMetric","rope::Utf16CodeUnitsMetric","breaks::BreaksBaseMetric","rope::BaseMetric"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // <N as tree::NodeInfo>::L
let mut p1 = 0usize; // None+usize
+tree::Metric::from_base_units(p0, p1);
+crate::tree::Metric::from_base_units(p0, p1);
+crate::tree::Metric::from_base_units(p0, p1);
-----------------
rope/src/tree.rs tree::Metric::is_boundary
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Metric::is_boundary":{"N":["tree::NodeInfo","std::marker::Sized"],"Self":["tree::Metric"]},"tree::Node":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["engine::Contents","delta::DeltaElement","rope::BaseMetric","breaks::BreaksMetric","find::CaseMatching","tree::Node","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::ZipSegment","delta::InsertDelta","rope::LinesMetric","multiset::CountMatcher","rope::RopeInfo","tree::NodeBody","multiset::Segment","engine::RevId","breaks::BreaksInfo","diff::DiffBuilder","engine::DeltaOp","multiset::Subset","spans::Span","breaks::BreaksBaseMetric","engine::Error","rope::Utf16CodeUnitsMetric","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for *mut T>","breaks::BreaksLeaf","spans::SpansInfo","interval::Interval","tree::NodeVal","spans::SpansLeaf","delta::Delta","engine::FullPriority"]},"spans::SpansInfo":{"T":["breaks::BreaksInfo","rope::BaseMetric","engine::DeltaOp","delta::DeltaElement","rope::LinesMetric","tree::NodeVal","spans::SpansLeaf","breaks::BreaksBaseMetric","tree::NodeBody","find::CaseMatching","engine::FullPriority","spans::SpansInfo","interval::Interval","engine::RevId","rope::Utf16CodeUnitsMetric","multiset::CountMatcher","multiset::ZipSegment","tree::Node","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksMetric","diff::DiffOp","spans::Span","multiset::Subset","rope::RopeInfo","engine::Error","engine::Contents","delta::Delta","delta::InsertDelta","multiset::Segment","diff::DiffBuilder","breaks::BreaksLeaf"]},"spans::SpansLeaf":{"T":["delta::DeltaElement","engine::RevId","tree::Node","spans::Span","multiset::CountMatcher","spans::SpansInfo","delta::Delta","diff::DiffBuilder","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for *const T>","breaks::BreaksInfo","engine::FullPriority","multiset::Subset","interval::Interval","engine::Contents","rope::RopeInfo","tree::NodeBody","rope::BaseMetric","diff::DiffOp","breaks::BreaksLeaf","multiset::ZipSegment","find::CaseMatching","spans::SpansLeaf","breaks::BreaksMetric","multiset::Segment","delta::InsertDelta","rope::LinesMetric","breaks::BreaksBaseMetric","engine::Error","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::Utf16CodeUnitsMetric","tree::NodeVal"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Metric::is_boundary":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"],"Self":["rope::LinesMetric","rope::BaseMetric","breaks::BreaksMetric","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // <N as tree::NodeInfo>::L
let mut p1 = 0usize; // None+usize
+tree::Metric::is_boundary(p0, p1);
+crate::tree::Metric::is_boundary(p0, p1);
+crate::tree::Metric::is_boundary(p0, p1);
-----------------
rope/src/tree.rs tree::Metric::prev
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Metric::prev":{"N":["tree::NodeInfo","std::marker::Sized"],"Self":["tree::Metric"]},"tree::Node":{"N":["std::clone::Clone","tree::DefaultMetric","std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["delta::Delta","rope::BaseMetric","engine::Contents","rope::LinesMetric","tree::NodeBody","diff::DiffOp","rope::RopeInfo","delta::DeltaElement","delta::InsertDelta","rope::Utf16CodeUnitsMetric","multiset::Segment","multiset::Subset","spans::SpansLeaf","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::CountMatcher","multiset::ZipSegment","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::Error","breaks::BreaksLeaf","breaks::BreaksMetric","breaks::BreaksInfo","spans::Span","engine::DeltaOp","tree::Node","find::CaseMatching","tree::NodeVal","diff::DiffBuilder","interval::Interval","breaks::BreaksBaseMetric","spans::SpansInfo","engine::RevId"]},"spans::SpansInfo":{"T":["engine::FullPriority","rope::BaseMetric","find::CaseMatching","rope::LinesMetric","multiset::Segment","engine::Contents","breaks::BreaksMetric","diff::DiffBuilder","breaks::BreaksInfo","multiset::ZipSegment","engine::RevId","diff::DiffOp","delta::Delta","engine::Error","spans::SpansLeaf","tree::Node","breaks::BreaksBaseMetric","delta::InsertDelta","spans::SpansInfo","delta::DeltaElement","tree::NodeBody","spans::Span","rope::RopeInfo","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::Utf16CodeUnitsMetric","multiset::Subset","interval::Interval","engine::DeltaOp","multiset::CountMatcher","tree::NodeVal"]},"spans::SpansLeaf":{"T":["rope::Utf16CodeUnitsMetric","interval::Interval","diff::DiffOp","breaks::BreaksLeaf","delta::Delta","engine::DeltaOp","breaks::BreaksInfo","tree::NodeVal","delta::InsertDelta","spans::SpansLeaf","tree::Node","spans::SpansInfo","multiset::CountMatcher","diff::DiffBuilder","spans::Span","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::Segment","tree::NodeBody","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","multiset::Subset","rope::RopeInfo","breaks::BreaksMetric","multiset::ZipSegment","engine::Contents","delta::DeltaElement","rope::LinesMetric","engine::RevId","engine::FullPriority","find::CaseMatching","engine::Error","breaks::BreaksBaseMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Metric::prev":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"],"Self":["breaks::BreaksMetric","rope::Utf16CodeUnitsMetric","rope::LinesMetric","breaks::BreaksBaseMetric","rope::BaseMetric"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // <N as tree::NodeInfo>::L
let mut p1 = 0usize; // None+usize
+tree::Metric::prev(p0, p1);
+crate::tree::Metric::prev(p0, p1);
+crate::tree::Metric::prev(p0, p1);
-----------------
rope/src/tree.rs tree::Metric::next
deps:{"delta::Delta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Metric::next":{"N":["std::marker::Sized","tree::NodeInfo"],"Self":["tree::Metric"]},"tree::Node":{"N":["tree::DefaultMetric","std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["breaks::BreaksInfo","spans::Span","multiset::Segment","spans::SpansInfo","breaks::BreaksBaseMetric","rope::BaseMetric","delta::Delta","engine::Contents","spans::SpansLeaf","engine::Error","engine::DeltaOp","rope::LinesMetric","diff::DiffOp","find::CaseMatching","tree::NodeBody","delta::DeltaElement","diff::DiffBuilder","rope::RopeInfo","breaks::BreaksMetric","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for &T>","multiset::CountMatcher","rope::Utf16CodeUnitsMetric","delta::InsertDelta","multiset::ZipSegment","tree::Node","multiset::Subset","tree::NodeVal","engine::RevId","interval::Interval","engine::FullPriority"]},"spans::SpansInfo":{"T":["find::CaseMatching","breaks::BreaksMetric","delta::Delta","rope::Utf16CodeUnitsMetric","interval::Interval","multiset::Subset","rope::RopeInfo","rope::BaseMetric","engine::Error","tree::NodeBody","tree::Node","delta::DeltaElement","diff::DiffBuilder","breaks::BreaksBaseMetric","spans::SpansLeaf","diff::DiffOp","rope::LinesMetric","delta::InsertDelta","multiset::CountMatcher","breaks::BreaksLeaf","multiset::ZipSegment","tree::NodeVal","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::Segment","spans::SpansInfo","engine::DeltaOp","engine::Contents","breaks::BreaksInfo","engine::FullPriority","engine::RevId","spans::Span"]},"spans::SpansLeaf":{"T":["tree::Node","engine::DeltaOp","breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for &T>","delta::Delta","rope::LinesMetric","spans::SpansInfo","tree::NodeBody","tree::NodeVal","find::CaseMatching","breaks::BreaksLeaf","interval::Interval","multiset::ZipSegment","diff::DiffOp","rope::Utf16CodeUnitsMetric","engine::FullPriority","multiset::Subset","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for *const T>","spans::SpansLeaf","diff::DiffBuilder","breaks::BreaksInfo","engine::Error","engine::RevId","delta::InsertDelta","breaks::BreaksBaseMetric","multiset::Segment","delta::DeltaElement","rope::RopeInfo","engine::Contents","multiset::CountMatcher","spans::Span"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Metric::next":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"],"Self":["rope::BaseMetric","rope::Utf16CodeUnitsMetric","rope::LinesMetric","breaks::BreaksBaseMetric","breaks::BreaksMetric"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // <N as tree::NodeInfo>::L
let mut p1 = 0usize; // None+usize
+tree::Metric::next(p0, p1);
+crate::tree::Metric::next(p0, p1);
+crate::tree::Metric::next(p0, p1);
-----------------
rope/src/tree.rs tree::Metric::can_fragment
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Metric::can_fragment":{"N":["std::marker::Sized","tree::NodeInfo"],"Self":["tree::Metric"]},"tree::Node":{"N":["tree::DefaultMetric","tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["std::clone::impls::<impl std::clone::Clone for &T>","engine::Contents","rope::BaseMetric","engine::DeltaOp","spans::Span","std::clone::impls::<impl std::clone::Clone for &mut T>","delta::InsertDelta","engine::Error","breaks::BreaksBaseMetric","delta::DeltaElement","spans::SpansInfo","diff::DiffBuilder","engine::FullPriority","engine::RevId","multiset::Segment","multiset::ZipSegment","diff::DiffOp","rope::RopeInfo","interval::Interval","rope::Utf16CodeUnitsMetric","delta::Delta","tree::NodeVal","multiset::CountMatcher","spans::SpansLeaf","breaks::BreaksInfo","rope::LinesMetric","find::CaseMatching","tree::NodeBody","tree::Node","breaks::BreaksLeaf","breaks::BreaksMetric","multiset::Subset"]},"spans::SpansInfo":{"T":["multiset::ZipSegment","delta::Delta","engine::Contents","breaks::BreaksMetric","engine::FullPriority","tree::Node","interval::Interval","delta::DeltaElement","breaks::BreaksLeaf","breaks::BreaksBaseMetric","tree::NodeVal","spans::SpansInfo","multiset::Segment","find::CaseMatching","rope::Utf16CodeUnitsMetric","engine::DeltaOp","spans::SpansLeaf","delta::InsertDelta","rope::RopeInfo","multiset::Subset","breaks::BreaksInfo","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for *mut T>","tree::NodeBody","multiset::CountMatcher","diff::DiffBuilder","spans::Span","rope::LinesMetric","engine::Error","rope::BaseMetric","engine::RevId"]},"spans::SpansLeaf":{"T":["engine::Error","multiset::Segment","spans::SpansInfo","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::DeltaOp","rope::LinesMetric","spans::Span","breaks::BreaksLeaf","delta::DeltaElement","breaks::BreaksMetric","rope::BaseMetric","breaks::BreaksBaseMetric","rope::RopeInfo","spans::SpansLeaf","multiset::Subset","engine::RevId","engine::Contents","find::CaseMatching","engine::FullPriority","multiset::ZipSegment","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for &T>","diff::DiffOp","diff::DiffBuilder","interval::Interval","multiset::CountMatcher","tree::Node","delta::Delta","tree::NodeVal","tree::NodeBody","rope::Utf16CodeUnitsMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Metric::can_fragment":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"],"Self":["breaks::BreaksMetric","breaks::BreaksBaseMetric","rope::BaseMetric","rope::LinesMetric","rope::Utf16CodeUnitsMetric"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
+tree::Metric::can_fragment();
+crate::tree::Metric::can_fragment();
+crate::tree::Metric::can_fragment();
-----------------
rope/src/breaks.rs <breaks::BreaksLeaf as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
+p0.clone();
+<breaks::BreaksLeaf as std::clone::Clone>::clone(p0);
+crate::<breaks::BreaksLeaf as std::clone::Clone>::clone(p0);
+<breaks::BreaksLeaf>::clone(p0);
-----------------
rope/src/breaks.rs <breaks::BreaksLeaf as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<breaks::BreaksLeaf as std::fmt::Debug>::fmt(p0, p1);
+crate::<breaks::BreaksLeaf as std::fmt::Debug>::fmt(p0, p1);
+<breaks::BreaksLeaf>::fmt(p0, p1);
-----------------
rope/src/breaks.rs <breaks::BreaksLeaf as std::default::Default>::default
deps:{}
candidates:{}
+<breaks::BreaksLeaf as std::default::Default>::default();
+crate::<breaks::BreaksLeaf as std::default::Default>::default();
+<breaks::BreaksLeaf>::default();
-----------------
rope/src/breaks.rs <breaks::BreaksLeaf as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
let mut p1 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
+p0.eq(p1);
+<breaks::BreaksLeaf as std::cmp::PartialEq>::eq(p0, p1);
+crate::<breaks::BreaksLeaf as std::cmp::PartialEq>::eq(p0, p1);
+<breaks::BreaksLeaf>::eq(p0, p1);
-----------------
rope/src/breaks.rs <breaks::BreaksLeaf as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
+p0.assert_receiver_is_total_eq();
+<breaks::BreaksLeaf as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<breaks::BreaksLeaf as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<breaks::BreaksLeaf>::assert_receiver_is_total_eq(p0);
-----------------
rope/src/breaks.rs <breaks::BreaksInfo as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksInfo
+p0.clone();
+<breaks::BreaksInfo as std::clone::Clone>::clone(p0);
+crate::<breaks::BreaksInfo as std::clone::Clone>::clone(p0);
+<breaks::BreaksInfo>::clone(p0);
-----------------
rope/src/breaks.rs <breaks::BreaksInfo as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksInfo
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<breaks::BreaksInfo as std::fmt::Debug>::fmt(p0, p1);
+crate::<breaks::BreaksInfo as std::fmt::Debug>::fmt(p0, p1);
+<breaks::BreaksInfo>::fmt(p0, p1);
-----------------
rope/src/breaks.rs <breaks::BreaksLeaf as tree::Leaf>::len
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
+p0.len();
+<breaks::BreaksLeaf as tree::Leaf>::len(p0);
+crate::<breaks::BreaksLeaf as tree::Leaf>::len(p0);
+<breaks::BreaksLeaf>::len(p0);
-----------------
rope/src/breaks.rs <breaks::BreaksLeaf as tree::Leaf>::is_ok_child
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
+p0.is_ok_child();
+<breaks::BreaksLeaf as tree::Leaf>::is_ok_child(p0);
+crate::<breaks::BreaksLeaf as tree::Leaf>::is_ok_child(p0);
+<breaks::BreaksLeaf>::is_ok_child(p0);
-----------------
rope/src/breaks.rs <breaks::BreaksLeaf as tree::Leaf>::push_maybe_split
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
let mut p1 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
let mut p2 = MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.push_maybe_split(p1, p2);
+<breaks::BreaksLeaf as tree::Leaf>::push_maybe_split(p0, p1, p2);
+crate::<breaks::BreaksLeaf as tree::Leaf>::push_maybe_split(p0, p1, p2);
+<breaks::BreaksLeaf>::push_maybe_split(p0, p1, p2);
-----------------
rope/src/breaks.rs <breaks::BreaksInfo as tree::NodeInfo>::accumulate
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // breaks::BreaksInfo
let mut p1 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksInfo
+p0.accumulate(p1);
+<breaks::BreaksInfo as tree::NodeInfo>::accumulate(p0, p1);
+crate::<breaks::BreaksInfo as tree::NodeInfo>::accumulate(p0, p1);
+<breaks::BreaksInfo>::accumulate(p0, p1);
-----------------
rope/src/breaks.rs <breaks::BreaksInfo as tree::NodeInfo>::compute_info
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
+<breaks::BreaksInfo as tree::NodeInfo>::compute_info(p0);
+crate::<breaks::BreaksInfo as tree::NodeInfo>::compute_info(p0);
+<breaks::BreaksInfo>::compute_info(p0);
-----------------
rope/src/breaks.rs breaks::BreaksLeaf::get_data_cloned
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
+p0.get_data_cloned();
+breaks::BreaksLeaf::get_data_cloned(p0);
+crate::breaks::BreaksLeaf::get_data_cloned(p0);
+<breaks::BreaksLeaf>::get_data_cloned(p0);
-----------------
rope/src/breaks.rs <breaks::BreaksMetric as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksMetric
+p0.clone();
+<breaks::BreaksMetric as std::clone::Clone>::clone(p0);
+crate::<breaks::BreaksMetric as std::clone::Clone>::clone(p0);
+<breaks::BreaksMetric>::clone(p0);
-----------------
rope/src/breaks.rs <breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::measure
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksInfo
let mut p1 = 0usize; // None+usize
+<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::measure(p0, p1);
+crate::<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::measure(p0, p1);
+<breaks::BreaksMetric>::measure(p0, p1);
-----------------
rope/src/breaks.rs <breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::to_base_units
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
let mut p1 = 0usize; // None+usize
+<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::to_base_units(p0, p1);
+crate::<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::to_base_units(p0, p1);
+<breaks::BreaksMetric>::to_base_units(p0, p1);
-----------------
rope/src/breaks.rs <breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::from_base_units
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
let mut p1 = 0usize; // None+usize
+<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::from_base_units(p0, p1);
+crate::<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::from_base_units(p0, p1);
+<breaks::BreaksMetric>::from_base_units(p0, p1);
-----------------
rope/src/breaks.rs <breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::is_boundary
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
let mut p1 = 0usize; // None+usize
+<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::is_boundary(p0, p1);
+crate::<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::is_boundary(p0, p1);
+<breaks::BreaksMetric>::is_boundary(p0, p1);
-----------------
rope/src/breaks.rs <breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::prev
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
let mut p1 = 0usize; // None+usize
+<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::prev(p0, p1);
+crate::<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::prev(p0, p1);
+<breaks::BreaksMetric>::prev(p0, p1);
-----------------
rope/src/breaks.rs <breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::next
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
let mut p1 = 0usize; // None+usize
+<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::next(p0, p1);
+crate::<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::next(p0, p1);
+<breaks::BreaksMetric>::next(p0, p1);
-----------------
rope/src/breaks.rs <breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::can_fragment
deps:{}
candidates:{}
+<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::can_fragment();
+crate::<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::can_fragment();
+<breaks::BreaksMetric>::can_fragment();
-----------------
rope/src/breaks.rs <breaks::BreaksBaseMetric as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksBaseMetric
+p0.clone();
+<breaks::BreaksBaseMetric as std::clone::Clone>::clone(p0);
+crate::<breaks::BreaksBaseMetric as std::clone::Clone>::clone(p0);
+<breaks::BreaksBaseMetric>::clone(p0);
-----------------
rope/src/breaks.rs <breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::measure
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksInfo
let mut p1 = 0usize; // None+usize
+<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::measure(p0, p1);
+crate::<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::measure(p0, p1);
+<breaks::BreaksBaseMetric>::measure(p0, p1);
-----------------
rope/src/breaks.rs <breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::to_base_units
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
let mut p1 = 0usize; // None+usize
+<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::to_base_units(p0, p1);
+crate::<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::to_base_units(p0, p1);
+<breaks::BreaksBaseMetric>::to_base_units(p0, p1);
-----------------
rope/src/breaks.rs <breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::from_base_units
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
let mut p1 = 0usize; // None+usize
+<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::from_base_units(p0, p1);
+crate::<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::from_base_units(p0, p1);
+<breaks::BreaksBaseMetric>::from_base_units(p0, p1);
-----------------
rope/src/breaks.rs <breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::is_boundary
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
let mut p1 = 0usize; // None+usize
+<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::is_boundary(p0, p1);
+crate::<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::is_boundary(p0, p1);
+<breaks::BreaksBaseMetric>::is_boundary(p0, p1);
-----------------
rope/src/breaks.rs <breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::prev
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
let mut p1 = 0usize; // None+usize
+<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::prev(p0, p1);
+crate::<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::prev(p0, p1);
+<breaks::BreaksBaseMetric>::prev(p0, p1);
-----------------
rope/src/breaks.rs <breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::next
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // breaks::BreaksLeaf
let mut p1 = 0usize; // None+usize
+<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::next(p0, p1);
+crate::<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::next(p0, p1);
+<breaks::BreaksBaseMetric>::next(p0, p1);
-----------------
rope/src/breaks.rs <breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::can_fragment
deps:{}
candidates:{}
+<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::can_fragment();
+crate::<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::can_fragment();
+<breaks::BreaksBaseMetric>::can_fragment();
-----------------
rope/src/breaks.rs breaks::<impl tree::Node<breaks::BreaksInfo>>::new_no_break
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
+breaks::<impl tree::Node<breaks::BreaksInfo>>::new_no_break(p0);
+crate::breaks::<impl tree::Node<breaks::BreaksInfo>>::new_no_break(p0);
+<tree::Node<breaks::BreaksInfo>>::new_no_break(p0);
-----------------
rope/src/breaks.rs <breaks::BreakBuilder as std::default::Default>::default
deps:{}
candidates:{}
+<breaks::BreakBuilder as std::default::Default>::default();
+crate::<breaks::BreakBuilder as std::default::Default>::default();
+<breaks::BreakBuilder>::default();
-----------------
rope/src/breaks.rs breaks::BreakBuilder::new
deps:{}
candidates:{}
+breaks::BreakBuilder::new();
+crate::breaks::BreakBuilder::new();
+<breaks::BreakBuilder>::new();
-----------------
rope/src/breaks.rs breaks::BreakBuilder::add_break
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // breaks::BreakBuilder
let mut p1 = 0usize; // None+usize
+p0.add_break(p1);
+breaks::BreakBuilder::add_break(p0, p1);
+crate::breaks::BreakBuilder::add_break(p0, p1);
+<breaks::BreakBuilder>::add_break(p0, p1);
-----------------
rope/src/breaks.rs breaks::BreakBuilder::add_no_break
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // breaks::BreakBuilder
let mut p1 = 0usize; // None+usize
+p0.add_no_break(p1);
+breaks::BreakBuilder::add_no_break(p0, p1);
+crate::breaks::BreakBuilder::add_no_break(p0, p1);
+<breaks::BreakBuilder>::add_no_break(p0, p1);
-----------------
rope/src/breaks.rs breaks::BreakBuilder::build
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // breaks::BreakBuilder
+p0.build();
+breaks::BreakBuilder::build(p0);
+crate::breaks::BreakBuilder::build(p0);
+<breaks::BreakBuilder>::build(p0);
-----------------
rope/src/compare.rs compare::RopeScanner::<'a>::new
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
+compare::RopeScanner::<'a>::new(p0, p1);
+crate::compare::RopeScanner::<'a>::new(p0, p1);
+<compare::RopeScanner<'a>>::new(p0, p1);
-----------------
rope/src/compare.rs compare::RopeScanner::<'a>::find_ne_char_back
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"compare::RopeScanner::<'a>::find_ne_char_back":{"T":["std::marker::Sized","std::convert::Into"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"compare::RopeScanner::<'a>::find_ne_char_back":{"T":["std::process::ExitStatusError","<T as std::convert::Into<U>>","std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // compare::RopeScanner<'a>
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
let mut p3 = MaybeUninit::uninit().assume_init(); // T
+p0.find_ne_char_back(p1, p2, p3);
+compare::RopeScanner::<'a>::find_ne_char_back(p0, p1, p2, p3);
+crate::compare::RopeScanner::<'a>::find_ne_char_back(p0, p1, p2, p3);
+<compare::RopeScanner<'a>>::find_ne_char_back(p0, p1, p2, p3);
-----------------
rope/src/compare.rs compare::RopeScanner::<'a>::find_ne_char
'a
deps:{"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"compare::RopeScanner::<'a>::find_ne_char":{"T":["std::convert::Into","std::marker::Sized"]}}
candidates:{"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"compare::RopeScanner::<'a>::find_ne_char":{"T":["std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","<T as std::convert::Into<U>>","std::sync::mpmc::select::Selected"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // compare::RopeScanner<'a>
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
let mut p3 = MaybeUninit::uninit().assume_init(); // T
+p0.find_ne_char(p1, p2, p3);
+compare::RopeScanner::<'a>::find_ne_char(p0, p1, p2, p3);
+crate::compare::RopeScanner::<'a>::find_ne_char(p0, p1, p2, p3);
+<compare::RopeScanner<'a>>::find_ne_char(p0, p1, p2, p3);
-----------------
rope/src/compare.rs compare::RopeScanner::<'a>::find_min_diff_range
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // compare::RopeScanner<'a>
+p0.find_min_diff_range();
+compare::RopeScanner::<'a>::find_min_diff_range(p0);
+crate::compare::RopeScanner::<'a>::find_min_diff_range(p0);
+<compare::RopeScanner<'a>>::find_min_diff_range(p0);
-----------------
rope/src/compare.rs compare::RopeScanner::<'a>::load_prev_chunk
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // compare::RopeScanner<'a>
+p0.load_prev_chunk();
+compare::RopeScanner::<'a>::load_prev_chunk(p0);
+crate::compare::RopeScanner::<'a>::load_prev_chunk(p0);
+<compare::RopeScanner<'a>>::load_prev_chunk(p0);
-----------------
rope/src/compare.rs compare::RopeScanner::<'a>::load_next_chunk
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // compare::RopeScanner<'a>
+p0.load_next_chunk();
+compare::RopeScanner::<'a>::load_next_chunk(p0);
+crate::compare::RopeScanner::<'a>::load_next_chunk(p0);
+<compare::RopeScanner<'a>>::load_next_chunk(p0);
-----------------
rope/src/delta.rs <delta::DeltaElement<N> as std::clone::Clone>::clone
deps:{"<delta::DeltaElement<N> as std::clone::Clone>::clone":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"<delta::DeltaElement<N> as std::clone::Clone>::clone":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["std::clone::impls::<impl std::clone::Clone for *const T>","spans::SpansLeaf","tree::NodeBody","std::clone::impls::<impl std::clone::Clone for *mut T>","diff::DiffOp","rope::Utf16CodeUnitsMetric","delta::DeltaElement","spans::Span","engine::FullPriority","delta::Delta","rope::RopeInfo","diff::DiffBuilder","engine::RevId","multiset::CountMatcher","engine::Error","multiset::ZipSegment","multiset::Segment","interval::Interval","breaks::BreaksInfo","breaks::BreaksBaseMetric","tree::Node","delta::InsertDelta","rope::LinesMetric","engine::DeltaOp","spans::SpansInfo","breaks::BreaksLeaf","tree::NodeVal","find::CaseMatching","engine::Contents","multiset::Subset","rope::BaseMetric","breaks::BreaksMetric"]},"spans::SpansInfo":{"T":["delta::DeltaElement","rope::BaseMetric","rope::LinesMetric","rope::Utf16CodeUnitsMetric","diff::DiffOp","tree::NodeVal","breaks::BreaksInfo","multiset::Segment","breaks::BreaksBaseMetric","engine::Error","spans::Span","find::CaseMatching","breaks::BreaksMetric","engine::Contents","delta::Delta","tree::NodeBody","diff::DiffBuilder","interval::Interval","multiset::Subset","std::clone::impls::<impl std::clone::Clone for *mut T>","breaks::BreaksLeaf","rope::RopeInfo","multiset::CountMatcher","engine::FullPriority","engine::RevId","engine::DeltaOp","multiset::ZipSegment","tree::Node","spans::SpansLeaf","delta::InsertDelta","spans::SpansInfo"]},"spans::SpansLeaf":{"T":["engine::FullPriority","diff::DiffBuilder","find::CaseMatching","engine::DeltaOp","engine::RevId","engine::Contents","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::ZipSegment","breaks::BreaksBaseMetric","delta::DeltaElement","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for &T>","tree::NodeBody","breaks::BreaksLeaf","interval::Interval","engine::Error","spans::Span","delta::InsertDelta","multiset::Subset","tree::Node","rope::LinesMetric","breaks::BreaksMetric","rope::Utf16CodeUnitsMetric","breaks::BreaksInfo","rope::BaseMetric","multiset::Segment","multiset::CountMatcher","spans::SpansLeaf","delta::Delta","spans::SpansInfo","rope::RopeInfo","tree::NodeVal"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::DeltaElement<N>
+p0.clone();
+<delta::DeltaElement<N> as std::clone::Clone>::clone(p0);
+crate::<delta::DeltaElement<N> as std::clone::Clone>::clone(p0);
+<delta::DeltaElement<N>>::clone(p0);
-----------------
rope/src/delta.rs <delta::Delta<N> as std::clone::Clone>::clone
deps:{"<delta::Delta<N> as std::clone::Clone>::clone":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::Delta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]}}
candidates:{"<delta::Delta<N> as std::clone::Clone>::clone":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::Delta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["diff::DiffBuilder","tree::Node","breaks::BreaksBaseMetric","multiset::Subset","breaks::BreaksInfo","find::CaseMatching","rope::Utf16CodeUnitsMetric","multiset::ZipSegment","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for &T>","multiset::Segment","engine::RevId","engine::FullPriority","breaks::BreaksLeaf","engine::DeltaOp","rope::RopeInfo","diff::DiffOp","spans::SpansInfo","breaks::BreaksMetric","rope::BaseMetric","engine::Error","delta::Delta","spans::SpansLeaf","interval::Interval","tree::NodeVal","delta::InsertDelta","tree::NodeBody","multiset::CountMatcher","spans::Span","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::Contents"]},"spans::SpansInfo":{"T":["breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for *mut T>","delta::DeltaElement","rope::Utf16CodeUnitsMetric","delta::InsertDelta","multiset::Segment","breaks::BreaksLeaf","rope::RopeInfo","tree::NodeVal","rope::LinesMetric","engine::Error","engine::RevId","engine::FullPriority","rope::BaseMetric","diff::DiffBuilder","find::CaseMatching","breaks::BreaksInfo","breaks::BreaksBaseMetric","spans::Span","diff::DiffOp","tree::Node","delta::Delta","spans::SpansInfo","tree::NodeBody","spans::SpansLeaf","multiset::Subset","engine::Contents","multiset::CountMatcher","engine::DeltaOp","interval::Interval","multiset::ZipSegment"]},"spans::SpansLeaf":{"T":["breaks::BreaksBaseMetric","find::CaseMatching","multiset::Subset","breaks::BreaksMetric","tree::NodeBody","std::clone::impls::<impl std::clone::Clone for &T>","std::clone::impls::<impl std::clone::Clone for *const T>","tree::NodeVal","delta::DeltaElement","multiset::ZipSegment","delta::InsertDelta","spans::SpansInfo","rope::BaseMetric","rope::LinesMetric","spans::Span","tree::Node","multiset::Segment","rope::Utf16CodeUnitsMetric","engine::Error","diff::DiffOp","breaks::BreaksInfo","engine::DeltaOp","delta::Delta","engine::Contents","rope::RopeInfo","diff::DiffBuilder","engine::FullPriority","multiset::CountMatcher","interval::Interval","spans::SpansLeaf","engine::RevId","breaks::BreaksLeaf"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::Delta<N>
+p0.clone();
+<delta::Delta<N> as std::clone::Clone>::clone(p0);
+crate::<delta::Delta<N> as std::clone::Clone>::clone(p0);
+<delta::Delta<N>>::clone(p0);
-----------------
rope/src/delta.rs <delta::InsertDelta<N> as std::clone::Clone>::clone
deps:{"<delta::InsertDelta<N> as std::clone::Clone>::clone":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","tree::DefaultMetric","std::clone::Clone","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"<delta::InsertDelta<N> as std::clone::Clone>::clone":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"spans::Span":{"T":["breaks::BreaksBaseMetric","diff::DiffOp","breaks::BreaksInfo","spans::SpansInfo","multiset::CountMatcher","rope::RopeInfo","spans::SpansLeaf","interval::Interval","engine::DeltaOp","delta::Delta","multiset::ZipSegment","tree::Node","breaks::BreaksLeaf","engine::RevId","diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for &T>","multiset::Subset","find::CaseMatching","delta::InsertDelta","rope::Utf16CodeUnitsMetric","engine::Error","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::Segment","rope::LinesMetric","engine::Contents","spans::Span","tree::NodeVal","rope::BaseMetric","engine::FullPriority","breaks::BreaksMetric","tree::NodeBody","delta::DeltaElement"]},"spans::SpansInfo":{"T":["multiset::Segment","delta::Delta","spans::SpansInfo","find::CaseMatching","delta::InsertDelta","tree::NodeVal","engine::DeltaOp","rope::BaseMetric","engine::FullPriority","tree::NodeBody","breaks::BreaksMetric","multiset::ZipSegment","engine::Error","breaks::BreaksInfo","engine::RevId","tree::Node","breaks::BreaksLeaf","spans::SpansLeaf","rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","interval::Interval","breaks::BreaksBaseMetric","diff::DiffOp","spans::Span","rope::LinesMetric","multiset::CountMatcher","rope::RopeInfo","engine::Contents","delta::DeltaElement","multiset::Subset","diff::DiffBuilder"]},"spans::SpansLeaf":{"T":["tree::NodeBody","engine::RevId","multiset::ZipSegment","spans::Span","breaks::BreaksMetric","breaks::BreaksLeaf","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::LinesMetric","delta::Delta","find::CaseMatching","spans::SpansInfo","multiset::CountMatcher","std::clone::impls::<impl std::clone::Clone for *const T>","breaks::BreaksBaseMetric","rope::RopeInfo","engine::Contents","engine::DeltaOp","rope::Utf16CodeUnitsMetric","engine::FullPriority","multiset::Segment","tree::Node","interval::Interval","rope::BaseMetric","diff::DiffOp","delta::DeltaElement","spans::SpansLeaf","diff::DiffBuilder","tree::NodeVal","delta::InsertDelta","engine::Error","multiset::Subset"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::InsertDelta<N>
+p0.clone();
+<delta::InsertDelta<N> as std::clone::Clone>::clone(p0);
+crate::<delta::InsertDelta<N> as std::clone::Clone>::clone(p0);
+<delta::InsertDelta<N>>::clone(p0);
-----------------
rope/src/delta.rs delta::Delta::<N>::simple_edit
deps:{"<T as interval::IntervalBounds>":{"T":["std::convert::Into","std::marker::Sized"]},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::Delta::<N>::simple_edit":{"N":["std::marker::Sized","tree::NodeInfo"],"T":["std::marker::Sized","interval::IntervalBounds"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]},"tree::Node":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone","tree::DefaultMetric"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"<T as interval::IntervalBounds>":{"T":["std::sync::mpmc::select::Selected","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","<T as std::convert::Into<U>>"]},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::Delta::<N>::simple_edit":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"],"T":["std::ops::RangeFrom","<T as interval::IntervalBounds>","std::ops::RangeFull"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["tree::Node","engine::FullPriority","engine::RevId","interval::Interval","rope::RopeInfo","diff::DiffBuilder","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for &T>","multiset::CountMatcher","multiset::Subset","delta::InsertDelta","engine::Contents","find::CaseMatching","tree::NodeBody","breaks::BreaksLeaf","spans::SpansLeaf","multiset::ZipSegment","diff::DiffOp","engine::Error","rope::LinesMetric","breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::Segment","delta::DeltaElement","breaks::BreaksBaseMetric","spans::SpansInfo","engine::DeltaOp","spans::Span","rope::Utf16CodeUnitsMetric","delta::Delta","tree::NodeVal","breaks::BreaksInfo"]},"spans::SpansInfo":{"T":["engine::Error","spans::SpansInfo","std::clone::impls::<impl std::clone::Clone for &T>","rope::RopeInfo","breaks::BreaksBaseMetric","spans::SpansLeaf","engine::RevId","multiset::Segment","engine::FullPriority","rope::LinesMetric","diff::DiffBuilder","multiset::CountMatcher","engine::Contents","breaks::BreaksLeaf","interval::Interval","find::CaseMatching","tree::NodeVal","delta::DeltaElement","diff::DiffOp","delta::Delta","rope::BaseMetric","multiset::Subset","tree::Node","engine::DeltaOp","delta::InsertDelta","tree::NodeBody","rope::Utf16CodeUnitsMetric","breaks::BreaksMetric","breaks::BreaksInfo","multiset::ZipSegment","spans::Span"]},"spans::SpansLeaf":{"T":["std::clone::impls::<impl std::clone::Clone for *mut T>","diff::DiffOp","breaks::BreaksInfo","tree::Node","delta::InsertDelta","tree::NodeVal","multiset::ZipSegment","multiset::Segment","find::CaseMatching","rope::Utf16CodeUnitsMetric","rope::LinesMetric","delta::DeltaElement","engine::FullPriority","breaks::BreaksLeaf","spans::Span","rope::BaseMetric","breaks::BreaksBaseMetric","engine::RevId","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::Error","multiset::CountMatcher","rope::RopeInfo","diff::DiffBuilder","delta::Delta","spans::SpansLeaf","engine::DeltaOp","spans::SpansInfo","engine::Contents","multiset::Subset","interval::Interval","breaks::BreaksMetric","tree::NodeBody"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
let mut p1 = MaybeUninit::uninit().assume_init(); // tree::Node<N>
let mut p2 = 0usize; // None+usize
+delta::Delta::<N>::simple_edit(p0, p1, p2);
+crate::delta::Delta::<N>::simple_edit(p0, p1, p2);
+<delta::Delta<N>>::simple_edit(p0, p1, p2);
-----------------
rope/src/delta.rs delta::Delta::<N>::as_simple_insert
deps:{"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::Delta::<N>::as_simple_insert":{"N":["tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::Delta::<N>::as_simple_insert":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"spans::Span":{"T":["std::clone::impls::<impl std::clone::Clone for *const T>","rope::Utf16CodeUnitsMetric","rope::BaseMetric","engine::Contents","rope::RopeInfo","engine::RevId","spans::SpansInfo","breaks::BreaksBaseMetric","engine::Error","tree::NodeVal","spans::SpansLeaf","diff::DiffOp","delta::InsertDelta","engine::DeltaOp","multiset::ZipSegment","multiset::Segment","find::CaseMatching","multiset::Subset","tree::Node","delta::Delta","breaks::BreaksInfo","breaks::BreaksMetric","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::FullPriority","rope::LinesMetric","diff::DiffBuilder","multiset::CountMatcher","interval::Interval","tree::NodeBody","breaks::BreaksLeaf","spans::Span"]},"spans::SpansInfo":{"T":["engine::RevId","std::clone::impls::<impl std::clone::Clone for &T>","engine::DeltaOp","engine::Contents","delta::DeltaElement","multiset::Segment","find::CaseMatching","rope::Utf16CodeUnitsMetric","delta::Delta","engine::Error","tree::Node","tree::NodeBody","spans::SpansInfo","breaks::BreaksInfo","rope::BaseMetric","breaks::BreaksLeaf","tree::NodeVal","interval::Interval","breaks::BreaksMetric","multiset::CountMatcher","delta::InsertDelta","diff::DiffOp","spans::SpansLeaf","multiset::ZipSegment","multiset::Subset","rope::RopeInfo","rope::LinesMetric","breaks::BreaksBaseMetric","diff::DiffBuilder","spans::Span","engine::FullPriority"]},"spans::SpansLeaf":{"T":["tree::Node","multiset::CountMatcher","rope::Utf16CodeUnitsMetric","breaks::BreaksBaseMetric","spans::Span","engine::Error","find::CaseMatching","rope::LinesMetric","multiset::Segment","breaks::BreaksMetric","engine::DeltaOp","delta::Delta","std::clone::impls::<impl std::clone::Clone for *const T>","rope::BaseMetric","tree::NodeVal","breaks::BreaksLeaf","engine::FullPriority","diff::DiffBuilder","delta::DeltaElement","multiset::ZipSegment","multiset::Subset","breaks::BreaksInfo","spans::SpansInfo","engine::RevId","spans::SpansLeaf","engine::Contents","tree::NodeBody","interval::Interval","delta::InsertDelta","rope::RopeInfo","std::clone::impls::<impl std::clone::Clone for &mut T>","diff::DiffOp"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::Delta<N>
+p0.as_simple_insert();
+delta::Delta::<N>::as_simple_insert(p0);
+crate::delta::Delta::<N>::as_simple_insert(p0);
+<delta::Delta<N>>::as_simple_insert(p0);
-----------------
rope/src/delta.rs delta::Delta::<N>::is_simple_delete
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::Delta::<N>::is_simple_delete":{"N":["std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","tree::DefaultMetric","tree::NodeInfo","std::clone::Clone"]},"tree::NodeBody":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::Delta::<N>::is_simple_delete":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["rope::BaseMetric","breaks::BreaksLeaf","engine::RevId","multiset::CountMatcher","delta::Delta","multiset::Segment","delta::InsertDelta","rope::Utf16CodeUnitsMetric","multiset::Subset","find::CaseMatching","breaks::BreaksMetric","tree::Node","breaks::BreaksBaseMetric","engine::DeltaOp","breaks::BreaksInfo","engine::Error","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for *mut T>","delta::DeltaElement","interval::Interval","tree::NodeVal","spans::Span","engine::Contents","multiset::ZipSegment","diff::DiffOp","rope::LinesMetric","tree::NodeBody","spans::SpansLeaf","rope::RopeInfo","spans::SpansInfo","diff::DiffBuilder"]},"spans::SpansInfo":{"T":["multiset::ZipSegment","multiset::Segment","tree::NodeVal","multiset::Subset","engine::FullPriority","breaks::BreaksLeaf","spans::SpansInfo","engine::DeltaOp","diff::DiffBuilder","multiset::CountMatcher","rope::RopeInfo","rope::BaseMetric","rope::LinesMetric","rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","breaks::BreaksBaseMetric","interval::Interval","engine::Contents","delta::DeltaElement","engine::Error","spans::Span","tree::NodeBody","delta::InsertDelta","engine::RevId","diff::DiffOp","breaks::BreaksInfo","tree::Node","spans::SpansLeaf","breaks::BreaksMetric","delta::Delta","find::CaseMatching"]},"spans::SpansLeaf":{"T":["std::clone::impls::<impl std::clone::Clone for &mut T>","spans::SpansLeaf","breaks::BreaksInfo","engine::Error","delta::InsertDelta","spans::Span","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::LinesMetric","breaks::BreaksMetric","tree::NodeBody","multiset::ZipSegment","diff::DiffBuilder","delta::Delta","rope::RopeInfo","engine::Contents","engine::DeltaOp","multiset::Segment","rope::Utf16CodeUnitsMetric","multiset::CountMatcher","diff::DiffOp","spans::SpansInfo","engine::RevId","find::CaseMatching","breaks::BreaksBaseMetric","multiset::Subset","tree::NodeVal","breaks::BreaksLeaf","delta::DeltaElement","engine::FullPriority","tree::Node","rope::BaseMetric","interval::Interval"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::Delta<N>
+p0.is_simple_delete();
+delta::Delta::<N>::is_simple_delete(p0);
+crate::delta::Delta::<N>::is_simple_delete(p0);
+<delta::Delta<N>>::is_simple_delete(p0);
-----------------
rope/src/delta.rs delta::Delta::<N>::is_identity
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::Delta::<N>::is_identity":{"N":["tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::Delta::<N>::is_identity":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["diff::DiffBuilder","rope::LinesMetric","multiset::Segment","delta::InsertDelta","delta::Delta","breaks::BreaksLeaf","engine::FullPriority","find::CaseMatching","spans::Span","delta::DeltaElement","rope::BaseMetric","multiset::Subset","breaks::BreaksBaseMetric","std::clone::impls::<impl std::clone::Clone for &T>","interval::Interval","tree::NodeBody","multiset::CountMatcher","diff::DiffOp","breaks::BreaksMetric","rope::RopeInfo","tree::Node","multiset::ZipSegment","tree::NodeVal","breaks::BreaksInfo","engine::RevId","engine::Error","spans::SpansInfo","spans::SpansLeaf","engine::Contents","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::DeltaOp","rope::Utf16CodeUnitsMetric"]},"spans::SpansInfo":{"T":["tree::Node","spans::SpansLeaf","interval::Interval","diff::DiffBuilder","rope::LinesMetric","engine::RevId","rope::Utf16CodeUnitsMetric","breaks::BreaksLeaf","breaks::BreaksBaseMetric","multiset::CountMatcher","delta::DeltaElement","multiset::ZipSegment","multiset::Subset","breaks::BreaksMetric","engine::DeltaOp","rope::RopeInfo","spans::Span","engine::Contents","delta::Delta","tree::NodeBody","engine::FullPriority","rope::BaseMetric","engine::Error","delta::InsertDelta","multiset::Segment","std::clone::impls::<impl std::clone::Clone for *mut T>","spans::SpansInfo","tree::NodeVal","breaks::BreaksInfo","diff::DiffOp","find::CaseMatching"]},"spans::SpansLeaf":{"T":["tree::Node","delta::InsertDelta","engine::Error","engine::FullPriority","tree::NodeVal","tree::NodeBody","rope::Utf16CodeUnitsMetric","rope::BaseMetric","delta::Delta","rope::LinesMetric","multiset::CountMatcher","multiset::ZipSegment","breaks::BreaksBaseMetric","std::clone::impls::<impl std::clone::Clone for *const T>","engine::RevId","interval::Interval","spans::SpansLeaf","std::clone::impls::<impl std::clone::Clone for &T>","multiset::Segment","breaks::BreaksLeaf","breaks::BreaksMetric","spans::SpansInfo","multiset::Subset","find::CaseMatching","rope::RopeInfo","delta::DeltaElement","engine::DeltaOp","spans::Span","engine::Contents","diff::DiffOp","diff::DiffBuilder","breaks::BreaksInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::Delta<N>
+p0.is_identity();
+delta::Delta::<N>::is_identity(p0);
+crate::delta::Delta::<N>::is_identity(p0);
+<delta::Delta<N>>::is_identity(p0);
-----------------
rope/src/delta.rs delta::Delta::<N>::apply
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::Delta::<N>::apply":{"N":["std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeBody":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::Delta::<N>::apply":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"spans::Span":{"T":["multiset::Subset","spans::SpansLeaf","rope::BaseMetric","rope::Utf16CodeUnitsMetric","delta::DeltaElement","rope::LinesMetric","diff::DiffOp","multiset::ZipSegment","find::CaseMatching","tree::NodeBody","engine::RevId","rope::RopeInfo","multiset::CountMatcher","std::clone::impls::<impl std::clone::Clone for *const T>","tree::Node","engine::FullPriority","multiset::Segment","breaks::BreaksLeaf","delta::InsertDelta","tree::NodeVal","breaks::BreaksBaseMetric","engine::DeltaOp","spans::SpansInfo","spans::Span","breaks::BreaksInfo","engine::Contents","interval::Interval","diff::DiffBuilder","breaks::BreaksMetric","engine::Error","delta::Delta"]},"spans::SpansInfo":{"T":["multiset::CountMatcher","tree::NodeBody","diff::DiffBuilder","engine::DeltaOp","engine::Contents","breaks::BreaksLeaf","engine::FullPriority","spans::Span","multiset::ZipSegment","spans::SpansLeaf","breaks::BreaksInfo","delta::InsertDelta","interval::Interval","rope::RopeInfo","rope::BaseMetric","breaks::BreaksMetric","rope::LinesMetric","engine::RevId","std::clone::impls::<impl std::clone::Clone for &T>","spans::SpansInfo","delta::Delta","tree::Node","diff::DiffOp","multiset::Subset","multiset::Segment","delta::DeltaElement","breaks::BreaksBaseMetric","tree::NodeVal","rope::Utf16CodeUnitsMetric","find::CaseMatching","engine::Error"]},"spans::SpansLeaf":{"T":["spans::Span","spans::SpansInfo","diff::DiffBuilder","engine::Error","engine::DeltaOp","multiset::Subset","breaks::BreaksBaseMetric","std::clone::impls::<impl std::clone::Clone for *mut T>","tree::NodeVal","engine::FullPriority","rope::BaseMetric","multiset::CountMatcher","engine::RevId","breaks::BreaksInfo","delta::DeltaElement","interval::Interval","breaks::BreaksLeaf","find::CaseMatching","rope::RopeInfo","tree::NodeBody","delta::InsertDelta","breaks::BreaksMetric","tree::Node","delta::Delta","multiset::Segment","multiset::ZipSegment","diff::DiffOp","rope::LinesMetric","engine::Contents","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::Utf16CodeUnitsMetric","spans::SpansLeaf"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::Delta<N>
let mut p1 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
+p0.apply(p1);
+delta::Delta::<N>::apply(p0, p1);
+crate::delta::Delta::<N>::apply(p0, p1);
+<delta::Delta<N>>::apply(p0, p1);
-----------------
rope/src/delta.rs delta::Delta::<N>::factor
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::Delta::<N>::factor":{"N":["std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::Delta::<N>::factor":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["interval::Interval","delta::DeltaElement","multiset::Subset","engine::DeltaOp","delta::Delta","engine::RevId","diff::DiffOp","diff::DiffBuilder","engine::Error","multiset::Segment","multiset::CountMatcher","tree::NodeVal","spans::SpansLeaf","tree::Node","rope::Utf16CodeUnitsMetric","breaks::BreaksLeaf","rope::RopeInfo","engine::Contents","engine::FullPriority","multiset::ZipSegment","rope::BaseMetric","rope::LinesMetric","breaks::BreaksBaseMetric","breaks::BreaksInfo","spans::SpansInfo","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for *mut T>","find::CaseMatching","spans::Span","breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for *const T>","tree::NodeBody"]},"spans::SpansInfo":{"T":["breaks::BreaksBaseMetric","rope::BaseMetric","rope::RopeInfo","delta::Delta","delta::DeltaElement","engine::Error","tree::NodeVal","engine::Contents","multiset::ZipSegment","rope::Utf16CodeUnitsMetric","find::CaseMatching","spans::SpansLeaf","multiset::CountMatcher","breaks::BreaksLeaf","tree::NodeBody","engine::RevId","delta::InsertDelta","breaks::BreaksMetric","breaks::BreaksInfo","spans::SpansInfo","tree::Node","diff::DiffBuilder","spans::Span","engine::FullPriority","multiset::Segment","engine::DeltaOp","multiset::Subset","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for &T>","diff::DiffOp","interval::Interval"]},"spans::SpansLeaf":{"T":["multiset::Subset","breaks::BreaksMetric","find::CaseMatching","tree::NodeBody","diff::DiffBuilder","spans::Span","multiset::Segment","engine::RevId","tree::NodeVal","spans::SpansLeaf","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for *const T>","interval::Interval","engine::FullPriority","delta::InsertDelta","multiset::ZipSegment","rope::Utf16CodeUnitsMetric","spans::SpansInfo","delta::Delta","rope::LinesMetric","rope::BaseMetric","engine::Contents","tree::Node","breaks::BreaksBaseMetric","rope::RopeInfo","engine::Error","breaks::BreaksLeaf","delta::DeltaElement","multiset::CountMatcher","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::DeltaOp"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // delta::Delta<N>
+p0.factor();
+delta::Delta::<N>::factor(p0);
+crate::delta::Delta::<N>::factor(p0);
+<delta::Delta<N>>::factor(p0);
-----------------
rope/src/delta.rs delta::Delta::<N>::synthesize
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::Delta::<N>::synthesize":{"N":["tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","tree::DefaultMetric","std::marker::Sized","std::clone::Clone"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::Delta::<N>::synthesize":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"spans::Span":{"T":["std::clone::impls::<impl std::clone::Clone for &T>","multiset::Subset","tree::NodeVal","spans::SpansLeaf","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::LinesMetric","breaks::BreaksMetric","delta::Delta","interval::Interval","engine::FullPriority","rope::RopeInfo","diff::DiffBuilder","tree::NodeBody","spans::Span","delta::InsertDelta","rope::BaseMetric","engine::RevId","delta::DeltaElement","breaks::BreaksInfo","breaks::BreaksLeaf","find::CaseMatching","engine::DeltaOp","multiset::Segment","tree::Node","rope::Utf16CodeUnitsMetric","engine::Error","breaks::BreaksBaseMetric","engine::Contents","multiset::CountMatcher","multiset::ZipSegment","spans::SpansInfo"]},"spans::SpansInfo":{"T":["delta::Delta","tree::NodeVal","engine::Error","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksInfo","rope::RopeInfo","tree::Node","diff::DiffOp","engine::Contents","rope::Utf16CodeUnitsMetric","rope::LinesMetric","tree::NodeBody","multiset::Segment","breaks::BreaksLeaf","engine::DeltaOp","breaks::BreaksBaseMetric","find::CaseMatching","diff::DiffBuilder","spans::Span","multiset::ZipSegment","breaks::BreaksMetric","spans::SpansLeaf","multiset::Subset","delta::InsertDelta","engine::FullPriority","delta::DeltaElement","engine::RevId","interval::Interval","spans::SpansInfo","multiset::CountMatcher","rope::BaseMetric"]},"spans::SpansLeaf":{"T":["engine::DeltaOp","multiset::Subset","tree::Node","std::clone::impls::<impl std::clone::Clone for *const T>","delta::InsertDelta","breaks::BreaksMetric","multiset::ZipSegment","engine::RevId","multiset::CountMatcher","engine::Contents","delta::Delta","multiset::Segment","rope::LinesMetric","interval::Interval","diff::DiffBuilder","diff::DiffOp","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for &T>","tree::NodeBody","breaks::BreaksInfo","breaks::BreaksLeaf","rope::Utf16CodeUnitsMetric","spans::Span","breaks::BreaksBaseMetric","delta::DeltaElement","rope::RopeInfo","engine::FullPriority","engine::Error","rope::BaseMetric","spans::SpansLeaf","tree::NodeVal","spans::SpansInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
let mut p1 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p2 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+delta::Delta::<N>::synthesize(p0, p1, p2);
+crate::delta::Delta::<N>::synthesize(p0, p1, p2);
+<delta::Delta<N>>::synthesize(p0, p1, p2);
-----------------
rope/src/delta.rs delta::Delta::<N>::summary
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::Delta::<N>::summary":{"N":["std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","tree::DefaultMetric","std::clone::Clone","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::Delta::<N>::summary":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["engine::Contents","tree::Node","delta::DeltaElement","diff::DiffOp","breaks::BreaksInfo","delta::InsertDelta","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","spans::SpansInfo","tree::NodeBody","spans::SpansLeaf","multiset::CountMatcher","breaks::BreaksLeaf","delta::Delta","find::CaseMatching","breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for &T>","engine::DeltaOp","multiset::Segment","diff::DiffBuilder","rope::BaseMetric","rope::LinesMetric","spans::Span","multiset::ZipSegment","engine::RevId","multiset::Subset","rope::RopeInfo","engine::FullPriority","tree::NodeVal","std::clone::impls::<impl std::clone::Clone for *const T>","interval::Interval","engine::Error"]},"spans::SpansInfo":{"T":["delta::Delta","breaks::BreaksBaseMetric","delta::DeltaElement","diff::DiffBuilder","engine::Error","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::DeltaOp","spans::SpansInfo","engine::Contents","breaks::BreaksMetric","interval::Interval","multiset::CountMatcher","diff::DiffOp","tree::NodeVal","spans::Span","rope::LinesMetric","breaks::BreaksLeaf","engine::RevId","delta::InsertDelta","tree::NodeBody","multiset::Subset","rope::BaseMetric","tree::Node","rope::Utf16CodeUnitsMetric","find::CaseMatching","rope::RopeInfo","spans::SpansLeaf","multiset::ZipSegment","multiset::Segment","engine::FullPriority","breaks::BreaksInfo"]},"spans::SpansLeaf":{"T":["spans::SpansLeaf","std::clone::impls::<impl std::clone::Clone for &mut T>","delta::DeltaElement","multiset::Subset","engine::FullPriority","rope::RopeInfo","multiset::CountMatcher","multiset::ZipSegment","engine::Error","engine::Contents","breaks::BreaksInfo","tree::NodeBody","multiset::Segment","breaks::BreaksBaseMetric","breaks::BreaksLeaf","rope::Utf16CodeUnitsMetric","delta::InsertDelta","breaks::BreaksMetric","delta::Delta","spans::SpansInfo","diff::DiffOp","tree::NodeVal","rope::LinesMetric","engine::DeltaOp","find::CaseMatching","spans::Span","std::clone::impls::<impl std::clone::Clone for &T>","interval::Interval","rope::BaseMetric","tree::Node","engine::RevId","diff::DiffBuilder"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::Delta<N>
+p0.summary();
+delta::Delta::<N>::summary(p0);
+crate::delta::Delta::<N>::summary(p0);
+<delta::Delta<N>>::summary(p0);
-----------------
rope/src/delta.rs delta::Delta::<N>::new_document_len
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::Delta::<N>::new_document_len":{"N":["std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::Delta::<N>::new_document_len":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["breaks::BreaksBaseMetric","multiset::CountMatcher","breaks::BreaksLeaf","multiset::Subset","delta::DeltaElement","engine::Contents","delta::Delta","tree::Node","engine::Error","engine::DeltaOp","multiset::Segment","breaks::BreaksMetric","diff::DiffBuilder","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for *mut T>","spans::SpansLeaf","tree::NodeVal","diff::DiffOp","rope::RopeInfo","breaks::BreaksInfo","rope::BaseMetric","multiset::ZipSegment","interval::Interval","rope::Utf16CodeUnitsMetric","rope::LinesMetric","find::CaseMatching","engine::RevId","tree::NodeBody","engine::FullPriority","spans::Span","spans::SpansInfo"]},"spans::SpansInfo":{"T":["spans::SpansInfo","delta::Delta","breaks::BreaksLeaf","multiset::Segment","rope::LinesMetric","engine::FullPriority","breaks::BreaksInfo","multiset::CountMatcher","tree::NodeVal","diff::DiffBuilder","delta::DeltaElement","spans::Span","interval::Interval","engine::Error","multiset::ZipSegment","breaks::BreaksBaseMetric","rope::BaseMetric","engine::RevId","find::CaseMatching","spans::SpansLeaf","engine::DeltaOp","engine::Contents","breaks::BreaksMetric","multiset::Subset","tree::NodeBody","std::clone::impls::<impl std::clone::Clone for &T>","diff::DiffOp","delta::InsertDelta","rope::RopeInfo","tree::Node","rope::Utf16CodeUnitsMetric"]},"spans::SpansLeaf":{"T":["multiset::Subset","delta::DeltaElement","spans::SpansInfo","breaks::BreaksBaseMetric","spans::SpansLeaf","std::clone::impls::<impl std::clone::Clone for *const T>","engine::Contents","breaks::BreaksMetric","multiset::ZipSegment","rope::Utf16CodeUnitsMetric","delta::InsertDelta","engine::DeltaOp","delta::Delta","engine::RevId","rope::RopeInfo","diff::DiffOp","tree::NodeBody","engine::Error","tree::NodeVal","diff::DiffBuilder","spans::Span","rope::LinesMetric","tree::Node","multiset::Segment","multiset::CountMatcher","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for &T>","engine::FullPriority","breaks::BreaksInfo","breaks::BreaksLeaf","find::CaseMatching","interval::Interval"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::Delta<N>
+p0.new_document_len();
+delta::Delta::<N>::new_document_len(p0);
+crate::delta::Delta::<N>::new_document_len(p0);
+<delta::Delta<N>>::new_document_len(p0);
-----------------
rope/src/delta.rs delta::Delta::<N>::total_element_len
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::Delta::<N>::total_element_len":{"N":["std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo","tree::DefaultMetric"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::Delta::<N>::total_element_len":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["rope::RopeInfo","engine::DeltaOp","breaks::BreaksMetric","engine::FullPriority","tree::NodeVal","engine::RevId","rope::BaseMetric","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","interval::Interval","diff::DiffBuilder","spans::SpansLeaf","multiset::Subset","breaks::BreaksLeaf","engine::Error","breaks::BreaksInfo","find::CaseMatching","engine::Contents","multiset::ZipSegment","diff::DiffOp","spans::Span","std::clone::impls::<impl std::clone::Clone for *mut T>","delta::InsertDelta","multiset::Segment","tree::NodeBody","rope::LinesMetric","multiset::CountMatcher","std::clone::impls::<impl std::clone::Clone for &T>","spans::SpansInfo","delta::Delta","delta::DeltaElement","tree::Node"]},"spans::SpansInfo":{"T":["breaks::BreaksMetric","delta::InsertDelta","multiset::ZipSegment","breaks::BreaksBaseMetric","engine::FullPriority","interval::Interval","delta::Delta","rope::Utf16CodeUnitsMetric","rope::LinesMetric","engine::Error","engine::RevId","tree::NodeVal","multiset::Segment","breaks::BreaksLeaf","breaks::BreaksInfo","diff::DiffBuilder","spans::Span","rope::BaseMetric","spans::SpansLeaf","multiset::CountMatcher","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for &mut T>","tree::NodeBody","tree::Node","multiset::Subset","diff::DiffOp","delta::DeltaElement","spans::SpansInfo","engine::Contents","rope::RopeInfo","find::CaseMatching"]},"spans::SpansLeaf":{"T":["engine::Contents","rope::RopeInfo","engine::RevId","rope::Utf16CodeUnitsMetric","multiset::Segment","breaks::BreaksMetric","spans::SpansInfo","spans::SpansLeaf","diff::DiffOp","breaks::BreaksBaseMetric","delta::DeltaElement","engine::DeltaOp","tree::Node","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::CountMatcher","find::CaseMatching","diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for *mut T>","delta::Delta","multiset::ZipSegment","breaks::BreaksLeaf","tree::NodeVal","delta::InsertDelta","tree::NodeBody","engine::FullPriority","multiset::Subset","spans::Span","rope::LinesMetric","interval::Interval","engine::Error","rope::BaseMetric","breaks::BreaksInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // [delta::DeltaElement<N>]
+delta::Delta::<N>::total_element_len(p0);
+crate::delta::Delta::<N>::total_element_len(p0);
+<delta::Delta<N>>::total_element_len(p0);
-----------------
rope/src/delta.rs delta::Delta::<N>::inserts_len
deps:{"delta::Delta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::Delta::<N>::inserts_len":{"N":["tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","tree::DefaultMetric","std::clone::Clone","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::Delta::<N>::inserts_len":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["interval::Interval","diff::DiffBuilder","breaks::BreaksLeaf","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","multiset::Segment","spans::SpansLeaf","engine::Contents","engine::DeltaOp","rope::LinesMetric","spans::Span","spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo","engine::FullPriority","tree::NodeVal","multiset::ZipSegment","tree::NodeBody","diff::DiffOp","breaks::BreaksMetric","tree::Node","engine::Error","std::clone::impls::<impl std::clone::Clone for *mut T>","delta::DeltaElement","multiset::CountMatcher","delta::Delta","multiset::Subset","delta::InsertDelta","engine::RevId","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for *const T>","find::CaseMatching"]},"spans::SpansInfo":{"T":["engine::DeltaOp","tree::NodeVal","breaks::BreaksBaseMetric","diff::DiffOp","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for *const T>","spans::Span","multiset::Segment","delta::InsertDelta","breaks::BreaksMetric","breaks::BreaksInfo","engine::RevId","rope::Utf16CodeUnitsMetric","spans::SpansLeaf","spans::SpansInfo","breaks::BreaksLeaf","engine::FullPriority","rope::LinesMetric","delta::DeltaElement","multiset::Subset","delta::Delta","tree::NodeBody","rope::RopeInfo","tree::Node","find::CaseMatching","engine::Error","diff::DiffBuilder","engine::Contents","interval::Interval","multiset::ZipSegment","multiset::CountMatcher"]},"spans::SpansLeaf":{"T":["rope::RopeInfo","breaks::BreaksMetric","multiset::Subset","engine::DeltaOp","tree::Node","multiset::Segment","rope::Utf16CodeUnitsMetric","multiset::CountMatcher","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::Error","rope::LinesMetric","delta::Delta","rope::BaseMetric","breaks::BreaksLeaf","interval::Interval","spans::SpansLeaf","engine::Contents","engine::RevId","diff::DiffBuilder","find::CaseMatching","spans::SpansInfo","breaks::BreaksInfo","breaks::BreaksBaseMetric","multiset::ZipSegment","tree::NodeVal","tree::NodeBody","std::clone::impls::<impl std::clone::Clone for &T>","delta::DeltaElement","spans::Span","engine::FullPriority","delta::InsertDelta"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::Delta<N>
+p0.inserts_len();
+delta::Delta::<N>::inserts_len(p0);
+crate::delta::Delta::<N>::inserts_len(p0);
+<delta::Delta<N>>::inserts_len(p0);
-----------------
rope/src/delta.rs delta::Delta::<N>::iter_inserts
deps:{"delta::Delta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::Delta::<N>::iter_inserts":{"N":["tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::Delta::<N>::iter_inserts":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"spans::Span":{"T":["spans::SpansInfo","engine::DeltaOp","delta::InsertDelta","breaks::BreaksMetric","find::CaseMatching","tree::NodeBody","engine::Contents","spans::Span","rope::RopeInfo","tree::Node","diff::DiffOp","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for &T>","rope::BaseMetric","breaks::BreaksLeaf","engine::FullPriority","tree::NodeVal","multiset::Segment","multiset::CountMatcher","delta::Delta","spans::SpansLeaf","engine::Error","breaks::BreaksBaseMetric","delta::DeltaElement","interval::Interval","multiset::ZipSegment","multiset::Subset","rope::LinesMetric","diff::DiffBuilder","engine::RevId"]},"spans::SpansInfo":{"T":["tree::Node","interval::Interval","rope::RopeInfo","spans::SpansInfo","multiset::CountMatcher","multiset::ZipSegment","diff::DiffBuilder","engine::Contents","diff::DiffOp","spans::Span","breaks::BreaksBaseMetric","engine::FullPriority","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for &T>","delta::DeltaElement","spans::SpansLeaf","find::CaseMatching","tree::NodeVal","multiset::Subset","engine::Error","breaks::BreaksMetric","breaks::BreaksInfo","tree::NodeBody","engine::RevId","rope::LinesMetric","rope::Utf16CodeUnitsMetric","multiset::Segment","delta::InsertDelta","engine::DeltaOp","delta::Delta","breaks::BreaksLeaf"]},"spans::SpansLeaf":{"T":["delta::InsertDelta","multiset::ZipSegment","breaks::BreaksBaseMetric","multiset::Subset","engine::DeltaOp","tree::NodeVal","delta::DeltaElement","rope::RopeInfo","spans::SpansInfo","multiset::Segment","rope::LinesMetric","engine::Contents","breaks::BreaksMetric","rope::Utf16CodeUnitsMetric","interval::Interval","find::CaseMatching","breaks::BreaksInfo","multiset::CountMatcher","engine::Error","std::clone::impls::<impl std::clone::Clone for *const T>","spans::Span","spans::SpansLeaf","diff::DiffOp","engine::FullPriority","delta::Delta","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for &T>","engine::RevId","tree::Node","tree::NodeBody","diff::DiffBuilder","rope::BaseMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::Delta<N>
+p0.iter_inserts();
+delta::Delta::<N>::iter_inserts(p0);
+crate::delta::Delta::<N>::iter_inserts(p0);
+<delta::Delta<N>>::iter_inserts(p0);
-----------------
rope/src/delta.rs delta::Delta::<N>::iter_deletions
deps:{"delta::Delta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::Delta::<N>::iter_deletions":{"N":["tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","std::marker::Sized","tree::DefaultMetric","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::Delta::<N>::iter_deletions":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["multiset::CountMatcher","find::CaseMatching","breaks::BreaksMetric","diff::DiffOp","spans::SpansInfo","rope::Utf16CodeUnitsMetric","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for *const T>","engine::FullPriority","delta::InsertDelta","tree::Node","rope::LinesMetric","breaks::BreaksBaseMetric","diff::DiffBuilder","delta::DeltaElement","engine::Contents","spans::SpansLeaf","std::clone::impls::<impl std::clone::Clone for &mut T>","interval::Interval","delta::Delta","engine::Error","multiset::ZipSegment","multiset::Segment","breaks::BreaksLeaf","spans::Span","tree::NodeVal","rope::RopeInfo","engine::DeltaOp","breaks::BreaksInfo","tree::NodeBody","multiset::Subset","engine::RevId"]},"spans::SpansInfo":{"T":["multiset::CountMatcher","spans::SpansLeaf","engine::FullPriority","spans::Span","engine::RevId","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","engine::DeltaOp","breaks::BreaksInfo","rope::LinesMetric","rope::BaseMetric","multiset::Subset","find::CaseMatching","breaks::BreaksLeaf","rope::RopeInfo","breaks::BreaksMetric","engine::Contents","delta::InsertDelta","engine::Error","interval::Interval","diff::DiffOp","tree::Node","multiset::Segment","diff::DiffBuilder","spans::SpansInfo","delta::Delta","tree::NodeVal","multiset::ZipSegment","tree::NodeBody","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for &T>"]},"spans::SpansLeaf":{"T":["breaks::BreaksInfo","rope::Utf16CodeUnitsMetric","multiset::Segment","breaks::BreaksLeaf","breaks::BreaksBaseMetric","interval::Interval","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for *const T>","tree::NodeVal","engine::DeltaOp","multiset::CountMatcher","spans::SpansInfo","delta::DeltaElement","rope::BaseMetric","tree::NodeBody","tree::Node","breaks::BreaksMetric","diff::DiffBuilder","delta::InsertDelta","engine::RevId","engine::Contents","find::CaseMatching","engine::Error","delta::Delta","multiset::ZipSegment","rope::RopeInfo","engine::FullPriority","spans::Span","spans::SpansLeaf","multiset::Subset","diff::DiffOp"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::Delta<N>
+p0.iter_deletions();
+delta::Delta::<N>::iter_deletions(p0);
+crate::delta::Delta::<N>::iter_deletions(p0);
+<delta::Delta<N>>::iter_deletions(p0);
-----------------
rope/src/delta.rs <delta::Delta<N> as std::fmt::Debug>::fmt
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<delta::Delta<N> as std::fmt::Debug>::fmt":{"N":["std::marker::Sized","tree::NodeInfo"],"tree::Node<N>":["std::fmt::Debug"]},"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::Spans":{"T":["std::clone::Clone","std::marker::Sized","std::fmt::Debug"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","tree::DefaultMetric","std::clone::Clone","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<delta::Delta<N> as std::fmt::Debug>::fmt":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"],"tree::Node<N>":["rope::Rope","breaks::BreaksLeaf","multiset::ZipSegment","engine::Error","<&mut T as std::fmt::Debug>","engine::Revision","breaks::BreaksInfo","interval::Interval","diff::DiffOp","multiset::Subset","multiset::CountMatcher","delta::Delta","engine::Engine","engine::RevId","multiset::Segment","engine::DeltaOp","diff::DiffBuilder","delta::InsertDelta","engine::Contents","spans::Spans","delta::DeltaRegion"]},"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["spans::Span","engine::Error","multiset::ZipSegment","delta::Delta","find::CaseMatching","multiset::Segment","rope::Utf16CodeUnitsMetric","rope::RopeInfo","rope::LinesMetric","interval::Interval","breaks::BreaksMetric","breaks::BreaksBaseMetric","delta::InsertDelta","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::CountMatcher","rope::BaseMetric","engine::DeltaOp","tree::NodeVal","delta::DeltaElement","spans::SpansInfo","diff::DiffOp","engine::RevId","spans::SpansLeaf","multiset::Subset","engine::Contents","tree::NodeBody","tree::Node","diff::DiffBuilder","breaks::BreaksLeaf","engine::FullPriority"]},"spans::Spans":{"T":["engine::RevId","std::clone::impls::<impl std::clone::Clone for &T>","multiset::Subset","delta::Delta","breaks::BreaksInfo","breaks::BreaksLeaf","multiset::Segment","engine::DeltaOp","multiset::CountMatcher","delta::InsertDelta","engine::Error","multiset::ZipSegment","interval::Interval","diff::DiffOp","diff::DiffBuilder","engine::Contents"]},"spans::SpansInfo":{"T":["delta::Delta","rope::LinesMetric","rope::Utf16CodeUnitsMetric","find::CaseMatching","interval::Interval","engine::RevId","breaks::BreaksBaseMetric","delta::DeltaElement","diff::DiffBuilder","breaks::BreaksMetric","engine::Contents","spans::SpansLeaf","multiset::Subset","multiset::CountMatcher","engine::DeltaOp","multiset::ZipSegment","spans::Span","breaks::BreaksLeaf","engine::FullPriority","engine::Error","rope::RopeInfo","std::clone::impls::<impl std::clone::Clone for *const T>","diff::DiffOp","tree::NodeVal","spans::SpansInfo","tree::NodeBody","multiset::Segment","rope::BaseMetric","tree::Node","breaks::BreaksInfo","delta::InsertDelta"]},"spans::SpansLeaf":{"T":["breaks::BreaksLeaf","delta::Delta","engine::RevId","spans::Span","engine::DeltaOp","breaks::BreaksBaseMetric","rope::LinesMetric","tree::NodeBody","delta::DeltaElement","multiset::Subset","rope::RopeInfo","multiset::ZipSegment","interval::Interval","std::clone::impls::<impl std::clone::Clone for *const T>","rope::BaseMetric","multiset::Segment","engine::Error","engine::Contents","breaks::BreaksMetric","spans::SpansInfo","spans::SpansLeaf","std::clone::impls::<impl std::clone::Clone for *mut T>","diff::DiffBuilder","delta::InsertDelta","breaks::BreaksInfo","diff::DiffOp","multiset::CountMatcher","engine::FullPriority","tree::NodeVal","find::CaseMatching","tree::Node","rope::Utf16CodeUnitsMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::Delta<N>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<delta::Delta<N> as std::fmt::Debug>::fmt(p0, p1);
+crate::<delta::Delta<N> as std::fmt::Debug>::fmt(p0, p1);
+<delta::Delta<N>>::fmt(p0, p1);
-----------------
rope/src/delta.rs <delta::InsertDelta<N> as std::fmt::Debug>::fmt
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<delta::InsertDelta<N> as std::fmt::Debug>::fmt":{"N":["tree::NodeInfo","std::marker::Sized"],"tree::Node<N>":["std::fmt::Debug"]},"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::Spans":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo","tree::DefaultMetric"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"<delta::InsertDelta<N> as std::fmt::Debug>::fmt":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"],"tree::Node<N>":["breaks::BreaksLeaf","multiset::CountMatcher","interval::Interval","engine::Revision","engine::Error","multiset::ZipSegment","engine::DeltaOp","rope::Rope","delta::InsertDelta","delta::DeltaRegion","diff::DiffOp","engine::RevId","diff::DiffBuilder","engine::Engine","engine::Contents","breaks::BreaksInfo","<*mut T as std::fmt::Debug>","multiset::Segment","spans::Spans","delta::Delta","multiset::Subset"]},"delta::Delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["rope::BaseMetric","breaks::BreaksBaseMetric","diff::DiffOp","engine::Error","breaks::BreaksInfo","delta::Delta","delta::DeltaElement","spans::SpansInfo","tree::Node","tree::NodeBody","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::Segment","multiset::CountMatcher","interval::Interval","engine::Contents","engine::RevId","engine::DeltaOp","find::CaseMatching","multiset::ZipSegment","spans::Span","multiset::Subset","breaks::BreaksMetric","engine::FullPriority","rope::Utf16CodeUnitsMetric","spans::SpansLeaf","tree::NodeVal","rope::RopeInfo","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for &T>","diff::DiffBuilder","rope::LinesMetric"]},"spans::Spans":{"T":["diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::Subset","multiset::CountMatcher","engine::Error","engine::Contents","delta::Delta","interval::Interval","engine::DeltaOp","engine::RevId","breaks::BreaksInfo","diff::DiffOp","delta::InsertDelta","multiset::Segment","multiset::ZipSegment","breaks::BreaksLeaf"]},"spans::SpansInfo":{"T":["spans::Span","breaks::BreaksBaseMetric","engine::RevId","multiset::ZipSegment","multiset::Subset","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::Error","rope::Utf16CodeUnitsMetric","multiset::Segment","breaks::BreaksInfo","multiset::CountMatcher","spans::SpansLeaf","interval::Interval","diff::DiffBuilder","engine::FullPriority","engine::Contents","find::CaseMatching","engine::DeltaOp","tree::NodeVal","delta::Delta","tree::Node","diff::DiffOp","rope::LinesMetric","breaks::BreaksLeaf","tree::NodeBody","rope::BaseMetric","delta::DeltaElement","breaks::BreaksMetric","spans::SpansInfo","rope::RopeInfo"]},"spans::SpansLeaf":{"T":["engine::FullPriority","rope::Utf16CodeUnitsMetric","breaks::BreaksLeaf","delta::DeltaElement","multiset::Subset","tree::NodeBody","interval::Interval","delta::Delta","rope::LinesMetric","multiset::Segment","engine::Contents","multiset::ZipSegment","tree::NodeVal","diff::DiffBuilder","find::CaseMatching","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for &mut T>","delta::InsertDelta","engine::Error","tree::Node","spans::Span","std::clone::impls::<impl std::clone::Clone for &T>","rope::BaseMetric","spans::SpansInfo","engine::RevId","rope::RopeInfo","multiset::CountMatcher","breaks::BreaksBaseMetric","breaks::BreaksMetric","breaks::BreaksInfo","engine::DeltaOp","spans::SpansLeaf"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::InsertDelta<N>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<delta::InsertDelta<N> as std::fmt::Debug>::fmt(p0, p1);
+crate::<delta::InsertDelta<N> as std::fmt::Debug>::fmt(p0, p1);
+<delta::InsertDelta<N>>::fmt(p0, p1);
-----------------
rope/src/delta.rs delta::InsertDelta::<N>::transform_expand
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::InsertDelta::<N>::transform_expand":{"N":["std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta::<N>::transform_expand":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["delta::Delta","breaks::BreaksInfo","spans::Span","engine::Error","spans::SpansInfo","delta::DeltaElement","breaks::BreaksLeaf","multiset::Subset","find::CaseMatching","delta::InsertDelta","rope::RopeInfo","tree::Node","multiset::CountMatcher","engine::RevId","tree::NodeBody","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for *const T>","spans::SpansLeaf","interval::Interval","multiset::ZipSegment","engine::DeltaOp","breaks::BreaksBaseMetric","diff::DiffOp","breaks::BreaksMetric","rope::LinesMetric","rope::BaseMetric","rope::Utf16CodeUnitsMetric","engine::Contents","tree::NodeVal","multiset::Segment","std::clone::impls::<impl std::clone::Clone for &T>","diff::DiffBuilder"]},"spans::SpansInfo":{"T":["breaks::BreaksInfo","engine::Error","rope::BaseMetric","tree::NodeVal","engine::Contents","find::CaseMatching","rope::LinesMetric","rope::RopeInfo","breaks::BreaksBaseMetric","breaks::BreaksLeaf","engine::DeltaOp","engine::FullPriority","spans::SpansLeaf","delta::DeltaElement","interval::Interval","tree::NodeBody","delta::Delta","multiset::CountMatcher","multiset::Subset","tree::Node","multiset::Segment","spans::Span","engine::RevId","std::clone::impls::<impl std::clone::Clone for &T>","multiset::ZipSegment","delta::InsertDelta","spans::SpansInfo","diff::DiffBuilder","rope::Utf16CodeUnitsMetric","diff::DiffOp","breaks::BreaksMetric"]},"spans::SpansLeaf":{"T":["rope::LinesMetric","tree::NodeVal","spans::SpansLeaf","engine::RevId","spans::SpansInfo","engine::Contents","engine::FullPriority","breaks::BreaksBaseMetric","delta::DeltaElement","delta::InsertDelta","multiset::CountMatcher","rope::BaseMetric","engine::Error","diff::DiffOp","rope::RopeInfo","breaks::BreaksLeaf","spans::Span","find::CaseMatching","rope::Utf16CodeUnitsMetric","multiset::Segment","multiset::ZipSegment","breaks::BreaksInfo","engine::DeltaOp","tree::Node","diff::DiffBuilder","tree::NodeBody","delta::Delta","std::clone::impls::<impl std::clone::Clone for &mut T>","breaks::BreaksMetric","interval::Interval","multiset::Subset","std::clone::impls::<impl std::clone::Clone for *const T>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::InsertDelta<N>
let mut p1 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p2 = true; // None+bool
+p0.transform_expand(p1, p2);
+delta::InsertDelta::<N>::transform_expand(p0, p1, p2);
+crate::delta::InsertDelta::<N>::transform_expand(p0, p1, p2);
+<delta::InsertDelta<N>>::transform_expand(p0, p1, p2);
-----------------
rope/src/delta.rs delta::InsertDelta::<N>::transform_shrink
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta::<N>::transform_shrink":{"N":["tree::NodeInfo","std::marker::Sized"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","tree::DefaultMetric","tree::NodeInfo","std::clone::Clone"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta::<N>::transform_shrink":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["multiset::Segment","rope::RopeInfo","breaks::BreaksBaseMetric","delta::InsertDelta","delta::DeltaElement","diff::DiffOp","engine::Error","breaks::BreaksMetric","rope::LinesMetric","multiset::CountMatcher","spans::SpansLeaf","tree::Node","spans::Span","multiset::Subset","breaks::BreaksInfo","tree::NodeBody","interval::Interval","engine::Contents","rope::Utf16CodeUnitsMetric","engine::DeltaOp","engine::RevId","rope::BaseMetric","diff::DiffBuilder","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::ZipSegment","tree::NodeVal","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksLeaf","spans::SpansInfo","find::CaseMatching","delta::Delta"]},"spans::SpansInfo":{"T":["spans::SpansInfo","tree::NodeBody","find::CaseMatching","engine::DeltaOp","rope::RopeInfo","engine::FullPriority","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for *mut T>","delta::DeltaElement","engine::Contents","spans::SpansLeaf","breaks::BreaksLeaf","tree::Node","multiset::Subset","delta::Delta","breaks::BreaksMetric","engine::Error","spans::Span","diff::DiffBuilder","multiset::ZipSegment","tree::NodeVal","engine::RevId","rope::BaseMetric","multiset::CountMatcher","diff::DiffOp","delta::InsertDelta","breaks::BreaksInfo","multiset::Segment","rope::Utf16CodeUnitsMetric","breaks::BreaksBaseMetric","interval::Interval"]},"spans::SpansLeaf":{"T":["delta::InsertDelta","delta::Delta","rope::BaseMetric","diff::DiffOp","tree::NodeBody","spans::Span","engine::Contents","multiset::CountMatcher","engine::RevId","multiset::Subset","multiset::Segment","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::FullPriority","interval::Interval","breaks::BreaksMetric","multiset::ZipSegment","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","spans::SpansLeaf","engine::Error","delta::DeltaElement","tree::Node","breaks::BreaksLeaf","rope::LinesMetric","spans::SpansInfo","diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for *const T>","breaks::BreaksInfo","find::CaseMatching","engine::DeltaOp","tree::NodeVal","rope::RopeInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::InsertDelta<N>
let mut p1 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+p0.transform_shrink(p1);
+delta::InsertDelta::<N>::transform_shrink(p0, p1);
+crate::delta::InsertDelta::<N>::transform_shrink(p0, p1);
+<delta::InsertDelta<N>>::transform_shrink(p0, p1);
-----------------
rope/src/delta.rs delta::InsertDelta::<N>::inserted_subset
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta::<N>::inserted_subset":{"N":["tree::NodeInfo","std::marker::Sized"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta::<N>::inserted_subset":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["spans::Span","std::clone::impls::<impl std::clone::Clone for *const T>","rope::Utf16CodeUnitsMetric","multiset::Segment","delta::Delta","delta::DeltaElement","multiset::CountMatcher","tree::NodeVal","spans::SpansInfo","engine::RevId","multiset::ZipSegment","diff::DiffOp","multiset::Subset","rope::LinesMetric","delta::InsertDelta","engine::FullPriority","breaks::BreaksMetric","engine::Contents","diff::DiffBuilder","engine::Error","std::clone::impls::<impl std::clone::Clone for &T>","tree::Node","interval::Interval","breaks::BreaksInfo","rope::RopeInfo","engine::DeltaOp","breaks::BreaksLeaf","tree::NodeBody","rope::BaseMetric","breaks::BreaksBaseMetric","find::CaseMatching","spans::SpansLeaf"]},"spans::SpansInfo":{"T":["engine::RevId","diff::DiffBuilder","spans::SpansInfo","tree::NodeBody","tree::Node","breaks::BreaksLeaf","delta::Delta","spans::Span","delta::InsertDelta","tree::NodeVal","engine::FullPriority","multiset::CountMatcher","rope::LinesMetric","delta::DeltaElement","rope::RopeInfo","engine::DeltaOp","engine::Error","breaks::BreaksInfo","spans::SpansLeaf","rope::BaseMetric","multiset::Subset","engine::Contents","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","multiset::ZipSegment","multiset::Segment","interval::Interval","breaks::BreaksMetric","diff::DiffOp","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"spans::SpansLeaf":{"T":["tree::NodeVal","multiset::Subset","diff::DiffOp","breaks::BreaksLeaf","breaks::BreaksBaseMetric","engine::Contents","rope::Utf16CodeUnitsMetric","rope::RopeInfo","multiset::ZipSegment","tree::Node","spans::SpansInfo","spans::Span","engine::RevId","tree::NodeBody","delta::Delta","rope::LinesMetric","multiset::Segment","engine::DeltaOp","find::CaseMatching","interval::Interval","diff::DiffBuilder","engine::Error","breaks::BreaksMetric","multiset::CountMatcher","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for &mut T>","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for *const T>","delta::DeltaElement","rope::BaseMetric","delta::InsertDelta","spans::SpansLeaf"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::InsertDelta<N>
+p0.inserted_subset();
+delta::InsertDelta::<N>::inserted_subset(p0);
+crate::delta::InsertDelta::<N>::inserted_subset(p0);
+<delta::InsertDelta<N>>::inserted_subset(p0);
-----------------
rope/src/delta.rs <delta::InsertDelta<N> as std::ops::Deref>::deref
deps:{"<delta::InsertDelta<N> as std::ops::Deref>::deref":{"N":["std::marker::Sized","tree::NodeInfo"]},"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"<delta::InsertDelta<N> as std::ops::Deref>::deref":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","breaks::BreaksBaseMetric","delta::DeltaElement","rope::RopeInfo","spans::Span","engine::FullPriority","spans::SpansLeaf","breaks::BreaksLeaf","engine::Contents","diff::DiffOp","rope::BaseMetric","spans::SpansInfo","engine::DeltaOp","interval::Interval","engine::Error","engine::RevId","rope::LinesMetric","multiset::ZipSegment","multiset::CountMatcher","find::CaseMatching","breaks::BreaksInfo","tree::NodeVal","delta::InsertDelta","tree::NodeBody","delta::Delta","tree::Node","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::Segment","multiset::Subset","rope::Utf16CodeUnitsMetric","diff::DiffBuilder"]},"spans::SpansInfo":{"T":["multiset::Segment","multiset::ZipSegment","find::CaseMatching","spans::SpansLeaf","tree::NodeVal","breaks::BreaksInfo","rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for *const T>","rope::LinesMetric","engine::FullPriority","tree::Node","delta::InsertDelta","delta::DeltaElement","multiset::CountMatcher","breaks::BreaksLeaf","engine::DeltaOp","breaks::BreaksMetric","breaks::BreaksBaseMetric","tree::NodeBody","diff::DiffOp","interval::Interval","spans::Span","spans::SpansInfo","engine::RevId","rope::BaseMetric","diff::DiffBuilder","engine::Contents","multiset::Subset","rope::RopeInfo","engine::Error","delta::Delta"]},"spans::SpansLeaf":{"T":["diff::DiffOp","multiset::Subset","engine::Contents","rope::BaseMetric","engine::RevId","std::clone::impls::<impl std::clone::Clone for &T>","tree::NodeVal","breaks::BreaksBaseMetric","engine::FullPriority","multiset::Segment","engine::DeltaOp","spans::SpansLeaf","rope::Utf16CodeUnitsMetric","rope::RopeInfo","delta::InsertDelta","spans::Span","engine::Error","find::CaseMatching","delta::DeltaElement","tree::NodeBody","multiset::CountMatcher","breaks::BreaksLeaf","delta::Delta","diff::DiffBuilder","spans::SpansInfo","interval::Interval","breaks::BreaksInfo","rope::LinesMetric","breaks::BreaksMetric","multiset::ZipSegment","tree::Node","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::InsertDelta<N>
+p0.deref();
+<delta::InsertDelta<N> as std::ops::Deref>::deref(p0);
+crate::<delta::InsertDelta<N> as std::ops::Deref>::deref(p0);
+<delta::InsertDelta<N>>::deref(p0);
-----------------
rope/src/delta.rs delta::Transformer::<'a, N>::new
'a
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::Transformer::<'a, N>::new":{"N":["std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","std::clone::Clone","tree::DefaultMetric","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::Transformer::<'a, N>::new":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["breaks::BreaksInfo","breaks::BreaksMetric","spans::SpansInfo","engine::FullPriority","delta::Delta","tree::NodeVal","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for &mut T>","diff::DiffBuilder","rope::Utf16CodeUnitsMetric","tree::Node","engine::Error","rope::BaseMetric","find::CaseMatching","rope::LinesMetric","tree::NodeBody","delta::InsertDelta","multiset::Subset","breaks::BreaksBaseMetric","spans::Span","delta::DeltaElement","engine::DeltaOp","multiset::ZipSegment","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::CountMatcher","rope::RopeInfo","engine::Contents","engine::RevId","multiset::Segment","spans::SpansLeaf","interval::Interval"]},"spans::SpansInfo":{"T":["engine::FullPriority","delta::DeltaElement","engine::Contents","spans::SpansInfo","delta::InsertDelta","rope::RopeInfo","diff::DiffBuilder","delta::Delta","tree::NodeBody","engine::DeltaOp","engine::Error","breaks::BreaksLeaf","find::CaseMatching","engine::RevId","breaks::BreaksMetric","breaks::BreaksBaseMetric","tree::Node","tree::NodeVal","multiset::Subset","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::Utf16CodeUnitsMetric","multiset::CountMatcher","diff::DiffOp","rope::BaseMetric","multiset::Segment","breaks::BreaksInfo","multiset::ZipSegment","spans::Span","rope::LinesMetric","interval::Interval","spans::SpansLeaf"]},"spans::SpansLeaf":{"T":["engine::Contents","rope::RopeInfo","tree::NodeVal","find::CaseMatching","delta::InsertDelta","engine::RevId","engine::DeltaOp","interval::Interval","breaks::BreaksLeaf","tree::Node","tree::NodeBody","engine::FullPriority","delta::DeltaElement","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for &T>","diff::DiffOp","multiset::Subset","multiset::ZipSegment","multiset::Segment","rope::LinesMetric","delta::Delta","spans::SpansLeaf","spans::SpansInfo","diff::DiffBuilder","breaks::BreaksBaseMetric","breaks::BreaksMetric","multiset::CountMatcher","rope::Utf16CodeUnitsMetric","engine::Error","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for *mut T>","spans::Span"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::Delta<N>
+delta::Transformer::<'a, N>::new(p0);
+crate::delta::Transformer::<'a, N>::new(p0);
+<delta::Transformer<'a, N>>::new(p0);
-----------------
rope/src/delta.rs delta::Transformer::<'a, N>::transform
'a
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::Transformer::<'a, N>::transform":{"N":["std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","tree::DefaultMetric","std::marker::Sized","std::clone::Clone"]},"tree::NodeBody":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::Transformer::<'a, N>::transform":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for *const T>","spans::Span","engine::FullPriority","engine::RevId","rope::RopeInfo","rope::BaseMetric","delta::InsertDelta","multiset::Subset","interval::Interval","find::CaseMatching","breaks::BreaksInfo","diff::DiffBuilder","multiset::ZipSegment","engine::DeltaOp","tree::Node","multiset::Segment","tree::NodeBody","std::clone::impls::<impl std::clone::Clone for &mut T>","multiset::CountMatcher","tree::NodeVal","engine::Error","rope::Utf16CodeUnitsMetric","delta::Delta","spans::SpansLeaf","engine::Contents","breaks::BreaksBaseMetric","breaks::BreaksLeaf","rope::LinesMetric","diff::DiffOp","delta::DeltaElement","spans::SpansInfo"]},"spans::SpansInfo":{"T":["engine::Error","tree::NodeVal","std::clone::impls::<impl std::clone::Clone for *const T>","diff::DiffOp","engine::Contents","delta::Delta","spans::Span","rope::Utf16CodeUnitsMetric","diff::DiffBuilder","interval::Interval","engine::RevId","spans::SpansLeaf","engine::DeltaOp","breaks::BreaksBaseMetric","delta::InsertDelta","multiset::CountMatcher","breaks::BreaksLeaf","multiset::Segment","rope::BaseMetric","rope::LinesMetric","delta::DeltaElement","spans::SpansInfo","breaks::BreaksInfo","tree::NodeBody","find::CaseMatching","rope::RopeInfo","tree::Node","multiset::Subset","breaks::BreaksMetric","engine::FullPriority","multiset::ZipSegment"]},"spans::SpansLeaf":{"T":["multiset::ZipSegment","rope::Utf16CodeUnitsMetric","find::CaseMatching","rope::BaseMetric","spans::Span","engine::Error","engine::FullPriority","multiset::CountMatcher","diff::DiffOp","delta::DeltaElement","delta::Delta","interval::Interval","diff::DiffBuilder","breaks::BreaksLeaf","rope::RopeInfo","engine::RevId","engine::Contents","breaks::BreaksInfo","breaks::BreaksMetric","breaks::BreaksBaseMetric","multiset::Subset","delta::InsertDelta","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for *const T>","engine::DeltaOp","multiset::Segment","tree::NodeBody","spans::SpansLeaf","tree::Node","tree::NodeVal","spans::SpansInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // delta::Transformer<'a, N>
let mut p1 = 0usize; // None+usize
let mut p2 = true; // None+bool
+p0.transform(p1, p2);
+delta::Transformer::<'a, N>::transform(p0, p1, p2);
+crate::delta::Transformer::<'a, N>::transform(p0, p1, p2);
+<delta::Transformer<'a, N>>::transform(p0, p1, p2);
-----------------
rope/src/delta.rs delta::Transformer::<'a, N>::interval_untouched
'a
deps:{"<T as interval::IntervalBounds>":{"T":["std::marker::Sized","std::convert::Into"]},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::Transformer::<'a, N>::interval_untouched":{"N":["std::marker::Sized","tree::NodeInfo"],"T":["std::marker::Sized","interval::IntervalBounds"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]},"tree::Node":{"N":["tree::NodeInfo","std::marker::Sized","tree::DefaultMetric","std::clone::Clone"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"<T as interval::IntervalBounds>":{"T":["<T as std::convert::Into<U>>","std::process::ExitStatusError","std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError"]},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::Transformer::<'a, N>::interval_untouched":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"],"T":["<T as interval::IntervalBounds>","std::ops::RangeFull","std::ops::RangeFrom"]},"spans::Span":{"T":["rope::BaseMetric","find::CaseMatching","multiset::CountMatcher","engine::DeltaOp","engine::Contents","delta::Delta","spans::SpansInfo","rope::RopeInfo","multiset::Segment","delta::DeltaElement","breaks::BreaksMetric","diff::DiffBuilder","delta::InsertDelta","engine::FullPriority","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","spans::SpansLeaf","tree::NodeVal","spans::Span","engine::Error","engine::RevId","diff::DiffOp","interval::Interval","breaks::BreaksInfo","tree::NodeBody","std::clone::impls::<impl std::clone::Clone for *mut T>","breaks::BreaksLeaf","tree::Node","rope::LinesMetric","multiset::ZipSegment","multiset::Subset"]},"spans::SpansInfo":{"T":["tree::NodeBody","multiset::CountMatcher","breaks::BreaksInfo","rope::Utf16CodeUnitsMetric","tree::NodeVal","delta::DeltaElement","interval::Interval","engine::Contents","rope::LinesMetric","engine::DeltaOp","rope::RopeInfo","breaks::BreaksLeaf","breaks::BreaksBaseMetric","engine::RevId","engine::FullPriority","multiset::Segment","spans::SpansLeaf","tree::Node","find::CaseMatching","multiset::ZipSegment","breaks::BreaksMetric","delta::Delta","diff::DiffOp","multiset::Subset","diff::DiffBuilder","spans::SpansInfo","delta::InsertDelta","spans::Span","engine::Error","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::BaseMetric"]},"spans::SpansLeaf":{"T":["multiset::CountMatcher","engine::RevId","diff::DiffBuilder","rope::Utf16CodeUnitsMetric","breaks::BreaksLeaf","spans::Span","rope::LinesMetric","engine::Error","rope::RopeInfo","rope::BaseMetric","engine::Contents","spans::SpansLeaf","diff::DiffOp","find::CaseMatching","breaks::BreaksInfo","multiset::Segment","multiset::Subset","engine::DeltaOp","tree::NodeVal","tree::Node","interval::Interval","multiset::ZipSegment","tree::NodeBody","spans::SpansInfo","breaks::BreaksBaseMetric","delta::Delta","engine::FullPriority","delta::DeltaElement","breaks::BreaksMetric","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // delta::Transformer<'a, N>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.interval_untouched(p1);
+delta::Transformer::<'a, N>::interval_untouched(p0, p1);
+crate::delta::Transformer::<'a, N>::interval_untouched(p0, p1);
+<delta::Transformer<'a, N>>::interval_untouched(p0, p1);
-----------------
rope/src/delta.rs delta::Builder::<N>::new
deps:{"delta::Builder::<N>::new":{"N":["tree::NodeInfo","std::marker::Sized"]},"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","std::clone::Clone","tree::DefaultMetric","std::marker::Sized"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]}}
candidates:{"delta::Builder::<N>::new":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::Delta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["std::clone::impls::<impl std::clone::Clone for &mut T>","multiset::Segment","find::CaseMatching","delta::Delta","multiset::Subset","engine::Error","tree::NodeVal","rope::Utf16CodeUnitsMetric","spans::SpansInfo","diff::DiffBuilder","tree::NodeBody","spans::SpansLeaf","diff::DiffOp","breaks::BreaksInfo","delta::DeltaElement","breaks::BreaksBaseMetric","spans::Span","breaks::BreaksMetric","interval::Interval","breaks::BreaksLeaf","rope::RopeInfo","engine::FullPriority","tree::Node","engine::DeltaOp","multiset::CountMatcher","rope::LinesMetric","engine::RevId","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::ZipSegment","delta::InsertDelta","engine::Contents","rope::BaseMetric"]},"spans::SpansInfo":{"T":["breaks::BreaksInfo","interval::Interval","multiset::Subset","engine::FullPriority","delta::DeltaElement","tree::NodeVal","engine::Error","diff::DiffBuilder","breaks::BreaksBaseMetric","engine::Contents","find::CaseMatching","rope::Utf16CodeUnitsMetric","delta::InsertDelta","tree::NodeBody","spans::SpansInfo","delta::Delta","std::clone::impls::<impl std::clone::Clone for &T>","rope::BaseMetric","multiset::Segment","engine::RevId","breaks::BreaksMetric","engine::DeltaOp","tree::Node","breaks::BreaksLeaf","multiset::CountMatcher","rope::RopeInfo","multiset::ZipSegment","spans::SpansLeaf","rope::LinesMetric","diff::DiffOp","spans::Span"]},"spans::SpansLeaf":{"T":["diff::DiffOp","spans::SpansLeaf","multiset::Segment","rope::LinesMetric","engine::RevId","multiset::Subset","breaks::BreaksInfo","delta::DeltaElement","spans::SpansInfo","diff::DiffBuilder","breaks::BreaksBaseMetric","tree::NodeBody","rope::BaseMetric","engine::Contents","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::Utf16CodeUnitsMetric","multiset::CountMatcher","tree::NodeVal","tree::Node","std::clone::impls::<impl std::clone::Clone for &T>","delta::Delta","delta::InsertDelta","interval::Interval","find::CaseMatching","engine::FullPriority","engine::Error","multiset::ZipSegment","breaks::BreaksLeaf","rope::RopeInfo","breaks::BreaksMetric","spans::Span"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
let mut p0 = 0usize; // None+usize
+delta::Builder::<N>::new(p0);
+crate::delta::Builder::<N>::new(p0);
+<delta::Builder<N>>::new(p0);
-----------------
rope/src/delta.rs delta::Builder::<N>::delete
deps:{"<T as interval::IntervalBounds>":{"T":["std::convert::Into","std::marker::Sized"]},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"delta::Builder::<N>::delete":{"N":["std::marker::Sized","tree::NodeInfo"],"T":["std::marker::Sized","interval::IntervalBounds"]},"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]},"tree::Node":{"N":["std::marker::Sized","tree::NodeInfo","tree::DefaultMetric","std::clone::Clone"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"<T as interval::IntervalBounds>":{"T":["std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError","<T as std::convert::Into<U>>","std::sync::mpmc::select::Selected"]},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"delta::Builder::<N>::delete":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"],"T":["std::ops::RangeFull","std::ops::RangeFrom","<T as interval::IntervalBounds>"]},"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["rope::LinesMetric","multiset::CountMatcher","multiset::ZipSegment","diff::DiffBuilder","rope::RopeInfo","breaks::BreaksMetric","breaks::BreaksBaseMetric","multiset::Segment","spans::SpansInfo","spans::SpansLeaf","tree::NodeBody","engine::DeltaOp","multiset::Subset","engine::FullPriority","tree::Node","find::CaseMatching","delta::Delta","diff::DiffOp","interval::Interval","spans::Span","rope::BaseMetric","engine::Contents","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksLeaf","engine::RevId","tree::NodeVal","std::clone::impls::<impl std::clone::Clone for &mut T>","breaks::BreaksInfo","engine::Error","rope::Utf16CodeUnitsMetric","delta::DeltaElement","delta::InsertDelta"]},"spans::SpansInfo":{"T":["engine::DeltaOp","rope::RopeInfo","engine::Contents","tree::NodeVal","breaks::BreaksLeaf","diff::DiffOp","multiset::Segment","breaks::BreaksBaseMetric","find::CaseMatching","rope::Utf16CodeUnitsMetric","breaks::BreaksMetric","engine::RevId","engine::Error","delta::Delta","tree::Node","multiset::Subset","spans::Span","multiset::CountMatcher","spans::SpansLeaf","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for &T>","interval::Interval","spans::SpansInfo","diff::DiffBuilder","delta::DeltaElement","rope::BaseMetric","multiset::ZipSegment","tree::NodeBody","breaks::BreaksInfo","rope::LinesMetric","delta::InsertDelta"]},"spans::SpansLeaf":{"T":["tree::NodeVal","rope::LinesMetric","diff::DiffOp","engine::DeltaOp","interval::Interval","spans::Span","tree::Node","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksBaseMetric","breaks::BreaksLeaf","engine::RevId","std::clone::impls::<impl std::clone::Clone for *mut T>","tree::NodeBody","breaks::BreaksInfo","spans::SpansLeaf","engine::FullPriority","multiset::Segment","delta::Delta","delta::InsertDelta","breaks::BreaksMetric","multiset::ZipSegment","rope::Utf16CodeUnitsMetric","engine::Contents","engine::Error","spans::SpansInfo","rope::RopeInfo","rope::BaseMetric","multiset::CountMatcher","find::CaseMatching","multiset::Subset","diff::DiffBuilder"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // delta::Builder<N>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.delete(p1);
+delta::Builder::<N>::delete(p0, p1);
+crate::delta::Builder::<N>::delete(p0, p1);
+<delta::Builder<N>>::delete(p0, p1);
-----------------
rope/src/delta.rs delta::Builder::<N>::replace
deps:{"<T as interval::IntervalBounds>":{"T":["std::convert::Into","std::marker::Sized"]},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"delta::Builder::<N>::replace":{"N":["tree::NodeInfo","std::marker::Sized"],"T":["std::marker::Sized","interval::IntervalBounds"]},"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]},"tree::Node":{"N":["std::clone::Clone","tree::NodeInfo","tree::DefaultMetric","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"<T as interval::IntervalBounds>":{"T":["<T as std::convert::Into<U>>","std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError"]},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"delta::Builder::<N>::replace":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"],"T":["<T as interval::IntervalBounds>","std::ops::RangeFrom","std::ops::RangeFull"]},"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["breaks::BreaksBaseMetric","breaks::BreaksLeaf","engine::FullPriority","multiset::ZipSegment","diff::DiffOp","tree::Node","diff::DiffBuilder","multiset::Segment","rope::LinesMetric","spans::SpansLeaf","rope::Utf16CodeUnitsMetric","multiset::Subset","tree::NodeBody","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::RevId","interval::Interval","spans::Span","rope::BaseMetric","tree::NodeVal","delta::InsertDelta","engine::Error","rope::RopeInfo","breaks::BreaksMetric","engine::Contents","engine::DeltaOp","delta::Delta","breaks::BreaksInfo","spans::SpansInfo","find::CaseMatching","delta::DeltaElement","multiset::CountMatcher"]},"spans::SpansInfo":{"T":["tree::NodeVal","multiset::Subset","rope::BaseMetric","diff::DiffBuilder","spans::SpansInfo","engine::Contents","delta::DeltaElement","spans::SpansLeaf","interval::Interval","rope::Utf16CodeUnitsMetric","multiset::CountMatcher","rope::LinesMetric","find::CaseMatching","breaks::BreaksBaseMetric","tree::Node","engine::DeltaOp","tree::NodeBody","engine::FullPriority","multiset::Segment","engine::Error","breaks::BreaksLeaf","multiset::ZipSegment","rope::RopeInfo","diff::DiffOp","delta::InsertDelta","delta::Delta","engine::RevId","std::clone::impls::<impl std::clone::Clone for *const T>","spans::Span","breaks::BreaksMetric","breaks::BreaksInfo"]},"spans::SpansLeaf":{"T":["tree::Node","diff::DiffBuilder","multiset::Subset","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::Segment","spans::SpansInfo","multiset::CountMatcher","interval::Interval","find::CaseMatching","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::RopeInfo","spans::Span","breaks::BreaksLeaf","breaks::BreaksMetric","delta::InsertDelta","rope::Utf16CodeUnitsMetric","tree::NodeVal","multiset::ZipSegment","rope::LinesMetric","engine::RevId","engine::FullPriority","breaks::BreaksBaseMetric","engine::Contents","breaks::BreaksInfo","delta::Delta","delta::DeltaElement","tree::NodeBody","engine::Error","rope::BaseMetric","spans::SpansLeaf"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // delta::Builder<N>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
let mut p2 = MaybeUninit::uninit().assume_init(); // tree::Node<N>
+p0.replace(p1, p2);
+delta::Builder::<N>::replace(p0, p1, p2);
+crate::delta::Builder::<N>::replace(p0, p1, p2);
+<delta::Builder<N>>::replace(p0, p1, p2);
-----------------
rope/src/delta.rs delta::Builder::<N>::is_empty
deps:{"delta::Builder::<N>::is_empty":{"N":["tree::NodeInfo","std::marker::Sized"]},"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"delta::Builder::<N>::is_empty":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["tree::NodeBody","delta::DeltaElement","spans::Span","rope::Utf16CodeUnitsMetric","interval::Interval","multiset::CountMatcher","diff::DiffBuilder","delta::InsertDelta","breaks::BreaksLeaf","engine::Contents","multiset::ZipSegment","engine::Error","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::Subset","diff::DiffOp","engine::FullPriority","rope::RopeInfo","delta::Delta","spans::SpansInfo","find::CaseMatching","rope::BaseMetric","engine::DeltaOp","tree::NodeVal","engine::RevId","breaks::BreaksBaseMetric","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for &mut T>","tree::Node","breaks::BreaksMetric","rope::LinesMetric","spans::SpansLeaf","multiset::Segment"]},"spans::SpansInfo":{"T":["rope::RopeInfo","breaks::BreaksInfo","rope::BaseMetric","interval::Interval","find::CaseMatching","spans::SpansLeaf","multiset::Segment","std::clone::impls::<impl std::clone::Clone for &mut T>","multiset::CountMatcher","breaks::BreaksMetric","rope::LinesMetric","spans::SpansInfo","delta::InsertDelta","engine::Contents","diff::DiffBuilder","engine::Error","delta::DeltaElement","tree::NodeVal","delta::Delta","engine::DeltaOp","multiset::ZipSegment","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","engine::RevId","tree::NodeBody","multiset::Subset","engine::FullPriority","spans::Span","diff::DiffOp","breaks::BreaksLeaf","tree::Node"]},"spans::SpansLeaf":{"T":["multiset::Segment","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for &T>","delta::InsertDelta","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for &mut T>","tree::Node","diff::DiffOp","rope::RopeInfo","engine::DeltaOp","delta::DeltaElement","rope::BaseMetric","spans::SpansInfo","engine::RevId","multiset::ZipSegment","engine::Error","interval::Interval","breaks::BreaksMetric","spans::Span","rope::LinesMetric","diff::DiffBuilder","delta::Delta","multiset::CountMatcher","breaks::BreaksBaseMetric","tree::NodeBody","breaks::BreaksLeaf","multiset::Subset","engine::Contents","spans::SpansLeaf","rope::Utf16CodeUnitsMetric","find::CaseMatching","tree::NodeVal"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::Builder<N>
+p0.is_empty();
+delta::Builder::<N>::is_empty(p0);
+crate::delta::Builder::<N>::is_empty(p0);
+<delta::Builder<N>>::is_empty(p0);
-----------------
rope/src/delta.rs delta::Builder::<N>::build
deps:{"delta::Builder::<N>::build":{"N":["tree::NodeInfo","std::marker::Sized"]},"delta::Delta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Builder::<N>::build":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["multiset::ZipSegment","diff::DiffOp","breaks::BreaksMetric","rope::LinesMetric","multiset::CountMatcher","tree::NodeVal","tree::NodeBody","rope::RopeInfo","multiset::Subset","spans::SpansLeaf","delta::DeltaElement","delta::InsertDelta","engine::RevId","rope::Utf16CodeUnitsMetric","spans::Span","rope::BaseMetric","engine::DeltaOp","find::CaseMatching","tree::Node","engine::Error","std::clone::impls::<impl std::clone::Clone for *const T>","breaks::BreaksInfo","delta::Delta","breaks::BreaksLeaf","multiset::Segment","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksBaseMetric","spans::SpansInfo","diff::DiffBuilder","engine::Contents","engine::FullPriority","interval::Interval"]},"spans::SpansInfo":{"T":["delta::DeltaElement","spans::SpansLeaf","engine::Contents","rope::BaseMetric","spans::Span","delta::InsertDelta","rope::RopeInfo","std::clone::impls::<impl std::clone::Clone for &T>","multiset::Subset","engine::DeltaOp","breaks::BreaksLeaf","spans::SpansInfo","engine::RevId","rope::LinesMetric","interval::Interval","engine::Error","breaks::BreaksInfo","multiset::Segment","rope::Utf16CodeUnitsMetric","multiset::ZipSegment","diff::DiffOp","multiset::CountMatcher","breaks::BreaksBaseMetric","engine::FullPriority","breaks::BreaksMetric","tree::NodeVal","tree::NodeBody","diff::DiffBuilder","tree::Node","delta::Delta","find::CaseMatching"]},"spans::SpansLeaf":{"T":["tree::Node","engine::DeltaOp","rope::BaseMetric","interval::Interval","delta::InsertDelta","rope::Utf16CodeUnitsMetric","diff::DiffBuilder","delta::Delta","breaks::BreaksMetric","multiset::CountMatcher","spans::SpansLeaf","spans::SpansInfo","breaks::BreaksInfo","engine::Error","find::CaseMatching","spans::Span","engine::Contents","multiset::Subset","diff::DiffOp","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for *mut T>","tree::NodeBody","rope::RopeInfo","multiset::Segment","multiset::ZipSegment","breaks::BreaksLeaf","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for *const T>","breaks::BreaksBaseMetric","engine::RevId","engine::FullPriority","tree::NodeVal"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // delta::Builder<N>
+p0.build();
+delta::Builder::<N>::build(p0);
+crate::delta::Builder::<N>::build(p0);
+<delta::Builder<N>>::build(p0);
-----------------
rope/src/delta.rs <delta::DeltaRegion as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::DeltaRegion
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<delta::DeltaRegion as std::fmt::Debug>::fmt(p0, p1);
+crate::<delta::DeltaRegion as std::fmt::Debug>::fmt(p0, p1);
+<delta::DeltaRegion>::fmt(p0, p1);
-----------------
rope/src/delta.rs <delta::DeltaRegion as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::DeltaRegion
let mut p1 = & MaybeUninit::uninit().assume_init(); // delta::DeltaRegion
+p0.eq(p1);
+<delta::DeltaRegion as std::cmp::PartialEq>::eq(p0, p1);
+crate::<delta::DeltaRegion as std::cmp::PartialEq>::eq(p0, p1);
+<delta::DeltaRegion>::eq(p0, p1);
-----------------
rope/src/delta.rs delta::DeltaRegion::new
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
+delta::DeltaRegion::new(p0, p1, p2);
+crate::delta::DeltaRegion::new(p0, p1, p2);
+<delta::DeltaRegion>::new(p0, p1, p2);
-----------------
rope/src/delta.rs <delta::InsertsIter<'a, N> as std::iter::Iterator>::next
'a
deps:{"<delta::InsertsIter<'a, N> as std::iter::Iterator>::next":{"N":["tree::NodeInfo","std::marker::Sized"]},"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"<delta::InsertsIter<'a, N> as std::iter::Iterator>::next":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["breaks::BreaksInfo","delta::Delta","engine::FullPriority","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for *const T>","spans::SpansLeaf","multiset::Segment","rope::LinesMetric","multiset::Subset","tree::NodeVal","diff::DiffBuilder","rope::Utf16CodeUnitsMetric","spans::SpansInfo","engine::DeltaOp","diff::DiffOp","multiset::ZipSegment","multiset::CountMatcher","rope::RopeInfo","breaks::BreaksBaseMetric","tree::NodeBody","breaks::BreaksMetric","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::Error","engine::Contents","spans::Span","engine::RevId","tree::Node","delta::InsertDelta","interval::Interval","delta::DeltaElement","find::CaseMatching"]},"spans::SpansInfo":{"T":["engine::Error","rope::LinesMetric","interval::Interval","engine::FullPriority","delta::InsertDelta","multiset::Segment","std::clone::impls::<impl std::clone::Clone for &mut T>","breaks::BreaksBaseMetric","find::CaseMatching","diff::DiffBuilder","rope::BaseMetric","engine::DeltaOp","spans::SpansInfo","delta::Delta","breaks::BreaksInfo","engine::RevId","rope::Utf16CodeUnitsMetric","tree::NodeVal","spans::SpansLeaf","tree::Node","delta::DeltaElement","breaks::BreaksLeaf","multiset::ZipSegment","rope::RopeInfo","engine::Contents","spans::Span","diff::DiffOp","tree::NodeBody","multiset::CountMatcher","multiset::Subset","breaks::BreaksMetric"]},"spans::SpansLeaf":{"T":["multiset::Segment","breaks::BreaksMetric","multiset::CountMatcher","engine::RevId","delta::Delta","diff::DiffBuilder","rope::LinesMetric","engine::FullPriority","interval::Interval","multiset::ZipSegment","find::CaseMatching","spans::SpansLeaf","rope::Utf16CodeUnitsMetric","delta::InsertDelta","spans::Span","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::Subset","breaks::BreaksBaseMetric","tree::NodeBody","engine::Error","spans::SpansInfo","breaks::BreaksInfo","tree::NodeVal","rope::RopeInfo","diff::DiffOp","engine::Contents","engine::DeltaOp","tree::Node","delta::DeltaElement","breaks::BreaksLeaf","rope::BaseMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // delta::InsertsIter<'a, N>
+p0.next();
+<delta::InsertsIter<'a, N> as std::iter::Iterator>::next(p0);
+crate::<delta::InsertsIter<'a, N> as std::iter::Iterator>::next(p0);
+<delta::InsertsIter<'a, N>>::next(p0);
-----------------
rope/src/delta.rs <delta::DeletionsIter<'a, N> as std::iter::Iterator>::next
'a
deps:{"<delta::DeletionsIter<'a, N> as std::iter::Iterator>::next":{"N":["std::marker::Sized","tree::NodeInfo"]},"delta::Delta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"<delta::DeletionsIter<'a, N> as std::iter::Iterator>::next":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["engine::FullPriority","spans::SpansInfo","multiset::ZipSegment","engine::Error","tree::Node","breaks::BreaksLeaf","multiset::Subset","std::clone::impls::<impl std::clone::Clone for &mut T>","delta::Delta","engine::RevId","tree::NodeBody","multiset::Segment","interval::Interval","breaks::BreaksBaseMetric","engine::Contents","rope::Utf16CodeUnitsMetric","engine::DeltaOp","delta::DeltaElement","find::CaseMatching","breaks::BreaksMetric","spans::SpansLeaf","rope::BaseMetric","spans::Span","delta::InsertDelta","multiset::CountMatcher","rope::RopeInfo","diff::DiffBuilder","diff::DiffOp","tree::NodeVal","std::clone::impls::<impl std::clone::Clone for &T>","rope::LinesMetric","breaks::BreaksInfo"]},"spans::SpansInfo":{"T":["delta::Delta","diff::DiffBuilder","delta::DeltaElement","diff::DiffOp","interval::Interval","engine::DeltaOp","rope::LinesMetric","tree::NodeBody","multiset::Subset","std::clone::impls::<impl std::clone::Clone for *mut T>","breaks::BreaksBaseMetric","breaks::BreaksInfo","find::CaseMatching","rope::Utf16CodeUnitsMetric","tree::Node","multiset::CountMatcher","rope::RopeInfo","multiset::ZipSegment","engine::RevId","spans::SpansInfo","engine::Error","multiset::Segment","spans::Span","rope::BaseMetric","spans::SpansLeaf","engine::FullPriority","tree::NodeVal","delta::InsertDelta","breaks::BreaksMetric","breaks::BreaksLeaf","engine::Contents"]},"spans::SpansLeaf":{"T":["multiset::Segment","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for *const T>","std::clone::impls::<impl std::clone::Clone for &mut T>","delta::InsertDelta","diff::DiffBuilder","rope::LinesMetric","find::CaseMatching","engine::FullPriority","rope::BaseMetric","spans::Span","breaks::BreaksLeaf","multiset::Subset","multiset::ZipSegment","diff::DiffOp","tree::Node","spans::SpansLeaf","tree::NodeVal","tree::NodeBody","rope::RopeInfo","spans::SpansInfo","interval::Interval","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","delta::DeltaElement","engine::Contents","multiset::CountMatcher","delta::Delta","engine::Error","engine::RevId","breaks::BreaksInfo","breaks::BreaksMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // delta::DeletionsIter<'a, N>
+p0.next();
+<delta::DeletionsIter<'a, N> as std::iter::Iterator>::next(p0);
+crate::<delta::DeletionsIter<'a, N> as std::iter::Iterator>::next(p0);
+<delta::DeletionsIter<'a, N>>::next(p0);
-----------------
rope/src/diff.rs <diff::LineHashDiff as diff::Diff<rope::RopeInfo>>::compute_delta
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
+<diff::LineHashDiff as diff::Diff<rope::RopeInfo>>::compute_delta(p0, p1);
+crate::<diff::LineHashDiff as diff::Diff<rope::RopeInfo>>::compute_delta(p0, p1);
+<diff::LineHashDiff>::compute_delta(p0, p1);
-----------------
rope/src/diff.rs <diff::DiffOp as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // diff::DiffOp
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<diff::DiffOp as std::fmt::Debug>::fmt(p0, p1);
+crate::<diff::DiffOp as std::fmt::Debug>::fmt(p0, p1);
+<diff::DiffOp>::fmt(p0, p1);
-----------------
rope/src/diff.rs <diff::DiffOp as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // diff::DiffOp
+p0.clone();
+<diff::DiffOp as std::clone::Clone>::clone(p0);
+crate::<diff::DiffOp as std::clone::Clone>::clone(p0);
+<diff::DiffOp>::clone(p0);
-----------------
rope/src/diff.rs <diff::DiffBuilder as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // diff::DiffBuilder
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<diff::DiffBuilder as std::fmt::Debug>::fmt(p0, p1);
+crate::<diff::DiffBuilder as std::fmt::Debug>::fmt(p0, p1);
+<diff::DiffBuilder>::fmt(p0, p1);
-----------------
rope/src/diff.rs <diff::DiffBuilder as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // diff::DiffBuilder
+p0.clone();
+<diff::DiffBuilder as std::clone::Clone>::clone(p0);
+crate::<diff::DiffBuilder as std::clone::Clone>::clone(p0);
+<diff::DiffBuilder>::clone(p0);
-----------------
rope/src/diff.rs <diff::DiffBuilder as std::default::Default>::default
deps:{}
candidates:{}
+<diff::DiffBuilder as std::default::Default>::default();
+crate::<diff::DiffBuilder as std::default::Default>::default();
+<diff::DiffBuilder>::default();
-----------------
rope/src/diff.rs diff::DiffBuilder::copy
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // diff::DiffBuilder
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
let mut p3 = 0usize; // None+usize
+p0.copy(p1, p2, p3);
+diff::DiffBuilder::copy(p0, p1, p2, p3);
+crate::diff::DiffBuilder::copy(p0, p1, p2, p3);
+<diff::DiffBuilder>::copy(p0, p1, p2, p3);
-----------------
rope/src/diff.rs diff::DiffBuilder::to_delta
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // diff::DiffBuilder
let mut p1 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p2 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
+p0.to_delta(p1, p2);
+diff::DiffBuilder::to_delta(p0, p1, p2);
+crate::diff::DiffBuilder::to_delta(p0, p1, p2);
+<diff::DiffBuilder>::to_delta(p0, p1, p2);
-----------------
rope/src/engine.rs engine::_IMPL_SERIALIZE_FOR_Engine::<impl serde::Serialize for engine::Engine>::serialize
deps:{"engine::_IMPL_SERIALIZE_FOR_Engine::<impl serde::Serialize for engine::Engine>::serialize":{"__S":["std::marker::Sized","serde::Serializer"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
candidates:{"engine::_IMPL_SERIALIZE_FOR_Engine::<impl serde::Serialize for engine::Engine>::serialize":{"__S":["serde::private::ser::content::ContentSerializer<E>","serde::private::ser::FlatMapSerializer<'a, M>","serde::private::ser::TaggedSerializer<S>","serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+engine::_IMPL_SERIALIZE_FOR_Engine::<impl serde::Serialize for engine::Engine>::serialize(p0, p1);
+crate::engine::_IMPL_SERIALIZE_FOR_Engine::<impl serde::Serialize for engine::Engine>::serialize(p0, p1);
+<engine::Engine>::serialize(p0, p1);
-----------------
rope/src/engine.rs engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize
'de
deps:{"engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize":{"__D":["serde::Deserializer","std::marker::Sized"]}}
candidates:{"engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize":{"__D":["serde::de::value::U8Deserializer<E>","serde::de::value::I64Deserializer<E>","serde::de::value::I16Deserializer<E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::StrDeserializer<'a, E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::StringDeserializer<E>","serde::de::value::F64Deserializer<E>","serde::de::value::F32Deserializer<E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::U16Deserializer<E>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::BoolDeserializer<E>","serde::de::value::CharDeserializer<E>","serde::private::de::BytesDeserializer<'a, E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::U32Deserializer<E>","serde::de::value::I128Deserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::I32Deserializer<E>","serde::de::value::U128Deserializer<E>","serde::de::value::I8Deserializer<E>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::U64Deserializer<E>","serde::de::value::UsizeDeserializer<E>","serde::de::value::PairDeserializer<A, B, E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::UnitDeserializer<E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::SeqDeserializer<I, E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::BorrowedStrDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize(p0);
+crate::engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize(p0);
+<engine::Engine>::deserialize(p0);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str
'de
deps:{"<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Field as serde::Deserialize<'de>>::deserialize
'de
deps:{"<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::de::value::StrDeserializer<'a, E>","serde::de::value::BoolDeserializer<E>","serde::de::value::U32Deserializer<E>","serde::de::value::I128Deserializer<E>","serde::de::value::U16Deserializer<E>","serde::de::value::SeqDeserializer<I, E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::CharDeserializer<E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::PairDeserializer<A, B, E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::U128Deserializer<E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::UsizeDeserializer<E>","serde::de::value::F32Deserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::U8Deserializer<E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::I8Deserializer<E>","serde::private::de::BytesDeserializer<'a, E>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::U64Deserializer<E>","serde::de::value::I32Deserializer<E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::StringDeserializer<E>","serde::de::value::F64Deserializer<E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::I64Deserializer<E>","serde::de::value::UnitDeserializer<E>","serde::de::value::I16Deserializer<E>","serde::de::value::BorrowedStrDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Field>::deserialize(p0);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::SeqDeserializer<I, E>","serde::de::value::PairVisitor<A, B, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","<&'a mut A as serde::de::SeqAccess<'de>>","serde::private::de::content::SeqDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","serde::de::MapAccess"]}}
candidates:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["serde::private::de::FlatMapAccess<'a, 'de, E>","serde::private::de::content::MapDeserializer<'de, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::private::de::FlatStructAccess<'a, 'de, E>","serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>","serde::de::value::MapDeserializer<'de, I, E>","<&'a mut A as serde::de::MapAccess<'de>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_Engine::<impl serde::Deserialize<'de> for engine::Engine>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
rope/src/engine.rs <engine::Engine as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<engine::Engine as std::fmt::Debug>::fmt(p0, p1);
+crate::<engine::Engine as std::fmt::Debug>::fmt(p0, p1);
+<engine::Engine>::fmt(p0, p1);
-----------------
rope/src/engine.rs engine::_IMPL_SERIALIZE_FOR_RevId::<impl serde::Serialize for engine::RevId>::serialize
deps:{"engine::_IMPL_SERIALIZE_FOR_RevId::<impl serde::Serialize for engine::RevId>::serialize":{"__S":["std::marker::Sized","serde::Serializer"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
candidates:{"engine::_IMPL_SERIALIZE_FOR_RevId::<impl serde::Serialize for engine::RevId>::serialize":{"__S":["serde::private::ser::FlatMapSerializer<'a, M>","serde::private::ser::content::ContentSerializer<E>","serde::private::ser::TaggedSerializer<S>","serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::RevId
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+engine::_IMPL_SERIALIZE_FOR_RevId::<impl serde::Serialize for engine::RevId>::serialize(p0, p1);
+crate::engine::_IMPL_SERIALIZE_FOR_RevId::<impl serde::Serialize for engine::RevId>::serialize(p0, p1);
+<engine::RevId>::serialize(p0, p1);
-----------------
rope/src/engine.rs engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize
'de
deps:{"engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize":{"__D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize":{"__D":["serde::de::value::I64Deserializer<E>","serde::de::value::U32Deserializer<E>","serde::private::de::BytesDeserializer<'a, E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::UnitDeserializer<E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::U16Deserializer<E>","serde::de::value::U8Deserializer<E>","serde::private::de::content::MapDeserializer<'de, E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::IsizeDeserializer<E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::I16Deserializer<E>","serde::de::value::PairDeserializer<A, B, E>","serde::de::value::BoolDeserializer<E>","serde::de::value::SeqDeserializer<I, E>","serde::de::value::StrDeserializer<'a, E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::StringDeserializer<E>","serde::de::value::F64Deserializer<E>","serde::private::de::StrDeserializer<'a, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::I8Deserializer<E>","serde::de::value::I128Deserializer<E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::F32Deserializer<E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::U128Deserializer<E>","serde::de::value::UsizeDeserializer<E>","serde::de::value::I32Deserializer<E>","serde::de::value::U64Deserializer<E>","serde::de::value::CharDeserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize(p0);
+crate::engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize(p0);
+<engine::RevId>::deserialize(p0);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde::de::Error","std::marker::Sized"]}}
candidates:{"<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str
'de
deps:{"<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::Error","std::marker::Sized"]}}
candidates:{"<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Field as serde::Deserialize<'de>>::deserialize
'de
deps:{"<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::de::value::F32Deserializer<E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::I64Deserializer<E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::MapAccessDeserializer<A>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::I128Deserializer<E>","serde::de::value::I16Deserializer<E>","serde::de::value::U8Deserializer<E>","serde::de::value::UnitDeserializer<E>","serde::de::value::UsizeDeserializer<E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::U32Deserializer<E>","serde::de::value::BoolDeserializer<E>","serde::de::value::U64Deserializer<E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::SeqDeserializer<I, E>","serde::de::value::I8Deserializer<E>","serde::de::value::StrDeserializer<'a, E>","serde::de::value::I32Deserializer<E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::StringDeserializer<E>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::F64Deserializer<E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::CharDeserializer<E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::U16Deserializer<E>","serde::de::value::U128Deserializer<E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::PairDeserializer<A, B, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+crate::<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Field>::deserialize(p0);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["serde::private::de::content::SeqDeserializer<'de, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::SeqDeserializer<I, E>","serde::de::value::PairVisitor<A, B, E>","<&'a mut A as serde::de::SeqAccess<'de>>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","serde::de::MapAccess"]}}
candidates:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["serde::private::de::content::MapDeserializer<'de, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::private::de::FlatMapAccess<'a, 'de, E>","<&'a mut A as serde::de::MapAccess<'de>>","serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::private::de::FlatStructAccess<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_RevId::<impl serde::Deserialize<'de> for engine::RevId>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
rope/src/engine.rs <engine::RevId as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::RevId
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<engine::RevId as std::fmt::Debug>::fmt(p0, p1);
+crate::<engine::RevId as std::fmt::Debug>::fmt(p0, p1);
+<engine::RevId>::fmt(p0, p1);
-----------------
rope/src/engine.rs <engine::RevId as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::RevId
+p0.clone();
+<engine::RevId as std::clone::Clone>::clone(p0);
+crate::<engine::RevId as std::clone::Clone>::clone(p0);
+<engine::RevId>::clone(p0);
-----------------
rope/src/engine.rs <engine::RevId as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::RevId
let mut p1 = & MaybeUninit::uninit().assume_init(); // engine::RevId
+p0.partial_cmp(p1);
+<engine::RevId as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<engine::RevId as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<engine::RevId>::partial_cmp(p0, p1);
-----------------
rope/src/engine.rs <engine::RevId as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::RevId
let mut p1 = & MaybeUninit::uninit().assume_init(); // engine::RevId
+p0.cmp(p1);
+<engine::RevId as std::cmp::Ord>::cmp(p0, p1);
+crate::<engine::RevId as std::cmp::Ord>::cmp(p0, p1);
+<engine::RevId>::cmp(p0, p1);
-----------------
rope/src/engine.rs <engine::RevId as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::RevId
let mut p1 = & MaybeUninit::uninit().assume_init(); // engine::RevId
+p0.eq(p1);
+<engine::RevId as std::cmp::PartialEq>::eq(p0, p1);
+crate::<engine::RevId as std::cmp::PartialEq>::eq(p0, p1);
+<engine::RevId>::eq(p0, p1);
-----------------
rope/src/engine.rs <engine::RevId as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::RevId
+p0.assert_receiver_is_total_eq();
+<engine::RevId as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<engine::RevId as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<engine::RevId>::assert_receiver_is_total_eq(p0);
-----------------
rope/src/engine.rs <engine::RevId as std::hash::Hash>::hash
deps:{"<&mut H as std::hash::Hasher>":{},"<engine::RevId as std::hash::Hash>::hash":{"__H":["std::hash::Hasher","std::marker::Sized"]}}
candidates:{"<&mut H as std::hash::Hasher>":{},"<engine::RevId as std::hash::Hash>::hash":{"__H":["std::hash::SipHasher","std::hash::sip::Hasher<S>","std::hash::SipHasher13","<&mut H as std::hash::Hasher>","std::collections::hash_map::DefaultHasher","std::boxed::Box<T, A>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::RevId
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // __H
+p0.hash(p1);
+<engine::RevId as std::hash::Hash>::hash(p0, p1);
+crate::<engine::RevId as std::hash::Hash>::hash(p0, p1);
+<engine::RevId>::hash(p0, p1);
-----------------
rope/src/engine.rs engine::_IMPL_SERIALIZE_FOR_Revision::<impl serde::Serialize for engine::Revision>::serialize
deps:{"engine::_IMPL_SERIALIZE_FOR_Revision::<impl serde::Serialize for engine::Revision>::serialize":{"__S":["serde::Serializer","std::marker::Sized"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
candidates:{"engine::_IMPL_SERIALIZE_FOR_Revision::<impl serde::Serialize for engine::Revision>::serialize":{"__S":["serde::private::ser::TaggedSerializer<S>","serde::private::ser::FlatMapSerializer<'a, M>","serde::private::ser::content::ContentSerializer<E>","serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Revision
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+engine::_IMPL_SERIALIZE_FOR_Revision::<impl serde::Serialize for engine::Revision>::serialize(p0, p1);
+crate::engine::_IMPL_SERIALIZE_FOR_Revision::<impl serde::Serialize for engine::Revision>::serialize(p0, p1);
+<engine::Revision>::serialize(p0, p1);
-----------------
rope/src/engine.rs engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize
'de
deps:{"engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize":{"__D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize":{"__D":["serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::SeqDeserializer<I, E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::private::de::content::MapDeserializer<'de, E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::StrDeserializer<'a, E>","serde::de::value::StringDeserializer<E>","serde::de::value::MapAccessDeserializer<A>","serde::private::de::content::SeqDeserializer<'de, E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::I16Deserializer<E>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::I128Deserializer<E>","serde::de::value::MapDeserializer<'de, I, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::I32Deserializer<E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::F64Deserializer<E>","serde::de::value::U128Deserializer<E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::U8Deserializer<E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::BoolDeserializer<E>","serde::de::value::PairDeserializer<A, B, E>","serde::de::value::U64Deserializer<E>","serde::de::value::CharDeserializer<E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::I64Deserializer<E>","serde::de::value::I8Deserializer<E>","serde::de::value::F32Deserializer<E>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::U32Deserializer<E>","serde::de::value::UsizeDeserializer<E>","serde::de::value::UnitDeserializer<E>","serde::de::value::U16Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize(p0);
+crate::engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize(p0);
+<engine::Revision>::deserialize(p0);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str
'de
deps:{"<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::Error","std::marker::Sized"]}}
candidates:{"<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Field as serde::Deserialize<'de>>::deserialize
'de
deps:{"<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::Deserializer","std::marker::Sized"]}}
candidates:{"<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::de::value::CharDeserializer<E>","serde::de::value::F32Deserializer<E>","serde::de::value::IsizeDeserializer<E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::StrDeserializer<'a, E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::SeqDeserializer<I, E>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::I8Deserializer<E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::I16Deserializer<E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::U64Deserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::UsizeDeserializer<E>","serde::de::value::UnitDeserializer<E>","serde::de::value::U8Deserializer<E>","serde::de::value::U128Deserializer<E>","serde::de::value::U16Deserializer<E>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::I128Deserializer<E>","serde::de::value::StringDeserializer<E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::I64Deserializer<E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::F64Deserializer<E>","serde::de::value::U32Deserializer<E>","serde::de::value::PairDeserializer<A, B, E>","serde::de::value::BoolDeserializer<E>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::I32Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Field>::deserialize(p0);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["std::marker::Sized","serde::de::SeqAccess"]}}
candidates:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["serde::private::de::content::SeqDeserializer<'de, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::PairVisitor<A, B, E>","serde::de::value::MapDeserializer<'de, I, E>","<&'a mut A as serde::de::SeqAccess<'de>>","serde::de::value::SeqDeserializer<I, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","serde::de::MapAccess"]}}
candidates:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::private::de::FlatStructAccess<'a, 'de, E>","<&'a mut A as serde::de::MapAccess<'de>>","serde::private::de::FlatMapAccess<'a, 'de, E>","serde::private::de::content::MapDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_Revision::<impl serde::Deserialize<'de> for engine::Revision>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
rope/src/engine.rs <engine::Revision as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Revision
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<engine::Revision as std::fmt::Debug>::fmt(p0, p1);
+crate::<engine::Revision as std::fmt::Debug>::fmt(p0, p1);
+<engine::Revision>::fmt(p0, p1);
-----------------
rope/src/engine.rs <engine::Error as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Error
+p0.clone();
+<engine::Error as std::clone::Clone>::clone(p0);
+crate::<engine::Error as std::clone::Clone>::clone(p0);
+<engine::Error>::clone(p0);
-----------------
rope/src/engine.rs <engine::FullPriority as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::FullPriority
+p0.clone();
+<engine::FullPriority as std::clone::Clone>::clone(p0);
+crate::<engine::FullPriority as std::clone::Clone>::clone(p0);
+<engine::FullPriority>::clone(p0);
-----------------
rope/src/engine.rs <engine::FullPriority as std::cmp::PartialOrd>::partial_cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::FullPriority
let mut p1 = & MaybeUninit::uninit().assume_init(); // engine::FullPriority
+p0.partial_cmp(p1);
+<engine::FullPriority as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+crate::<engine::FullPriority as std::cmp::PartialOrd>::partial_cmp(p0, p1);
+<engine::FullPriority>::partial_cmp(p0, p1);
-----------------
rope/src/engine.rs <engine::FullPriority as std::cmp::Ord>::cmp
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::FullPriority
let mut p1 = & MaybeUninit::uninit().assume_init(); // engine::FullPriority
+p0.cmp(p1);
+<engine::FullPriority as std::cmp::Ord>::cmp(p0, p1);
+crate::<engine::FullPriority as std::cmp::Ord>::cmp(p0, p1);
+<engine::FullPriority>::cmp(p0, p1);
-----------------
rope/src/engine.rs <engine::FullPriority as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::FullPriority
let mut p1 = & MaybeUninit::uninit().assume_init(); // engine::FullPriority
+p0.eq(p1);
+<engine::FullPriority as std::cmp::PartialEq>::eq(p0, p1);
+crate::<engine::FullPriority as std::cmp::PartialEq>::eq(p0, p1);
+<engine::FullPriority>::eq(p0, p1);
-----------------
rope/src/engine.rs <engine::FullPriority as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::FullPriority
+p0.assert_receiver_is_total_eq();
+<engine::FullPriority as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<engine::FullPriority as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<engine::FullPriority>::assert_receiver_is_total_eq(p0);
-----------------
rope/src/engine.rs engine::_IMPL_SERIALIZE_FOR_Contents::<impl serde::Serialize for engine::Contents>::serialize
deps:{"engine::_IMPL_SERIALIZE_FOR_Contents::<impl serde::Serialize for engine::Contents>::serialize":{"__S":["serde::Serializer","std::marker::Sized"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
candidates:{"engine::_IMPL_SERIALIZE_FOR_Contents::<impl serde::Serialize for engine::Contents>::serialize":{"__S":["serde::private::ser::TaggedSerializer<S>","serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>","serde::private::ser::FlatMapSerializer<'a, M>","serde::private::ser::content::ContentSerializer<E>"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Contents
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+engine::_IMPL_SERIALIZE_FOR_Contents::<impl serde::Serialize for engine::Contents>::serialize(p0, p1);
+crate::engine::_IMPL_SERIALIZE_FOR_Contents::<impl serde::Serialize for engine::Contents>::serialize(p0, p1);
+<engine::Contents>::serialize(p0, p1);
-----------------
rope/src/engine.rs engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize
'de
deps:{"engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize":{"__D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize":{"__D":["serde::private::de::BytesDeserializer<'a, E>","serde::de::value::U16Deserializer<E>","serde::de::value::F32Deserializer<E>","serde::de::value::BoolDeserializer<E>","serde::private::de::StrDeserializer<'a, E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::U8Deserializer<E>","serde::de::value::U128Deserializer<E>","serde::de::value::UsizeDeserializer<E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::I16Deserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::F64Deserializer<E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::CharDeserializer<E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::UnitDeserializer<E>","serde::de::value::I64Deserializer<E>","serde::de::value::StrDeserializer<'a, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::I32Deserializer<E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::U32Deserializer<E>","serde::de::value::StringDeserializer<E>","serde::de::value::I8Deserializer<E>","serde::de::value::PairDeserializer<A, B, E>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::I128Deserializer<E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::SeqDeserializer<I, E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::U64Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize(p0);
+crate::engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize(p0);
+<engine::Contents>::deserialize(p0);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str
'de
deps:{"<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::Error","std::marker::Sized"]}}
candidates:{"<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Field as serde::Deserialize<'de>>::deserialize
'de
deps:{"<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::de::value::F32Deserializer<E>","serde::de::value::U64Deserializer<E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::SeqDeserializer<I, E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::SeqAccessDeserializer<A>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::I128Deserializer<E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::UsizeDeserializer<E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::UnitDeserializer<E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::StrDeserializer<'a, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::PairDeserializer<A, B, E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::CharDeserializer<E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::BoolDeserializer<E>","serde::de::value::U8Deserializer<E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::U32Deserializer<E>","serde::de::value::I32Deserializer<E>","serde::de::value::F64Deserializer<E>","serde::de::value::I16Deserializer<E>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::U128Deserializer<E>","serde::de::value::U16Deserializer<E>","serde::de::value::StringDeserializer<E>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::I8Deserializer<E>","serde::de::value::I64Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Field>::deserialize(p0);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
rope/src/engine.rs <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum
'de
deps:{"<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum":{"__A":["std::marker::Sized","serde::de::EnumAccess"]}}
candidates:{"<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum":{"__A":["serde::de::value::U32Deserializer<E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::StrDeserializer<'a, E>","serde::private::de::content::EnumRefDeserializer<'a, 'de, E>","serde::de::value::MapAccessDeserializer<A>","serde::private::de::content::EnumDeserializer<'de, E>","serde::de::value::StringDeserializer<E>","serde::de::value::CowStrDeserializer<'a, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_enum(p1);
+<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum(p0, p1);
+crate::<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum(p0, p1);
+<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de>>::visit_enum(p0, p1);
-----------------
rope/src/engine.rs <<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor>::expecting(p0, p1);
-----------------
rope/src/engine.rs <<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor>::visit_u64(p0, p1);
-----------------
rope/src/engine.rs <<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_str
'de
deps:{"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::Error","std::marker::Sized"]}}
candidates:{"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor>::visit_str(p0, &p1);
-----------------
rope/src/engine.rs <<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde::de::Error","std::marker::Sized"]}}
candidates:{"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
rope/src/engine.rs <<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Field as serde::Deserialize<'de>>::deserialize
'de
deps:{"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::Deserializer","std::marker::Sized"]}}
candidates:{"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::private::de::StrDeserializer<'a, E>","serde::de::value::U32Deserializer<E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::PairDeserializer<A, B, E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::I128Deserializer<E>","serde::de::value::I8Deserializer<E>","serde::de::value::MapDeserializer<'de, I, E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::IsizeDeserializer<E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::I32Deserializer<E>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::I64Deserializer<E>","serde::de::value::MapAccessDeserializer<A>","serde::private::de::BytesDeserializer<'a, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::F64Deserializer<E>","serde::de::value::UsizeDeserializer<E>","serde::de::value::U128Deserializer<E>","serde::de::value::StringDeserializer<E>","serde::de::value::U16Deserializer<E>","serde::de::value::SeqDeserializer<I, E>","serde::de::value::UnitDeserializer<E>","serde::de::value::F32Deserializer<E>","serde::de::value::U64Deserializer<E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::BoolDeserializer<E>","serde::de::value::StrDeserializer<'a, E>","serde::de::value::U8Deserializer<E>","serde::de::value::CharDeserializer<E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::I16Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Field as serde::Deserialize<'de>>::deserialize(p0);
+crate::<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Field as serde::Deserialize<'de>>::deserialize(p0);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Field>::deserialize(p0);
-----------------
rope/src/engine.rs <<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de>>::expecting(p0, p1);
-----------------
rope/src/engine.rs <<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["<&'a mut A as serde::de::SeqAccess<'de>>","serde::de::value::MapDeserializer<'de, I, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::PairVisitor<A, B, E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::SeqDeserializer<I, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
rope/src/engine.rs <<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["serde::de::MapAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["serde::de::value::MapDeserializer<'de, I, E>","serde::private::de::FlatMapAccess<'a, 'de, E>","serde::private::de::content::MapDeserializer<'de, E>","serde::private::de::FlatStructAccess<'a, 'de, E>","serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>","<&'a mut A as serde::de::MapAccess<'de>>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de>>::visit_map(p0, p1);
-----------------
rope/src/engine.rs <<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor>::expecting(p0, p1);
-----------------
rope/src/engine.rs <<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor>::visit_u64(p0, p1);
-----------------
rope/src/engine.rs <<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_str
'de
deps:{"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::Error","std::marker::Sized"]}}
candidates:{"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor>::visit_str(p0, &p1);
-----------------
rope/src/engine.rs <<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
rope/src/engine.rs <<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Field as serde::Deserialize<'de>>::deserialize
'de
deps:{"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::Deserializer","std::marker::Sized"]}}
candidates:{"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::F64Deserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::I16Deserializer<E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::I128Deserializer<E>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::PairDeserializer<A, B, E>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::SeqDeserializer<I, E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::U8Deserializer<E>","serde::de::value::U128Deserializer<E>","serde::de::value::F32Deserializer<E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::StringDeserializer<E>","serde::de::value::U32Deserializer<E>","serde::de::value::U16Deserializer<E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::I32Deserializer<E>","serde::de::value::StrDeserializer<'a, E>","serde::de::value::I64Deserializer<E>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::UsizeDeserializer<E>","serde::de::value::U64Deserializer<E>","serde::de::value::CharDeserializer<E>","serde::de::value::BoolDeserializer<E>","serde::de::value::UnitDeserializer<E>","serde::de::value::I8Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Field as serde::Deserialize<'de>>::deserialize(p0);
+crate::<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Field as serde::Deserialize<'de>>::deserialize(p0);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Field>::deserialize(p0);
-----------------
rope/src/engine.rs <<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de>>::expecting(p0, p1);
-----------------
rope/src/engine.rs <<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["std::marker::Sized","serde::de::SeqAccess"]}}
candidates:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["serde::de::value::SeqDeserializer<I, E>","serde::private::de::content::SeqDeserializer<'de, E>","<&'a mut A as serde::de::SeqAccess<'de>>","serde::de::value::MapDeserializer<'de, I, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::PairVisitor<A, B, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
rope/src/engine.rs <<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","serde::de::MapAccess"]}}
candidates:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["<&'a mut A as serde::de::MapAccess<'de>>","serde::private::de::FlatMapAccess<'a, 'de, E>","serde::private::de::FlatStructAccess<'a, 'de, E>","serde::private::de::content::MapDeserializer<'de, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>","serde::de::value::MapDeserializer<'de, I, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // <engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+<<engine::_IMPL_DESERIALIZE_FOR_Contents::<impl serde::Deserialize<'de> for engine::Contents>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de>>::visit_map(p0, p1);
-----------------
rope/src/engine.rs <engine::Contents as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Contents
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<engine::Contents as std::fmt::Debug>::fmt(p0, p1);
+crate::<engine::Contents as std::fmt::Debug>::fmt(p0, p1);
+<engine::Contents>::fmt(p0, p1);
-----------------
rope/src/engine.rs <engine::Contents as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Contents
+p0.clone();
+<engine::Contents as std::clone::Clone>::clone(p0);
+crate::<engine::Contents as std::clone::Clone>::clone(p0);
+<engine::Contents>::clone(p0);
-----------------
rope/src/engine.rs engine::RevId::token
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::RevId
+p0.token();
+engine::RevId::token(p0);
+crate::engine::RevId::token(p0);
+<engine::RevId>::token(p0);
-----------------
rope/src/engine.rs engine::RevId::session_id
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::RevId
+p0.session_id();
+engine::RevId::session_id(p0);
+crate::engine::RevId::session_id(p0);
+<engine::RevId>::session_id(p0);
-----------------
rope/src/engine.rs engine::Engine::new
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
+engine::Engine::new(p0);
+crate::engine::Engine::new(p0);
+<engine::Engine>::new(p0);
-----------------
rope/src/engine.rs engine::Engine::empty
deps:{}
candidates:{}
+engine::Engine::empty();
+crate::engine::Engine::empty();
+<engine::Engine>::empty();
-----------------
rope/src/engine.rs engine::Engine::next_rev_id
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
+p0.next_rev_id();
+engine::Engine::next_rev_id(p0);
+crate::engine::Engine::next_rev_id(p0);
+<engine::Engine>::next_rev_id(p0);
-----------------
rope/src/engine.rs engine::Engine::find_rev
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = MaybeUninit::uninit().assume_init(); // engine::RevId
+p0.find_rev(p1);
+engine::Engine::find_rev(p0, p1);
+crate::engine::Engine::find_rev(p0, p1);
+<engine::Engine>::find_rev(p0, p1);
-----------------
rope/src/engine.rs engine::Engine::find_rev_token
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = 0u64; // None+u64
+p0.find_rev_token(p1);
+engine::Engine::find_rev_token(p0, p1);
+crate::engine::Engine::find_rev_token(p0, p1);
+<engine::Engine>::find_rev_token(p0, p1);
-----------------
rope/src/engine.rs engine::Engine::deletes_from_union_for_index
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = 0usize; // None+usize
+p0.deletes_from_union_for_index(p1);
+engine::Engine::deletes_from_union_for_index(p0, p1);
+crate::engine::Engine::deletes_from_union_for_index(p0, p1);
+<engine::Engine>::deletes_from_union_for_index(p0, p1);
-----------------
rope/src/engine.rs engine::Engine::deletes_from_union_before_index
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = 0usize; // None+usize
let mut p2 = true; // None+bool
+p0.deletes_from_union_before_index(p1, p2);
+engine::Engine::deletes_from_union_before_index(p0, p1, p2);
+crate::engine::Engine::deletes_from_union_before_index(p0, p1, p2);
+<engine::Engine>::deletes_from_union_before_index(p0, p1, p2);
-----------------
rope/src/engine.rs engine::Engine::rev_content_for_index
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = 0usize; // None+usize
+p0.rev_content_for_index(p1);
+engine::Engine::rev_content_for_index(p0, p1);
+crate::engine::Engine::rev_content_for_index(p0, p1);
+<engine::Engine>::rev_content_for_index(p0, p1);
-----------------
rope/src/engine.rs engine::Engine::deletes_from_cur_union_for_index
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = 0usize; // None+usize
+p0.deletes_from_cur_union_for_index(p1);
+engine::Engine::deletes_from_cur_union_for_index(p0, p1);
+crate::engine::Engine::deletes_from_cur_union_for_index(p0, p1);
+<engine::Engine>::deletes_from_cur_union_for_index(p0, p1);
-----------------
rope/src/engine.rs engine::Engine::max_undo_group_id
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
+p0.max_undo_group_id();
+engine::Engine::max_undo_group_id(p0);
+crate::engine::Engine::max_undo_group_id(p0);
+<engine::Engine>::max_undo_group_id(p0);
-----------------
rope/src/engine.rs engine::Engine::get_head_rev_id
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
+p0.get_head_rev_id();
+engine::Engine::get_head_rev_id(p0);
+crate::engine::Engine::get_head_rev_id(p0);
+<engine::Engine>::get_head_rev_id(p0);
-----------------
rope/src/engine.rs engine::Engine::get_head
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
+p0.get_head();
+engine::Engine::get_head(p0);
+crate::engine::Engine::get_head(p0);
+<engine::Engine>::get_head(p0);
-----------------
rope/src/engine.rs engine::Engine::get_rev
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = 0u64; // None+u64
+p0.get_rev(p1);
+engine::Engine::get_rev(p0, p1);
+crate::engine::Engine::get_rev(p0, p1);
+<engine::Engine>::get_rev(p0, p1);
-----------------
rope/src/engine.rs engine::Engine::try_delta_rev_head
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = 0u64; // None+u64
+p0.try_delta_rev_head(p1);
+engine::Engine::try_delta_rev_head(p0, p1);
+crate::engine::Engine::try_delta_rev_head(p0, p1);
+<engine::Engine>::try_delta_rev_head(p0, p1);
-----------------
rope/src/engine.rs engine::Engine::mk_new_rev
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
let mut p3 = 0u64; // None+u64
let mut p4 = MaybeUninit::uninit().assume_init(); // delta::Delta<rope::RopeInfo>
+p0.mk_new_rev(p1, p2, p3, p4);
+engine::Engine::mk_new_rev(p0, p1, p2, p3, p4);
+crate::engine::Engine::mk_new_rev(p0, p1, p2, p3, p4);
+<engine::Engine>::mk_new_rev(p0, p1, p2, p3, p4);
-----------------
rope/src/engine.rs engine::Engine::edit_rev
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
let mut p3 = 0u64; // None+u64
let mut p4 = MaybeUninit::uninit().assume_init(); // delta::Delta<rope::RopeInfo>
+p0.edit_rev(p1, p2, p3, p4);
+engine::Engine::edit_rev(p0, p1, p2, p3, p4);
+crate::engine::Engine::edit_rev(p0, p1, p2, p3, p4);
+<engine::Engine>::edit_rev(p0, p1, p2, p3, p4);
-----------------
rope/src/engine.rs engine::Engine::try_edit_rev
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
let mut p3 = 0u64; // None+u64
let mut p4 = MaybeUninit::uninit().assume_init(); // delta::Delta<rope::RopeInfo>
+p0.try_edit_rev(p1, p2, p3, p4);
+engine::Engine::try_edit_rev(p0, p1, p2, p3, p4);
+crate::engine::Engine::try_edit_rev(p0, p1, p2, p3, p4);
+<engine::Engine>::try_edit_rev(p0, p1, p2, p3, p4);
-----------------
rope/src/engine.rs engine::Engine::empty_subset_before_first_rev
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
+p0.empty_subset_before_first_rev();
+engine::Engine::empty_subset_before_first_rev(p0);
+crate::engine::Engine::empty_subset_before_first_rev(p0);
+<engine::Engine>::empty_subset_before_first_rev(p0);
-----------------
rope/src/engine.rs engine::Engine::find_first_undo_candidate_index
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::collections::BTreeSet<usize>
+p0.find_first_undo_candidate_index(p1);
+engine::Engine::find_first_undo_candidate_index(p0, p1);
+crate::engine::Engine::find_first_undo_candidate_index(p0, p1);
+<engine::Engine>::find_first_undo_candidate_index(p0, p1);
-----------------
rope/src/engine.rs engine::Engine::compute_undo
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::collections::BTreeSet<usize>
+p0.compute_undo(p1);
+engine::Engine::compute_undo(p0, p1);
+crate::engine::Engine::compute_undo(p0, p1);
+<engine::Engine>::compute_undo(p0, p1);
-----------------
rope/src/engine.rs engine::Engine::undo
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = MaybeUninit::uninit().assume_init(); // std::collections::BTreeSet<usize>
+p0.undo(p1);
+engine::Engine::undo(p0, p1);
+crate::engine::Engine::undo(p0, p1);
+<engine::Engine>::undo(p0, p1);
-----------------
rope/src/engine.rs engine::Engine::is_equivalent_revision
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = MaybeUninit::uninit().assume_init(); // engine::RevId
let mut p2 = MaybeUninit::uninit().assume_init(); // engine::RevId
+p0.is_equivalent_revision(p1, p2);
+engine::Engine::is_equivalent_revision(p0, p1, p2);
+crate::engine::Engine::is_equivalent_revision(p0, p1, p2);
+<engine::Engine>::is_equivalent_revision(p0, p1, p2);
-----------------
rope/src/engine.rs engine::Engine::gc
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = & MaybeUninit::uninit().assume_init(); // std::collections::BTreeSet<usize>
+p0.gc(p1);
+engine::Engine::gc(p0, p1);
+crate::engine::Engine::gc(p0, p1);
+<engine::Engine>::gc(p0, p1);
-----------------
rope/src/engine.rs engine::Engine::merge
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = & MaybeUninit::uninit().assume_init(); // engine::Engine
+p0.merge(p1);
+engine::Engine::merge(p0, p1);
+crate::engine::Engine::merge(p0, p1);
+<engine::Engine>::merge(p0, p1);
-----------------
rope/src/engine.rs engine::Engine::set_session_id
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // engine::Engine
let mut p1 = MaybeUninit::uninit().assume_init(); // (u64, u32)
+p0.set_session_id(p1);
+engine::Engine::set_session_id(p0, p1);
+crate::engine::Engine::set_session_id(p0, p1);
+<engine::Engine>::set_session_id(p0, p1);
-----------------
rope/src/engine.rs <engine::DeltaOp as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::DeltaOp
+p0.clone();
+<engine::DeltaOp as std::clone::Clone>::clone(p0);
+crate::<engine::DeltaOp as std::clone::Clone>::clone(p0);
+<engine::DeltaOp>::clone(p0);
-----------------
rope/src/engine.rs <engine::DeltaOp as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::DeltaOp
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<engine::DeltaOp as std::fmt::Debug>::fmt(p0, p1);
+crate::<engine::DeltaOp as std::fmt::Debug>::fmt(p0, p1);
+<engine::DeltaOp>::fmt(p0, p1);
-----------------
rope/src/engine.rs <engine::Error as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Error
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<engine::Error as std::fmt::Display>::fmt(p0, p1);
+crate::<engine::Error as std::fmt::Display>::fmt(p0, p1);
+<engine::Error>::fmt(p0, p1);
-----------------
rope/src/engine.rs <engine::Error as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // engine::Error
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<engine::Error as std::fmt::Debug>::fmt(p0, p1);
+crate::<engine::Error as std::fmt::Debug>::fmt(p0, p1);
+<engine::Error>::fmt(p0, p1);
-----------------
rope/src/find.rs <find::CaseMatching as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // find::CaseMatching
+p0.clone();
+<find::CaseMatching as std::clone::Clone>::clone(p0);
+crate::<find::CaseMatching as std::clone::Clone>::clone(p0);
+<find::CaseMatching>::clone(p0);
-----------------
rope/src/find.rs <find::CaseMatching as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // find::CaseMatching
let mut p1 = & MaybeUninit::uninit().assume_init(); // find::CaseMatching
+p0.eq(p1);
+<find::CaseMatching as std::cmp::PartialEq>::eq(p0, p1);
+crate::<find::CaseMatching as std::cmp::PartialEq>::eq(p0, p1);
+<find::CaseMatching>::eq(p0, p1);
-----------------
rope/src/interval.rs <interval::Interval as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.clone();
+<interval::Interval as std::clone::Clone>::clone(p0);
+crate::<interval::Interval as std::clone::Clone>::clone(p0);
+<interval::Interval>::clone(p0);
-----------------
rope/src/interval.rs <interval::Interval as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
let mut p1 = & MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.eq(p1);
+<interval::Interval as std::cmp::PartialEq>::eq(p0, p1);
+crate::<interval::Interval as std::cmp::PartialEq>::eq(p0, p1);
+<interval::Interval>::eq(p0, p1);
-----------------
rope/src/interval.rs <interval::Interval as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.assert_receiver_is_total_eq();
+<interval::Interval as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<interval::Interval as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<interval::Interval>::assert_receiver_is_total_eq(p0);
-----------------
rope/src/interval.rs interval::Interval::new
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
let mut p1 = 0usize; // None+usize
+interval::Interval::new(p0, p1);
+crate::interval::Interval::new(p0, p1);
+<interval::Interval>::new(p0, p1);
-----------------
rope/src/interval.rs interval::Interval::new_closed_open
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
let mut p1 = 0usize; // None+usize
+interval::Interval::new_closed_open(p0, p1);
+crate::interval::Interval::new_closed_open(p0, p1);
+<interval::Interval>::new_closed_open(p0, p1);
-----------------
rope/src/interval.rs interval::Interval::new_open_closed
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
let mut p1 = 0usize; // None+usize
+interval::Interval::new_open_closed(p0, p1);
+crate::interval::Interval::new_open_closed(p0, p1);
+<interval::Interval>::new_open_closed(p0, p1);
-----------------
rope/src/interval.rs interval::Interval::new_closed_closed
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
let mut p1 = 0usize; // None+usize
+interval::Interval::new_closed_closed(p0, p1);
+crate::interval::Interval::new_closed_closed(p0, p1);
+<interval::Interval>::new_closed_closed(p0, p1);
-----------------
rope/src/interval.rs interval::Interval::new_open_open
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
let mut p1 = 0usize; // None+usize
+interval::Interval::new_open_open(p0, p1);
+crate::interval::Interval::new_open_open(p0, p1);
+<interval::Interval>::new_open_open(p0, p1);
-----------------
rope/src/interval.rs interval::Interval::start
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.start();
+interval::Interval::start(p0);
+crate::interval::Interval::start(p0);
+<interval::Interval>::start(p0);
-----------------
rope/src/interval.rs interval::Interval::end
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.end();
+interval::Interval::end(p0);
+crate::interval::Interval::end(p0);
+<interval::Interval>::end(p0);
-----------------
rope/src/interval.rs interval::Interval::start_end
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.start_end();
+interval::Interval::start_end(p0);
+crate::interval::Interval::start_end(p0);
+<interval::Interval>::start_end(p0);
-----------------
rope/src/interval.rs interval::Interval::is_before
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
let mut p1 = 0usize; // None+usize
+p0.is_before(p1);
+interval::Interval::is_before(p0, p1);
+crate::interval::Interval::is_before(p0, p1);
+<interval::Interval>::is_before(p0, p1);
-----------------
rope/src/interval.rs interval::Interval::contains
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
let mut p1 = 0usize; // None+usize
+p0.contains(p1);
+interval::Interval::contains(p0, p1);
+crate::interval::Interval::contains(p0, p1);
+<interval::Interval>::contains(p0, p1);
-----------------
rope/src/interval.rs interval::Interval::is_after
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
let mut p1 = 0usize; // None+usize
+p0.is_after(p1);
+interval::Interval::is_after(p0, p1);
+crate::interval::Interval::is_after(p0, p1);
+<interval::Interval>::is_after(p0, p1);
-----------------
rope/src/interval.rs interval::Interval::is_empty
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.is_empty();
+interval::Interval::is_empty(p0);
+crate::interval::Interval::is_empty(p0);
+<interval::Interval>::is_empty(p0);
-----------------
rope/src/interval.rs interval::Interval::intersect
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
let mut p1 = MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.intersect(p1);
+interval::Interval::intersect(p0, p1);
+crate::interval::Interval::intersect(p0, p1);
+<interval::Interval>::intersect(p0, p1);
-----------------
rope/src/interval.rs interval::Interval::union
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
let mut p1 = MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.union(p1);
+interval::Interval::union(p0, p1);
+crate::interval::Interval::union(p0, p1);
+<interval::Interval>::union(p0, p1);
-----------------
rope/src/interval.rs interval::Interval::prefix
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
let mut p1 = MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.prefix(p1);
+interval::Interval::prefix(p0, p1);
+crate::interval::Interval::prefix(p0, p1);
+<interval::Interval>::prefix(p0, p1);
-----------------
rope/src/interval.rs interval::Interval::suffix
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
let mut p1 = MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.suffix(p1);
+interval::Interval::suffix(p0, p1);
+crate::interval::Interval::suffix(p0, p1);
+<interval::Interval>::suffix(p0, p1);
-----------------
rope/src/interval.rs interval::Interval::translate
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
let mut p1 = 0usize; // None+usize
+p0.translate(p1);
+interval::Interval::translate(p0, p1);
+crate::interval::Interval::translate(p0, p1);
+<interval::Interval>::translate(p0, p1);
-----------------
rope/src/interval.rs interval::Interval::translate_neg
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
let mut p1 = 0usize; // None+usize
+p0.translate_neg(p1);
+interval::Interval::translate_neg(p0, p1);
+crate::interval::Interval::translate_neg(p0, p1);
+<interval::Interval>::translate_neg(p0, p1);
-----------------
rope/src/interval.rs interval::Interval::size
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.size();
+interval::Interval::size(p0);
+crate::interval::Interval::size(p0);
+<interval::Interval>::size(p0);
-----------------
rope/src/interval.rs <interval::Interval as std::fmt::Display>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+<interval::Interval as std::fmt::Display>::fmt(p0, p1);
+crate::<interval::Interval as std::fmt::Display>::fmt(p0, p1);
+<interval::Interval>::fmt(p0, p1);
-----------------
rope/src/interval.rs <interval::Interval as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // interval::Interval
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<interval::Interval as std::fmt::Debug>::fmt(p0, p1);
+crate::<interval::Interval as std::fmt::Debug>::fmt(p0, p1);
+<interval::Interval>::fmt(p0, p1);
-----------------
rope/src/interval.rs <interval::Interval as std::convert::From<std::ops::Range<usize>>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::ops::Range<usize>
+<interval::Interval as std::convert::From<std::ops::Range<usize>>>::from(p0);
+crate::<interval::Interval as std::convert::From<std::ops::Range<usize>>>::from(p0);
+<interval::Interval>::from(p0);
-----------------
rope/src/interval.rs <interval::Interval as std::convert::From<std::ops::RangeTo<usize>>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::ops::RangeTo<usize>
+<interval::Interval as std::convert::From<std::ops::RangeTo<usize>>>::from(p0);
+crate::<interval::Interval as std::convert::From<std::ops::RangeTo<usize>>>::from(p0);
+<interval::Interval>::from(p0);
-----------------
rope/src/interval.rs <interval::Interval as std::convert::From<std::ops::RangeInclusive<usize>>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::ops::RangeInclusive<usize>
+<interval::Interval as std::convert::From<std::ops::RangeInclusive<usize>>>::from(p0);
+crate::<interval::Interval as std::convert::From<std::ops::RangeInclusive<usize>>>::from(p0);
+<interval::Interval>::from(p0);
-----------------
rope/src/interval.rs <interval::Interval as std::convert::From<std::ops::RangeToInclusive<usize>>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::ops::RangeToInclusive<usize>
+<interval::Interval as std::convert::From<std::ops::RangeToInclusive<usize>>>::from(p0);
+crate::<interval::Interval as std::convert::From<std::ops::RangeToInclusive<usize>>>::from(p0);
+<interval::Interval>::from(p0);
-----------------
rope/src/interval.rs <T as interval::IntervalBounds>::into_interval
deps:{"<T as interval::IntervalBounds>::into_interval":{"T":["std::marker::Sized","std::convert::Into"]},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]}}
candidates:{"<T as interval::IntervalBounds>::into_interval":{"T":["std::sync::mpmc::select::Selected","<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError"]},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
let mut p1 = 0usize; // None+usize
+p0.into_interval(p1);
+<T as interval::IntervalBounds>::into_interval(p0, p1);
+crate::<T as interval::IntervalBounds>::into_interval(p0, p1);
+<T>::into_interval(p0, p1);
-----------------
rope/src/interval.rs <std::ops::RangeFrom<usize> as interval::IntervalBounds>::into_interval
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::ops::RangeFrom<usize>
let mut p1 = 0usize; // None+usize
+p0.into_interval(p1);
+<std::ops::RangeFrom<usize> as interval::IntervalBounds>::into_interval(p0, p1);
+crate::<std::ops::RangeFrom<usize> as interval::IntervalBounds>::into_interval(p0, p1);
+<std::ops::RangeFrom<usize>>::into_interval(p0, p1);
-----------------
rope/src/interval.rs <std::ops::RangeFull as interval::IntervalBounds>::into_interval
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::ops::RangeFull
let mut p1 = 0usize; // None+usize
+p0.into_interval(p1);
+<std::ops::RangeFull as interval::IntervalBounds>::into_interval(p0, p1);
+crate::<std::ops::RangeFull as interval::IntervalBounds>::into_interval(p0, p1);
+<std::ops::RangeFull>::into_interval(p0, p1);
-----------------
rope/src/multiset.rs multiset::_IMPL_SERIALIZE_FOR_Segment::<impl serde::Serialize for multiset::Segment>::serialize
deps:{"multiset::_IMPL_SERIALIZE_FOR_Segment::<impl serde::Serialize for multiset::Segment>::serialize":{"__S":["serde::Serializer","std::marker::Sized"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
candidates:{"multiset::_IMPL_SERIALIZE_FOR_Segment::<impl serde::Serialize for multiset::Segment>::serialize":{"__S":["serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>","serde::private::ser::FlatMapSerializer<'a, M>","serde::private::ser::content::ContentSerializer<E>","serde::private::ser::TaggedSerializer<S>"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Segment
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+multiset::_IMPL_SERIALIZE_FOR_Segment::<impl serde::Serialize for multiset::Segment>::serialize(p0, p1);
+crate::multiset::_IMPL_SERIALIZE_FOR_Segment::<impl serde::Serialize for multiset::Segment>::serialize(p0, p1);
+<multiset::Segment>::serialize(p0, p1);
-----------------
rope/src/multiset.rs multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize
'de
deps:{"multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize":{"__D":["serde::Deserializer","std::marker::Sized"]}}
candidates:{"multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize":{"__D":["serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::UsizeDeserializer<E>","serde::de::value::StringDeserializer<E>","serde::de::value::MapDeserializer<'de, I, E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::CharDeserializer<E>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::SeqDeserializer<I, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::I64Deserializer<E>","serde::de::value::I8Deserializer<E>","serde::de::value::StrDeserializer<'a, E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::MapAccessDeserializer<A>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::UnitDeserializer<E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::U8Deserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::U64Deserializer<E>","serde::de::value::BoolDeserializer<E>","serde::de::value::I16Deserializer<E>","serde::de::value::U16Deserializer<E>","serde::de::value::I32Deserializer<E>","serde::de::value::F32Deserializer<E>","serde::de::value::I128Deserializer<E>","serde::de::value::F64Deserializer<E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::PairDeserializer<A, B, E>","serde::de::value::U128Deserializer<E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::private::de::StrDeserializer<'a, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::U32Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize(p0);
+crate::multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize(p0);
+<multiset::Segment>::deserialize(p0);
-----------------
rope/src/multiset.rs <multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
rope/src/multiset.rs <multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde::de::Error","std::marker::Sized"]}}
candidates:{"<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
rope/src/multiset.rs <multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str
'de
deps:{"<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::Error","std::marker::Sized"]}}
candidates:{"<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
rope/src/multiset.rs <multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
rope/src/multiset.rs <multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Field as serde::Deserialize<'de>>::deserialize
'de
deps:{"<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::Deserializer","std::marker::Sized"]}}
candidates:{"<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::de::value::UnitDeserializer<E>","serde::de::value::U128Deserializer<E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::StrDeserializer<'a, E>","serde::de::value::UsizeDeserializer<E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::StringDeserializer<E>","serde::de::value::I32Deserializer<E>","serde::de::value::BoolDeserializer<E>","serde::de::value::SeqDeserializer<I, E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::I64Deserializer<E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::U64Deserializer<E>","serde::de::value::I128Deserializer<E>","serde::private::de::StrDeserializer<'a, E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::F64Deserializer<E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::U16Deserializer<E>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::I16Deserializer<E>","serde::de::value::U32Deserializer<E>","serde::de::value::U8Deserializer<E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::F32Deserializer<E>","serde::de::value::CharDeserializer<E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::PairDeserializer<A, B, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::I8Deserializer<E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::SeqAccessDeserializer<A>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+crate::<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Field>::deserialize(p0);
-----------------
rope/src/multiset.rs <multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
rope/src/multiset.rs <multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["serde::de::value::SeqDeserializer<I, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::PairVisitor<A, B, E>","<&'a mut A as serde::de::SeqAccess<'de>>","serde::de::value::MapDeserializer<'de, I, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
rope/src/multiset.rs <multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","serde::de::MapAccess"]}}
candidates:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["serde::private::de::FlatMapAccess<'a, 'de, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","<&'a mut A as serde::de::MapAccess<'de>>","serde::de::value::MapDeserializer<'de, I, E>","serde::private::de::FlatStructAccess<'a, 'de, E>","serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>","serde::private::de::content::MapDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Segment::<impl serde::Deserialize<'de> for multiset::Segment>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
rope/src/multiset.rs <multiset::Segment as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Segment
+p0.clone();
+<multiset::Segment as std::clone::Clone>::clone(p0);
+crate::<multiset::Segment as std::clone::Clone>::clone(p0);
+<multiset::Segment>::clone(p0);
-----------------
rope/src/multiset.rs <multiset::Segment as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Segment
let mut p1 = & MaybeUninit::uninit().assume_init(); // multiset::Segment
+p0.eq(p1);
+<multiset::Segment as std::cmp::PartialEq>::eq(p0, p1);
+crate::<multiset::Segment as std::cmp::PartialEq>::eq(p0, p1);
+<multiset::Segment>::eq(p0, p1);
-----------------
rope/src/multiset.rs <multiset::Segment as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Segment
+p0.assert_receiver_is_total_eq();
+<multiset::Segment as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<multiset::Segment as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<multiset::Segment>::assert_receiver_is_total_eq(p0);
-----------------
rope/src/multiset.rs <multiset::Segment as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Segment
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<multiset::Segment as std::fmt::Debug>::fmt(p0, p1);
+crate::<multiset::Segment as std::fmt::Debug>::fmt(p0, p1);
+<multiset::Segment>::fmt(p0, p1);
-----------------
rope/src/multiset.rs multiset::_IMPL_SERIALIZE_FOR_Subset::<impl serde::Serialize for multiset::Subset>::serialize
deps:{"multiset::_IMPL_SERIALIZE_FOR_Subset::<impl serde::Serialize for multiset::Subset>::serialize":{"__S":["std::marker::Sized","serde::Serializer"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
candidates:{"multiset::_IMPL_SERIALIZE_FOR_Subset::<impl serde::Serialize for multiset::Subset>::serialize":{"__S":["serde::private::ser::content::ContentSerializer<E>","serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>","serde::private::ser::FlatMapSerializer<'a, M>","serde::private::ser::TaggedSerializer<S>"]},"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+multiset::_IMPL_SERIALIZE_FOR_Subset::<impl serde::Serialize for multiset::Subset>::serialize(p0, p1);
+crate::multiset::_IMPL_SERIALIZE_FOR_Subset::<impl serde::Serialize for multiset::Subset>::serialize(p0, p1);
+<multiset::Subset>::serialize(p0, p1);
-----------------
rope/src/multiset.rs multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize
'de
deps:{"multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize":{"__D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize":{"__D":["serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::U8Deserializer<E>","serde::de::value::StrDeserializer<'a, E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::I16Deserializer<E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::I32Deserializer<E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::PairDeserializer<A, B, E>","serde::de::value::UnitDeserializer<E>","serde::de::value::I64Deserializer<E>","serde::de::value::U16Deserializer<E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::BoolDeserializer<E>","serde::de::value::SeqDeserializer<I, E>","serde::de::value::U64Deserializer<E>","serde::de::value::CharDeserializer<E>","serde::de::value::U32Deserializer<E>","serde::de::value::U128Deserializer<E>","serde::de::value::UsizeDeserializer<E>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::F64Deserializer<E>","serde::de::value::F32Deserializer<E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::StringDeserializer<E>","serde::private::de::StrDeserializer<'a, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::I128Deserializer<E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::I8Deserializer<E>","serde::de::value::BorrowedBytesDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize(p0);
+crate::multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize(p0);
+<multiset::Subset>::deserialize(p0);
-----------------
rope/src/multiset.rs <multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
rope/src/multiset.rs <multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde::de::Error","std::marker::Sized"]}}
candidates:{"<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
rope/src/multiset.rs <multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str
'de
deps:{"<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
rope/src/multiset.rs <multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde::de::Error","std::marker::Sized"]}}
candidates:{"<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
rope/src/multiset.rs <multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Field as serde::Deserialize<'de>>::deserialize
'de
deps:{"<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::Deserializer","std::marker::Sized"]}}
candidates:{"<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::de::value::I16Deserializer<E>","serde::de::value::F64Deserializer<E>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::I128Deserializer<E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::StrDeserializer<'a, E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::I32Deserializer<E>","serde::de::value::U128Deserializer<E>","serde::de::value::U64Deserializer<E>","serde::de::value::I8Deserializer<E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::BoolDeserializer<E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::UsizeDeserializer<E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::U32Deserializer<E>","serde::de::value::PairDeserializer<A, B, E>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::SeqDeserializer<I, E>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::I64Deserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::U8Deserializer<E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::F32Deserializer<E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::U16Deserializer<E>","serde::de::value::UnitDeserializer<E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::StringDeserializer<E>","serde::de::value::CharDeserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+crate::<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Field>::deserialize(p0);
-----------------
rope/src/multiset.rs <multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
rope/src/multiset.rs <multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["std::marker::Sized","serde::de::SeqAccess"]}}
candidates:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::PairVisitor<A, B, E>","serde::de::value::MapDeserializer<'de, I, E>","<&'a mut A as serde::de::SeqAccess<'de>>","serde::de::value::SeqDeserializer<I, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
rope/src/multiset.rs <multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","serde::de::MapAccess"]}}
candidates:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["serde::de::value::MapDeserializer<'de, I, E>","serde::private::de::FlatMapAccess<'a, 'de, E>","serde::private::de::content::MapDeserializer<'de, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::private::de::FlatStructAccess<'a, 'de, E>","<&'a mut A as serde::de::MapAccess<'de>>","serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+<multiset::_IMPL_DESERIALIZE_FOR_Subset::<impl serde::Deserialize<'de> for multiset::Subset>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
rope/src/multiset.rs <multiset::Subset as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+p0.clone();
+<multiset::Subset as std::clone::Clone>::clone(p0);
+crate::<multiset::Subset as std::clone::Clone>::clone(p0);
+<multiset::Subset>::clone(p0);
-----------------
rope/src/multiset.rs <multiset::Subset as std::cmp::PartialEq>::eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p1 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+p0.eq(p1);
+<multiset::Subset as std::cmp::PartialEq>::eq(p0, p1);
+crate::<multiset::Subset as std::cmp::PartialEq>::eq(p0, p1);
+<multiset::Subset>::eq(p0, p1);
-----------------
rope/src/multiset.rs <multiset::Subset as std::cmp::Eq>::assert_receiver_is_total_eq
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+p0.assert_receiver_is_total_eq();
+<multiset::Subset as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+crate::<multiset::Subset as std::cmp::Eq>::assert_receiver_is_total_eq(p0);
+<multiset::Subset>::assert_receiver_is_total_eq(p0);
-----------------
rope/src/multiset.rs <multiset::SubsetBuilder as std::default::Default>::default
deps:{}
candidates:{}
+<multiset::SubsetBuilder as std::default::Default>::default();
+crate::<multiset::SubsetBuilder as std::default::Default>::default();
+<multiset::SubsetBuilder>::default();
-----------------
rope/src/multiset.rs multiset::SubsetBuilder::new
deps:{}
candidates:{}
+multiset::SubsetBuilder::new();
+crate::multiset::SubsetBuilder::new();
+<multiset::SubsetBuilder>::new();
-----------------
rope/src/multiset.rs multiset::SubsetBuilder::pad_to_len
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // multiset::SubsetBuilder
let mut p1 = 0usize; // None+usize
+p0.pad_to_len(p1);
+multiset::SubsetBuilder::pad_to_len(p0, p1);
+crate::multiset::SubsetBuilder::pad_to_len(p0, p1);
+<multiset::SubsetBuilder>::pad_to_len(p0, p1);
-----------------
rope/src/multiset.rs multiset::SubsetBuilder::add_range
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // multiset::SubsetBuilder
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
let mut p3 = 0usize; // None+usize
+p0.add_range(p1, p2, p3);
+multiset::SubsetBuilder::add_range(p0, p1, p2, p3);
+crate::multiset::SubsetBuilder::add_range(p0, p1, p2, p3);
+<multiset::SubsetBuilder>::add_range(p0, p1, p2, p3);
-----------------
rope/src/multiset.rs multiset::SubsetBuilder::push_segment
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // multiset::SubsetBuilder
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
+p0.push_segment(p1, p2);
+multiset::SubsetBuilder::push_segment(p0, p1, p2);
+crate::multiset::SubsetBuilder::push_segment(p0, p1, p2);
+<multiset::SubsetBuilder>::push_segment(p0, p1, p2);
-----------------
rope/src/multiset.rs multiset::SubsetBuilder::build
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // multiset::SubsetBuilder
+p0.build();
+multiset::SubsetBuilder::build(p0);
+crate::multiset::SubsetBuilder::build(p0);
+<multiset::SubsetBuilder>::build(p0);
-----------------
rope/src/multiset.rs <multiset::CountMatcher as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::CountMatcher
+p0.clone();
+<multiset::CountMatcher as std::clone::Clone>::clone(p0);
+crate::<multiset::CountMatcher as std::clone::Clone>::clone(p0);
+<multiset::CountMatcher>::clone(p0);
-----------------
rope/src/multiset.rs <multiset::CountMatcher as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::CountMatcher
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<multiset::CountMatcher as std::fmt::Debug>::fmt(p0, p1);
+crate::<multiset::CountMatcher as std::fmt::Debug>::fmt(p0, p1);
+<multiset::CountMatcher>::fmt(p0, p1);
-----------------
rope/src/multiset.rs multiset::CountMatcher::matches
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // multiset::CountMatcher
let mut p1 = & MaybeUninit::uninit().assume_init(); // multiset::Segment
+p0.matches(p1);
+multiset::CountMatcher::matches(p0, p1);
+crate::multiset::CountMatcher::matches(p0, p1);
+<multiset::CountMatcher>::matches(p0, p1);
-----------------
rope/src/multiset.rs multiset::Subset::new
deps:{}
candidates:{}
let mut p0 = 0usize; // None+usize
+multiset::Subset::new(p0);
+crate::multiset::Subset::new(p0);
+<multiset::Subset>::new(p0);
-----------------
rope/src/multiset.rs multiset::Subset::delete_from_string
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p1 = "sample"; // None+&str
+p0.delete_from_string(&p1);
+multiset::Subset::delete_from_string(p0, &p1);
+crate::multiset::Subset::delete_from_string(p0, &p1);
+<multiset::Subset>::delete_from_string(p0, &p1);
-----------------
rope/src/multiset.rs multiset::Subset::delete_from
deps:{"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"multiset::Subset::delete_from":{"N":["std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"multiset::Subset::delete_from":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["tree::Node","rope::BaseMetric","multiset::Subset","engine::DeltaOp","diff::DiffBuilder","spans::Span","engine::Error","engine::Contents","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for *const T>","find::CaseMatching","rope::LinesMetric","engine::FullPriority","rope::RopeInfo","rope::Utf16CodeUnitsMetric","delta::InsertDelta","interval::Interval","tree::NodeBody","engine::RevId","breaks::BreaksMetric","delta::DeltaElement","multiset::CountMatcher","multiset::Segment","breaks::BreaksLeaf","diff::DiffOp","spans::SpansInfo","spans::SpansLeaf","tree::NodeVal","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for *mut T>","breaks::BreaksBaseMetric","delta::Delta"]},"spans::SpansInfo":{"T":["rope::LinesMetric","multiset::ZipSegment","interval::Interval","diff::DiffBuilder","tree::Node","multiset::Subset","spans::SpansLeaf","delta::InsertDelta","rope::Utf16CodeUnitsMetric","multiset::CountMatcher","std::clone::impls::<impl std::clone::Clone for *mut T>","breaks::BreaksMetric","spans::SpansInfo","breaks::BreaksLeaf","delta::Delta","multiset::Segment","rope::RopeInfo","engine::Error","delta::DeltaElement","find::CaseMatching","engine::RevId","spans::Span","tree::NodeBody","engine::DeltaOp","tree::NodeVal","breaks::BreaksInfo","breaks::BreaksBaseMetric","engine::FullPriority","engine::Contents","diff::DiffOp","rope::BaseMetric"]},"spans::SpansLeaf":{"T":["std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksMetric","tree::Node","engine::FullPriority","delta::InsertDelta","spans::SpansLeaf","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::RopeInfo","multiset::CountMatcher","delta::DeltaElement","tree::NodeBody","multiset::Subset","rope::BaseMetric","breaks::BreaksLeaf","engine::RevId","engine::DeltaOp","breaks::BreaksBaseMetric","tree::NodeVal","engine::Contents","rope::Utf16CodeUnitsMetric","rope::LinesMetric","interval::Interval","find::CaseMatching","multiset::Segment","engine::Error","spans::Span","spans::SpansInfo","multiset::ZipSegment","diff::DiffOp","delta::Delta","breaks::BreaksInfo","diff::DiffBuilder"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p1 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
+p0.delete_from(p1);
+multiset::Subset::delete_from(p0, p1);
+crate::multiset::Subset::delete_from(p0, p1);
+<multiset::Subset>::delete_from(p0, p1);
-----------------
rope/src/multiset.rs multiset::Subset::len_after_delete
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+p0.len_after_delete();
+multiset::Subset::len_after_delete(p0);
+crate::multiset::Subset::len_after_delete(p0);
+<multiset::Subset>::len_after_delete(p0);
-----------------
rope/src/multiset.rs multiset::Subset::count
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p1 = MaybeUninit::uninit().assume_init(); // multiset::CountMatcher
+p0.count(p1);
+multiset::Subset::count(p0, p1);
+crate::multiset::Subset::count(p0, p1);
+<multiset::Subset>::count(p0, p1);
-----------------
rope/src/multiset.rs multiset::Subset::len
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+p0.len();
+multiset::Subset::len(p0);
+crate::multiset::Subset::len(p0);
+<multiset::Subset>::len(p0);
-----------------
rope/src/multiset.rs multiset::Subset::is_empty
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+p0.is_empty();
+multiset::Subset::is_empty(p0);
+crate::multiset::Subset::is_empty(p0);
+<multiset::Subset>::is_empty(p0);
-----------------
rope/src/multiset.rs multiset::Subset::union
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p1 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+p0.union(p1);
+multiset::Subset::union(p0, p1);
+crate::multiset::Subset::union(p0, p1);
+<multiset::Subset>::union(p0, p1);
-----------------
rope/src/multiset.rs multiset::Subset::subtract
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p1 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+p0.subtract(p1);
+multiset::Subset::subtract(p0, p1);
+crate::multiset::Subset::subtract(p0, p1);
+<multiset::Subset>::subtract(p0, p1);
-----------------
rope/src/multiset.rs multiset::Subset::bitxor
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p1 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+p0.bitxor(p1);
+multiset::Subset::bitxor(p0, p1);
+crate::multiset::Subset::bitxor(p0, p1);
+<multiset::Subset>::bitxor(p0, p1);
-----------------
rope/src/multiset.rs multiset::Subset::transform
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p1 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p2 = true; // None+bool
+p0.transform(p1, p2);
+multiset::Subset::transform(p0, p1, p2);
+crate::multiset::Subset::transform(p0, p1, p2);
+<multiset::Subset>::transform(p0, p1, p2);
-----------------
rope/src/multiset.rs multiset::Subset::transform_expand
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p1 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+p0.transform_expand(p1);
+multiset::Subset::transform_expand(p0, p1);
+crate::multiset::Subset::transform_expand(p0, p1);
+<multiset::Subset>::transform_expand(p0, p1);
-----------------
rope/src/multiset.rs multiset::Subset::transform_union
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p1 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+p0.transform_union(p1);
+multiset::Subset::transform_union(p0, p1);
+crate::multiset::Subset::transform_union(p0, p1);
+<multiset::Subset>::transform_union(p0, p1);
-----------------
rope/src/multiset.rs multiset::Subset::transform_shrink
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p1 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+p0.transform_shrink(p1);
+multiset::Subset::transform_shrink(p0, p1);
+crate::multiset::Subset::transform_shrink(p0, p1);
+<multiset::Subset>::transform_shrink(p0, p1);
-----------------
rope/src/multiset.rs multiset::Subset::range_iter
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p1 = MaybeUninit::uninit().assume_init(); // multiset::CountMatcher
+p0.range_iter(p1);
+multiset::Subset::range_iter(p0, p1);
+crate::multiset::Subset::range_iter(p0, p1);
+<multiset::Subset>::range_iter(p0, p1);
-----------------
rope/src/multiset.rs multiset::Subset::complement_iter
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+p0.complement_iter();
+multiset::Subset::complement_iter(p0);
+crate::multiset::Subset::complement_iter(p0);
+<multiset::Subset>::complement_iter(p0);
-----------------
rope/src/multiset.rs multiset::Subset::zip
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p1 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+p0.zip(p1);
+multiset::Subset::zip(p0, p1);
+crate::multiset::Subset::zip(p0, p1);
+<multiset::Subset>::zip(p0, p1);
-----------------
rope/src/multiset.rs multiset::Subset::complement
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
+p0.complement();
+multiset::Subset::complement(p0);
+crate::multiset::Subset::complement(p0);
+<multiset::Subset>::complement(p0);
-----------------
rope/src/multiset.rs multiset::Subset::mapper
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p1 = MaybeUninit::uninit().assume_init(); // multiset::CountMatcher
+p0.mapper(p1);
+multiset::Subset::mapper(p0, p1);
+crate::multiset::Subset::mapper(p0, p1);
+<multiset::Subset>::mapper(p0, p1);
-----------------
rope/src/multiset.rs <multiset::Subset as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::Subset
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<multiset::Subset as std::fmt::Debug>::fmt(p0, p1);
+crate::<multiset::Subset as std::fmt::Debug>::fmt(p0, p1);
+<multiset::Subset>::fmt(p0, p1);
-----------------
rope/src/multiset.rs <multiset::RangeIter<'a> as std::iter::Iterator>::next
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // multiset::RangeIter<'a>
+p0.next();
+<multiset::RangeIter<'a> as std::iter::Iterator>::next(p0);
+crate::<multiset::RangeIter<'a> as std::iter::Iterator>::next(p0);
+<multiset::RangeIter<'a>>::next(p0);
-----------------
rope/src/multiset.rs <multiset::ZipSegment as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::ZipSegment
+p0.clone();
+<multiset::ZipSegment as std::clone::Clone>::clone(p0);
+crate::<multiset::ZipSegment as std::clone::Clone>::clone(p0);
+<multiset::ZipSegment>::clone(p0);
-----------------
rope/src/multiset.rs <multiset::ZipSegment as std::fmt::Debug>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // multiset::ZipSegment
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+<multiset::ZipSegment as std::fmt::Debug>::fmt(p0, p1);
+crate::<multiset::ZipSegment as std::fmt::Debug>::fmt(p0, p1);
+<multiset::ZipSegment>::fmt(p0, p1);
-----------------
rope/src/multiset.rs <multiset::ZipIter<'a> as std::iter::Iterator>::next
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // multiset::ZipIter<'a>
+p0.next();
+<multiset::ZipIter<'a> as std::iter::Iterator>::next(p0);
+crate::<multiset::ZipIter<'a> as std::iter::Iterator>::next(p0);
+<multiset::ZipIter<'a>>::next(p0);
-----------------
rope/src/multiset.rs multiset::Mapper::<'a>::doc_index_to_subset
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // multiset::Mapper<'a>
let mut p1 = 0usize; // None+usize
+p0.doc_index_to_subset(p1);
+multiset::Mapper::<'a>::doc_index_to_subset(p0, p1);
+crate::multiset::Mapper::<'a>::doc_index_to_subset(p0, p1);
+<multiset::Mapper<'a>>::doc_index_to_subset(p0, p1);
-----------------
rope/src/rope.rs rope::<impl tree::Leaf for std::string::String>::len
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
+p0.len();
+rope::<impl tree::Leaf for std::string::String>::len(p0);
+crate::rope::<impl tree::Leaf for std::string::String>::len(p0);
+<std::string::String>::len(p0);
-----------------
rope/src/rope.rs rope::<impl tree::Leaf for std::string::String>::is_ok_child
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
+p0.is_ok_child();
+rope::<impl tree::Leaf for std::string::String>::is_ok_child(p0);
+crate::rope::<impl tree::Leaf for std::string::String>::is_ok_child(p0);
+<std::string::String>::is_ok_child(p0);
-----------------
rope/src/rope.rs rope::<impl tree::Leaf for std::string::String>::push_maybe_split
deps:{}
candidates:{}
let mut p0 = &mut std::string::String::new(); // None+std::string::String
let mut p1 = & std::string::String::new(); // None+std::string::String
let mut p2 = MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.push_maybe_split(p1, p2);
+rope::<impl tree::Leaf for std::string::String>::push_maybe_split(p0, p1, p2);
+crate::rope::<impl tree::Leaf for std::string::String>::push_maybe_split(p0, p1, p2);
+<std::string::String>::push_maybe_split(p0, p1, p2);
-----------------
rope/src/rope.rs <rope::RopeInfo as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // rope::RopeInfo
+p0.clone();
+<rope::RopeInfo as std::clone::Clone>::clone(p0);
+crate::<rope::RopeInfo as std::clone::Clone>::clone(p0);
+<rope::RopeInfo>::clone(p0);
-----------------
rope/src/rope.rs <rope::RopeInfo as tree::NodeInfo>::accumulate
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // rope::RopeInfo
let mut p1 = & MaybeUninit::uninit().assume_init(); // rope::RopeInfo
+p0.accumulate(p1);
+<rope::RopeInfo as tree::NodeInfo>::accumulate(p0, p1);
+crate::<rope::RopeInfo as tree::NodeInfo>::accumulate(p0, p1);
+<rope::RopeInfo>::accumulate(p0, p1);
-----------------
rope/src/rope.rs <rope::RopeInfo as tree::NodeInfo>::compute_info
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
+<rope::RopeInfo as tree::NodeInfo>::compute_info(p0);
+crate::<rope::RopeInfo as tree::NodeInfo>::compute_info(p0);
+<rope::RopeInfo>::compute_info(p0);
-----------------
rope/src/rope.rs <rope::RopeInfo as tree::NodeInfo>::identity
deps:{}
candidates:{}
+<rope::RopeInfo as tree::NodeInfo>::identity();
+crate::<rope::RopeInfo as tree::NodeInfo>::identity();
+<rope::RopeInfo>::identity();
-----------------
rope/src/rope.rs <rope::BaseMetric as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // rope::BaseMetric
+p0.clone();
+<rope::BaseMetric as std::clone::Clone>::clone(p0);
+crate::<rope::BaseMetric as std::clone::Clone>::clone(p0);
+<rope::BaseMetric>::clone(p0);
-----------------
rope/src/rope.rs <rope::BaseMetric as tree::Metric<rope::RopeInfo>>::measure
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // rope::RopeInfo
let mut p1 = 0usize; // None+usize
+<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::measure(p0, p1);
+crate::<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::measure(p0, p1);
+<rope::BaseMetric>::measure(p0, p1);
-----------------
rope/src/rope.rs <rope::BaseMetric as tree::Metric<rope::RopeInfo>>::to_base_units
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = 0usize; // None+usize
+<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::to_base_units(p0, p1);
+crate::<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::to_base_units(p0, p1);
+<rope::BaseMetric>::to_base_units(p0, p1);
-----------------
rope/src/rope.rs <rope::BaseMetric as tree::Metric<rope::RopeInfo>>::from_base_units
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = 0usize; // None+usize
+<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::from_base_units(p0, p1);
+crate::<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::from_base_units(p0, p1);
+<rope::BaseMetric>::from_base_units(p0, p1);
-----------------
rope/src/rope.rs <rope::BaseMetric as tree::Metric<rope::RopeInfo>>::is_boundary
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = 0usize; // None+usize
+<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::is_boundary(p0, p1);
+crate::<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::is_boundary(p0, p1);
+<rope::BaseMetric>::is_boundary(p0, p1);
-----------------
rope/src/rope.rs <rope::BaseMetric as tree::Metric<rope::RopeInfo>>::prev
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = 0usize; // None+usize
+<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::prev(p0, p1);
+crate::<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::prev(p0, p1);
+<rope::BaseMetric>::prev(p0, p1);
-----------------
rope/src/rope.rs <rope::BaseMetric as tree::Metric<rope::RopeInfo>>::next
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = 0usize; // None+usize
+<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::next(p0, p1);
+crate::<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::next(p0, p1);
+<rope::BaseMetric>::next(p0, p1);
-----------------
rope/src/rope.rs <rope::BaseMetric as tree::Metric<rope::RopeInfo>>::can_fragment
deps:{}
candidates:{}
+<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::can_fragment();
+crate::<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::can_fragment();
+<rope::BaseMetric>::can_fragment();
-----------------
rope/src/rope.rs <rope::LinesMetric as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // rope::LinesMetric
+p0.clone();
+<rope::LinesMetric as std::clone::Clone>::clone(p0);
+crate::<rope::LinesMetric as std::clone::Clone>::clone(p0);
+<rope::LinesMetric>::clone(p0);
-----------------
rope/src/rope.rs <rope::LinesMetric as tree::Metric<rope::RopeInfo>>::measure
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // rope::RopeInfo
let mut p1 = 0usize; // None+usize
+<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::measure(p0, p1);
+crate::<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::measure(p0, p1);
+<rope::LinesMetric>::measure(p0, p1);
-----------------
rope/src/rope.rs <rope::LinesMetric as tree::Metric<rope::RopeInfo>>::is_boundary
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = 0usize; // None+usize
+<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::is_boundary(p0, p1);
+crate::<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::is_boundary(p0, p1);
+<rope::LinesMetric>::is_boundary(p0, p1);
-----------------
rope/src/rope.rs <rope::LinesMetric as tree::Metric<rope::RopeInfo>>::to_base_units
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = 0usize; // None+usize
+<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::to_base_units(p0, p1);
+crate::<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::to_base_units(p0, p1);
+<rope::LinesMetric>::to_base_units(p0, p1);
-----------------
rope/src/rope.rs <rope::LinesMetric as tree::Metric<rope::RopeInfo>>::from_base_units
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = 0usize; // None+usize
+<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::from_base_units(p0, p1);
+crate::<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::from_base_units(p0, p1);
+<rope::LinesMetric>::from_base_units(p0, p1);
-----------------
rope/src/rope.rs <rope::LinesMetric as tree::Metric<rope::RopeInfo>>::prev
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = 0usize; // None+usize
+<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::prev(p0, p1);
+crate::<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::prev(p0, p1);
+<rope::LinesMetric>::prev(p0, p1);
-----------------
rope/src/rope.rs <rope::LinesMetric as tree::Metric<rope::RopeInfo>>::next
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = 0usize; // None+usize
+<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::next(p0, p1);
+crate::<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::next(p0, p1);
+<rope::LinesMetric>::next(p0, p1);
-----------------
rope/src/rope.rs <rope::LinesMetric as tree::Metric<rope::RopeInfo>>::can_fragment
deps:{}
candidates:{}
+<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::can_fragment();
+crate::<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::can_fragment();
+<rope::LinesMetric>::can_fragment();
-----------------
rope/src/rope.rs <rope::Utf16CodeUnitsMetric as std::clone::Clone>::clone
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // rope::Utf16CodeUnitsMetric
+p0.clone();
+<rope::Utf16CodeUnitsMetric as std::clone::Clone>::clone(p0);
+crate::<rope::Utf16CodeUnitsMetric as std::clone::Clone>::clone(p0);
+<rope::Utf16CodeUnitsMetric>::clone(p0);
-----------------
rope/src/rope.rs <rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::measure
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // rope::RopeInfo
let mut p1 = 0usize; // None+usize
+<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::measure(p0, p1);
+crate::<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::measure(p0, p1);
+<rope::Utf16CodeUnitsMetric>::measure(p0, p1);
-----------------
rope/src/rope.rs <rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::is_boundary
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = 0usize; // None+usize
+<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::is_boundary(p0, p1);
+crate::<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::is_boundary(p0, p1);
+<rope::Utf16CodeUnitsMetric>::is_boundary(p0, p1);
-----------------
rope/src/rope.rs <rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::to_base_units
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = 0usize; // None+usize
+<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::to_base_units(p0, p1);
+crate::<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::to_base_units(p0, p1);
+<rope::Utf16CodeUnitsMetric>::to_base_units(p0, p1);
-----------------
rope/src/rope.rs <rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::from_base_units
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = 0usize; // None+usize
+<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::from_base_units(p0, p1);
+crate::<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::from_base_units(p0, p1);
+<rope::Utf16CodeUnitsMetric>::from_base_units(p0, p1);
-----------------
rope/src/rope.rs <rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::prev
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = 0usize; // None+usize
+<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::prev(p0, p1);
+crate::<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::prev(p0, p1);
+<rope::Utf16CodeUnitsMetric>::prev(p0, p1);
-----------------
rope/src/rope.rs <rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::next
deps:{}
candidates:{}
let mut p0 = & std::string::String::new(); // None+std::string::String
let mut p1 = 0usize; // None+usize
+<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::next(p0, p1);
+crate::<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::next(p0, p1);
+<rope::Utf16CodeUnitsMetric>::next(p0, p1);
-----------------
rope/src/rope.rs <rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::can_fragment
deps:{}
candidates:{}
+<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::can_fragment();
+crate::<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::can_fragment();
+<rope::Utf16CodeUnitsMetric>::can_fragment();
-----------------
rope/src/rope.rs rope::<impl std::str::FromStr for tree::Node<rope::RopeInfo>>::from_str
deps:{}
candidates:{}
let mut p0 = "sample"; // None+&str
+rope::<impl std::str::FromStr for tree::Node<rope::RopeInfo>>::from_str(&p0);
+crate::rope::<impl std::str::FromStr for tree::Node<rope::RopeInfo>>::from_str(&p0);
+<tree::Node<rope::RopeInfo>>::from_str(&p0);
-----------------
rope/src/rope.rs rope::<impl tree::Node<rope::RopeInfo>>::edit_str
deps:{"<T as interval::IntervalBounds>":{"T":["std::convert::Into","std::marker::Sized"]},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"rope::<impl tree::Node<rope::RopeInfo>>::edit_str":{"T":["std::marker::Sized","interval::IntervalBounds"]},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]}}
candidates:{"<T as interval::IntervalBounds>":{"T":["std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError","<T as std::convert::Into<U>>","std::process::ExitStatusError"]},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"rope::<impl tree::Node<rope::RopeInfo>>::edit_str":{"T":["std::ops::RangeFull","<T as interval::IntervalBounds>","std::ops::RangeFrom"]},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
let mut p2 = "sample"; // None+&str
+p0.edit_str(p1, &p2);
+rope::<impl tree::Node<rope::RopeInfo>>::edit_str(p0, p1, &p2);
+crate::rope::<impl tree::Node<rope::RopeInfo>>::edit_str(p0, p1, &p2);
+<tree::Node<rope::RopeInfo>>::edit_str(p0, p1, &p2);
-----------------
rope/src/rope.rs rope::<impl tree::Node<rope::RopeInfo>>::slice
deps:{"<T as interval::IntervalBounds>":{"T":["std::convert::Into","std::marker::Sized"]},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"rope::<impl tree::Node<rope::RopeInfo>>::slice":{"T":["std::marker::Sized","interval::IntervalBounds"]},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]}}
candidates:{"<T as interval::IntervalBounds>":{"T":["<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError","std::sync::mpmc::select::Selected"]},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"rope::<impl tree::Node<rope::RopeInfo>>::slice":{"T":["<T as interval::IntervalBounds>","std::ops::RangeFull","std::ops::RangeFrom"]},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.slice(p1);
+rope::<impl tree::Node<rope::RopeInfo>>::slice(p0, p1);
+crate::rope::<impl tree::Node<rope::RopeInfo>>::slice(p0, p1);
+<tree::Node<rope::RopeInfo>>::slice(p0, p1);
-----------------
rope/src/rope.rs rope::<impl tree::Node<rope::RopeInfo>>::is_codepoint_boundary
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = 0usize; // None+usize
+p0.is_codepoint_boundary(p1);
+rope::<impl tree::Node<rope::RopeInfo>>::is_codepoint_boundary(p0, p1);
+crate::rope::<impl tree::Node<rope::RopeInfo>>::is_codepoint_boundary(p0, p1);
+<tree::Node<rope::RopeInfo>>::is_codepoint_boundary(p0, p1);
-----------------
rope/src/rope.rs rope::<impl tree::Node<rope::RopeInfo>>::prev_codepoint_offset
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = 0usize; // None+usize
+p0.prev_codepoint_offset(p1);
+rope::<impl tree::Node<rope::RopeInfo>>::prev_codepoint_offset(p0, p1);
+crate::rope::<impl tree::Node<rope::RopeInfo>>::prev_codepoint_offset(p0, p1);
+<tree::Node<rope::RopeInfo>>::prev_codepoint_offset(p0, p1);
-----------------
rope/src/rope.rs rope::<impl tree::Node<rope::RopeInfo>>::next_codepoint_offset
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = 0usize; // None+usize
+p0.next_codepoint_offset(p1);
+rope::<impl tree::Node<rope::RopeInfo>>::next_codepoint_offset(p0, p1);
+crate::rope::<impl tree::Node<rope::RopeInfo>>::next_codepoint_offset(p0, p1);
+<tree::Node<rope::RopeInfo>>::next_codepoint_offset(p0, p1);
-----------------
rope/src/rope.rs rope::<impl tree::Node<rope::RopeInfo>>::at_or_next_codepoint_boundary
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = 0usize; // None+usize
+p0.at_or_next_codepoint_boundary(p1);
+rope::<impl tree::Node<rope::RopeInfo>>::at_or_next_codepoint_boundary(p0, p1);
+crate::rope::<impl tree::Node<rope::RopeInfo>>::at_or_next_codepoint_boundary(p0, p1);
+<tree::Node<rope::RopeInfo>>::at_or_next_codepoint_boundary(p0, p1);
-----------------
rope/src/rope.rs rope::<impl tree::Node<rope::RopeInfo>>::at_or_prev_codepoint_boundary
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = 0usize; // None+usize
+p0.at_or_prev_codepoint_boundary(p1);
+rope::<impl tree::Node<rope::RopeInfo>>::at_or_prev_codepoint_boundary(p0, p1);
+crate::rope::<impl tree::Node<rope::RopeInfo>>::at_or_prev_codepoint_boundary(p0, p1);
+<tree::Node<rope::RopeInfo>>::at_or_prev_codepoint_boundary(p0, p1);
-----------------
rope/src/rope.rs rope::<impl tree::Node<rope::RopeInfo>>::prev_grapheme_offset
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = 0usize; // None+usize
+p0.prev_grapheme_offset(p1);
+rope::<impl tree::Node<rope::RopeInfo>>::prev_grapheme_offset(p0, p1);
+crate::rope::<impl tree::Node<rope::RopeInfo>>::prev_grapheme_offset(p0, p1);
+<tree::Node<rope::RopeInfo>>::prev_grapheme_offset(p0, p1);
-----------------
rope/src/rope.rs rope::<impl tree::Node<rope::RopeInfo>>::next_grapheme_offset
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = 0usize; // None+usize
+p0.next_grapheme_offset(p1);
+rope::<impl tree::Node<rope::RopeInfo>>::next_grapheme_offset(p0, p1);
+crate::rope::<impl tree::Node<rope::RopeInfo>>::next_grapheme_offset(p0, p1);
+<tree::Node<rope::RopeInfo>>::next_grapheme_offset(p0, p1);
-----------------
rope/src/rope.rs rope::<impl tree::Node<rope::RopeInfo>>::line_of_offset
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = 0usize; // None+usize
+p0.line_of_offset(p1);
+rope::<impl tree::Node<rope::RopeInfo>>::line_of_offset(p0, p1);
+crate::rope::<impl tree::Node<rope::RopeInfo>>::line_of_offset(p0, p1);
+<tree::Node<rope::RopeInfo>>::line_of_offset(p0, p1);
-----------------
rope/src/rope.rs rope::<impl tree::Node<rope::RopeInfo>>::offset_of_line
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = 0usize; // None+usize
+p0.offset_of_line(p1);
+rope::<impl tree::Node<rope::RopeInfo>>::offset_of_line(p0, p1);
+crate::rope::<impl tree::Node<rope::RopeInfo>>::offset_of_line(p0, p1);
+<tree::Node<rope::RopeInfo>>::offset_of_line(p0, p1);
-----------------
rope/src/rope.rs rope::<impl tree::Node<rope::RopeInfo>>::iter_chunks
deps:{"<T as interval::IntervalBounds>":{"T":["std::convert::Into","std::marker::Sized"]},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"rope::<impl tree::Node<rope::RopeInfo>>::iter_chunks":{"T":["std::marker::Sized","interval::IntervalBounds"]},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]}}
candidates:{"<T as interval::IntervalBounds>":{"T":["std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError","<T as std::convert::Into<U>>","std::sync::mpmc::select::Selected"]},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"rope::<impl tree::Node<rope::RopeInfo>>::iter_chunks":{"T":["<T as interval::IntervalBounds>","std::ops::RangeFull","std::ops::RangeFrom"]},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.iter_chunks(p1);
+rope::<impl tree::Node<rope::RopeInfo>>::iter_chunks(p0, p1);
+crate::rope::<impl tree::Node<rope::RopeInfo>>::iter_chunks(p0, p1);
+<tree::Node<rope::RopeInfo>>::iter_chunks(p0, p1);
-----------------
rope/src/rope.rs rope::<impl tree::Node<rope::RopeInfo>>::lines_raw
deps:{"<T as interval::IntervalBounds>":{"T":["std::convert::Into","std::marker::Sized"]},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"rope::<impl tree::Node<rope::RopeInfo>>::lines_raw":{"T":["interval::IntervalBounds","std::marker::Sized"]},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]}}
candidates:{"<T as interval::IntervalBounds>":{"T":["std::process::ExitStatusError","<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected"]},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"rope::<impl tree::Node<rope::RopeInfo>>::lines_raw":{"T":["std::ops::RangeFull","std::ops::RangeFrom","<T as interval::IntervalBounds>"]},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.lines_raw(p1);
+rope::<impl tree::Node<rope::RopeInfo>>::lines_raw(p0, p1);
+crate::rope::<impl tree::Node<rope::RopeInfo>>::lines_raw(p0, p1);
+<tree::Node<rope::RopeInfo>>::lines_raw(p0, p1);
-----------------
rope/src/rope.rs rope::<impl tree::Node<rope::RopeInfo>>::lines
deps:{"<T as interval::IntervalBounds>":{"T":["std::marker::Sized","std::convert::Into"]},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"rope::<impl tree::Node<rope::RopeInfo>>::lines":{"T":["interval::IntervalBounds","std::marker::Sized"]},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]}}
candidates:{"<T as interval::IntervalBounds>":{"T":["std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected","<T as std::convert::Into<U>>"]},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"rope::<impl tree::Node<rope::RopeInfo>>::lines":{"T":["<T as interval::IntervalBounds>","std::ops::RangeFrom","std::ops::RangeFull"]},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.lines(p1);
+rope::<impl tree::Node<rope::RopeInfo>>::lines(p0, p1);
+crate::rope::<impl tree::Node<rope::RopeInfo>>::lines(p0, p1);
+<tree::Node<rope::RopeInfo>>::lines(p0, p1);
-----------------
rope/src/rope.rs rope::<impl tree::Node<rope::RopeInfo>>::byte_at
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = 0usize; // None+usize
+p0.byte_at(p1);
+rope::<impl tree::Node<rope::RopeInfo>>::byte_at(p0, p1);
+crate::rope::<impl tree::Node<rope::RopeInfo>>::byte_at(p0, p1);
+<tree::Node<rope::RopeInfo>>::byte_at(p0, p1);
-----------------
rope/src/rope.rs rope::<impl tree::Node<rope::RopeInfo>>::slice_to_cow
deps:{"<T as interval::IntervalBounds>":{"T":["std::convert::Into","std::marker::Sized"]},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"rope::<impl tree::Node<rope::RopeInfo>>::slice_to_cow":{"T":["interval::IntervalBounds","std::marker::Sized"]},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]}}
candidates:{"<T as interval::IntervalBounds>":{"T":["std::sync::mpmc::select::Selected","std::sys::unix::process::process_inner::ExitStatusError","<T as std::convert::Into<U>>","std::process::ExitStatusError"]},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"rope::<impl tree::Node<rope::RopeInfo>>::slice_to_cow":{"T":["<T as interval::IntervalBounds>","std::ops::RangeFrom","std::ops::RangeFull"]},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.slice_to_cow(p1);
+rope::<impl tree::Node<rope::RopeInfo>>::slice_to_cow(p0, p1);
+crate::rope::<impl tree::Node<rope::RopeInfo>>::slice_to_cow(p0, p1);
+<tree::Node<rope::RopeInfo>>::slice_to_cow(p0, p1);
-----------------
rope/src/rope.rs <rope::ChunkIter<'a> as std::iter::Iterator>::next
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // rope::ChunkIter<'a>
+p0.next();
+<rope::ChunkIter<'a> as std::iter::Iterator>::next(p0);
+crate::<rope::ChunkIter<'a> as std::iter::Iterator>::next(p0);
+<rope::ChunkIter<'a>>::next(p0);
-----------------
rope/src/rope.rs rope::<impl tree::TreeBuilder<rope::RopeInfo>>::push_str
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::TreeBuilder<rope::RopeInfo>
let mut p1 = "sample"; // None+&str
+p0.push_str(&p1);
+rope::<impl tree::TreeBuilder<rope::RopeInfo>>::push_str(p0, &p1);
+crate::rope::<impl tree::TreeBuilder<rope::RopeInfo>>::push_str(p0, &p1);
+<tree::TreeBuilder<rope::RopeInfo>>::push_str(p0, &p1);
-----------------
rope/src/rope.rs rope::<impl std::convert::From<T> for tree::Node<rope::RopeInfo>>::from
deps:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"rope::<impl std::convert::From<T> for tree::Node<rope::RopeInfo>>::from":{"T":["std::convert::AsRef","std::marker::Sized"]}}
candidates:{"<&T as std::convert::AsRef<U>>":{},"<&mut T as std::convert::AsRef<U>>":{},"rope::<impl std::convert::From<T> for tree::Node<rope::RopeInfo>>::from":{"T":["std::slice::Iter<'_, T>","std::boxed::Box<T, A>","std::ffi::CString","std::rc::Rc<T>","<&mut T as std::convert::AsRef<U>>","std::vec::IntoIter<T, A>","std::sync::Arc<T>","std::vec::Drain<'a, T, A>","std::borrow::Cow<'_, std::ffi::OsStr>","core::num::dec2flt::common::AsciiStr<'a>","std::ffi::CStr","std::slice::IterMut<'_, T>","std::borrow::Cow<'_, T>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // T
+rope::<impl std::convert::From<T> for tree::Node<rope::RopeInfo>>::from(p0);
+crate::rope::<impl std::convert::From<T> for tree::Node<rope::RopeInfo>>::from(p0);
+<tree::Node<rope::RopeInfo>>::from(p0);
-----------------
rope/src/rope.rs rope::<impl std::convert::From<tree::Node<rope::RopeInfo>> for std::string::String>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
+rope::<impl std::convert::From<tree::Node<rope::RopeInfo>> for std::string::String>::from(p0);
+crate::rope::<impl std::convert::From<tree::Node<rope::RopeInfo>> for std::string::String>::from(p0);
+<std::string::String>::from(p0);
-----------------
rope/src/rope.rs rope::<impl std::convert::From<&'a tree::Node<rope::RopeInfo>> for std::string::String>::from
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
+rope::<impl std::convert::From<&'a tree::Node<rope::RopeInfo>> for std::string::String>::from(p0);
+crate::rope::<impl std::convert::From<&'a tree::Node<rope::RopeInfo>> for std::string::String>::from(p0);
+<std::string::String>::from(p0);
-----------------
rope/src/rope.rs rope::<impl std::fmt::Display for tree::Node<rope::RopeInfo>>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{}", p0);
+p0.fmt(p1);
+rope::<impl std::fmt::Display for tree::Node<rope::RopeInfo>>::fmt(p0, p1);
+crate::rope::<impl std::fmt::Display for tree::Node<rope::RopeInfo>>::fmt(p0, p1);
+<tree::Node<rope::RopeInfo>>::fmt(p0, p1);
-----------------
rope/src/rope.rs rope::<impl std::fmt::Debug for tree::Node<rope::RopeInfo>>::fmt
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+rope::<impl std::fmt::Debug for tree::Node<rope::RopeInfo>>::fmt(p0, p1);
+crate::rope::<impl std::fmt::Debug for tree::Node<rope::RopeInfo>>::fmt(p0, p1);
+<tree::Node<rope::RopeInfo>>::fmt(p0, p1);
-----------------
rope/src/rope.rs rope::<impl std::ops::Add for tree::Node<rope::RopeInfo>>::add
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
+p0.add(p1);
+rope::<impl std::ops::Add for tree::Node<rope::RopeInfo>>::add(p0, p1);
+crate::rope::<impl std::ops::Add for tree::Node<rope::RopeInfo>>::add(p0, p1);
+<tree::Node<rope::RopeInfo>>::add(p0, p1);
-----------------
rope/src/rope.rs rope::<impl tree::Cursor<'a, rope::RopeInfo>>::prev_codepoint
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, rope::RopeInfo>
+p0.prev_codepoint();
+rope::<impl tree::Cursor<'a, rope::RopeInfo>>::prev_codepoint(p0);
+crate::rope::<impl tree::Cursor<'a, rope::RopeInfo>>::prev_codepoint(p0);
+<tree::Cursor<'a, rope::RopeInfo>>::prev_codepoint(p0);
-----------------
rope/src/rope.rs rope::<impl tree::Cursor<'a, rope::RopeInfo>>::next_codepoint
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, rope::RopeInfo>
+p0.next_codepoint();
+rope::<impl tree::Cursor<'a, rope::RopeInfo>>::next_codepoint(p0);
+crate::rope::<impl tree::Cursor<'a, rope::RopeInfo>>::next_codepoint(p0);
+<tree::Cursor<'a, rope::RopeInfo>>::next_codepoint(p0);
-----------------
rope/src/rope.rs rope::<impl tree::Cursor<'a, rope::RopeInfo>>::peek_next_codepoint
'a
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, rope::RopeInfo>
+p0.peek_next_codepoint();
+rope::<impl tree::Cursor<'a, rope::RopeInfo>>::peek_next_codepoint(p0);
+crate::rope::<impl tree::Cursor<'a, rope::RopeInfo>>::peek_next_codepoint(p0);
+<tree::Cursor<'a, rope::RopeInfo>>::peek_next_codepoint(p0);
-----------------
rope/src/rope.rs rope::<impl tree::Cursor<'a, rope::RopeInfo>>::next_grapheme
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, rope::RopeInfo>
+p0.next_grapheme();
+rope::<impl tree::Cursor<'a, rope::RopeInfo>>::next_grapheme(p0);
+crate::rope::<impl tree::Cursor<'a, rope::RopeInfo>>::next_grapheme(p0);
+<tree::Cursor<'a, rope::RopeInfo>>::next_grapheme(p0);
-----------------
rope/src/rope.rs rope::<impl tree::Cursor<'a, rope::RopeInfo>>::prev_grapheme
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, rope::RopeInfo>
+p0.prev_grapheme();
+rope::<impl tree::Cursor<'a, rope::RopeInfo>>::prev_grapheme(p0);
+crate::rope::<impl tree::Cursor<'a, rope::RopeInfo>>::prev_grapheme(p0);
+<tree::Cursor<'a, rope::RopeInfo>>::prev_grapheme(p0);
-----------------
rope/src/rope.rs <rope::LinesRaw<'a> as std::iter::Iterator>::next
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // rope::LinesRaw<'a>
+p0.next();
+<rope::LinesRaw<'a> as std::iter::Iterator>::next(p0);
+crate::<rope::LinesRaw<'a> as std::iter::Iterator>::next(p0);
+<rope::LinesRaw<'a>>::next(p0);
-----------------
rope/src/rope.rs <rope::Lines<'a> as std::iter::Iterator>::next
'a
deps:{}
candidates:{}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // rope::Lines<'a>
+p0.next();
+<rope::Lines<'a> as std::iter::Iterator>::next(p0);
+crate::<rope::Lines<'a> as std::iter::Iterator>::next(p0);
+<rope::Lines<'a>>::next(p0);
-----------------
rope/src/serde_impls.rs serde_impls::<impl serde::Serialize for tree::Node<rope::RopeInfo>>::serialize
deps:{"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"serde_impls::<impl serde::Serialize for tree::Node<rope::RopeInfo>>::serialize":{"S":["serde::Serializer","std::marker::Sized"]}}
candidates:{"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"serde_impls::<impl serde::Serialize for tree::Node<rope::RopeInfo>>::serialize":{"S":["serde::private::ser::TaggedSerializer<S>","serde::private::ser::content::ContentSerializer<E>","serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>","serde::private::ser::FlatMapSerializer<'a, M>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<rope::RopeInfo>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.serialize(p1);
+serde_impls::<impl serde::Serialize for tree::Node<rope::RopeInfo>>::serialize(p0, p1);
+crate::serde_impls::<impl serde::Serialize for tree::Node<rope::RopeInfo>>::serialize(p0, p1);
+<tree::Node<rope::RopeInfo>>::serialize(p0, p1);
-----------------
rope/src/serde_impls.rs serde_impls::<impl serde::Deserialize<'de> for tree::Node<rope::RopeInfo>>::deserialize
'de
deps:{"serde_impls::<impl serde::Deserialize<'de> for tree::Node<rope::RopeInfo>>::deserialize":{"D":["serde::Deserializer","std::marker::Sized"]}}
candidates:{"serde_impls::<impl serde::Deserialize<'de> for tree::Node<rope::RopeInfo>>::deserialize":{"D":["serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::StrDeserializer<'a, E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::CharDeserializer<E>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::SeqDeserializer<I, E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::U128Deserializer<E>","serde::de::value::StringDeserializer<E>","serde::de::value::U16Deserializer<E>","serde::de::value::I32Deserializer<E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::I16Deserializer<E>","serde::de::value::F64Deserializer<E>","serde::de::value::U32Deserializer<E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::BoolDeserializer<E>","serde::de::value::PairDeserializer<A, B, E>","serde::de::value::U64Deserializer<E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::I64Deserializer<E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::F32Deserializer<E>","serde::de::value::UsizeDeserializer<E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::I8Deserializer<E>","serde::de::value::U8Deserializer<E>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::UnitDeserializer<E>","serde::de::value::I128Deserializer<E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::MapDeserializer<'de, I, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // D
+serde_impls::<impl serde::Deserialize<'de> for tree::Node<rope::RopeInfo>>::deserialize(p0);
+crate::serde_impls::<impl serde::Deserialize<'de> for tree::Node<rope::RopeInfo>>::deserialize(p0);
+<tree::Node<rope::RopeInfo>>::deserialize(p0);
-----------------
rope/src/serde_impls.rs <serde_impls::RopeVisitor as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // serde_impls::RopeVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<serde_impls::RopeVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<serde_impls::RopeVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+<serde_impls::RopeVisitor>::expecting(p0, p1);
-----------------
rope/src/serde_impls.rs <serde_impls::RopeVisitor as serde::de::Visitor<'de>>::visit_str
'de
deps:{"<serde_impls::RopeVisitor as serde::de::Visitor<'de>>::visit_str":{"E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<serde_impls::RopeVisitor as serde::de::Visitor<'de>>::visit_str":{"E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // serde_impls::RopeVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<serde_impls::RopeVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<serde_impls::RopeVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<serde_impls::RopeVisitor>::visit_str(p0, &p1);
-----------------
rope/src/serde_impls.rs serde_impls::<impl serde::Serialize for delta::DeltaElement<rope::RopeInfo>>::serialize
deps:{"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"serde_impls::<impl serde::Serialize for delta::DeltaElement<rope::RopeInfo>>::serialize":{"S":["std::marker::Sized","serde::Serializer"]}}
candidates:{"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"serde_impls::<impl serde::Serialize for delta::DeltaElement<rope::RopeInfo>>::serialize":{"S":["serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>","serde::private::ser::TaggedSerializer<S>","serde::private::ser::content::ContentSerializer<E>","serde::private::ser::FlatMapSerializer<'a, M>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::DeltaElement<rope::RopeInfo>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.serialize(p1);
+serde_impls::<impl serde::Serialize for delta::DeltaElement<rope::RopeInfo>>::serialize(p0, p1);
+crate::serde_impls::<impl serde::Serialize for delta::DeltaElement<rope::RopeInfo>>::serialize(p0, p1);
+<delta::DeltaElement<rope::RopeInfo>>::serialize(p0, p1);
-----------------
rope/src/serde_impls.rs serde_impls::<impl serde::Serialize for delta::Delta<rope::RopeInfo>>::serialize
deps:{"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"serde_impls::<impl serde::Serialize for delta::Delta<rope::RopeInfo>>::serialize":{"S":["std::marker::Sized","serde::Serializer"]}}
candidates:{"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"serde_impls::<impl serde::Serialize for delta::Delta<rope::RopeInfo>>::serialize":{"S":["serde::private::ser::TaggedSerializer<S>","serde::private::ser::content::ContentSerializer<E>","serde::private::ser::FlatMapSerializer<'a, M>","serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // delta::Delta<rope::RopeInfo>
let mut p1 = MaybeUninit::uninit().assume_init(); // S
+p0.serialize(p1);
+serde_impls::<impl serde::Serialize for delta::Delta<rope::RopeInfo>>::serialize(p0, p1);
+crate::serde_impls::<impl serde::Serialize for delta::Delta<rope::RopeInfo>>::serialize(p0, p1);
+<delta::Delta<rope::RopeInfo>>::serialize(p0, p1);
-----------------
rope/src/serde_impls.rs serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize
'de
deps:{"serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize":{"D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize":{"D":["serde::de::value::U128Deserializer<E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::I16Deserializer<E>","serde::de::value::U16Deserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::PairDeserializer<A, B, E>","serde::de::value::StringDeserializer<E>","serde::de::value::U8Deserializer<E>","serde::de::value::StrDeserializer<'a, E>","serde::private::de::BytesDeserializer<'a, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::U32Deserializer<E>","serde::private::de::StrDeserializer<'a, E>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::BoolDeserializer<E>","serde::de::value::UnitDeserializer<E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::I32Deserializer<E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::CharDeserializer<E>","serde::de::value::I128Deserializer<E>","serde::de::value::UsizeDeserializer<E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::SeqDeserializer<I, E>","serde::de::value::F64Deserializer<E>","serde::de::value::I64Deserializer<E>","serde::de::value::U64Deserializer<E>","serde::de::value::IsizeDeserializer<E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::I8Deserializer<E>","serde::de::value::F32Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // D
+serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize(p0);
+crate::serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize(p0);
+<delta::Delta<rope::RopeInfo>>::deserialize(p0);
-----------------
rope/src/serde_impls.rs serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_SERIALIZE_FOR_RopeDeltaElement_::<impl serde::Serialize for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::serialize
deps:{"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_SERIALIZE_FOR_RopeDeltaElement_::<impl serde::Serialize for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::serialize":{"__S":["serde::Serializer","std::marker::Sized"]}}
candidates:{"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_SERIALIZE_FOR_RopeDeltaElement_::<impl serde::Serialize for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::serialize":{"__S":["serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>","serde::private::ser::FlatMapSerializer<'a, M>","serde::private::ser::content::ContentSerializer<E>","serde::private::ser::TaggedSerializer<S>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_SERIALIZE_FOR_RopeDeltaElement_::<impl serde::Serialize for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::serialize(p0, p1);
+crate::serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_SERIALIZE_FOR_RopeDeltaElement_::<impl serde::Serialize for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::serialize(p0, p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::serialize(p0, p1);
-----------------
rope/src/serde_impls.rs serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize
'de
deps:{"serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize":{"__D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize":{"__D":["serde::de::value::I32Deserializer<E>","serde::de::value::F64Deserializer<E>","serde::de::value::U64Deserializer<E>","serde::de::value::U32Deserializer<E>","serde::de::value::U16Deserializer<E>","serde::de::value::StringDeserializer<E>","serde::de::value::StrDeserializer<'a, E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::private::de::BytesDeserializer<'a, E>","serde::private::de::content::MapDeserializer<'de, E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::BoolDeserializer<E>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::I16Deserializer<E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::I128Deserializer<E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::UsizeDeserializer<E>","serde::de::value::PairDeserializer<A, B, E>","serde::de::value::CharDeserializer<E>","serde::de::value::I8Deserializer<E>","serde::de::value::U8Deserializer<E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::I64Deserializer<E>","serde::de::value::UnitDeserializer<E>","serde::de::value::F32Deserializer<E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::U128Deserializer<E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::SeqDeserializer<I, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize(p0);
+crate::serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize(p0);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize(p0);
-----------------
rope/src/serde_impls.rs <serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
rope/src/serde_impls.rs <serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde::de::Error","std::marker::Sized"]}}
candidates:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
rope/src/serde_impls.rs <serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str
'de
deps:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
rope/src/serde_impls.rs <serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
rope/src/serde_impls.rs <serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Field as serde::Deserialize<'de>>::deserialize
'de
deps:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::StringDeserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::I64Deserializer<E>","serde::de::value::U32Deserializer<E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::F32Deserializer<E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::I32Deserializer<E>","serde::de::value::U8Deserializer<E>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::F64Deserializer<E>","serde::de::value::I128Deserializer<E>","serde::de::value::BoolDeserializer<E>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::I16Deserializer<E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::CharDeserializer<E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::U16Deserializer<E>","serde::de::value::UnitDeserializer<E>","serde::de::value::U64Deserializer<E>","serde::de::value::UsizeDeserializer<E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::PairDeserializer<A, B, E>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::I8Deserializer<E>","serde::de::value::U128Deserializer<E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::de::value::SeqDeserializer<I, E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::de::value::StrDeserializer<'a, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+crate::<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Field>::deserialize(p0);
-----------------
rope/src/serde_impls.rs <serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
rope/src/serde_impls.rs <serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum
'de
deps:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum":{"__A":["std::marker::Sized","serde::de::EnumAccess"]}}
candidates:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum":{"__A":["serde::de::value::U32Deserializer<E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::StringDeserializer<E>","serde::private::de::content::EnumRefDeserializer<'a, 'de, E>","serde::private::de::content::EnumDeserializer<'de, E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::StrDeserializer<'a, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_enum(p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum(p0, p1);
+crate::<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum(p0, p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de>>::visit_enum(p0, p1);
-----------------
rope/src/serde_impls.rs <<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // <serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+<<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de>>::expecting(p0, p1);
-----------------
rope/src/serde_impls.rs <<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["std::marker::Sized","serde::de::SeqAccess"]}}
candidates:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["serde::de::value::SeqDeserializer<I, E>","<&'a mut A as serde::de::SeqAccess<'de>>","serde::de::value::PairVisitor<A, B, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::private::de::content::SeqDeserializer<'de, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // <serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDeltaElement_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_enum::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
rope/src/serde_impls.rs serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_SERIALIZE_FOR_RopeDelta_::<impl serde::Serialize for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::serialize
deps:{"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_SERIALIZE_FOR_RopeDelta_::<impl serde::Serialize for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::serialize":{"__S":["serde::Serializer","std::marker::Sized"]}}
candidates:{"serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>":{},"serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_SERIALIZE_FOR_RopeDelta_::<impl serde::Serialize for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::serialize":{"__S":["serde::ser::fmt::<impl serde::Serializer for &'a mut std::fmt::Formatter<'b>>","serde::private::ser::TaggedSerializer<S>","serde::private::ser::FlatMapSerializer<'a, M>","serde::private::ser::content::ContentSerializer<E>"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_
let mut p1 = MaybeUninit::uninit().assume_init(); // __S
+p0.serialize(p1);
+serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_SERIALIZE_FOR_RopeDelta_::<impl serde::Serialize for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::serialize(p0, p1);
+crate::serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_SERIALIZE_FOR_RopeDelta_::<impl serde::Serialize for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::serialize(p0, p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::serialize(p0, p1);
-----------------
rope/src/serde_impls.rs serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize
'de
deps:{"serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize":{"__D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize":{"__D":["serde::private::de::BytesDeserializer<'a, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::I128Deserializer<E>","serde::de::value::StringDeserializer<E>","serde::de::value::U128Deserializer<E>","serde::de::value::U64Deserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","serde::de::value::I8Deserializer<E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::private::de::content::SeqDeserializer<'de, E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::private::de::StrDeserializer<'a, E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::de::value::SeqDeserializer<I, E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::I16Deserializer<E>","serde::de::value::U8Deserializer<E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::CharDeserializer<E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::F32Deserializer<E>","serde::de::value::UnitDeserializer<E>","serde::de::value::StrDeserializer<'a, E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::I64Deserializer<E>","serde::de::value::F64Deserializer<E>","serde::de::value::U32Deserializer<E>","serde::de::value::U16Deserializer<E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::PairDeserializer<A, B, E>","serde::de::value::BoolDeserializer<E>","serde::de::value::I32Deserializer<E>","serde::de::value::UsizeDeserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize(p0);
+crate::serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize(p0);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize(p0);
-----------------
rope/src/serde_impls.rs <serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::expecting(p0, p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor>::expecting(p0, p1);
-----------------
rope/src/serde_impls.rs <serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64
'de
deps:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor
let mut p1 = 0u64; // None+u64
+p0.visit_u64(p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+crate::<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_u64(p0, p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor>::visit_u64(p0, p1);
-----------------
rope/src/serde_impls.rs <serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str
'de
deps:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor
let mut p1 = "sample"; // None+&str
+p0.visit_str(&p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+crate::<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_str(p0, &p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor>::visit_str(p0, &p1);
-----------------
rope/src/serde_impls.rs <serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes
'de
deps:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["std::marker::Sized","serde::de::Error"]}}
candidates:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes":{"__E":["serde::de::value::Error"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor
let mut p1 = [0u8,0,0].as_mut_slice(); // None+&[u8]
+p0.visit_bytes(p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+crate::<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor as serde::de::Visitor<'de>>::visit_bytes(p0, p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__FieldVisitor>::visit_bytes(p0, p1);
-----------------
rope/src/serde_impls.rs <serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Field as serde::Deserialize<'de>>::deserialize
'de
deps:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["std::marker::Sized","serde::Deserializer"]}}
candidates:{"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Field as serde::Deserialize<'de>>::deserialize":{"__D":["serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::F32Deserializer<E>","serde::de::value::BorrowedBytesDeserializer<'de, E>","serde::de::value::F64Deserializer<E>","serde::de::value::CharDeserializer<E>","serde::de::value::CowStrDeserializer<'a, E>","serde::private::de::missing_field::MissingFieldDeserializer<E>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::PairDeserializer<A, B, E>","serde::private::de::StrDeserializer<'a, E>","serde::de::value::U16Deserializer<E>","serde::de::value::U32Deserializer<E>","serde::de::value::I8Deserializer<E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::StrDeserializer<'a, E>","serde::de::value::MapAccessDeserializer<A>","serde::de::value::I64Deserializer<E>","serde::de::value::U128Deserializer<E>","serde::de::value::BoolDeserializer<E>","serde::de::value::StringDeserializer<E>","serde::private::de::content::MapDeserializer<'de, E>","serde::de::value::UnitDeserializer<E>","serde::de::value::BorrowedStrDeserializer<'de, E>","serde::de::value::MapDeserializer<'de, I, E>","serde::private::de::content::ContentDeserializer<'de, E>","serde::de::value::I32Deserializer<E>","serde::private::de::BytesDeserializer<'a, E>","serde::de::value::IsizeDeserializer<E>","serde::de::value::UsizeDeserializer<E>","serde::de::value::SeqDeserializer<I, E>","serde::de::value::SeqAccessDeserializer<A>","serde::de::value::I16Deserializer<E>","serde::de::value::U8Deserializer<E>","serde::private::de::content::ContentRefDeserializer<'a, 'de, E>","serde::private::de::FlatMapDeserializer<'a, 'de, E>","serde::de::value::U64Deserializer<E>","serde::de::value::I128Deserializer<E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // __D
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+crate::<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Field as serde::Deserialize<'de>>::deserialize(p0);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Field>::deserialize(p0);
-----------------
rope/src/serde_impls.rs <serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting
'de
deps:{}
candidates:{}
let mut p0 = & MaybeUninit::uninit().assume_init(); // serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+p0.expecting(p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+crate::<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::expecting(p0, p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de>>::expecting(p0, p1);
-----------------
rope/src/serde_impls.rs <serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq
'de
deps:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["serde::de::SeqAccess","std::marker::Sized"]}}
candidates:{"<&'a mut A as serde::de::SeqAccess<'de>>":{},"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq":{"__A":["serde::private::de::content::SeqDeserializer<'de, E>","serde::de::value::SeqDeserializer<I, E>","serde::de::value::PairVisitor<A, B, E>","<&'a mut A as serde::de::SeqAccess<'de>>","serde::private::de::content::SeqRefDeserializer<'a, 'de, E>","serde::de::value::MapDeserializer<'de, I, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_seq(p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+crate::<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_seq(p0, p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de>>::visit_seq(p0, p1);
-----------------
rope/src/serde_impls.rs <serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map
'de
deps:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["std::marker::Sized","serde::de::MapAccess"]}}
candidates:{"<&'a mut A as serde::de::MapAccess<'de>>":{},"<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map":{"__A":["serde::private::de::FlatStructAccess<'a, 'de, E>","serde::private::de::FlatMapAccess<'a, 'de, E>","<&'a mut A as serde::de::MapAccess<'de>>","serde::private::de::FlatInternallyTaggedAccess<'a, 'de, E>","serde::private::de::content::MapDeserializer<'de, E>","serde::private::de::content::MapRefDeserializer<'a, 'de, E>","serde::de::value::MapDeserializer<'de, I, E>"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de>
let mut p1 = MaybeUninit::uninit().assume_init(); // __A
+p0.visit_map(p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+crate::<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de> as serde::de::Visitor<'de>>::visit_map(p0, p1);
+<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::_IMPL_DESERIALIZE_FOR_RopeDelta_::<impl serde::Deserialize<'de> for serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_>::deserialize::__Visitor<'de>>::visit_map(p0, p1);
-----------------
rope/src/serde_impls.rs serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::<impl std::convert::From<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_> for delta::DeltaElement<rope::RopeInfo>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_
+serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::<impl std::convert::From<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_> for delta::DeltaElement<rope::RopeInfo>>::from(p0);
+crate::serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::<impl std::convert::From<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDeltaElement_> for delta::DeltaElement<rope::RopeInfo>>::from(p0);
+<delta::DeltaElement<rope::RopeInfo>>::from(p0);
-----------------
rope/src/serde_impls.rs serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::<impl std::convert::From<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_> for delta::Delta<rope::RopeInfo>>::from
deps:{}
candidates:{}
let mut p0 = MaybeUninit::uninit().assume_init(); // serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_
+serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::<impl std::convert::From<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_> for delta::Delta<rope::RopeInfo>>::from(p0);
+crate::serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::<impl std::convert::From<serde_impls::<impl serde::Deserialize<'de> for delta::Delta<rope::RopeInfo>>::deserialize::RopeDelta_> for delta::Delta<rope::RopeInfo>>::from(p0);
+<delta::Delta<rope::RopeInfo>>::from(p0);
-----------------
rope/src/spans.rs <spans::Span<T> as std::clone::Clone>::clone
deps:{"<spans::Span<T> as std::clone::Clone>::clone":{"T":["std::marker::Sized","std::clone::Clone"]},"delta::Delta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"<spans::Span<T> as std::clone::Clone>::clone":{"T":["multiset::ZipSegment","multiset::CountMatcher","multiset::Subset","engine::Contents","rope::RopeInfo","rope::Utf16CodeUnitsMetric","spans::Span","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for *mut T>","tree::Node","engine::RevId","spans::SpansLeaf","engine::DeltaOp","interval::Interval","rope::BaseMetric","diff::DiffOp","breaks::BreaksLeaf","engine::Error","breaks::BreaksInfo","multiset::Segment","engine::FullPriority","tree::NodeBody","delta::InsertDelta","breaks::BreaksBaseMetric","delta::DeltaElement","rope::LinesMetric","tree::NodeVal","diff::DiffBuilder","spans::SpansInfo","delta::Delta","breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for &mut T>"]},"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["engine::Contents","rope::RopeInfo","rope::LinesMetric","multiset::CountMatcher","engine::DeltaOp","engine::Error","tree::Node","diff::DiffOp","engine::FullPriority","spans::SpansLeaf","diff::DiffBuilder","tree::NodeBody","breaks::BreaksMetric","multiset::Segment","interval::Interval","tree::NodeVal","delta::Delta","delta::InsertDelta","rope::BaseMetric","multiset::Subset","breaks::BreaksInfo","spans::SpansInfo","breaks::BreaksBaseMetric","spans::Span","rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for &T>","find::CaseMatching","breaks::BreaksLeaf","multiset::ZipSegment","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::RevId"]},"spans::SpansInfo":{"T":["delta::InsertDelta","diff::DiffOp","spans::Span","engine::Contents","breaks::BreaksMetric","rope::BaseMetric","engine::FullPriority","rope::RopeInfo","std::clone::impls::<impl std::clone::Clone for &T>","tree::NodeBody","engine::DeltaOp","delta::Delta","tree::Node","delta::DeltaElement","multiset::ZipSegment","engine::RevId","engine::Error","interval::Interval","multiset::CountMatcher","spans::SpansLeaf","diff::DiffBuilder","rope::Utf16CodeUnitsMetric","spans::SpansInfo","multiset::Segment","multiset::Subset","rope::LinesMetric","breaks::BreaksBaseMetric","tree::NodeVal","breaks::BreaksLeaf","find::CaseMatching","breaks::BreaksInfo"]},"spans::SpansLeaf":{"T":["interval::Interval","tree::Node","multiset::CountMatcher","spans::SpansInfo","breaks::BreaksBaseMetric","spans::Span","delta::InsertDelta","spans::SpansLeaf","diff::DiffBuilder","rope::RopeInfo","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::BaseMetric","delta::DeltaElement","diff::DiffOp","breaks::BreaksMetric","engine::Contents","find::CaseMatching","breaks::BreaksInfo","multiset::ZipSegment","rope::Utf16CodeUnitsMetric","tree::NodeVal","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::LinesMetric","engine::FullPriority","multiset::Segment","multiset::Subset","engine::Error","breaks::BreaksLeaf","engine::RevId","delta::Delta","engine::DeltaOp","tree::NodeBody"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // spans::Span<T>
+p0.clone();
+<spans::Span<T> as std::clone::Clone>::clone(p0);
+crate::<spans::Span<T> as std::clone::Clone>::clone(p0);
+<spans::Span<T>>::clone(p0);
-----------------
rope/src/spans.rs <spans::SpansLeaf<T> as std::clone::Clone>::clone
deps:{"<spans::SpansLeaf<T> as std::clone::Clone>::clone":{"T":["std::marker::Sized","std::clone::Clone"]},"delta::Delta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"<spans::SpansLeaf<T> as std::clone::Clone>::clone":{"T":["multiset::Segment","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for *mut T>","std::clone::impls::<impl std::clone::Clone for &mut T>","tree::NodeVal","interval::Interval","breaks::BreaksInfo","breaks::BreaksBaseMetric","find::CaseMatching","multiset::Subset","rope::RopeInfo","engine::FullPriority","spans::Span","spans::SpansInfo","rope::Utf16CodeUnitsMetric","engine::Error","rope::LinesMetric","multiset::CountMatcher","engine::DeltaOp","rope::BaseMetric","delta::Delta","delta::DeltaElement","multiset::ZipSegment","spans::SpansLeaf","tree::NodeBody","diff::DiffBuilder","engine::RevId","tree::Node","engine::Contents","breaks::BreaksMetric","diff::DiffOp","breaks::BreaksLeaf"]},"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["engine::FullPriority","breaks::BreaksMetric","delta::DeltaElement","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for *const T>","std::clone::impls::<impl std::clone::Clone for *mut T>","interval::Interval","rope::RopeInfo","diff::DiffOp","delta::InsertDelta","engine::DeltaOp","engine::RevId","multiset::ZipSegment","multiset::Subset","tree::NodeBody","rope::Utf16CodeUnitsMetric","breaks::BreaksBaseMetric","spans::SpansInfo","multiset::Segment","spans::Span","engine::Contents","multiset::CountMatcher","tree::Node","delta::Delta","rope::LinesMetric","spans::SpansLeaf","tree::NodeVal","find::CaseMatching","engine::Error","diff::DiffBuilder","rope::BaseMetric","breaks::BreaksInfo"]},"spans::SpansInfo":{"T":["delta::DeltaElement","rope::Utf16CodeUnitsMetric","spans::SpansInfo","engine::RevId","engine::FullPriority","spans::SpansLeaf","breaks::BreaksLeaf","tree::Node","spans::Span","delta::Delta","engine::Contents","diff::DiffOp","rope::RopeInfo","tree::NodeBody","breaks::BreaksBaseMetric","engine::Error","multiset::Segment","find::CaseMatching","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for &T>","tree::NodeVal","rope::BaseMetric","multiset::Subset","multiset::ZipSegment","interval::Interval","breaks::BreaksInfo","diff::DiffBuilder","breaks::BreaksMetric","rope::LinesMetric","multiset::CountMatcher","engine::DeltaOp"]},"spans::SpansLeaf":{"T":["diff::DiffOp","engine::Contents","multiset::CountMatcher","tree::Node","breaks::BreaksBaseMetric","tree::NodeBody","engine::RevId","std::clone::impls::<impl std::clone::Clone for *mut T>","interval::Interval","rope::BaseMetric","multiset::ZipSegment","delta::Delta","engine::FullPriority","engine::Error","tree::NodeVal","multiset::Subset","spans::SpansInfo","spans::SpansLeaf","multiset::Segment","rope::LinesMetric","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for *const T>","rope::RopeInfo","delta::DeltaElement","engine::DeltaOp","spans::Span","diff::DiffBuilder","rope::Utf16CodeUnitsMetric","find::CaseMatching","delta::InsertDelta","breaks::BreaksMetric","breaks::BreaksInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // spans::SpansLeaf<T>
+p0.clone();
+<spans::SpansLeaf<T> as std::clone::Clone>::clone(p0);
+crate::<spans::SpansLeaf<T> as std::clone::Clone>::clone(p0);
+<spans::SpansLeaf<T>>::clone(p0);
-----------------
rope/src/spans.rs <spans::SpansLeaf<T> as std::default::Default>::default
deps:{"<spans::SpansLeaf<T> as std::default::Default>::default":{"T":["std::marker::Sized","std::clone::Clone"]},"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","tree::NodeInfo","tree::DefaultMetric","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"<spans::SpansLeaf<T> as std::default::Default>::default":{"T":["interval::Interval","tree::NodeBody","breaks::BreaksMetric","spans::Span","multiset::CountMatcher","tree::Node","std::clone::impls::<impl std::clone::Clone for *mut T>","breaks::BreaksInfo","multiset::Subset","engine::RevId","rope::RopeInfo","delta::InsertDelta","diff::DiffOp","find::CaseMatching","multiset::Segment","rope::Utf16CodeUnitsMetric","tree::NodeVal","engine::DeltaOp","rope::BaseMetric","breaks::BreaksBaseMetric","delta::Delta","engine::Contents","delta::DeltaElement","rope::LinesMetric","spans::SpansInfo","std::clone::impls::<impl std::clone::Clone for *const T>","spans::SpansLeaf","engine::FullPriority","engine::Error","breaks::BreaksLeaf","diff::DiffBuilder","multiset::ZipSegment"]},"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["delta::Delta","multiset::Subset","multiset::ZipSegment","engine::Contents","multiset::Segment","tree::NodeVal","multiset::CountMatcher","tree::Node","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::Error","breaks::BreaksMetric","engine::DeltaOp","breaks::BreaksInfo","breaks::BreaksBaseMetric","tree::NodeBody","spans::SpansLeaf","engine::FullPriority","find::CaseMatching","rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","diff::DiffBuilder","delta::InsertDelta","rope::RopeInfo","spans::SpansInfo","diff::DiffOp","delta::DeltaElement","interval::Interval","engine::RevId","rope::LinesMetric","rope::BaseMetric","spans::Span","breaks::BreaksLeaf"]},"spans::SpansInfo":{"T":["multiset::ZipSegment","rope::LinesMetric","diff::DiffBuilder","tree::Node","engine::Error","breaks::BreaksMetric","rope::BaseMetric","spans::SpansInfo","tree::NodeVal","engine::RevId","tree::NodeBody","delta::Delta","delta::DeltaElement","find::CaseMatching","spans::Span","diff::DiffOp","spans::SpansLeaf","multiset::Segment","multiset::CountMatcher","breaks::BreaksInfo","rope::RopeInfo","engine::Contents","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::DeltaOp","breaks::BreaksBaseMetric","delta::InsertDelta","breaks::BreaksLeaf","interval::Interval","rope::Utf16CodeUnitsMetric","multiset::Subset","engine::FullPriority"]},"spans::SpansLeaf":{"T":["tree::Node","engine::FullPriority","rope::LinesMetric","multiset::Subset","rope::Utf16CodeUnitsMetric","spans::SpansInfo","breaks::BreaksInfo","diff::DiffBuilder","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for &mut T>","spans::SpansLeaf","multiset::ZipSegment","delta::InsertDelta","multiset::CountMatcher","interval::Interval","breaks::BreaksMetric","breaks::BreaksLeaf","delta::Delta","engine::DeltaOp","engine::Error","delta::DeltaElement","engine::RevId","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for &T>","spans::Span","tree::NodeBody","tree::NodeVal","diff::DiffOp","rope::RopeInfo","breaks::BreaksBaseMetric","multiset::Segment","engine::Contents"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
+<spans::SpansLeaf<T> as std::default::Default>::default();
+crate::<spans::SpansLeaf<T> as std::default::Default>::default();
+<spans::SpansLeaf<T>>::default();
-----------------
rope/src/spans.rs <spans::SpansInfo<T> as std::clone::Clone>::clone
deps:{"<spans::SpansInfo<T> as std::clone::Clone>::clone":{"T":["std::clone::Clone","std::marker::Sized"]},"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","tree::DefaultMetric","std::clone::Clone","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"<spans::SpansInfo<T> as std::clone::Clone>::clone":{"T":["rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for &T>","find::CaseMatching","breaks::BreaksMetric","engine::FullPriority","multiset::CountMatcher","diff::DiffOp","tree::Node","rope::Utf16CodeUnitsMetric","delta::Delta","tree::NodeVal","rope::BaseMetric","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for &mut T>","breaks::BreaksBaseMetric","multiset::Subset","diff::DiffBuilder","tree::NodeBody","multiset::ZipSegment","spans::SpansInfo","engine::Contents","interval::Interval","breaks::BreaksInfo","spans::Span","delta::InsertDelta","rope::RopeInfo","engine::DeltaOp","breaks::BreaksLeaf","spans::SpansLeaf","engine::RevId","engine::Error","multiset::Segment"]},"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["engine::Contents","breaks::BreaksBaseMetric","tree::NodeVal","find::CaseMatching","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for &T>","multiset::Segment","engine::Error","engine::RevId","rope::Utf16CodeUnitsMetric","breaks::BreaksLeaf","diff::DiffBuilder","breaks::BreaksInfo","spans::SpansInfo","diff::DiffOp","multiset::Subset","breaks::BreaksMetric","rope::LinesMetric","rope::BaseMetric","multiset::CountMatcher","std::clone::impls::<impl std::clone::Clone for *mut T>","delta::DeltaElement","interval::Interval","rope::RopeInfo","engine::DeltaOp","tree::Node","spans::Span","engine::FullPriority","spans::SpansLeaf","tree::NodeBody","delta::Delta","multiset::ZipSegment"]},"spans::SpansInfo":{"T":["tree::NodeBody","breaks::BreaksInfo","engine::Error","engine::DeltaOp","tree::NodeVal","multiset::CountMatcher","multiset::Segment","spans::SpansLeaf","rope::LinesMetric","multiset::Subset","engine::Contents","breaks::BreaksLeaf","delta::Delta","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::BaseMetric","breaks::BreaksMetric","engine::RevId","multiset::ZipSegment","diff::DiffOp","rope::RopeInfo","interval::Interval","tree::Node","find::CaseMatching","spans::Span","breaks::BreaksBaseMetric","delta::InsertDelta","spans::SpansInfo","delta::DeltaElement","rope::Utf16CodeUnitsMetric","diff::DiffBuilder","engine::FullPriority"]},"spans::SpansLeaf":{"T":["engine::DeltaOp","breaks::BreaksBaseMetric","tree::NodeVal","tree::NodeBody","multiset::ZipSegment","delta::InsertDelta","interval::Interval","engine::RevId","spans::SpansInfo","tree::Node","engine::Contents","rope::LinesMetric","rope::BaseMetric","engine::Error","diff::DiffOp","diff::DiffBuilder","engine::FullPriority","rope::Utf16CodeUnitsMetric","breaks::BreaksLeaf","breaks::BreaksMetric","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for &T>","spans::SpansLeaf","multiset::CountMatcher","spans::Span","multiset::Segment","breaks::BreaksInfo","rope::RopeInfo","delta::Delta","find::CaseMatching","multiset::Subset","std::clone::impls::<impl std::clone::Clone for *const T>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // spans::SpansInfo<T>
+p0.clone();
+<spans::SpansInfo<T> as std::clone::Clone>::clone(p0);
+crate::<spans::SpansInfo<T> as std::clone::Clone>::clone(p0);
+<spans::SpansInfo<T>>::clone(p0);
-----------------
rope/src/spans.rs <spans::SpansLeaf<T> as tree::Leaf>::len
deps:{"<spans::SpansLeaf<T> as tree::Leaf>::len":{"T":["std::marker::Sized","std::clone::Clone"]},"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized","tree::DefaultMetric"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"<spans::SpansLeaf<T> as tree::Leaf>::len":{"T":["engine::Contents","spans::SpansInfo","delta::InsertDelta","multiset::ZipSegment","rope::BaseMetric","breaks::BreaksBaseMetric","engine::DeltaOp","breaks::BreaksInfo","tree::NodeVal","spans::Span","std::clone::impls::<impl std::clone::Clone for &mut T>","find::CaseMatching","multiset::CountMatcher","interval::Interval","multiset::Segment","engine::FullPriority","breaks::BreaksMetric","engine::RevId","std::clone::impls::<impl std::clone::Clone for *const T>","tree::NodeBody","tree::Node","breaks::BreaksLeaf","rope::Utf16CodeUnitsMetric","multiset::Subset","engine::Error","spans::SpansLeaf","diff::DiffOp","rope::LinesMetric","delta::DeltaElement","diff::DiffBuilder","delta::Delta","rope::RopeInfo"]},"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["breaks::BreaksLeaf","engine::DeltaOp","tree::Node","std::clone::impls::<impl std::clone::Clone for &T>","multiset::Subset","multiset::ZipSegment","tree::NodeVal","rope::LinesMetric","engine::Error","rope::RopeInfo","rope::Utf16CodeUnitsMetric","delta::Delta","engine::Contents","engine::FullPriority","breaks::BreaksMetric","delta::DeltaElement","find::CaseMatching","spans::Span","breaks::BreaksInfo","spans::SpansInfo","tree::NodeBody","breaks::BreaksBaseMetric","multiset::Segment","diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::BaseMetric","multiset::CountMatcher","delta::InsertDelta","diff::DiffOp","engine::RevId","spans::SpansLeaf","interval::Interval"]},"spans::SpansInfo":{"T":["delta::InsertDelta","delta::Delta","breaks::BreaksLeaf","spans::SpansLeaf","find::CaseMatching","tree::NodeVal","interval::Interval","engine::Contents","rope::RopeInfo","spans::SpansInfo","engine::DeltaOp","multiset::CountMatcher","delta::DeltaElement","breaks::BreaksInfo","rope::Utf16CodeUnitsMetric","engine::RevId","engine::FullPriority","multiset::Segment","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for &T>","engine::Error","multiset::Subset","rope::LinesMetric","tree::Node","breaks::BreaksBaseMetric","tree::NodeBody","diff::DiffOp","rope::BaseMetric","spans::Span","breaks::BreaksMetric","diff::DiffBuilder"]},"spans::SpansLeaf":{"T":["rope::RopeInfo","spans::Span","spans::SpansLeaf","breaks::BreaksLeaf","tree::Node","diff::DiffBuilder","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for &T>","delta::Delta","engine::Contents","std::clone::impls::<impl std::clone::Clone for *mut T>","diff::DiffOp","breaks::BreaksInfo","multiset::ZipSegment","multiset::Subset","rope::BaseMetric","spans::SpansInfo","tree::NodeVal","find::CaseMatching","interval::Interval","engine::DeltaOp","multiset::Segment","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","multiset::CountMatcher","delta::InsertDelta","breaks::BreaksMetric","rope::LinesMetric","tree::NodeBody","engine::Error","engine::FullPriority","engine::RevId"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // spans::SpansLeaf<T>
+p0.len();
+<spans::SpansLeaf<T> as tree::Leaf>::len(p0);
+crate::<spans::SpansLeaf<T> as tree::Leaf>::len(p0);
+<spans::SpansLeaf<T>>::len(p0);
-----------------
rope/src/spans.rs <spans::SpansLeaf<T> as tree::Leaf>::is_ok_child
deps:{"<spans::SpansLeaf<T> as tree::Leaf>::is_ok_child":{"T":["std::clone::Clone","std::marker::Sized"]},"delta::Delta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"<spans::SpansLeaf<T> as tree::Leaf>::is_ok_child":{"T":["multiset::CountMatcher","delta::Delta","find::CaseMatching","diff::DiffBuilder","tree::NodeVal","engine::Error","breaks::BreaksInfo","tree::Node","rope::RopeInfo","rope::Utf16CodeUnitsMetric","rope::LinesMetric","diff::DiffOp","multiset::Subset","std::clone::impls::<impl std::clone::Clone for &mut T>","spans::SpansLeaf","interval::Interval","breaks::BreaksBaseMetric","multiset::ZipSegment","tree::NodeBody","engine::Contents","breaks::BreaksMetric","spans::Span","engine::FullPriority","spans::SpansInfo","rope::BaseMetric","breaks::BreaksLeaf","engine::DeltaOp","engine::RevId","delta::DeltaElement","multiset::Segment","delta::InsertDelta"]},"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"spans::Span":{"T":["diff::DiffOp","tree::NodeBody","spans::SpansLeaf","find::CaseMatching","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","breaks::BreaksInfo","delta::Delta","spans::SpansInfo","engine::FullPriority","spans::Span","breaks::BreaksLeaf","rope::Utf16CodeUnitsMetric","interval::Interval","engine::RevId","delta::InsertDelta","breaks::BreaksMetric","multiset::ZipSegment","engine::Error","engine::Contents","delta::DeltaElement","engine::DeltaOp","breaks::BreaksBaseMetric","multiset::Segment","rope::LinesMetric","diff::DiffBuilder","tree::Node","tree::NodeVal","multiset::CountMatcher","rope::RopeInfo","multiset::Subset"]},"spans::SpansInfo":{"T":["breaks::BreaksBaseMetric","multiset::Subset","tree::Node","breaks::BreaksMetric","rope::RopeInfo","multiset::ZipSegment","spans::SpansLeaf","engine::Error","multiset::Segment","delta::InsertDelta","rope::Utf16CodeUnitsMetric","rope::LinesMetric","delta::DeltaElement","delta::Delta","rope::BaseMetric","multiset::CountMatcher","engine::RevId","spans::SpansInfo","engine::DeltaOp","find::CaseMatching","breaks::BreaksLeaf","interval::Interval","std::clone::impls::<impl std::clone::Clone for *mut T>","diff::DiffOp","engine::FullPriority","diff::DiffBuilder","spans::Span","breaks::BreaksInfo","engine::Contents","tree::NodeVal","tree::NodeBody"]},"spans::SpansLeaf":{"T":["engine::FullPriority","spans::SpansLeaf","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksBaseMetric","tree::NodeBody","delta::InsertDelta","engine::DeltaOp","multiset::Segment","rope::LinesMetric","multiset::CountMatcher","std::clone::impls::<impl std::clone::Clone for &mut T>","multiset::Subset","rope::Utf16CodeUnitsMetric","tree::NodeVal","spans::SpansInfo","breaks::BreaksMetric","engine::Error","diff::DiffOp","breaks::BreaksInfo","diff::DiffBuilder","engine::RevId","rope::RopeInfo","find::CaseMatching","rope::BaseMetric","spans::Span","tree::Node","delta::DeltaElement","breaks::BreaksLeaf","multiset::ZipSegment","engine::Contents","delta::Delta","interval::Interval"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // spans::SpansLeaf<T>
+p0.is_ok_child();
+<spans::SpansLeaf<T> as tree::Leaf>::is_ok_child(p0);
+crate::<spans::SpansLeaf<T> as tree::Leaf>::is_ok_child(p0);
+<spans::SpansLeaf<T>>::is_ok_child(p0);
-----------------
rope/src/spans.rs <spans::SpansLeaf<T> as tree::Leaf>::push_maybe_split
deps:{"<spans::SpansLeaf<T> as tree::Leaf>::push_maybe_split":{"T":["std::marker::Sized","std::clone::Clone"]},"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","tree::DefaultMetric","std::marker::Sized","std::clone::Clone"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"<spans::SpansLeaf<T> as tree::Leaf>::push_maybe_split":{"T":["spans::SpansInfo","engine::RevId","engine::Contents","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::RopeInfo","delta::Delta","spans::SpansLeaf","engine::DeltaOp","multiset::ZipSegment","tree::NodeVal","interval::Interval","tree::Node","delta::DeltaElement","engine::Error","diff::DiffBuilder","multiset::Segment","rope::BaseMetric","multiset::CountMatcher","std::clone::impls::<impl std::clone::Clone for *mut T>","breaks::BreaksInfo","tree::NodeBody","multiset::Subset","diff::DiffOp","breaks::BreaksBaseMetric","breaks::BreaksLeaf","delta::InsertDelta","rope::LinesMetric","breaks::BreaksMetric","engine::FullPriority","rope::Utf16CodeUnitsMetric","find::CaseMatching","spans::Span"]},"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["multiset::ZipSegment","delta::DeltaElement","breaks::BreaksBaseMetric","engine::DeltaOp","breaks::BreaksLeaf","rope::LinesMetric","tree::NodeVal","engine::Error","tree::NodeBody","find::CaseMatching","delta::Delta","multiset::Subset","diff::DiffOp","breaks::BreaksInfo","spans::SpansLeaf","engine::RevId","rope::RopeInfo","breaks::BreaksMetric","spans::Span","spans::SpansInfo","engine::FullPriority","multiset::CountMatcher","delta::InsertDelta","rope::Utf16CodeUnitsMetric","interval::Interval","multiset::Segment","std::clone::impls::<impl std::clone::Clone for &T>","diff::DiffBuilder","rope::BaseMetric","engine::Contents","tree::Node"]},"spans::SpansInfo":{"T":["tree::Node","engine::FullPriority","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for *mut T>","diff::DiffBuilder","delta::InsertDelta","multiset::CountMatcher","multiset::Segment","delta::Delta","rope::LinesMetric","delta::DeltaElement","rope::Utf16CodeUnitsMetric","rope::BaseMetric","engine::RevId","interval::Interval","breaks::BreaksLeaf","tree::NodeBody","multiset::ZipSegment","breaks::BreaksInfo","rope::RopeInfo","tree::NodeVal","breaks::BreaksBaseMetric","spans::SpansInfo","spans::Span","find::CaseMatching","breaks::BreaksMetric","engine::Contents","multiset::Subset","spans::SpansLeaf","engine::Error","diff::DiffOp"]},"spans::SpansLeaf":{"T":["delta::Delta","spans::Span","spans::SpansInfo","rope::BaseMetric","breaks::BreaksBaseMetric","multiset::CountMatcher","diff::DiffOp","breaks::BreaksInfo","multiset::ZipSegment","engine::FullPriority","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for &T>","std::clone::impls::<impl std::clone::Clone for *mut T>","spans::SpansLeaf","find::CaseMatching","tree::NodeVal","rope::Utf16CodeUnitsMetric","tree::NodeBody","rope::LinesMetric","engine::RevId","rope::RopeInfo","engine::DeltaOp","engine::Error","multiset::Segment","delta::DeltaElement","diff::DiffBuilder","multiset::Subset","delta::InsertDelta","breaks::BreaksMetric","interval::Interval","tree::Node","engine::Contents"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // spans::SpansLeaf<T>
let mut p1 = & MaybeUninit::uninit().assume_init(); // spans::SpansLeaf<T>
let mut p2 = MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.push_maybe_split(p1, p2);
+<spans::SpansLeaf<T> as tree::Leaf>::push_maybe_split(p0, p1, p2);
+crate::<spans::SpansLeaf<T> as tree::Leaf>::push_maybe_split(p0, p1, p2);
+<spans::SpansLeaf<T>>::push_maybe_split(p0, p1, p2);
-----------------
rope/src/spans.rs <spans::SpansInfo<T> as tree::NodeInfo>::accumulate
deps:{"<spans::SpansInfo<T> as tree::NodeInfo>::accumulate":{"T":["std::marker::Sized","std::clone::Clone"]},"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","tree::DefaultMetric","std::marker::Sized","std::clone::Clone"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"<spans::SpansInfo<T> as tree::NodeInfo>::accumulate":{"T":["rope::Utf16CodeUnitsMetric","breaks::BreaksInfo","delta::DeltaElement","engine::DeltaOp","engine::RevId","rope::RopeInfo","breaks::BreaksLeaf","spans::SpansLeaf","breaks::BreaksBaseMetric","find::CaseMatching","interval::Interval","tree::NodeVal","delta::InsertDelta","spans::Span","multiset::ZipSegment","multiset::CountMatcher","diff::DiffBuilder","tree::Node","delta::Delta","spans::SpansInfo","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for &T>","multiset::Subset","engine::FullPriority","diff::DiffOp","engine::Contents","tree::NodeBody","multiset::Segment","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for *const T>","engine::Error","breaks::BreaksMetric"]},"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["breaks::BreaksBaseMetric","engine::RevId","find::CaseMatching","multiset::ZipSegment","spans::Span","tree::NodeVal","diff::DiffBuilder","multiset::CountMatcher","multiset::Subset","breaks::BreaksLeaf","delta::Delta","multiset::Segment","engine::Error","delta::DeltaElement","delta::InsertDelta","tree::Node","breaks::BreaksInfo","interval::Interval","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for *const T>","rope::LinesMetric","breaks::BreaksMetric","tree::NodeBody","engine::Contents","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::RopeInfo","rope::BaseMetric","engine::DeltaOp","engine::FullPriority","rope::Utf16CodeUnitsMetric","spans::SpansLeaf","spans::SpansInfo"]},"spans::SpansInfo":{"T":["spans::Span","delta::InsertDelta","diff::DiffOp","tree::Node","find::CaseMatching","diff::DiffBuilder","engine::FullPriority","interval::Interval","rope::Utf16CodeUnitsMetric","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::ZipSegment","breaks::BreaksLeaf","rope::LinesMetric","tree::NodeVal","breaks::BreaksMetric","rope::RopeInfo","delta::Delta","breaks::BreaksBaseMetric","spans::SpansLeaf","rope::BaseMetric","engine::Contents","delta::DeltaElement","tree::NodeBody","engine::Error","engine::RevId","multiset::Segment","multiset::Subset","spans::SpansInfo","multiset::CountMatcher","breaks::BreaksInfo"]},"spans::SpansLeaf":{"T":["breaks::BreaksLeaf","multiset::Subset","delta::InsertDelta","rope::RopeInfo","engine::RevId","engine::DeltaOp","breaks::BreaksInfo","rope::BaseMetric","engine::Error","tree::Node","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::Segment","engine::FullPriority","breaks::BreaksMetric","diff::DiffBuilder","engine::Contents","find::CaseMatching","spans::SpansLeaf","tree::NodeVal","multiset::CountMatcher","interval::Interval","breaks::BreaksBaseMetric","diff::DiffOp","multiset::ZipSegment","delta::Delta","spans::Span","rope::LinesMetric","spans::SpansInfo","std::clone::impls::<impl std::clone::Clone for &mut T>","tree::NodeBody","rope::Utf16CodeUnitsMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // spans::SpansInfo<T>
let mut p1 = & MaybeUninit::uninit().assume_init(); // spans::SpansInfo<T>
+p0.accumulate(p1);
+<spans::SpansInfo<T> as tree::NodeInfo>::accumulate(p0, p1);
+crate::<spans::SpansInfo<T> as tree::NodeInfo>::accumulate(p0, p1);
+<spans::SpansInfo<T>>::accumulate(p0, p1);
-----------------
rope/src/spans.rs <spans::SpansInfo<T> as tree::NodeInfo>::compute_info
deps:{"<spans::SpansInfo<T> as tree::NodeInfo>::compute_info":{"T":["std::clone::Clone","std::marker::Sized"]},"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","tree::DefaultMetric","std::marker::Sized","std::clone::Clone"]},"tree::NodeBody":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"<spans::SpansInfo<T> as tree::NodeInfo>::compute_info":{"T":["spans::SpansLeaf","delta::DeltaElement","multiset::ZipSegment","multiset::Segment","engine::RevId","rope::Utf16CodeUnitsMetric","rope::RopeInfo","tree::Node","spans::Span","spans::SpansInfo","breaks::BreaksBaseMetric","engine::Contents","tree::NodeBody","delta::InsertDelta","diff::DiffBuilder","breaks::BreaksInfo","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for *mut T>","breaks::BreaksMetric","rope::BaseMetric","tree::NodeVal","interval::Interval","engine::FullPriority","breaks::BreaksLeaf","engine::Error","multiset::CountMatcher","engine::DeltaOp","diff::DiffOp","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::Subset","delta::Delta"]},"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["engine::Contents","delta::Delta","spans::SpansLeaf","breaks::BreaksLeaf","spans::Span","delta::InsertDelta","rope::BaseMetric","engine::RevId","tree::Node","diff::DiffBuilder","tree::NodeVal","multiset::CountMatcher","delta::DeltaElement","multiset::Segment","engine::FullPriority","interval::Interval","spans::SpansInfo","rope::RopeInfo","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for *const T>","breaks::BreaksBaseMetric","multiset::ZipSegment","engine::DeltaOp","rope::LinesMetric","engine::Error","breaks::BreaksInfo","multiset::Subset","rope::Utf16CodeUnitsMetric","breaks::BreaksMetric","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for &mut T>","tree::NodeBody"]},"spans::SpansInfo":{"T":["multiset::Subset","interval::Interval","delta::DeltaElement","diff::DiffOp","breaks::BreaksInfo","multiset::CountMatcher","tree::NodeBody","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::BaseMetric","tree::NodeVal","delta::InsertDelta","engine::DeltaOp","breaks::BreaksMetric","find::CaseMatching","diff::DiffBuilder","rope::RopeInfo","rope::LinesMetric","breaks::BreaksLeaf","spans::Span","delta::Delta","spans::SpansInfo","spans::SpansLeaf","engine::FullPriority","engine::RevId","multiset::Segment","engine::Contents","rope::Utf16CodeUnitsMetric","tree::Node","engine::Error","multiset::ZipSegment","breaks::BreaksBaseMetric"]},"spans::SpansLeaf":{"T":["rope::RopeInfo","spans::SpansInfo","engine::Contents","tree::NodeVal","multiset::CountMatcher","breaks::BreaksInfo","delta::DeltaElement","delta::InsertDelta","multiset::Segment","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::Error","delta::Delta","diff::DiffOp","multiset::ZipSegment","rope::LinesMetric","rope::BaseMetric","spans::Span","multiset::Subset","std::clone::impls::<impl std::clone::Clone for &T>","tree::NodeBody","diff::DiffBuilder","tree::Node","breaks::BreaksBaseMetric","breaks::BreaksLeaf","rope::Utf16CodeUnitsMetric","engine::RevId","interval::Interval","breaks::BreaksMetric","engine::FullPriority","find::CaseMatching","spans::SpansLeaf"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // spans::SpansLeaf<T>
+<spans::SpansInfo<T> as tree::NodeInfo>::compute_info(p0);
+crate::<spans::SpansInfo<T> as tree::NodeInfo>::compute_info(p0);
+<spans::SpansInfo<T>>::compute_info(p0);
-----------------
rope/src/spans.rs spans::SpansBuilder::<T>::new
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansBuilder::<T>::new":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["multiset::CountMatcher","multiset::Subset","engine::RevId","tree::NodeVal","diff::DiffOp","rope::BaseMetric","breaks::BreaksLeaf","tree::NodeBody","find::CaseMatching","rope::RopeInfo","delta::InsertDelta","engine::DeltaOp","breaks::BreaksMetric","multiset::Segment","diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for *const T>","delta::DeltaElement","multiset::ZipSegment","engine::Error","breaks::BreaksInfo","spans::Span","engine::Contents","breaks::BreaksBaseMetric","engine::FullPriority","spans::SpansLeaf","interval::Interval","rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","spans::SpansInfo","rope::LinesMetric","tree::Node","delta::Delta"]},"spans::SpansBuilder::<T>::new":{"T":["engine::DeltaOp","rope::Utf16CodeUnitsMetric","engine::Error","spans::SpansInfo","tree::Node","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for &mut T>","multiset::Subset","tree::NodeVal","delta::InsertDelta","rope::RopeInfo","diff::DiffBuilder","rope::BaseMetric","rope::LinesMetric","delta::Delta","find::CaseMatching","breaks::BreaksMetric","spans::SpansLeaf","multiset::Segment","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksInfo","engine::RevId","multiset::ZipSegment","diff::DiffOp","breaks::BreaksBaseMetric","multiset::CountMatcher","engine::FullPriority","engine::Contents","tree::NodeBody","interval::Interval","spans::Span","delta::DeltaElement"]},"spans::SpansInfo":{"T":["breaks::BreaksLeaf","rope::RopeInfo","tree::NodeVal","multiset::CountMatcher","engine::DeltaOp","tree::Node","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::BaseMetric","breaks::BreaksBaseMetric","spans::SpansLeaf","delta::InsertDelta","multiset::Subset","engine::RevId","breaks::BreaksMetric","engine::Contents","rope::LinesMetric","interval::Interval","spans::Span","engine::Error","find::CaseMatching","delta::DeltaElement","engine::FullPriority","breaks::BreaksInfo","spans::SpansInfo","multiset::Segment","tree::NodeBody","diff::DiffOp","delta::Delta","rope::Utf16CodeUnitsMetric","diff::DiffBuilder","multiset::ZipSegment"]},"spans::SpansLeaf":{"T":["delta::DeltaElement","engine::Error","diff::DiffBuilder","tree::NodeVal","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::LinesMetric","spans::SpansLeaf","diff::DiffOp","breaks::BreaksMetric","rope::Utf16CodeUnitsMetric","breaks::BreaksBaseMetric","interval::Interval","breaks::BreaksLeaf","rope::RopeInfo","multiset::Subset","engine::DeltaOp","multiset::ZipSegment","multiset::Segment","find::CaseMatching","multiset::CountMatcher","engine::RevId","breaks::BreaksInfo","spans::SpansInfo","delta::Delta","spans::Span","tree::NodeBody","tree::Node","rope::BaseMetric","engine::Contents","delta::InsertDelta"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = 0usize; // None+usize
+spans::SpansBuilder::<T>::new(p0);
+crate::spans::SpansBuilder::<T>::new(p0);
+<spans::SpansBuilder<T>>::new(p0);
-----------------
rope/src/spans.rs spans::SpansBuilder::<T>::add_span
deps:{"<T as interval::IntervalBounds>":{"T":["std::marker::Sized","std::convert::Into"]},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansBuilder::<T>::add_span":{"IV":["std::marker::Sized","interval::IntervalBounds"],"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]},"tree::Node":{"N":["tree::NodeInfo","std::clone::Clone","tree::DefaultMetric","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]}}
candidates:{"<T as interval::IntervalBounds>":{"T":["std::process::ExitStatusError","<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError","std::sync::mpmc::select::Selected"]},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["diff::DiffOp","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::Subset","std::clone::impls::<impl std::clone::Clone for *const T>","delta::Delta","find::CaseMatching","engine::Contents","interval::Interval","spans::Span","rope::Utf16CodeUnitsMetric","breaks::BreaksMetric","diff::DiffBuilder","delta::DeltaElement","engine::FullPriority","breaks::BreaksLeaf","multiset::Segment","tree::NodeVal","multiset::ZipSegment","spans::SpansLeaf","spans::SpansInfo","breaks::BreaksBaseMetric","engine::RevId","rope::RopeInfo","delta::InsertDelta","rope::LinesMetric","breaks::BreaksInfo","multiset::CountMatcher","tree::Node","engine::DeltaOp","engine::Error","tree::NodeBody","rope::BaseMetric"]},"spans::SpansBuilder::<T>::add_span":{"IV":["std::ops::RangeFull","<T as interval::IntervalBounds>","std::ops::RangeFrom"],"T":["engine::FullPriority","engine::Error","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for &T>","rope::RopeInfo","find::CaseMatching","delta::Delta","breaks::BreaksBaseMetric","engine::Contents","tree::Node","multiset::ZipSegment","tree::NodeBody","spans::SpansLeaf","spans::SpansInfo","multiset::CountMatcher","rope::Utf16CodeUnitsMetric","breaks::BreaksMetric","tree::NodeVal","engine::RevId","delta::InsertDelta","rope::BaseMetric","engine::DeltaOp","diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::Segment","delta::DeltaElement","spans::Span","interval::Interval","diff::DiffOp","rope::LinesMetric","multiset::Subset","breaks::BreaksLeaf"]},"spans::SpansInfo":{"T":["tree::NodeBody","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for *const T>","delta::DeltaElement","multiset::ZipSegment","rope::LinesMetric","spans::SpansInfo","breaks::BreaksLeaf","rope::BaseMetric","multiset::Segment","engine::DeltaOp","rope::Utf16CodeUnitsMetric","find::CaseMatching","breaks::BreaksInfo","breaks::BreaksBaseMetric","delta::Delta","diff::DiffBuilder","interval::Interval","rope::RopeInfo","tree::Node","breaks::BreaksMetric","delta::InsertDelta","engine::RevId","multiset::CountMatcher","tree::NodeVal","spans::Span","multiset::Subset","spans::SpansLeaf","engine::FullPriority","engine::Error","engine::Contents"]},"spans::SpansLeaf":{"T":["delta::InsertDelta","multiset::CountMatcher","multiset::Subset","engine::DeltaOp","engine::RevId","diff::DiffBuilder","delta::Delta","engine::Error","rope::BaseMetric","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for *const T>","rope::RopeInfo","spans::SpansInfo","rope::LinesMetric","rope::Utf16CodeUnitsMetric","diff::DiffOp","breaks::BreaksInfo","multiset::Segment","find::CaseMatching","interval::Interval","breaks::BreaksBaseMetric","breaks::BreaksLeaf","tree::NodeVal","engine::Contents","tree::NodeBody","tree::Node","multiset::ZipSegment","spans::Span","spans::SpansLeaf","engine::FullPriority","breaks::BreaksMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // spans::SpansBuilder<T>
let mut p1 = MaybeUninit::uninit().assume_init(); // IV
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+p0.add_span(p1, p2);
+spans::SpansBuilder::<T>::add_span(p0, p1, p2);
+crate::spans::SpansBuilder::<T>::add_span(p0, p1, p2);
+<spans::SpansBuilder<T>>::add_span(p0, p1, p2);
-----------------
rope/src/spans.rs spans::SpansBuilder::<T>::build
deps:{"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansBuilder::<T>::build":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["tree::NodeVal","multiset::ZipSegment","breaks::BreaksLeaf","spans::SpansLeaf","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for *const T>","delta::Delta","breaks::BreaksInfo","delta::DeltaElement","engine::Error","rope::LinesMetric","engine::Contents","rope::Utf16CodeUnitsMetric","find::CaseMatching","breaks::BreaksMetric","multiset::Subset","engine::RevId","rope::BaseMetric","tree::NodeBody","interval::Interval","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::CountMatcher","diff::DiffOp","spans::SpansInfo","spans::Span","rope::RopeInfo","tree::Node","engine::FullPriority","engine::DeltaOp","multiset::Segment","breaks::BreaksBaseMetric","diff::DiffBuilder"]},"spans::SpansBuilder::<T>::build":{"T":["engine::Error","tree::NodeBody","multiset::ZipSegment","spans::Span","diff::DiffBuilder","multiset::CountMatcher","breaks::BreaksMetric","engine::RevId","multiset::Subset","interval::Interval","engine::FullPriority","breaks::BreaksBaseMetric","delta::InsertDelta","tree::Node","tree::NodeVal","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::Utf16CodeUnitsMetric","engine::Contents","std::clone::impls::<impl std::clone::Clone for &T>","delta::Delta","multiset::Segment","diff::DiffOp","engine::DeltaOp","delta::DeltaElement","spans::SpansInfo","breaks::BreaksInfo","spans::SpansLeaf","rope::RopeInfo","rope::BaseMetric","breaks::BreaksLeaf","find::CaseMatching","rope::LinesMetric"]},"spans::SpansInfo":{"T":["spans::SpansInfo","engine::Error","delta::InsertDelta","engine::DeltaOp","tree::Node","multiset::CountMatcher","interval::Interval","diff::DiffOp","rope::RopeInfo","std::clone::impls::<impl std::clone::Clone for &T>","engine::Contents","delta::DeltaElement","diff::DiffBuilder","spans::SpansLeaf","breaks::BreaksLeaf","breaks::BreaksMetric","multiset::Subset","multiset::ZipSegment","engine::FullPriority","engine::RevId","breaks::BreaksBaseMetric","delta::Delta","multiset::Segment","tree::NodeVal","tree::NodeBody","rope::Utf16CodeUnitsMetric","rope::LinesMetric","spans::Span","breaks::BreaksInfo","rope::BaseMetric","find::CaseMatching"]},"spans::SpansLeaf":{"T":["diff::DiffBuilder","engine::Contents","multiset::Segment","rope::BaseMetric","delta::Delta","std::clone::impls::<impl std::clone::Clone for *const T>","rope::Utf16CodeUnitsMetric","breaks::BreaksInfo","breaks::BreaksBaseMetric","spans::Span","multiset::Subset","delta::InsertDelta","interval::Interval","multiset::CountMatcher","breaks::BreaksMetric","delta::DeltaElement","engine::RevId","multiset::ZipSegment","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for *mut T>","breaks::BreaksLeaf","diff::DiffOp","engine::Error","engine::FullPriority","find::CaseMatching","rope::LinesMetric","spans::SpansInfo","spans::SpansLeaf","tree::NodeVal","tree::NodeBody","rope::RopeInfo","tree::Node"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // spans::SpansBuilder<T>
+p0.build();
+spans::SpansBuilder::<T>::build(p0);
+crate::spans::SpansBuilder::<T>::build(p0);
+<spans::SpansBuilder<T>>::build(p0);
-----------------
rope/src/spans.rs spans::<impl tree::Node<spans::SpansInfo<T>>>::transform
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"spans::<impl tree::Node<spans::SpansInfo<T>>>::transform":{"N":["std::marker::Sized","tree::NodeInfo"],"T":["std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","tree::NodeInfo","tree::DefaultMetric","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::<impl tree::Node<spans::SpansInfo<T>>>::transform":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"],"T":["diff::DiffOp","find::CaseMatching","engine::Contents","tree::Node","breaks::BreaksInfo","rope::BaseMetric","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for &mut T>","multiset::Segment","spans::SpansLeaf","tree::NodeBody","rope::Utf16CodeUnitsMetric","multiset::CountMatcher","spans::SpansInfo","engine::RevId","breaks::BreaksMetric","breaks::BreaksLeaf","engine::Error","rope::LinesMetric","delta::InsertDelta","tree::NodeVal","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for &T>","rope::RopeInfo","diff::DiffBuilder","interval::Interval","multiset::Subset","breaks::BreaksBaseMetric","spans::Span","delta::DeltaElement","engine::DeltaOp","delta::Delta"]},"spans::Span":{"T":["delta::Delta","engine::Error","diff::DiffBuilder","engine::Contents","multiset::ZipSegment","delta::DeltaElement","interval::Interval","spans::SpansLeaf","engine::DeltaOp","delta::InsertDelta","multiset::CountMatcher","breaks::BreaksMetric","multiset::Subset","breaks::BreaksLeaf","rope::Utf16CodeUnitsMetric","tree::NodeVal","engine::FullPriority","multiset::Segment","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for &mut T>","breaks::BreaksBaseMetric","rope::BaseMetric","find::CaseMatching","tree::Node","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for *const T>","tree::NodeBody","rope::LinesMetric","engine::RevId","spans::SpansInfo","spans::Span","rope::RopeInfo"]},"spans::SpansInfo":{"T":["engine::Error","delta::InsertDelta","engine::DeltaOp","spans::Span","engine::FullPriority","delta::DeltaElement","rope::Utf16CodeUnitsMetric","rope::BaseMetric","breaks::BreaksInfo","spans::SpansInfo","multiset::CountMatcher","multiset::Segment","delta::Delta","breaks::BreaksMetric","rope::LinesMetric","engine::RevId","rope::RopeInfo","multiset::ZipSegment","breaks::BreaksBaseMetric","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for *const T>","engine::Contents","diff::DiffOp","interval::Interval","diff::DiffBuilder","find::CaseMatching","tree::NodeBody","tree::Node","tree::NodeVal","multiset::Subset","spans::SpansLeaf"]},"spans::SpansLeaf":{"T":["multiset::ZipSegment","diff::DiffBuilder","engine::DeltaOp","delta::InsertDelta","tree::NodeBody","find::CaseMatching","rope::BaseMetric","delta::DeltaElement","multiset::CountMatcher","delta::Delta","engine::Error","multiset::Subset","engine::FullPriority","breaks::BreaksInfo","spans::SpansInfo","spans::SpansLeaf","tree::NodeVal","multiset::Segment","breaks::BreaksBaseMetric","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::RopeInfo","engine::RevId","rope::Utf16CodeUnitsMetric","interval::Interval","breaks::BreaksLeaf","diff::DiffOp","engine::Contents","spans::Span","std::clone::impls::<impl std::clone::Clone for *const T>","tree::Node","breaks::BreaksMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<spans::SpansInfo<T>>
let mut p1 = 0usize; // None+usize
let mut p2 = 0usize; // None+usize
let mut p3 = &mut  MaybeUninit::uninit().assume_init(); // delta::Transformer<'_, N>
+p0.transform(p1, p2, p3);
+spans::<impl tree::Node<spans::SpansInfo<T>>>::transform(p0, p1, p2, p3);
+crate::spans::<impl tree::Node<spans::SpansInfo<T>>>::transform(p0, p1, p2, p3);
+<tree::Node<spans::SpansInfo<T>>>::transform(p0, p1, p2, p3);
-----------------
rope/src/spans.rs spans::<impl tree::Node<spans::SpansInfo<T>>>::merge
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::<impl tree::Node<spans::SpansInfo<T>>>::merge":{"F":["std::marker::Sized","std::ops::FnMut"],"O":["std::clone::Clone","std::marker::Sized"],"T":["std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"tree::Node":{"N":["std::clone::Clone","tree::DefaultMetric","tree::NodeInfo","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::<impl tree::Node<spans::SpansInfo<T>>>::merge":{"F":["core::str::IsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::BytesIsNotEmpty","core::str::UnsafeBytesToStr","core::str::CharEscapeUnicode","std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::LinesAnyMap","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","std::boxed::Box<F, A>","core::str::CharEscapeDebugContinue","std::ops::function::impls::<impl std::ops::FnMut<A> for &F>","core::slice::ascii::EscapeByte","core::str::IsWhitespace","core::str::IsAsciiWhitespace"],"O":["engine::RevId","engine::Error","spans::SpansInfo","diff::DiffOp","rope::RopeInfo","breaks::BreaksBaseMetric","engine::DeltaOp","rope::BaseMetric","engine::Contents","std::clone::impls::<impl std::clone::Clone for &mut T>","delta::Delta","rope::Utf16CodeUnitsMetric","rope::LinesMetric","breaks::BreaksMetric","diff::DiffBuilder","delta::DeltaElement","tree::NodeBody","spans::Span","std::clone::impls::<impl std::clone::Clone for &T>","delta::InsertDelta","tree::Node","multiset::CountMatcher","breaks::BreaksInfo","engine::FullPriority","spans::SpansLeaf","multiset::ZipSegment","tree::NodeVal","find::CaseMatching","multiset::Segment","multiset::Subset","breaks::BreaksLeaf","interval::Interval"],"T":["breaks::BreaksBaseMetric","delta::Delta","rope::LinesMetric","diff::DiffOp","engine::DeltaOp","breaks::BreaksMetric","breaks::BreaksInfo","delta::InsertDelta","tree::Node","engine::Contents","multiset::Segment","tree::NodeVal","engine::RevId","std::clone::impls::<impl std::clone::Clone for &mut T>","spans::Span","find::CaseMatching","breaks::BreaksLeaf","interval::Interval","multiset::Subset","tree::NodeBody","spans::SpansLeaf","multiset::ZipSegment","engine::Error","rope::Utf16CodeUnitsMetric","multiset::CountMatcher","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::BaseMetric","spans::SpansInfo","rope::RopeInfo","diff::DiffBuilder","engine::FullPriority","delta::DeltaElement"]},"spans::Span":{"T":["rope::BaseMetric","breaks::BreaksBaseMetric","engine::Contents","rope::Utf16CodeUnitsMetric","multiset::CountMatcher","spans::SpansLeaf","breaks::BreaksMetric","breaks::BreaksInfo","engine::FullPriority","find::CaseMatching","tree::NodeBody","interval::Interval","breaks::BreaksLeaf","rope::LinesMetric","multiset::Segment","std::clone::impls::<impl std::clone::Clone for &mut T>","diff::DiffBuilder","rope::RopeInfo","engine::RevId","diff::DiffOp","engine::DeltaOp","engine::Error","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for *const T>","spans::Span","delta::Delta","tree::NodeVal","multiset::Subset","spans::SpansInfo","tree::Node","multiset::ZipSegment","delta::DeltaElement"]},"spans::SpansInfo":{"T":["multiset::ZipSegment","spans::Span","tree::Node","delta::Delta","std::clone::impls::<impl std::clone::Clone for *const T>","rope::BaseMetric","tree::NodeBody","multiset::Subset","find::CaseMatching","delta::InsertDelta","diff::DiffOp","engine::RevId","rope::LinesMetric","engine::DeltaOp","breaks::BreaksMetric","interval::Interval","spans::SpansInfo","diff::DiffBuilder","delta::DeltaElement","rope::RopeInfo","multiset::CountMatcher","engine::Error","rope::Utf16CodeUnitsMetric","tree::NodeVal","multiset::Segment","breaks::BreaksInfo","engine::Contents","engine::FullPriority","breaks::BreaksBaseMetric","breaks::BreaksLeaf","spans::SpansLeaf"]},"spans::SpansLeaf":{"T":["delta::InsertDelta","delta::DeltaElement","engine::Error","multiset::ZipSegment","diff::DiffBuilder","tree::Node","multiset::CountMatcher","multiset::Segment","breaks::BreaksInfo","interval::Interval","diff::DiffOp","breaks::BreaksBaseMetric","engine::RevId","spans::SpansLeaf","engine::DeltaOp","rope::BaseMetric","rope::LinesMetric","multiset::Subset","breaks::BreaksMetric","find::CaseMatching","delta::Delta","rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","tree::NodeVal","engine::Contents","spans::Span","breaks::BreaksLeaf","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for *mut T>","tree::NodeBody","spans::SpansInfo","rope::RopeInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnMut<A> for &mut F>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<spans::SpansInfo<T>>
let mut p1 = & MaybeUninit::uninit().assume_init(); // tree::Node<spans::SpansInfo<T>>
let mut p2 = MaybeUninit::uninit().assume_init(); // F
+p0.merge(p1, p2);
+spans::<impl tree::Node<spans::SpansInfo<T>>>::merge(p0, p1, p2);
+crate::spans::<impl tree::Node<spans::SpansInfo<T>>>::merge(p0, p1, p2);
+<tree::Node<spans::SpansInfo<T>>>::merge(p0, p1, p2);
-----------------
rope/src/spans.rs spans::<impl tree::Node<spans::SpansInfo<T>>>::iter
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"spans::<impl tree::Node<spans::SpansInfo<T>>>::iter":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::<impl tree::Node<spans::SpansInfo<T>>>::iter":{"T":["multiset::Subset","engine::FullPriority","engine::RevId","breaks::BreaksInfo","multiset::ZipSegment","diff::DiffBuilder","delta::DeltaElement","spans::SpansLeaf","tree::Node","delta::InsertDelta","spans::SpansInfo","rope::RopeInfo","std::clone::impls::<impl std::clone::Clone for *const T>","find::CaseMatching","delta::Delta","breaks::BreaksMetric","interval::Interval","rope::Utf16CodeUnitsMetric","diff::DiffOp","rope::LinesMetric","breaks::BreaksBaseMetric","tree::NodeVal","spans::Span","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::DeltaOp","multiset::CountMatcher","tree::NodeBody","breaks::BreaksLeaf","rope::BaseMetric","engine::Error","engine::Contents","multiset::Segment"]},"spans::Span":{"T":["std::clone::impls::<impl std::clone::Clone for &T>","spans::SpansInfo","rope::RopeInfo","spans::Span","diff::DiffBuilder","interval::Interval","multiset::ZipSegment","multiset::Subset","engine::Error","tree::Node","delta::DeltaElement","delta::Delta","rope::LinesMetric","multiset::Segment","engine::DeltaOp","breaks::BreaksMetric","breaks::BreaksInfo","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for *const T>","diff::DiffOp","find::CaseMatching","tree::NodeBody","engine::RevId","delta::InsertDelta","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","rope::BaseMetric","spans::SpansLeaf","engine::Contents","multiset::CountMatcher","tree::NodeVal","breaks::BreaksLeaf"]},"spans::SpansInfo":{"T":["tree::NodeBody","engine::DeltaOp","tree::NodeVal","delta::Delta","engine::Contents","rope::Utf16CodeUnitsMetric","breaks::BreaksLeaf","delta::InsertDelta","delta::DeltaElement","engine::FullPriority","spans::SpansInfo","breaks::BreaksInfo","diff::DiffBuilder","spans::Span","interval::Interval","multiset::Subset","tree::Node","rope::RopeInfo","breaks::BreaksBaseMetric","rope::LinesMetric","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for &T>","engine::Error","breaks::BreaksMetric","multiset::CountMatcher","multiset::Segment","engine::RevId","spans::SpansLeaf","find::CaseMatching","rope::BaseMetric","multiset::ZipSegment"]},"spans::SpansLeaf":{"T":["find::CaseMatching","breaks::BreaksLeaf","interval::Interval","diff::DiffBuilder","rope::Utf16CodeUnitsMetric","tree::NodeVal","engine::RevId","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::FullPriority","delta::InsertDelta","delta::Delta","breaks::BreaksInfo","breaks::BreaksMetric","engine::Error","multiset::ZipSegment","tree::NodeBody","rope::BaseMetric","multiset::Subset","spans::SpansInfo","spans::Span","rope::RopeInfo","rope::LinesMetric","delta::DeltaElement","breaks::BreaksBaseMetric","engine::Contents","multiset::Segment","diff::DiffOp","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for &mut T>","spans::SpansLeaf","tree::Node","multiset::CountMatcher"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<spans::SpansInfo<T>>
+p0.iter();
+spans::<impl tree::Node<spans::SpansInfo<T>>>::iter(p0);
+crate::spans::<impl tree::Node<spans::SpansInfo<T>>>::iter(p0);
+<tree::Node<spans::SpansInfo<T>>>::iter(p0);
-----------------
rope/src/spans.rs spans::<impl tree::Node<spans::SpansInfo<T>>>::apply_shape
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::<impl tree::Node<spans::SpansInfo<T>>>::apply_shape":{"M":["tree::NodeInfo","std::marker::Sized"],"T":["std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","std::marker::Sized","tree::DefaultMetric","std::clone::Clone"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::<impl tree::Node<spans::SpansInfo<T>>>::apply_shape":{"M":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"],"T":["spans::Span","rope::Utf16CodeUnitsMetric","rope::BaseMetric","tree::NodeVal","engine::RevId","rope::LinesMetric","interval::Interval","diff::DiffBuilder","multiset::Subset","breaks::BreaksLeaf","multiset::ZipSegment","breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for &T>","delta::InsertDelta","multiset::CountMatcher","breaks::BreaksInfo","engine::FullPriority","diff::DiffOp","spans::SpansInfo","tree::NodeBody","engine::DeltaOp","engine::Error","spans::SpansLeaf","breaks::BreaksBaseMetric","engine::Contents","multiset::Segment","rope::RopeInfo","tree::Node","delta::DeltaElement","delta::Delta","find::CaseMatching"]},"spans::Span":{"T":["engine::Contents","breaks::BreaksBaseMetric","delta::DeltaElement","engine::Error","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for &T>","engine::DeltaOp","spans::Span","tree::NodeBody","multiset::ZipSegment","interval::Interval","rope::LinesMetric","tree::Node","tree::NodeVal","spans::SpansLeaf","rope::RopeInfo","rope::BaseMetric","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for *mut T>","delta::Delta","diff::DiffBuilder","multiset::CountMatcher","spans::SpansInfo","breaks::BreaksMetric","multiset::Subset","diff::DiffOp","breaks::BreaksInfo","engine::RevId","delta::InsertDelta","multiset::Segment","rope::Utf16CodeUnitsMetric","engine::FullPriority"]},"spans::SpansInfo":{"T":["rope::Utf16CodeUnitsMetric","engine::FullPriority","find::CaseMatching","interval::Interval","engine::DeltaOp","engine::Error","delta::Delta","breaks::BreaksBaseMetric","delta::DeltaElement","tree::NodeVal","breaks::BreaksLeaf","rope::RopeInfo","multiset::Segment","breaks::BreaksMetric","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for &mut T>","spans::Span","multiset::ZipSegment","engine::Contents","diff::DiffBuilder","rope::LinesMetric","tree::Node","tree::NodeBody","delta::InsertDelta","multiset::CountMatcher","rope::BaseMetric","diff::DiffOp","spans::SpansInfo","engine::RevId","multiset::Subset","spans::SpansLeaf"]},"spans::SpansLeaf":{"T":["multiset::Subset","rope::Utf16CodeUnitsMetric","spans::Span","rope::BaseMetric","rope::LinesMetric","spans::SpansInfo","tree::Node","interval::Interval","breaks::BreaksInfo","engine::FullPriority","engine::RevId","spans::SpansLeaf","delta::InsertDelta","delta::Delta","diff::DiffOp","find::CaseMatching","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for &mut T>","multiset::CountMatcher","engine::DeltaOp","breaks::BreaksBaseMetric","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::Contents","diff::DiffBuilder","engine::Error","breaks::BreaksMetric","tree::NodeVal","tree::NodeBody","multiset::Segment","multiset::ZipSegment","delta::DeltaElement","rope::RopeInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Node<spans::SpansInfo<T>>
let mut p1 = & MaybeUninit::uninit().assume_init(); // delta::Delta<M>
+p0.apply_shape(p1);
+spans::<impl tree::Node<spans::SpansInfo<T>>>::apply_shape(p0, p1);
+crate::spans::<impl tree::Node<spans::SpansInfo<T>>>::apply_shape(p0, p1);
+<tree::Node<spans::SpansInfo<T>>>::apply_shape(p0, p1);
-----------------
rope/src/spans.rs spans::<impl tree::Node<spans::SpansInfo<T>>>::delete_after
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"spans::<impl tree::Node<spans::SpansInfo<T>>>::delete_after":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","tree::DefaultMetric","tree::NodeInfo","std::marker::Sized"]},"tree::NodeBody":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::<impl tree::Node<spans::SpansInfo<T>>>::delete_after":{"T":["multiset::Subset","delta::DeltaElement","tree::Node","engine::DeltaOp","spans::SpansLeaf","multiset::Segment","engine::Contents","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksBaseMetric","find::CaseMatching","breaks::BreaksInfo","engine::Error","rope::LinesMetric","spans::Span","rope::RopeInfo","engine::FullPriority","diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for *const T>","interval::Interval","multiset::CountMatcher","delta::InsertDelta","spans::SpansInfo","breaks::BreaksLeaf","tree::NodeBody","breaks::BreaksMetric","rope::Utf16CodeUnitsMetric","multiset::ZipSegment","delta::Delta","rope::BaseMetric","tree::NodeVal","engine::RevId","diff::DiffOp"]},"spans::Span":{"T":["breaks::BreaksLeaf","breaks::BreaksMetric","multiset::CountMatcher","spans::SpansLeaf","delta::InsertDelta","delta::DeltaElement","engine::DeltaOp","diff::DiffBuilder","tree::NodeBody","spans::Span","delta::Delta","multiset::Subset","breaks::BreaksBaseMetric","engine::Contents","engine::Error","find::CaseMatching","breaks::BreaksInfo","tree::NodeVal","spans::SpansInfo","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for &T>","engine::RevId","tree::Node","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::RopeInfo","rope::Utf16CodeUnitsMetric","interval::Interval","multiset::ZipSegment","multiset::Segment","diff::DiffOp","rope::BaseMetric"]},"spans::SpansInfo":{"T":["breaks::BreaksLeaf","rope::Utf16CodeUnitsMetric","delta::InsertDelta","spans::SpansLeaf","multiset::ZipSegment","rope::LinesMetric","multiset::Segment","delta::DeltaElement","engine::FullPriority","rope::RopeInfo","std::clone::impls::<impl std::clone::Clone for &mut T>","breaks::BreaksBaseMetric","engine::Contents","breaks::BreaksInfo","delta::Delta","interval::Interval","find::CaseMatching","engine::DeltaOp","tree::NodeBody","diff::DiffOp","tree::NodeVal","tree::Node","diff::DiffBuilder","engine::Error","spans::Span","breaks::BreaksMetric","multiset::Subset","multiset::CountMatcher","spans::SpansInfo","engine::RevId","rope::BaseMetric"]},"spans::SpansLeaf":{"T":["engine::FullPriority","breaks::BreaksMetric","rope::RopeInfo","std::clone::impls::<impl std::clone::Clone for &mut T>","breaks::BreaksBaseMetric","spans::Span","find::CaseMatching","rope::Utf16CodeUnitsMetric","delta::InsertDelta","multiset::CountMatcher","multiset::Subset","tree::NodeBody","tree::Node","tree::NodeVal","breaks::BreaksInfo","engine::Error","engine::DeltaOp","spans::SpansInfo","spans::SpansLeaf","interval::Interval","engine::Contents","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::LinesMetric","multiset::Segment","delta::DeltaElement","rope::BaseMetric","diff::DiffOp","breaks::BreaksLeaf","diff::DiffBuilder","delta::Delta","engine::RevId","multiset::ZipSegment"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Node<spans::SpansInfo<T>>
let mut p1 = MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.delete_after(p1);
+spans::<impl tree::Node<spans::SpansInfo<T>>>::delete_after(p0, p1);
+crate::spans::<impl tree::Node<spans::SpansInfo<T>>>::delete_after(p0, p1);
+<tree::Node<spans::SpansInfo<T>>>::delete_after(p0, p1);
-----------------
rope/src/spans.rs spans::<impl std::fmt::Debug for tree::Node<spans::SpansInfo<T>>>::fmt
deps:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"spans::<impl std::fmt::Debug for tree::Node<spans::SpansInfo<T>>>::fmt":{"T":["std::marker::Sized","std::clone::Clone","std::fmt::Debug"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","std::clone::Clone","tree::DefaultMetric","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]}}
candidates:{"<&T as std::fmt::Debug>":{},"<&mut T as std::fmt::Debug>":{},"<*const T as std::fmt::Debug>":{},"<*mut T as std::fmt::Debug>":{},"delta::Delta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::<impl std::fmt::Debug for tree::Node<spans::SpansInfo<T>>>::fmt":{"T":["engine::DeltaOp","engine::RevId","multiset::Segment","std::clone::impls::<impl std::clone::Clone for *const T>","delta::InsertDelta","breaks::BreaksLeaf","interval::Interval","diff::DiffOp","engine::Contents","<&T as std::fmt::Debug>","delta::Delta","diff::DiffBuilder","breaks::BreaksInfo","engine::Error","multiset::CountMatcher","multiset::ZipSegment","multiset::Subset"]},"spans::Span":{"T":["multiset::CountMatcher","interval::Interval","breaks::BreaksMetric","multiset::Subset","find::CaseMatching","engine::FullPriority","delta::InsertDelta","engine::DeltaOp","tree::NodeBody","breaks::BreaksInfo","diff::DiffBuilder","rope::BaseMetric","spans::SpansLeaf","multiset::ZipSegment","breaks::BreaksLeaf","engine::Contents","spans::SpansInfo","delta::DeltaElement","breaks::BreaksBaseMetric","tree::NodeVal","spans::Span","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::RevId","tree::Node","multiset::Segment","diff::DiffOp","engine::Error","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::Utf16CodeUnitsMetric","rope::RopeInfo","delta::Delta"]},"spans::SpansInfo":{"T":["tree::Node","delta::InsertDelta","tree::NodeVal","multiset::Segment","engine::Contents","rope::LinesMetric","engine::Error","multiset::ZipSegment","diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for *const T>","engine::DeltaOp","tree::NodeBody","interval::Interval","engine::FullPriority","engine::RevId","diff::DiffOp","spans::SpansLeaf","multiset::Subset","breaks::BreaksInfo","rope::BaseMetric","rope::RopeInfo","breaks::BreaksMetric","multiset::CountMatcher","delta::DeltaElement","delta::Delta","spans::SpansInfo","breaks::BreaksLeaf","rope::Utf16CodeUnitsMetric","find::CaseMatching","spans::Span","breaks::BreaksBaseMetric"]},"spans::SpansLeaf":{"T":["delta::InsertDelta","rope::RopeInfo","spans::SpansLeaf","tree::Node","std::clone::impls::<impl std::clone::Clone for *const T>","delta::Delta","breaks::BreaksMetric","spans::SpansInfo","engine::RevId","diff::DiffOp","tree::NodeVal","multiset::Segment","multiset::ZipSegment","breaks::BreaksBaseMetric","spans::Span","multiset::Subset","engine::Error","engine::DeltaOp","engine::Contents","delta::DeltaElement","diff::DiffBuilder","rope::Utf16CodeUnitsMetric","rope::LinesMetric","tree::NodeBody","rope::BaseMetric","engine::FullPriority","breaks::BreaksLeaf","find::CaseMatching","multiset::CountMatcher","interval::Interval","std::clone::impls::<impl std::clone::Clone for *mut T>","breaks::BreaksInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<spans::SpansInfo<T>>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // std::fmt::Formatter<'_>
+format!("{:?}", p0);
+p0.fmt(p1);
+spans::<impl std::fmt::Debug for tree::Node<spans::SpansInfo<T>>>::fmt(p0, p1);
+crate::spans::<impl std::fmt::Debug for tree::Node<spans::SpansInfo<T>>>::fmt(p0, p1);
+<tree::Node<spans::SpansInfo<T>>>::fmt(p0, p1);
-----------------
rope/src/spans.rs <spans::SpanIter<'a, T> as std::iter::Iterator>::next
'a
deps:{"<spans::SpanIter<'a, T> as std::iter::Iterator>::next":{"T":["std::marker::Sized","std::clone::Clone"]},"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","tree::DefaultMetric","std::marker::Sized","std::clone::Clone"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"<spans::SpanIter<'a, T> as std::iter::Iterator>::next":{"T":["rope::RopeInfo","engine::Contents","spans::Span","engine::RevId","find::CaseMatching","interval::Interval","tree::NodeVal","std::clone::impls::<impl std::clone::Clone for *const T>","breaks::BreaksBaseMetric","breaks::BreaksLeaf","delta::Delta","diff::DiffBuilder","tree::NodeBody","tree::Node","delta::DeltaElement","spans::SpansLeaf","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for &T>","multiset::Subset","delta::InsertDelta","breaks::BreaksInfo","rope::BaseMetric","multiset::Segment","multiset::ZipSegment","engine::Error","multiset::CountMatcher","engine::FullPriority","breaks::BreaksMetric","rope::Utf16CodeUnitsMetric","diff::DiffOp","rope::LinesMetric","spans::SpansInfo"]},"delta::Delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["delta::InsertDelta","breaks::BreaksLeaf","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::BaseMetric","breaks::BreaksBaseMetric","delta::Delta","engine::RevId","rope::RopeInfo","engine::Error","spans::SpansInfo","multiset::Subset","delta::DeltaElement","tree::NodeBody","engine::Contents","tree::Node","spans::SpansLeaf","multiset::CountMatcher","engine::DeltaOp","interval::Interval","spans::Span","engine::FullPriority","multiset::Segment","diff::DiffBuilder","tree::NodeVal","breaks::BreaksMetric","find::CaseMatching","multiset::ZipSegment","breaks::BreaksInfo","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for *const T>","rope::Utf16CodeUnitsMetric"]},"spans::SpansInfo":{"T":["breaks::BreaksBaseMetric","spans::SpansInfo","diff::DiffBuilder","interval::Interval","std::clone::impls::<impl std::clone::Clone for *const T>","rope::LinesMetric","engine::DeltaOp","multiset::ZipSegment","multiset::CountMatcher","spans::Span","rope::Utf16CodeUnitsMetric","spans::SpansLeaf","breaks::BreaksLeaf","multiset::Segment","breaks::BreaksMetric","engine::Error","delta::DeltaElement","delta::Delta","multiset::Subset","tree::NodeBody","engine::Contents","find::CaseMatching","delta::InsertDelta","tree::Node","rope::RopeInfo","engine::FullPriority","tree::NodeVal","diff::DiffOp","breaks::BreaksInfo","rope::BaseMetric","engine::RevId"]},"spans::SpansLeaf":{"T":["diff::DiffOp","tree::NodeVal","diff::DiffBuilder","rope::Utf16CodeUnitsMetric","rope::BaseMetric","spans::SpansLeaf","multiset::ZipSegment","delta::DeltaElement","multiset::CountMatcher","spans::Span","breaks::BreaksMetric","tree::Node","rope::RopeInfo","breaks::BreaksBaseMetric","engine::DeltaOp","breaks::BreaksLeaf","rope::LinesMetric","engine::Error","engine::RevId","engine::FullPriority","delta::InsertDelta","spans::SpansInfo","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for &mut T>","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::Subset","tree::NodeBody","multiset::Segment","breaks::BreaksInfo","delta::Delta","interval::Interval","engine::Contents"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // spans::SpanIter<'a, T>
+p0.next();
+<spans::SpanIter<'a, T> as std::iter::Iterator>::next(p0);
+crate::<spans::SpanIter<'a, T> as std::iter::Iterator>::next(p0);
+<spans::SpanIter<'a, T>>::next(p0);
-----------------
rope/src/tree.rs <tree::Node<N> as std::clone::Clone>::clone
deps:{"<tree::Node<N> as std::clone::Clone>::clone":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo","tree::DefaultMetric"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"<tree::Node<N> as std::clone::Clone>::clone":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::Delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["rope::LinesMetric","tree::NodeVal","engine::Error","diff::DiffOp","multiset::Subset","engine::DeltaOp","diff::DiffBuilder","engine::RevId","engine::FullPriority","spans::SpansLeaf","breaks::BreaksLeaf","rope::Utf16CodeUnitsMetric","delta::Delta","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksInfo","breaks::BreaksMetric","tree::Node","multiset::ZipSegment","delta::InsertDelta","breaks::BreaksBaseMetric","tree::NodeBody","std::clone::impls::<impl std::clone::Clone for *const T>","engine::Contents","rope::RopeInfo","delta::DeltaElement","spans::SpansInfo","multiset::Segment","multiset::CountMatcher","interval::Interval","find::CaseMatching","spans::Span","rope::BaseMetric"]},"spans::SpansInfo":{"T":["multiset::CountMatcher","tree::NodeVal","engine::RevId","find::CaseMatching","rope::BaseMetric","diff::DiffBuilder","engine::Contents","delta::DeltaElement","engine::DeltaOp","breaks::BreaksBaseMetric","interval::Interval","tree::NodeBody","breaks::BreaksLeaf","delta::InsertDelta","engine::FullPriority","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for *mut T>","spans::SpansLeaf","rope::LinesMetric","rope::Utf16CodeUnitsMetric","spans::SpansInfo","rope::RopeInfo","multiset::ZipSegment","multiset::Subset","diff::DiffOp","engine::Error","breaks::BreaksMetric","multiset::Segment","tree::Node","delta::Delta","spans::Span"]},"spans::SpansLeaf":{"T":["find::CaseMatching","spans::Span","tree::Node","tree::NodeVal","breaks::BreaksBaseMetric","breaks::BreaksLeaf","delta::DeltaElement","interval::Interval","engine::DeltaOp","delta::Delta","spans::SpansInfo","diff::DiffOp","spans::SpansLeaf","engine::FullPriority","multiset::ZipSegment","diff::DiffBuilder","multiset::Subset","multiset::CountMatcher","breaks::BreaksMetric","engine::RevId","delta::InsertDelta","engine::Error","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksInfo","tree::NodeBody","rope::LinesMetric","multiset::Segment","rope::Utf16CodeUnitsMetric","rope::BaseMetric","engine::Contents","rope::RopeInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
+p0.clone();
+<tree::Node<N> as std::clone::Clone>::clone(p0);
+crate::<tree::Node<N> as std::clone::Clone>::clone(p0);
+<tree::Node<N>>::clone(p0);
-----------------
rope/src/tree.rs <tree::NodeBody<N> as std::clone::Clone>::clone
deps:{"<tree::NodeBody<N> as std::clone::Clone>::clone":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::Delta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"<tree::NodeBody<N> as std::clone::Clone>::clone":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["interval::Interval","multiset::CountMatcher","spans::Span","breaks::BreaksLeaf","engine::FullPriority","breaks::BreaksMetric","rope::Utf16CodeUnitsMetric","engine::Contents","tree::Node","tree::NodeBody","diff::DiffBuilder","engine::Error","multiset::Subset","spans::SpansLeaf","delta::Delta","delta::InsertDelta","rope::LinesMetric","find::CaseMatching","delta::DeltaElement","breaks::BreaksBaseMetric","multiset::Segment","multiset::ZipSegment","spans::SpansInfo","rope::RopeInfo","diff::DiffOp","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for *const T>","rope::BaseMetric","engine::DeltaOp","engine::RevId","tree::NodeVal"]},"spans::SpansInfo":{"T":["engine::FullPriority","engine::DeltaOp","breaks::BreaksMetric","rope::RopeInfo","spans::Span","delta::DeltaElement","engine::Error","breaks::BreaksLeaf","breaks::BreaksBaseMetric","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for *const T>","tree::Node","engine::RevId","interval::Interval","spans::SpansInfo","tree::NodeVal","delta::InsertDelta","rope::LinesMetric","find::CaseMatching","multiset::CountMatcher","diff::DiffBuilder","rope::BaseMetric","multiset::Segment","delta::Delta","rope::Utf16CodeUnitsMetric","engine::Contents","spans::SpansLeaf","multiset::ZipSegment","breaks::BreaksInfo","multiset::Subset","tree::NodeBody"]},"spans::SpansLeaf":{"T":["multiset::Subset","rope::RopeInfo","interval::Interval","delta::Delta","breaks::BreaksInfo","spans::SpansInfo","rope::LinesMetric","tree::Node","engine::FullPriority","delta::InsertDelta","breaks::BreaksBaseMetric","diff::DiffOp","spans::Span","rope::BaseMetric","tree::NodeBody","engine::RevId","engine::DeltaOp","rope::Utf16CodeUnitsMetric","spans::SpansLeaf","breaks::BreaksLeaf","engine::Error","engine::Contents","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksMetric","delta::DeltaElement","multiset::CountMatcher","multiset::Segment","diff::DiffBuilder","multiset::ZipSegment","tree::NodeVal","find::CaseMatching"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::NodeBody<N>
+p0.clone();
+<tree::NodeBody<N> as std::clone::Clone>::clone(p0);
+crate::<tree::NodeBody<N> as std::clone::Clone>::clone(p0);
+<tree::NodeBody<N>>::clone(p0);
-----------------
rope/src/tree.rs <tree::NodeVal<N> as std::clone::Clone>::clone
deps:{"<tree::NodeVal<N> as std::clone::Clone>::clone":{"<N as tree::NodeInfo>::L":["std::clone::Clone"],"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","tree::DefaultMetric","std::marker::Sized","std::clone::Clone"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"<tree::NodeVal<N> as std::clone::Clone>::clone":{"<N as tree::NodeInfo>::L":["delta::InsertDelta","diff::DiffBuilder","tree::NodeVal","rope::BaseMetric","breaks::BreaksMetric","breaks::BreaksBaseMetric","multiset::Segment","engine::RevId","rope::RopeInfo","breaks::BreaksLeaf","breaks::BreaksInfo","multiset::CountMatcher","interval::Interval","engine::DeltaOp","multiset::ZipSegment","delta::Delta","tree::NodeBody","multiset::Subset","engine::FullPriority","spans::Span","rope::Utf16CodeUnitsMetric","tree::Node","rope::LinesMetric","spans::SpansLeaf","spans::SpansInfo","engine::Contents","delta::DeltaElement","diff::DiffOp","engine::Error","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for *const T>"],"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["engine::FullPriority","delta::InsertDelta","tree::NodeBody","spans::SpansLeaf","breaks::BreaksInfo","engine::DeltaOp","engine::Error","multiset::Subset","delta::Delta","multiset::ZipSegment","tree::Node","std::clone::impls::<impl std::clone::Clone for &T>","delta::DeltaElement","tree::NodeVal","engine::RevId","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::LinesMetric","spans::Span","interval::Interval","diff::DiffBuilder","spans::SpansInfo","engine::Contents","breaks::BreaksBaseMetric","diff::DiffOp","breaks::BreaksLeaf","find::CaseMatching","rope::RopeInfo","rope::Utf16CodeUnitsMetric","breaks::BreaksMetric","multiset::Segment","rope::BaseMetric","multiset::CountMatcher"]},"spans::SpansInfo":{"T":["rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::Segment","rope::RopeInfo","breaks::BreaksLeaf","delta::InsertDelta","multiset::ZipSegment","tree::Node","breaks::BreaksMetric","engine::Error","engine::Contents","tree::NodeVal","multiset::CountMatcher","engine::DeltaOp","delta::Delta","engine::FullPriority","diff::DiffBuilder","spans::SpansInfo","rope::Utf16CodeUnitsMetric","diff::DiffOp","interval::Interval","engine::RevId","find::CaseMatching","spans::Span","breaks::BreaksInfo","tree::NodeBody","breaks::BreaksBaseMetric","rope::LinesMetric","spans::SpansLeaf","delta::DeltaElement","multiset::Subset"]},"spans::SpansLeaf":{"T":["multiset::Subset","rope::BaseMetric","spans::SpansLeaf","interval::Interval","diff::DiffOp","breaks::BreaksMetric","engine::DeltaOp","rope::Utf16CodeUnitsMetric","delta::InsertDelta","engine::Error","spans::SpansInfo","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for *const T>","engine::FullPriority","tree::NodeVal","tree::NodeBody","rope::RopeInfo","engine::Contents","delta::DeltaElement","diff::DiffBuilder","breaks::BreaksInfo","delta::Delta","multiset::Segment","breaks::BreaksBaseMetric","find::CaseMatching","engine::RevId","rope::LinesMetric","spans::Span","breaks::BreaksLeaf","tree::Node","multiset::CountMatcher","std::clone::impls::<impl std::clone::Clone for &mut T>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::NodeVal<N>
+p0.clone();
+<tree::NodeVal<N> as std::clone::Clone>::clone(p0);
+crate::<tree::NodeVal<N> as std::clone::Clone>::clone(p0);
+<tree::NodeVal<N>>::clone(p0);
-----------------
rope/src/tree.rs tree::Node::<N>::from_leaf
deps:{"delta::Delta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo","tree::DefaultMetric"]},"tree::Node::<N>::from_leaf":{"N":["std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["engine::RevId","multiset::CountMatcher","breaks::BreaksInfo","spans::SpansInfo","rope::BaseMetric","find::CaseMatching","diff::DiffBuilder","spans::Span","engine::Contents","breaks::BreaksLeaf","multiset::Segment","breaks::BreaksBaseMetric","engine::FullPriority","delta::InsertDelta","rope::RopeInfo","interval::Interval","tree::Node","rope::Utf16CodeUnitsMetric","delta::Delta","multiset::ZipSegment","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for *const T>","tree::NodeBody","breaks::BreaksMetric","engine::DeltaOp","tree::NodeVal","spans::SpansLeaf","engine::Error","delta::DeltaElement","multiset::Subset","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"spans::SpansInfo":{"T":["interval::Interval","delta::Delta","delta::DeltaElement","rope::LinesMetric","engine::Contents","engine::DeltaOp","delta::InsertDelta","breaks::BreaksLeaf","tree::NodeVal","multiset::ZipSegment","find::CaseMatching","rope::RopeInfo","breaks::BreaksMetric","spans::SpansInfo","engine::FullPriority","engine::Error","tree::Node","multiset::CountMatcher","spans::Span","multiset::Subset","multiset::Segment","spans::SpansLeaf","engine::RevId","diff::DiffBuilder","breaks::BreaksInfo","diff::DiffOp","rope::Utf16CodeUnitsMetric","rope::BaseMetric","breaks::BreaksBaseMetric","tree::NodeBody","std::clone::impls::<impl std::clone::Clone for &mut T>"]},"spans::SpansLeaf":{"T":["engine::DeltaOp","find::CaseMatching","breaks::BreaksBaseMetric","spans::SpansInfo","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::Error","multiset::ZipSegment","rope::LinesMetric","rope::RopeInfo","delta::InsertDelta","engine::Contents","rope::Utf16CodeUnitsMetric","breaks::BreaksInfo","spans::Span","breaks::BreaksMetric","diff::DiffBuilder","tree::NodeVal","tree::NodeBody","tree::Node","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::Segment","multiset::CountMatcher","engine::RevId","spans::SpansLeaf","rope::BaseMetric","multiset::Subset","engine::FullPriority","interval::Interval","delta::DeltaElement","diff::DiffOp","delta::Delta","breaks::BreaksLeaf"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::Node::<N>::from_leaf":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // <N as tree::NodeInfo>::L
+tree::Node::<N>::from_leaf(p0);
+crate::tree::Node::<N>::from_leaf(p0);
+<tree::Node<N>>::from_leaf(p0);
-----------------
rope/src/tree.rs tree::Node::<N>::from_nodes
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone","tree::DefaultMetric"]},"tree::Node::<N>::from_nodes":{"N":["std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"spans::Span":{"T":["multiset::Subset","tree::Node","spans::Span","engine::Contents","rope::BaseMetric","engine::FullPriority","rope::LinesMetric","rope::Utf16CodeUnitsMetric","delta::Delta","spans::SpansLeaf","multiset::Segment","diff::DiffBuilder","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksMetric","interval::Interval","delta::InsertDelta","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::Error","spans::SpansInfo","engine::RevId","rope::RopeInfo","multiset::ZipSegment","multiset::CountMatcher","breaks::BreaksBaseMetric","tree::NodeVal","find::CaseMatching","diff::DiffOp","tree::NodeBody","breaks::BreaksLeaf","breaks::BreaksInfo"]},"spans::SpansInfo":{"T":["spans::Span","engine::DeltaOp","breaks::BreaksInfo","breaks::BreaksBaseMetric","diff::DiffOp","engine::RevId","multiset::Subset","multiset::CountMatcher","tree::NodeVal","diff::DiffBuilder","delta::DeltaElement","breaks::BreaksLeaf","engine::FullPriority","multiset::Segment","find::CaseMatching","breaks::BreaksMetric","tree::Node","std::clone::impls::<impl std::clone::Clone for *const T>","rope::LinesMetric","delta::InsertDelta","engine::Error","rope::Utf16CodeUnitsMetric","spans::SpansInfo","multiset::ZipSegment","delta::Delta","tree::NodeBody","interval::Interval","rope::RopeInfo","engine::Contents","rope::BaseMetric","spans::SpansLeaf"]},"spans::SpansLeaf":{"T":["spans::SpansInfo","std::clone::impls::<impl std::clone::Clone for *const T>","diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::DeltaOp","tree::NodeVal","engine::Error","rope::Utf16CodeUnitsMetric","breaks::BreaksMetric","delta::Delta","spans::SpansLeaf","multiset::CountMatcher","tree::NodeBody","multiset::Segment","diff::DiffOp","interval::Interval","engine::Contents","multiset::ZipSegment","rope::LinesMetric","find::CaseMatching","tree::Node","breaks::BreaksBaseMetric","rope::RopeInfo","multiset::Subset","delta::InsertDelta","breaks::BreaksInfo","spans::Span","breaks::BreaksLeaf","delta::DeltaElement","engine::FullPriority","engine::RevId","rope::BaseMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::Node::<N>::from_nodes":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // std::vec::Vec<tree::Node<N>>
+tree::Node::<N>::from_nodes(p0);
+crate::tree::Node::<N>::from_nodes(p0);
+<tree::Node<N>>::from_nodes(p0);
-----------------
rope/src/tree.rs tree::Node::<N>::len
deps:{"delta::Delta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo","tree::DefaultMetric"]},"tree::Node::<N>::len":{"N":["tree::NodeInfo","std::marker::Sized"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["engine::Error","tree::Node","engine::FullPriority","delta::InsertDelta","spans::Span","rope::BaseMetric","breaks::BreaksInfo","interval::Interval","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::RopeInfo","diff::DiffBuilder","delta::DeltaElement","tree::NodeVal","rope::Utf16CodeUnitsMetric","delta::Delta","breaks::BreaksMetric","find::CaseMatching","rope::LinesMetric","multiset::CountMatcher","spans::SpansLeaf","multiset::ZipSegment","breaks::BreaksBaseMetric","breaks::BreaksLeaf","engine::RevId","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for *mut T>","diff::DiffOp","multiset::Segment","spans::SpansInfo","engine::Contents","tree::NodeBody","multiset::Subset"]},"spans::SpansInfo":{"T":["find::CaseMatching","multiset::Segment","engine::Error","spans::Span","diff::DiffBuilder","multiset::CountMatcher","breaks::BreaksInfo","breaks::BreaksMetric","breaks::BreaksBaseMetric","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::LinesMetric","delta::Delta","delta::DeltaElement","engine::Contents","tree::NodeVal","spans::SpansInfo","breaks::BreaksLeaf","rope::BaseMetric","rope::RopeInfo","engine::RevId","tree::Node","engine::FullPriority","spans::SpansLeaf","engine::DeltaOp","rope::Utf16CodeUnitsMetric","delta::InsertDelta","interval::Interval","tree::NodeBody","diff::DiffOp","multiset::Subset"]},"spans::SpansLeaf":{"T":["engine::Contents","multiset::Subset","multiset::ZipSegment","diff::DiffOp","spans::SpansLeaf","interval::Interval","delta::Delta","spans::SpansInfo","rope::BaseMetric","spans::Span","find::CaseMatching","tree::NodeVal","rope::RopeInfo","delta::DeltaElement","rope::LinesMetric","tree::NodeBody","multiset::Segment","multiset::CountMatcher","engine::RevId","engine::DeltaOp","breaks::BreaksLeaf","diff::DiffBuilder","rope::Utf16CodeUnitsMetric","engine::Error","breaks::BreaksMetric","tree::Node","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for *mut T>","breaks::BreaksBaseMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","delta::InsertDelta","breaks::BreaksInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::Node::<N>::len":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
+p0.len();
+tree::Node::<N>::len(p0);
+crate::tree::Node::<N>::len(p0);
+<tree::Node<N>>::len(p0);
-----------------
rope/src/tree.rs tree::Node::<N>::is_empty
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","tree::DefaultMetric","tree::NodeInfo","std::clone::Clone"]},"tree::Node::<N>::is_empty":{"N":["std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["breaks::BreaksMetric","spans::Span","engine::Error","rope::LinesMetric","delta::InsertDelta","diff::DiffBuilder","find::CaseMatching","spans::SpansLeaf","multiset::Subset","engine::Contents","multiset::CountMatcher","rope::BaseMetric","multiset::Segment","engine::DeltaOp","delta::DeltaElement","breaks::BreaksBaseMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","breaks::BreaksInfo","multiset::ZipSegment","interval::Interval","diff::DiffOp","tree::NodeVal","engine::FullPriority","tree::Node","rope::RopeInfo","delta::Delta","breaks::BreaksLeaf","tree::NodeBody","std::clone::impls::<impl std::clone::Clone for *const T>","rope::Utf16CodeUnitsMetric","spans::SpansInfo","engine::RevId"]},"spans::SpansInfo":{"T":["engine::Contents","engine::Error","rope::LinesMetric","interval::Interval","spans::SpansInfo","tree::Node","breaks::BreaksMetric","rope::Utf16CodeUnitsMetric","breaks::BreaksBaseMetric","breaks::BreaksLeaf","engine::RevId","multiset::ZipSegment","multiset::CountMatcher","engine::FullPriority","spans::SpansLeaf","tree::NodeVal","engine::DeltaOp","delta::DeltaElement","diff::DiffOp","rope::BaseMetric","delta::Delta","std::clone::impls::<impl std::clone::Clone for &mut T>","find::CaseMatching","multiset::Segment","tree::NodeBody","spans::Span","delta::InsertDelta","diff::DiffBuilder","multiset::Subset","rope::RopeInfo","breaks::BreaksInfo"]},"spans::SpansLeaf":{"T":["spans::SpansInfo","tree::NodeVal","breaks::BreaksLeaf","find::CaseMatching","rope::RopeInfo","breaks::BreaksMetric","delta::InsertDelta","spans::SpansLeaf","delta::DeltaElement","interval::Interval","engine::RevId","rope::BaseMetric","breaks::BreaksInfo","breaks::BreaksBaseMetric","diff::DiffBuilder","delta::Delta","multiset::ZipSegment","spans::Span","multiset::Subset","tree::Node","rope::Utf16CodeUnitsMetric","engine::DeltaOp","tree::NodeBody","diff::DiffOp","engine::FullPriority","engine::Error","multiset::CountMatcher","multiset::Segment","engine::Contents","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::LinesMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::Node::<N>::is_empty":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
+p0.is_empty();
+tree::Node::<N>::is_empty(p0);
+crate::tree::Node::<N>::is_empty(p0);
+<tree::Node<N>>::is_empty(p0);
-----------------
rope/src/tree.rs tree::Node::<N>::ptr_eq
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo","tree::DefaultMetric"]},"tree::Node::<N>::ptr_eq":{"N":["tree::NodeInfo","std::marker::Sized"]},"tree::NodeBody":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["engine::RevId","diff::DiffBuilder","rope::LinesMetric","engine::Error","rope::RopeInfo","std::clone::impls::<impl std::clone::Clone for &T>","delta::Delta","spans::Span","diff::DiffOp","delta::DeltaElement","rope::BaseMetric","engine::FullPriority","multiset::Subset","tree::NodeVal","engine::DeltaOp","tree::Node","interval::Interval","spans::SpansInfo","rope::Utf16CodeUnitsMetric","multiset::ZipSegment","breaks::BreaksBaseMetric","std::clone::impls::<impl std::clone::Clone for *const T>","find::CaseMatching","multiset::Segment","delta::InsertDelta","breaks::BreaksMetric","spans::SpansLeaf","breaks::BreaksInfo","engine::Contents","breaks::BreaksLeaf","multiset::CountMatcher","tree::NodeBody"]},"spans::SpansInfo":{"T":["spans::Span","delta::DeltaElement","multiset::ZipSegment","spans::SpansLeaf","delta::Delta","diff::DiffOp","engine::DeltaOp","diff::DiffBuilder","delta::InsertDelta","engine::RevId","engine::Contents","rope::RopeInfo","multiset::CountMatcher","multiset::Subset","engine::Error","std::clone::impls::<impl std::clone::Clone for &mut T>","multiset::Segment","breaks::BreaksInfo","tree::NodeVal","breaks::BreaksBaseMetric","rope::LinesMetric","interval::Interval","tree::Node","breaks::BreaksMetric","spans::SpansInfo","tree::NodeBody","rope::BaseMetric","breaks::BreaksLeaf","engine::FullPriority","find::CaseMatching","rope::Utf16CodeUnitsMetric"]},"spans::SpansLeaf":{"T":["rope::LinesMetric","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::Error","breaks::BreaksBaseMetric","tree::NodeBody","spans::SpansInfo","multiset::Subset","tree::NodeVal","std::clone::impls::<impl std::clone::Clone for &T>","interval::Interval","multiset::ZipSegment","diff::DiffOp","rope::RopeInfo","spans::SpansLeaf","delta::Delta","engine::Contents","breaks::BreaksInfo","multiset::Segment","rope::BaseMetric","engine::RevId","delta::InsertDelta","tree::Node","rope::Utf16CodeUnitsMetric","diff::DiffBuilder","delta::DeltaElement","find::CaseMatching","engine::DeltaOp","breaks::BreaksMetric","multiset::CountMatcher","spans::Span","breaks::BreaksLeaf"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::Node::<N>::ptr_eq":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
let mut p1 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
+p0.ptr_eq(p1);
+tree::Node::<N>::ptr_eq(p0, p1);
+crate::tree::Node::<N>::ptr_eq(p0, p1);
+<tree::Node<N>>::ptr_eq(p0, p1);
-----------------
rope/src/tree.rs tree::Node::<N>::height
deps:{"delta::Delta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::NodeInfo","tree::DefaultMetric","std::marker::Sized","std::clone::Clone"]},"tree::Node::<N>::height":{"N":["std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["breaks::BreaksMetric","multiset::CountMatcher","tree::NodeVal","tree::NodeBody","delta::Delta","engine::FullPriority","spans::Span","breaks::BreaksBaseMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","multiset::Subset","delta::DeltaElement","multiset::ZipSegment","engine::DeltaOp","engine::Error","find::CaseMatching","breaks::BreaksLeaf","interval::Interval","breaks::BreaksInfo","rope::Utf16CodeUnitsMetric","engine::Contents","engine::RevId","tree::Node","spans::SpansLeaf","std::clone::impls::<impl std::clone::Clone for *mut T>","diff::DiffBuilder","diff::DiffOp","rope::LinesMetric","delta::InsertDelta","spans::SpansInfo","multiset::Segment","rope::BaseMetric","rope::RopeInfo"]},"spans::SpansInfo":{"T":["multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::Utf16CodeUnitsMetric","tree::NodeVal","engine::Contents","engine::RevId","multiset::Segment","diff::DiffBuilder","interval::Interval","tree::Node","rope::RopeInfo","rope::BaseMetric","multiset::CountMatcher","multiset::Subset","spans::SpansLeaf","delta::DeltaElement","tree::NodeBody","breaks::BreaksBaseMetric","delta::Delta","engine::Error","diff::DiffOp","delta::InsertDelta","engine::FullPriority","breaks::BreaksMetric","rope::LinesMetric","spans::SpansInfo","find::CaseMatching","breaks::BreaksInfo","engine::DeltaOp","breaks::BreaksLeaf","spans::Span"]},"spans::SpansLeaf":{"T":["diff::DiffOp","multiset::Segment","engine::Contents","multiset::CountMatcher","breaks::BreaksLeaf","breaks::BreaksMetric","delta::InsertDelta","engine::DeltaOp","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for *mut T>","tree::Node","engine::RevId","breaks::BreaksBaseMetric","rope::RopeInfo","spans::SpansInfo","engine::Error","spans::Span","rope::BaseMetric","delta::Delta","rope::Utf16CodeUnitsMetric","rope::LinesMetric","multiset::Subset","tree::NodeVal","spans::SpansLeaf","diff::DiffBuilder","interval::Interval","delta::DeltaElement","tree::NodeBody","engine::FullPriority","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for &mut T>","find::CaseMatching"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::Node::<N>::height":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
+p0.height();
+tree::Node::<N>::height(p0);
+crate::tree::Node::<N>::height(p0);
+<tree::Node<N>>::height(p0);
-----------------
rope/src/tree.rs tree::Node::<N>::is_leaf
deps:{"delta::Delta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone","tree::DefaultMetric"]},"tree::Node::<N>::is_leaf":{"N":["tree::NodeInfo","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["tree::NodeVal","multiset::Segment","engine::Contents","breaks::BreaksBaseMetric","engine::DeltaOp","spans::SpansLeaf","multiset::CountMatcher","multiset::Subset","std::clone::impls::<impl std::clone::Clone for *const T>","rope::LinesMetric","delta::DeltaElement","breaks::BreaksMetric","diff::DiffOp","spans::Span","engine::FullPriority","engine::RevId","rope::BaseMetric","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for &mut T>","delta::InsertDelta","tree::Node","rope::RopeInfo","delta::Delta","engine::Error","tree::NodeBody","interval::Interval","breaks::BreaksLeaf","find::CaseMatching","rope::Utf16CodeUnitsMetric","breaks::BreaksInfo","spans::SpansInfo","diff::DiffBuilder"]},"spans::SpansInfo":{"T":["spans::Span","engine::FullPriority","engine::RevId","rope::LinesMetric","tree::NodeBody","breaks::BreaksBaseMetric","find::CaseMatching","multiset::CountMatcher","spans::SpansLeaf","multiset::Segment","engine::Error","diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::DeltaOp","breaks::BreaksInfo","delta::InsertDelta","multiset::ZipSegment","delta::DeltaElement","tree::Node","tree::NodeVal","rope::BaseMetric","delta::Delta","breaks::BreaksMetric","rope::RopeInfo","interval::Interval","engine::Contents","multiset::Subset","spans::SpansInfo","breaks::BreaksLeaf","diff::DiffOp","rope::Utf16CodeUnitsMetric"]},"spans::SpansLeaf":{"T":["multiset::Segment","interval::Interval","breaks::BreaksMetric","multiset::CountMatcher","delta::InsertDelta","find::CaseMatching","multiset::Subset","tree::Node","engine::FullPriority","rope::BaseMetric","engine::Contents","delta::Delta","engine::RevId","rope::Utf16CodeUnitsMetric","spans::SpansInfo","engine::Error","rope::RopeInfo","breaks::BreaksBaseMetric","spans::Span","delta::DeltaElement","tree::NodeVal","breaks::BreaksLeaf","diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::LinesMetric","multiset::ZipSegment","diff::DiffOp","spans::SpansLeaf","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksInfo","tree::NodeBody"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::Node::<N>::is_leaf":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
+p0.is_leaf();
+tree::Node::<N>::is_leaf(p0);
+crate::tree::Node::<N>::is_leaf(p0);
+<tree::Node<N>>::is_leaf(p0);
-----------------
rope/src/tree.rs tree::Node::<N>::interval
deps:{"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo","tree::DefaultMetric"]},"tree::Node::<N>::interval":{"N":["std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["multiset::CountMatcher","rope::RopeInfo","rope::BaseMetric","engine::DeltaOp","tree::NodeBody","interval::Interval","spans::SpansLeaf","multiset::ZipSegment","delta::DeltaElement","tree::Node","breaks::BreaksLeaf","engine::FullPriority","rope::LinesMetric","find::CaseMatching","diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::Segment","breaks::BreaksInfo","rope::Utf16CodeUnitsMetric","multiset::Subset","delta::InsertDelta","spans::SpansInfo","spans::Span","engine::RevId","delta::Delta","breaks::BreaksBaseMetric","engine::Contents","diff::DiffOp","tree::NodeVal","engine::Error","breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"spans::SpansInfo":{"T":["engine::FullPriority","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for *mut T>","diff::DiffBuilder","rope::LinesMetric","diff::DiffOp","interval::Interval","breaks::BreaksLeaf","multiset::Subset","rope::Utf16CodeUnitsMetric","multiset::ZipSegment","engine::Contents","multiset::Segment","rope::BaseMetric","tree::NodeBody","breaks::BreaksInfo","spans::SpansLeaf","engine::RevId","multiset::CountMatcher","delta::Delta","breaks::BreaksMetric","delta::InsertDelta","tree::NodeVal","delta::DeltaElement","tree::Node","breaks::BreaksBaseMetric","rope::RopeInfo","spans::SpansInfo","spans::Span","engine::Error","engine::DeltaOp"]},"spans::SpansLeaf":{"T":["tree::Node","multiset::Segment","tree::NodeVal","delta::DeltaElement","breaks::BreaksLeaf","rope::Utf16CodeUnitsMetric","engine::DeltaOp","diff::DiffBuilder","engine::RevId","engine::FullPriority","multiset::Subset","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for *const T>","breaks::BreaksMetric","delta::InsertDelta","breaks::BreaksBaseMetric","delta::Delta","spans::Span","engine::Error","breaks::BreaksInfo","rope::RopeInfo","diff::DiffOp","tree::NodeBody","spans::SpansInfo","spans::SpansLeaf","rope::LinesMetric","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for &T>","rope::BaseMetric","interval::Interval","multiset::CountMatcher","engine::Contents"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::Node::<N>::interval":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
+p0.interval();
+tree::Node::<N>::interval(p0);
+crate::tree::Node::<N>::interval(p0);
+<tree::Node<N>>::interval(p0);
-----------------
rope/src/tree.rs tree::Node::<N>::get_children
deps:{"delta::Delta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::Node::<N>::get_children":{"N":["std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"spans::Span":{"T":["engine::RevId","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for &T>","engine::DeltaOp","diff::DiffBuilder","multiset::Segment","tree::Node","engine::Contents","tree::NodeVal","engine::FullPriority","rope::RopeInfo","multiset::CountMatcher","find::CaseMatching","multiset::ZipSegment","delta::InsertDelta","spans::Span","std::clone::impls::<impl std::clone::Clone for &mut T>","delta::Delta","breaks::BreaksBaseMetric","delta::DeltaElement","breaks::BreaksMetric","rope::BaseMetric","spans::SpansLeaf","tree::NodeBody","spans::SpansInfo","rope::LinesMetric","interval::Interval","rope::Utf16CodeUnitsMetric","diff::DiffOp","breaks::BreaksLeaf","engine::Error","multiset::Subset"]},"spans::SpansInfo":{"T":["delta::Delta","tree::NodeBody","breaks::BreaksLeaf","interval::Interval","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::FullPriority","breaks::BreaksBaseMetric","engine::DeltaOp","diff::DiffBuilder","multiset::Segment","multiset::Subset","engine::Error","find::CaseMatching","multiset::CountMatcher","delta::DeltaElement","spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo","spans::Span","engine::RevId","spans::SpansLeaf","tree::Node","rope::Utf16CodeUnitsMetric","rope::LinesMetric","breaks::BreaksMetric","engine::Contents","multiset::ZipSegment","diff::DiffOp","rope::BaseMetric","delta::InsertDelta","tree::NodeVal"]},"spans::SpansLeaf":{"T":["diff::DiffBuilder","find::CaseMatching","interval::Interval","spans::Span","tree::NodeBody","spans::SpansLeaf","engine::Contents","delta::DeltaElement","multiset::ZipSegment","tree::NodeVal","breaks::BreaksBaseMetric","engine::FullPriority","multiset::Subset","std::clone::impls::<impl std::clone::Clone for &T>","multiset::Segment","breaks::BreaksMetric","multiset::CountMatcher","engine::RevId","rope::LinesMetric","rope::Utf16CodeUnitsMetric","rope::RopeInfo","delta::InsertDelta","spans::SpansInfo","engine::DeltaOp","delta::Delta","diff::DiffOp","rope::BaseMetric","breaks::BreaksInfo","engine::Error","breaks::BreaksLeaf","tree::Node","std::clone::impls::<impl std::clone::Clone for *const T>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::Node::<N>::get_children":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
+p0.get_children();
+tree::Node::<N>::get_children(p0);
+crate::tree::Node::<N>::get_children(p0);
+<tree::Node<N>>::get_children(p0);
-----------------
rope/src/tree.rs tree::Node::<N>::get_leaf
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","std::clone::Clone","tree::DefaultMetric","tree::NodeInfo"]},"tree::Node::<N>::get_leaf":{"N":["std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["diff::DiffOp","engine::FullPriority","breaks::BreaksInfo","spans::SpansInfo","multiset::Segment","breaks::BreaksLeaf","breaks::BreaksMetric","spans::Span","std::clone::impls::<impl std::clone::Clone for &T>","tree::NodeVal","delta::DeltaElement","delta::InsertDelta","rope::Utf16CodeUnitsMetric","rope::BaseMetric","rope::LinesMetric","engine::DeltaOp","spans::SpansLeaf","diff::DiffBuilder","delta::Delta","breaks::BreaksBaseMetric","find::CaseMatching","interval::Interval","engine::Error","multiset::ZipSegment","engine::Contents","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::Subset","rope::RopeInfo","tree::NodeBody","tree::Node","engine::RevId","multiset::CountMatcher"]},"spans::SpansInfo":{"T":["breaks::BreaksInfo","interval::Interval","delta::Delta","std::clone::impls::<impl std::clone::Clone for &T>","delta::InsertDelta","find::CaseMatching","multiset::ZipSegment","engine::RevId","multiset::Subset","breaks::BreaksMetric","tree::Node","breaks::BreaksBaseMetric","multiset::Segment","delta::DeltaElement","rope::BaseMetric","spans::Span","spans::SpansInfo","engine::DeltaOp","engine::Contents","rope::LinesMetric","tree::NodeBody","spans::SpansLeaf","breaks::BreaksLeaf","engine::FullPriority","rope::RopeInfo","diff::DiffBuilder","engine::Error","rope::Utf16CodeUnitsMetric","multiset::CountMatcher","diff::DiffOp","tree::NodeVal"]},"spans::SpansLeaf":{"T":["spans::SpansInfo","breaks::BreaksLeaf","breaks::BreaksInfo","tree::NodeVal","rope::Utf16CodeUnitsMetric","engine::Contents","diff::DiffOp","engine::Error","engine::FullPriority","spans::SpansLeaf","rope::RopeInfo","delta::Delta","find::CaseMatching","tree::Node","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for *const T>","interval::Interval","std::clone::impls::<impl std::clone::Clone for &T>","spans::Span","breaks::BreaksBaseMetric","multiset::Segment","engine::RevId","multiset::CountMatcher","rope::BaseMetric","multiset::Subset","diff::DiffBuilder","breaks::BreaksMetric","tree::NodeBody","rope::LinesMetric","engine::DeltaOp","multiset::ZipSegment","delta::InsertDelta"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::Node::<N>::get_leaf":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
+p0.get_leaf();
+tree::Node::<N>::get_leaf(p0);
+crate::tree::Node::<N>::get_leaf(p0);
+<tree::Node<N>>::get_leaf(p0);
-----------------
rope/src/tree.rs tree::Node::<N>::with_leaf_mut
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"tree::Node":{"N":["std::marker::Sized","tree::DefaultMetric","std::clone::Clone","tree::NodeInfo"]},"tree::Node::<N>::with_leaf_mut":{"N":["tree::NodeInfo","std::marker::Sized"],"T":["std::marker::Sized"],"impl FnOnce(&mut N::L) -> T":["std::ops::FnOnce","std::marker::Sized"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["engine::FullPriority","engine::Contents","spans::SpansInfo","rope::Utf16CodeUnitsMetric","delta::DeltaElement","find::CaseMatching","engine::DeltaOp","rope::BaseMetric","multiset::CountMatcher","spans::SpansLeaf","interval::Interval","breaks::BreaksInfo","multiset::Subset","std::clone::impls::<impl std::clone::Clone for &T>","delta::InsertDelta","delta::Delta","multiset::ZipSegment","tree::Node","multiset::Segment","breaks::BreaksBaseMetric","breaks::BreaksMetric","tree::NodeVal","diff::DiffOp","rope::RopeInfo","breaks::BreaksLeaf","rope::LinesMetric","engine::RevId","tree::NodeBody","engine::Error","diff::DiffBuilder","spans::Span"]},"spans::SpansInfo":{"T":["multiset::Segment","delta::Delta","find::CaseMatching","spans::SpansInfo","engine::Contents","rope::BaseMetric","spans::Span","delta::InsertDelta","diff::DiffBuilder","multiset::Subset","std::clone::impls::<impl std::clone::Clone for &T>","multiset::CountMatcher","engine::RevId","tree::NodeVal","rope::Utf16CodeUnitsMetric","rope::RopeInfo","breaks::BreaksMetric","breaks::BreaksBaseMetric","breaks::BreaksLeaf","rope::LinesMetric","multiset::ZipSegment","engine::Error","interval::Interval","engine::FullPriority","breaks::BreaksInfo","engine::DeltaOp","delta::DeltaElement","tree::Node","diff::DiffOp","spans::SpansLeaf","tree::NodeBody"]},"spans::SpansLeaf":{"T":["std::clone::impls::<impl std::clone::Clone for *const T>","multiset::Segment","breaks::BreaksLeaf","multiset::ZipSegment","delta::DeltaElement","multiset::Subset","rope::BaseMetric","delta::InsertDelta","multiset::CountMatcher","engine::Contents","delta::Delta","engine::DeltaOp","engine::FullPriority","spans::SpansInfo","tree::NodeVal","interval::Interval","rope::Utf16CodeUnitsMetric","engine::RevId","spans::Span","std::clone::impls::<impl std::clone::Clone for &T>","find::CaseMatching","rope::RopeInfo","engine::Error","diff::DiffOp","rope::LinesMetric","diff::DiffBuilder","tree::Node","breaks::BreaksMetric","tree::NodeBody","spans::SpansLeaf","breaks::BreaksBaseMetric","breaks::BreaksInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &F>":{},"std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::Node::<N>::with_leaf_mut":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"],"T":["RUG_ANY"],"impl FnOnce(&mut N::L) -> T":["std::boxed::Box<F, A>","core::str::CharEscapeUnicode","core::str::CharEscapeDebugContinue","core::str::IsAsciiWhitespace","core::str::IsWhitespace","std::panic::AssertUnwindSafe<F>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D, &'a mut E), Function>","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C, &'a mut D), Function>","core::str::LinesAnyMap","std::ops::function::impls::<impl std::ops::FnOnce<A> for &mut F>","core::const_closure::ConstFnMutClosure<&'a mut A, Function>","core::str::IsNotEmpty","core::str::CharEscapeDefault","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B), Function>","core::str::BytesIsNotEmpty","core::const_closure::ConstFnMutClosure<(&'a mut A, &'a mut B, &'a mut C), Function>","core::str::UnsafeBytesToStr","core::slice::ascii::EscapeByte"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Node<N>
let mut p1 = MaybeUninit::uninit().assume_init(); // impl FnOnce(&mut N::L) -> T
+p0.with_leaf_mut(p1);
+tree::Node::<N>::with_leaf_mut(p0, p1);
+crate::tree::Node::<N>::with_leaf_mut(p0, p1);
+<tree::Node<N>>::with_leaf_mut(p0, p1);
-----------------
rope/src/tree.rs tree::Node::<N>::is_ok_child
deps:{"delta::Delta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo","tree::DefaultMetric"]},"tree::Node::<N>::is_ok_child":{"N":["tree::NodeInfo","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["engine::DeltaOp","tree::NodeBody","engine::Contents","multiset::ZipSegment","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for *mut T>","delta::DeltaElement","tree::Node","delta::InsertDelta","rope::BaseMetric","diff::DiffOp","rope::RopeInfo","breaks::BreaksMetric","breaks::BreaksInfo","breaks::BreaksBaseMetric","engine::RevId","rope::Utf16CodeUnitsMetric","interval::Interval","find::CaseMatching","delta::Delta","engine::FullPriority","spans::SpansLeaf","tree::NodeVal","diff::DiffBuilder","multiset::Segment","multiset::Subset","engine::Error","spans::SpansInfo","spans::Span","multiset::CountMatcher"]},"spans::SpansInfo":{"T":["multiset::CountMatcher","diff::DiffOp","engine::RevId","diff::DiffBuilder","interval::Interval","std::clone::impls::<impl std::clone::Clone for &T>","tree::NodeBody","rope::BaseMetric","spans::SpansLeaf","rope::RopeInfo","multiset::Subset","spans::Span","engine::FullPriority","find::CaseMatching","breaks::BreaksMetric","rope::LinesMetric","engine::Contents","engine::DeltaOp","rope::Utf16CodeUnitsMetric","tree::Node","delta::Delta","breaks::BreaksLeaf","breaks::BreaksBaseMetric","multiset::ZipSegment","delta::DeltaElement","tree::NodeVal","multiset::Segment","delta::InsertDelta","spans::SpansInfo","breaks::BreaksInfo","engine::Error"]},"spans::SpansLeaf":{"T":["diff::DiffOp","spans::SpansLeaf","std::clone::impls::<impl std::clone::Clone for &mut T>","breaks::BreaksBaseMetric","multiset::Segment","breaks::BreaksLeaf","rope::RopeInfo","breaks::BreaksInfo","rope::Utf16CodeUnitsMetric","tree::Node","tree::NodeVal","find::CaseMatching","engine::Contents","multiset::ZipSegment","tree::NodeBody","rope::BaseMetric","delta::DeltaElement","diff::DiffBuilder","interval::Interval","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::Subset","multiset::CountMatcher","spans::Span","engine::RevId","engine::DeltaOp","delta::Delta","engine::FullPriority","delta::InsertDelta","spans::SpansInfo","breaks::BreaksMetric","rope::LinesMetric","engine::Error"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::Node::<N>::is_ok_child":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
+p0.is_ok_child();
+tree::Node::<N>::is_ok_child(p0);
+crate::tree::Node::<N>::is_ok_child(p0);
+<tree::Node<N>>::is_ok_child(p0);
-----------------
rope/src/tree.rs tree::Node::<N>::merge_nodes
deps:{"delta::Delta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo","tree::DefaultMetric"]},"tree::Node::<N>::merge_nodes":{"N":["std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"spans::Span":{"T":["delta::Delta","breaks::BreaksMetric","engine::RevId","breaks::BreaksInfo","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","tree::Node","diff::DiffBuilder","engine::DeltaOp","find::CaseMatching","multiset::Subset","multiset::CountMatcher","spans::SpansLeaf","multiset::Segment","engine::Contents","breaks::BreaksBaseMetric","tree::NodeVal","engine::Error","rope::BaseMetric","diff::DiffOp","rope::RopeInfo","spans::SpansInfo","interval::Interval","multiset::ZipSegment","breaks::BreaksLeaf","engine::FullPriority","spans::Span","tree::NodeBody","delta::InsertDelta","delta::DeltaElement","rope::Utf16CodeUnitsMetric"]},"spans::SpansInfo":{"T":["tree::NodeVal","engine::DeltaOp","multiset::CountMatcher","engine::Error","engine::FullPriority","multiset::Subset","tree::Node","diff::DiffOp","breaks::BreaksBaseMetric","find::CaseMatching","engine::Contents","rope::LinesMetric","multiset::ZipSegment","spans::Span","spans::SpansInfo","spans::SpansLeaf","rope::BaseMetric","interval::Interval","multiset::Segment","engine::RevId","delta::InsertDelta","delta::DeltaElement","tree::NodeBody","diff::DiffBuilder","delta::Delta","breaks::BreaksLeaf","rope::RopeInfo","breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for *const T>","rope::Utf16CodeUnitsMetric","breaks::BreaksInfo"]},"spans::SpansLeaf":{"T":["delta::Delta","spans::SpansLeaf","rope::Utf16CodeUnitsMetric","engine::DeltaOp","rope::RopeInfo","std::clone::impls::<impl std::clone::Clone for &mut T>","spans::SpansInfo","rope::BaseMetric","find::CaseMatching","engine::FullPriority","tree::NodeBody","engine::Error","multiset::CountMatcher","diff::DiffBuilder","multiset::Segment","tree::NodeVal","multiset::ZipSegment","engine::Contents","tree::Node","breaks::BreaksLeaf","delta::DeltaElement","rope::LinesMetric","multiset::Subset","spans::Span","breaks::BreaksInfo","engine::RevId","delta::InsertDelta","breaks::BreaksBaseMetric","breaks::BreaksMetric","interval::Interval","diff::DiffOp"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::Node::<N>::merge_nodes":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // [tree::Node<N>]
let mut p1 = & MaybeUninit::uninit().assume_init(); // [tree::Node<N>]
+tree::Node::<N>::merge_nodes(p0, p1);
+crate::tree::Node::<N>::merge_nodes(p0, p1);
+<tree::Node<N>>::merge_nodes(p0, p1);
-----------------
rope/src/tree.rs tree::Node::<N>::merge_leaves
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","tree::DefaultMetric","tree::NodeInfo","std::marker::Sized"]},"tree::Node::<N>::merge_leaves":{"N":["tree::NodeInfo","std::marker::Sized"]},"tree::NodeBody":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["multiset::Segment","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","multiset::CountMatcher","multiset::Subset","breaks::BreaksInfo","interval::Interval","tree::Node","std::clone::impls::<impl std::clone::Clone for *const T>","delta::DeltaElement","rope::LinesMetric","multiset::ZipSegment","delta::InsertDelta","breaks::BreaksMetric","spans::SpansLeaf","diff::DiffBuilder","delta::Delta","rope::RopeInfo","engine::RevId","tree::NodeVal","find::CaseMatching","engine::FullPriority","engine::Error","spans::Span","engine::DeltaOp","breaks::BreaksLeaf","spans::SpansInfo","breaks::BreaksBaseMetric","engine::Contents","tree::NodeBody","rope::Utf16CodeUnitsMetric","diff::DiffOp"]},"spans::SpansInfo":{"T":["rope::Utf16CodeUnitsMetric","rope::LinesMetric","engine::Error","rope::BaseMetric","breaks::BreaksLeaf","tree::NodeVal","breaks::BreaksInfo","multiset::Segment","diff::DiffOp","spans::SpansLeaf","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::RopeInfo","spans::Span","engine::Contents","tree::NodeBody","engine::RevId","multiset::ZipSegment","breaks::BreaksMetric","breaks::BreaksBaseMetric","multiset::CountMatcher","interval::Interval","delta::InsertDelta","diff::DiffBuilder","engine::DeltaOp","spans::SpansInfo","engine::FullPriority","delta::Delta","find::CaseMatching","multiset::Subset","tree::Node","delta::DeltaElement"]},"spans::SpansLeaf":{"T":["engine::FullPriority","diff::DiffBuilder","engine::Error","multiset::CountMatcher","tree::NodeVal","delta::DeltaElement","spans::Span","find::CaseMatching","delta::Delta","multiset::ZipSegment","engine::Contents","breaks::BreaksBaseMetric","diff::DiffOp","tree::Node","rope::RopeInfo","rope::BaseMetric","engine::DeltaOp","multiset::Segment","multiset::Subset","rope::LinesMetric","tree::NodeBody","breaks::BreaksInfo","engine::RevId","delta::InsertDelta","interval::Interval","spans::SpansInfo","breaks::BreaksLeaf","breaks::BreaksMetric","rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for *const T>","std::clone::impls::<impl std::clone::Clone for &T>","spans::SpansLeaf"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::Node::<N>::merge_leaves":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // tree::Node<N>
let mut p1 = MaybeUninit::uninit().assume_init(); // tree::Node<N>
+tree::Node::<N>::merge_leaves(p0, p1);
+crate::tree::Node::<N>::merge_leaves(p0, p1);
+<tree::Node<N>>::merge_leaves(p0, p1);
-----------------
rope/src/tree.rs tree::Node::<N>::concat
deps:{"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","tree::NodeInfo","tree::DefaultMetric","std::clone::Clone"]},"tree::Node::<N>::concat":{"N":["std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["multiset::CountMatcher","multiset::Segment","breaks::BreaksLeaf","multiset::Subset","rope::BaseMetric","breaks::BreaksMetric","engine::RevId","engine::Contents","rope::LinesMetric","tree::NodeVal","multiset::ZipSegment","spans::SpansLeaf","interval::Interval","diff::DiffBuilder","breaks::BreaksBaseMetric","std::clone::impls::<impl std::clone::Clone for &T>","engine::FullPriority","engine::Error","spans::SpansInfo","delta::InsertDelta","tree::NodeBody","delta::DeltaElement","rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for *mut T>","delta::Delta","spans::Span","engine::DeltaOp","rope::RopeInfo","breaks::BreaksInfo","diff::DiffOp","find::CaseMatching","tree::Node"]},"spans::SpansInfo":{"T":["engine::DeltaOp","engine::Contents","rope::RopeInfo","multiset::Subset","tree::NodeVal","multiset::CountMatcher","tree::Node","diff::DiffBuilder","rope::LinesMetric","delta::InsertDelta","breaks::BreaksInfo","multiset::Segment","rope::Utf16CodeUnitsMetric","diff::DiffOp","breaks::BreaksLeaf","spans::SpansInfo","breaks::BreaksBaseMetric","spans::Span","tree::NodeBody","engine::FullPriority","multiset::ZipSegment","delta::DeltaElement","breaks::BreaksMetric","delta::Delta","rope::BaseMetric","interval::Interval","std::clone::impls::<impl std::clone::Clone for &T>","spans::SpansLeaf","find::CaseMatching","engine::Error","engine::RevId"]},"spans::SpansLeaf":{"T":["breaks::BreaksLeaf","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for &T>","engine::DeltaOp","engine::Contents","engine::RevId","breaks::BreaksBaseMetric","breaks::BreaksInfo","multiset::Subset","multiset::Segment","engine::FullPriority","engine::Error","rope::Utf16CodeUnitsMetric","rope::RopeInfo","multiset::ZipSegment","tree::Node","spans::SpansInfo","delta::Delta","diff::DiffBuilder","tree::NodeBody","breaks::BreaksMetric","diff::DiffOp","find::CaseMatching","rope::LinesMetric","spans::Span","multiset::CountMatcher","interval::Interval","tree::NodeVal","rope::BaseMetric","delta::InsertDelta","spans::SpansLeaf"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::Node::<N>::concat":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // tree::Node<N>
let mut p1 = MaybeUninit::uninit().assume_init(); // tree::Node<N>
+tree::Node::<N>::concat(p0, p1);
+crate::tree::Node::<N>::concat(p0, p1);
+<tree::Node<N>>::concat(p0, p1);
-----------------
rope/src/tree.rs tree::Node::<N>::measure
deps:{"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","tree::DefaultMetric","tree::NodeInfo","std::clone::Clone"]},"tree::Node::<N>::measure":{"M":["std::marker::Sized","tree::Metric"],"N":["tree::NodeInfo","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["engine::DeltaOp","multiset::Segment","multiset::CountMatcher","delta::DeltaElement","breaks::BreaksMetric","tree::NodeBody","spans::Span","diff::DiffBuilder","rope::BaseMetric","rope::LinesMetric","engine::RevId","spans::SpansInfo","breaks::BreaksBaseMetric","multiset::Subset","rope::RopeInfo","engine::Contents","breaks::BreaksLeaf","breaks::BreaksInfo","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for &T>","engine::Error","rope::Utf16CodeUnitsMetric","interval::Interval","engine::FullPriority","tree::NodeVal","tree::Node","spans::SpansLeaf","find::CaseMatching","diff::DiffOp","delta::Delta","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for &mut T>"]},"spans::SpansInfo":{"T":["multiset::Subset","engine::FullPriority","diff::DiffOp","diff::DiffBuilder","multiset::ZipSegment","breaks::BreaksMetric","interval::Interval","std::clone::impls::<impl std::clone::Clone for *const T>","spans::Span","engine::DeltaOp","delta::DeltaElement","tree::NodeVal","rope::LinesMetric","spans::SpansLeaf","breaks::BreaksLeaf","rope::BaseMetric","breaks::BreaksInfo","multiset::CountMatcher","tree::NodeBody","rope::Utf16CodeUnitsMetric","multiset::Segment","engine::Contents","engine::Error","delta::Delta","breaks::BreaksBaseMetric","engine::RevId","spans::SpansInfo","rope::RopeInfo","tree::Node","find::CaseMatching","delta::InsertDelta"]},"spans::SpansLeaf":{"T":["breaks::BreaksBaseMetric","spans::SpansInfo","tree::NodeVal","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for *const T>","tree::Node","delta::Delta","delta::InsertDelta","breaks::BreaksLeaf","interval::Interval","engine::Error","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::DeltaOp","rope::Utf16CodeUnitsMetric","engine::FullPriority","engine::RevId","delta::DeltaElement","rope::BaseMetric","multiset::CountMatcher","multiset::ZipSegment","breaks::BreaksInfo","rope::LinesMetric","diff::DiffBuilder","rope::RopeInfo","tree::NodeBody","spans::Span","diff::DiffOp","spans::SpansLeaf","breaks::BreaksMetric","multiset::Segment","engine::Contents","multiset::Subset"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::Node::<N>::measure":{"M":["rope::Utf16CodeUnitsMetric","breaks::BreaksMetric","rope::BaseMetric","rope::LinesMetric","breaks::BreaksBaseMetric"],"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
+p0.measure();
+tree::Node::<N>::measure(p0);
+crate::tree::Node::<N>::measure(p0);
+<tree::Node<N>>::measure(p0);
-----------------
rope/src/tree.rs tree::Node::<N>::push_subseq
deps:{"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone","tree::DefaultMetric"]},"tree::Node::<N>::push_subseq":{"N":["std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["diff::DiffBuilder","engine::FullPriority","breaks::BreaksLeaf","multiset::CountMatcher","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","multiset::Subset","rope::BaseMetric","delta::InsertDelta","find::CaseMatching","multiset::ZipSegment","multiset::Segment","engine::RevId","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::DeltaOp","rope::RopeInfo","delta::DeltaElement","diff::DiffOp","breaks::BreaksMetric","rope::LinesMetric","tree::NodeVal","engine::Contents","interval::Interval","spans::SpansLeaf","engine::Error","delta::Delta","spans::Span","spans::SpansInfo","tree::Node","tree::NodeBody"]},"spans::SpansInfo":{"T":["engine::Contents","multiset::Segment","delta::DeltaElement","multiset::Subset","breaks::BreaksMetric","rope::LinesMetric","breaks::BreaksBaseMetric","delta::InsertDelta","diff::DiffBuilder","spans::Span","tree::Node","tree::NodeVal","engine::FullPriority","engine::DeltaOp","rope::BaseMetric","spans::SpansLeaf","find::CaseMatching","diff::DiffOp","multiset::CountMatcher","interval::Interval","std::clone::impls::<impl std::clone::Clone for *const T>","engine::RevId","breaks::BreaksInfo","rope::Utf16CodeUnitsMetric","multiset::ZipSegment","delta::Delta","rope::RopeInfo","breaks::BreaksLeaf","engine::Error","tree::NodeBody","spans::SpansInfo"]},"spans::SpansLeaf":{"T":["breaks::BreaksBaseMetric","multiset::Subset","diff::DiffBuilder","breaks::BreaksLeaf","spans::SpansLeaf","engine::Contents","engine::RevId","rope::RopeInfo","tree::NodeVal","engine::DeltaOp","spans::SpansInfo","engine::Error","delta::Delta","delta::InsertDelta","rope::LinesMetric","breaks::BreaksInfo","tree::NodeBody","interval::Interval","std::clone::impls::<impl std::clone::Clone for *mut T>","spans::Span","breaks::BreaksMetric","multiset::ZipSegment","engine::FullPriority","rope::Utf16CodeUnitsMetric","find::CaseMatching","multiset::CountMatcher","tree::Node","rope::BaseMetric","diff::DiffOp","delta::DeltaElement","multiset::Segment"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::Node::<N>::push_subseq":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
let mut p1 = &mut  MaybeUninit::uninit().assume_init(); // tree::TreeBuilder<N>
let mut p2 = MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.push_subseq(p1, p2);
+tree::Node::<N>::push_subseq(p0, p1, p2);
+crate::tree::Node::<N>::push_subseq(p0, p1, p2);
+<tree::Node<N>>::push_subseq(p0, p1, p2);
-----------------
rope/src/tree.rs tree::Node::<N>::subseq
deps:{"<T as interval::IntervalBounds>":{"T":["std::convert::Into","std::marker::Sized"]},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]},"tree::Node":{"N":["std::marker::Sized","tree::DefaultMetric","tree::NodeInfo","std::clone::Clone"]},"tree::Node::<N>::subseq":{"N":["tree::NodeInfo","std::marker::Sized"],"T":["std::marker::Sized","interval::IntervalBounds"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"<T as interval::IntervalBounds>":{"T":["std::sync::mpmc::select::Selected","<T as std::convert::Into<U>>","std::process::ExitStatusError","std::sys::unix::process::process_inner::ExitStatusError"]},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"delta::Delta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["rope::Utf16CodeUnitsMetric","rope::BaseMetric","tree::Node","breaks::BreaksInfo","spans::SpansLeaf","tree::NodeVal","multiset::CountMatcher","engine::RevId","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::FullPriority","engine::Error","tree::NodeBody","delta::Delta","diff::DiffBuilder","engine::DeltaOp","breaks::BreaksBaseMetric","diff::DiffOp","interval::Interval","spans::Span","engine::Contents","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for *mut T>","spans::SpansInfo","multiset::Subset","find::CaseMatching","multiset::Segment","delta::InsertDelta","rope::RopeInfo","breaks::BreaksLeaf","breaks::BreaksMetric","delta::DeltaElement"]},"spans::SpansInfo":{"T":["interval::Interval","tree::Node","delta::InsertDelta","diff::DiffBuilder","breaks::BreaksInfo","delta::Delta","rope::Utf16CodeUnitsMetric","diff::DiffOp","engine::Error","delta::DeltaElement","breaks::BreaksMetric","spans::SpansInfo","engine::Contents","tree::NodeVal","multiset::Segment","spans::SpansLeaf","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::RevId","engine::FullPriority","breaks::BreaksLeaf","multiset::ZipSegment","breaks::BreaksBaseMetric","rope::BaseMetric","tree::NodeBody","multiset::CountMatcher","multiset::Subset","engine::DeltaOp","rope::LinesMetric","spans::Span","rope::RopeInfo"]},"spans::SpansLeaf":{"T":["interval::Interval","engine::FullPriority","find::CaseMatching","rope::RopeInfo","engine::DeltaOp","diff::DiffBuilder","breaks::BreaksLeaf","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for &T>","engine::RevId","tree::Node","std::clone::impls::<impl std::clone::Clone for *mut T>","delta::DeltaElement","multiset::ZipSegment","breaks::BreaksBaseMetric","spans::SpansInfo","breaks::BreaksInfo","rope::LinesMetric","multiset::Subset","multiset::Segment","delta::InsertDelta","tree::NodeBody","engine::Contents","delta::Delta","multiset::CountMatcher","tree::NodeVal","engine::Error","spans::SpansLeaf","rope::BaseMetric","breaks::BreaksMetric","rope::Utf16CodeUnitsMetric","spans::Span"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::Node::<N>::subseq":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"],"T":["std::ops::RangeFull","<T as interval::IntervalBounds>","std::ops::RangeFrom"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
let mut p1 = MaybeUninit::uninit().assume_init(); // T
+p0.subseq(p1);
+tree::Node::<N>::subseq(p0, p1);
+crate::tree::Node::<N>::subseq(p0, p1);
+<tree::Node<N>>::subseq(p0, p1);
-----------------
rope/src/tree.rs tree::Node::<N>::edit
deps:{"<T as interval::IntervalBounds>":{"T":["std::marker::Sized","std::convert::Into"]},"<T as std::convert::Into<U>>":{"T":["std::marker::Sized"]},"delta::Delta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::RangeFrom":{"Idx":["std::marker::Sized"]},"tree::Node":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone","tree::DefaultMetric"]},"tree::Node::<N>::edit":{"IV":["std::marker::Sized","interval::IntervalBounds"],"N":["std::marker::Sized","tree::NodeInfo"],"T":["std::marker::Sized","std::convert::Into"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"<T as interval::IntervalBounds>":{"T":["std::process::ExitStatusError","std::sync::mpmc::select::Selected","<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError"]},"<T as std::convert::Into<U>>":{"T":["RUG_ANY"]},"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["breaks::BreaksBaseMetric","find::CaseMatching","engine::RevId","delta::DeltaElement","interval::Interval","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for *const T>","spans::SpansInfo","std::clone::impls::<impl std::clone::Clone for &T>","spans::Span","engine::Error","rope::BaseMetric","breaks::BreaksLeaf","tree::NodeVal","multiset::Segment","breaks::BreaksMetric","multiset::Subset","breaks::BreaksInfo","diff::DiffBuilder","tree::NodeBody","multiset::ZipSegment","rope::LinesMetric","multiset::CountMatcher","engine::Contents","tree::Node","delta::InsertDelta","engine::FullPriority","rope::Utf16CodeUnitsMetric","rope::RopeInfo","diff::DiffOp","delta::Delta","spans::SpansLeaf"]},"spans::SpansInfo":{"T":["breaks::BreaksBaseMetric","delta::Delta","tree::NodeBody","multiset::Subset","breaks::BreaksInfo","engine::RevId","rope::RopeInfo","delta::InsertDelta","multiset::Segment","engine::DeltaOp","engine::FullPriority","delta::DeltaElement","spans::Span","breaks::BreaksMetric","spans::SpansInfo","tree::NodeVal","rope::BaseMetric","engine::Contents","rope::LinesMetric","multiset::CountMatcher","interval::Interval","std::clone::impls::<impl std::clone::Clone for &T>","diff::DiffOp","tree::Node","rope::Utf16CodeUnitsMetric","breaks::BreaksLeaf","engine::Error","spans::SpansLeaf","diff::DiffBuilder","find::CaseMatching","multiset::ZipSegment"]},"spans::SpansLeaf":{"T":["tree::Node","spans::SpansInfo","tree::NodeVal","delta::DeltaElement","multiset::Subset","diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for &mut T>","find::CaseMatching","multiset::ZipSegment","rope::BaseMetric","engine::RevId","rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::LinesMetric","breaks::BreaksMetric","spans::Span","engine::FullPriority","engine::Error","breaks::BreaksLeaf","rope::RopeInfo","diff::DiffOp","spans::SpansLeaf","delta::Delta","breaks::BreaksBaseMetric","interval::Interval","engine::Contents","delta::InsertDelta","multiset::CountMatcher","tree::NodeBody","multiset::Segment","engine::DeltaOp","breaks::BreaksInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"std::ops::RangeFrom":{"Idx":["RUG_ANY"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::Node::<N>::edit":{"IV":["std::ops::RangeFull","std::ops::RangeFrom","<T as interval::IntervalBounds>"],"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"],"T":["<T as std::convert::Into<U>>","std::sys::unix::process::process_inner::ExitStatusError","std::process::ExitStatusError","std::sync::mpmc::select::Selected"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Node<N>
let mut p1 = MaybeUninit::uninit().assume_init(); // IV
let mut p2 = MaybeUninit::uninit().assume_init(); // T
+p0.edit(p1, p2);
+tree::Node::<N>::edit(p0, p1, p2);
+crate::tree::Node::<N>::edit(p0, p1, p2);
+<tree::Node<N>>::edit(p0, p1, p2);
-----------------
rope/src/tree.rs tree::Node::<N>::convert_metrics
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::Node::<N>::convert_metrics":{"M1":["tree::Metric","std::marker::Sized"],"M2":["tree::Metric","std::marker::Sized"],"N":["std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["rope::RopeInfo","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::Segment","diff::DiffOp","breaks::BreaksBaseMetric","spans::Span","interval::Interval","spans::SpansLeaf","multiset::CountMatcher","engine::FullPriority","engine::Contents","delta::DeltaElement","multiset::ZipSegment","tree::NodeVal","rope::LinesMetric","rope::Utf16CodeUnitsMetric","delta::Delta","tree::NodeBody","find::CaseMatching","rope::BaseMetric","breaks::BreaksInfo","tree::Node","engine::RevId","diff::DiffBuilder","breaks::BreaksMetric","engine::Error","multiset::Subset","spans::SpansInfo","engine::DeltaOp","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for &mut T>"]},"spans::SpansInfo":{"T":["breaks::BreaksBaseMetric","multiset::Segment","multiset::Subset","rope::Utf16CodeUnitsMetric","engine::FullPriority","engine::RevId","tree::NodeVal","engine::Error","diff::DiffOp","multiset::CountMatcher","spans::SpansInfo","tree::NodeBody","find::CaseMatching","engine::DeltaOp","breaks::BreaksMetric","rope::BaseMetric","delta::InsertDelta","breaks::BreaksInfo","spans::Span","breaks::BreaksLeaf","interval::Interval","delta::DeltaElement","multiset::ZipSegment","spans::SpansLeaf","std::clone::impls::<impl std::clone::Clone for *const T>","delta::Delta","engine::Contents","tree::Node","rope::LinesMetric","diff::DiffBuilder","rope::RopeInfo"]},"spans::SpansLeaf":{"T":["multiset::Segment","engine::FullPriority","delta::Delta","tree::Node","engine::Error","std::clone::impls::<impl std::clone::Clone for &T>","engine::DeltaOp","engine::RevId","spans::SpansInfo","std::clone::impls::<impl std::clone::Clone for &mut T>","spans::SpansLeaf","delta::DeltaElement","diff::DiffOp","multiset::Subset","multiset::ZipSegment","breaks::BreaksLeaf","rope::Utf16CodeUnitsMetric","diff::DiffBuilder","rope::RopeInfo","breaks::BreaksInfo","engine::Contents","delta::InsertDelta","tree::NodeBody","tree::NodeVal","breaks::BreaksBaseMetric","interval::Interval","find::CaseMatching","rope::BaseMetric","rope::LinesMetric","multiset::CountMatcher","breaks::BreaksMetric","spans::Span"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::Node::<N>::convert_metrics":{"M1":["breaks::BreaksMetric","rope::LinesMetric","rope::Utf16CodeUnitsMetric","rope::BaseMetric","breaks::BreaksBaseMetric"],"M2":["rope::Utf16CodeUnitsMetric","breaks::BreaksMetric","breaks::BreaksBaseMetric","rope::LinesMetric","rope::BaseMetric"],"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
let mut p1 = 0usize; // None+usize
+p0.convert_metrics(p1);
+tree::Node::<N>::convert_metrics(p0, p1);
+crate::tree::Node::<N>::convert_metrics(p0, p1);
+<tree::Node<N>>::convert_metrics(p0, p1);
-----------------
rope/src/tree.rs tree::Node::<N>::count
deps:{"tree::Node::<N>::count":{"M":["tree::Metric","std::marker::Sized"],"N":["tree::DefaultMetric","std::marker::Sized"]}}
candidates:{"tree::Node::<N>::count":{"M":["rope::Utf16CodeUnitsMetric","breaks::BreaksMetric","rope::BaseMetric","rope::LinesMetric","breaks::BreaksBaseMetric"],"N":["rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
let mut p1 = 0usize; // None+usize
+p0.count(p1);
+tree::Node::<N>::count(p0, p1);
+crate::tree::Node::<N>::count(p0, p1);
+<tree::Node<N>>::count(p0, p1);
-----------------
rope/src/tree.rs tree::Node::<N>::count_base_units
deps:{"tree::Node::<N>::count_base_units":{"M":["std::marker::Sized","tree::Metric"],"N":["tree::DefaultMetric","std::marker::Sized"]}}
candidates:{"tree::Node::<N>::count_base_units":{"M":["breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","breaks::BreaksMetric","rope::LinesMetric","rope::BaseMetric"],"N":["rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
let mut p1 = 0usize; // None+usize
+p0.count_base_units(p1);
+tree::Node::<N>::count_base_units(p0, p1);
+crate::tree::Node::<N>::count_base_units(p0, p1);
+<tree::Node<N>>::count_base_units(p0, p1);
-----------------
rope/src/tree.rs <tree::Node<N> as std::default::Default>::default
deps:{"<tree::Node<N> as std::default::Default>::default":{"N":["tree::NodeInfo","std::marker::Sized"]},"delta::Delta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"<tree::Node<N> as std::default::Default>::default":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["rope::BaseMetric","rope::LinesMetric","rope::RopeInfo","spans::SpansInfo","diff::DiffBuilder","multiset::Subset","breaks::BreaksMetric","breaks::BreaksInfo","delta::Delta","multiset::CountMatcher","multiset::ZipSegment","engine::Error","tree::NodeVal","diff::DiffOp","breaks::BreaksLeaf","delta::InsertDelta","rope::Utf16CodeUnitsMetric","spans::SpansLeaf","spans::Span","std::clone::impls::<impl std::clone::Clone for &mut T>","tree::NodeBody","delta::DeltaElement","multiset::Segment","breaks::BreaksBaseMetric","find::CaseMatching","engine::DeltaOp","engine::Contents","std::clone::impls::<impl std::clone::Clone for *const T>","engine::RevId","engine::FullPriority","interval::Interval","tree::Node"]},"spans::SpansInfo":{"T":["breaks::BreaksInfo","interval::Interval","tree::NodeVal","multiset::ZipSegment","diff::DiffOp","delta::Delta","breaks::BreaksBaseMetric","tree::Node","spans::SpansInfo","delta::InsertDelta","rope::Utf16CodeUnitsMetric","spans::SpansLeaf","tree::NodeBody","spans::Span","multiset::Segment","engine::RevId","multiset::Subset","rope::RopeInfo","diff::DiffBuilder","multiset::CountMatcher","breaks::BreaksMetric","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for &T>","engine::Error","find::CaseMatching","rope::BaseMetric","engine::Contents","rope::LinesMetric","breaks::BreaksLeaf","delta::DeltaElement","engine::FullPriority"]},"spans::SpansLeaf":{"T":["diff::DiffOp","breaks::BreaksBaseMetric","engine::Error","breaks::BreaksLeaf","delta::DeltaElement","engine::DeltaOp","rope::LinesMetric","tree::NodeBody","engine::FullPriority","engine::Contents","find::CaseMatching","spans::SpansLeaf","multiset::Segment","rope::Utf16CodeUnitsMetric","tree::NodeVal","delta::InsertDelta","interval::Interval","engine::RevId","spans::Span","std::clone::impls::<impl std::clone::Clone for *const T>","breaks::BreaksMetric","breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo","tree::Node","multiset::ZipSegment","multiset::CountMatcher","multiset::Subset","delta::Delta","diff::DiffBuilder","rope::BaseMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]}}
+<tree::Node<N> as std::default::Default>::default();
+crate::<tree::Node<N> as std::default::Default>::default();
+<tree::Node<N>>::default();
-----------------
rope/src/tree.rs tree::TreeBuilder::<N>::new
deps:{"delta::Delta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::TreeBuilder::<N>::new":{"N":["std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["spans::SpansInfo","interval::Interval","spans::Span","breaks::BreaksBaseMetric","diff::DiffBuilder","tree::Node","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for *const T>","diff::DiffOp","breaks::BreaksLeaf","rope::LinesMetric","multiset::Subset","delta::Delta","tree::NodeBody","engine::FullPriority","breaks::BreaksInfo","multiset::CountMatcher","multiset::ZipSegment","rope::RopeInfo","rope::BaseMetric","delta::DeltaElement","engine::Error","engine::RevId","breaks::BreaksMetric","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::Segment","tree::NodeVal","delta::InsertDelta","rope::Utf16CodeUnitsMetric","engine::Contents","spans::SpansLeaf"]},"spans::SpansInfo":{"T":["engine::Error","breaks::BreaksLeaf","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for *const T>","delta::Delta","delta::DeltaElement","engine::RevId","rope::BaseMetric","spans::SpansLeaf","interval::Interval","breaks::BreaksInfo","breaks::BreaksBaseMetric","engine::Contents","engine::DeltaOp","delta::InsertDelta","tree::NodeBody","tree::NodeVal","rope::Utf16CodeUnitsMetric","multiset::CountMatcher","multiset::Segment","rope::RopeInfo","engine::FullPriority","tree::Node","multiset::Subset","multiset::ZipSegment","breaks::BreaksMetric","diff::DiffBuilder","spans::Span","spans::SpansInfo","rope::LinesMetric","diff::DiffOp"]},"spans::SpansLeaf":{"T":["engine::Contents","engine::FullPriority","diff::DiffOp","engine::Error","rope::LinesMetric","rope::RopeInfo","diff::DiffBuilder","multiset::Segment","tree::NodeVal","delta::InsertDelta","tree::Node","delta::DeltaElement","spans::SpansInfo","interval::Interval","breaks::BreaksBaseMetric","tree::NodeBody","breaks::BreaksLeaf","multiset::Subset","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::DeltaOp","spans::SpansLeaf","rope::Utf16CodeUnitsMetric","multiset::ZipSegment","find::CaseMatching","delta::Delta","multiset::CountMatcher","breaks::BreaksInfo","engine::RevId","spans::Span","std::clone::impls::<impl std::clone::Clone for &T>","rope::BaseMetric","breaks::BreaksMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::TreeBuilder::<N>::new":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
+tree::TreeBuilder::<N>::new();
+crate::tree::TreeBuilder::<N>::new();
+<tree::TreeBuilder<N>>::new();
-----------------
rope/src/tree.rs tree::TreeBuilder::<N>::push
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","tree::NodeInfo","tree::DefaultMetric","std::clone::Clone"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeVal":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"tree::TreeBuilder::<N>::push":{"N":["std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["engine::FullPriority","breaks::BreaksLeaf","diff::DiffOp","multiset::Subset","diff::DiffBuilder","breaks::BreaksMetric","rope::RopeInfo","spans::SpansLeaf","delta::Delta","tree::NodeBody","multiset::ZipSegment","delta::DeltaElement","spans::SpansInfo","tree::NodeVal","tree::Node","engine::RevId","delta::InsertDelta","find::CaseMatching","interval::Interval","breaks::BreaksBaseMetric","rope::LinesMetric","engine::Error","std::clone::impls::<impl std::clone::Clone for &mut T>","std::clone::impls::<impl std::clone::Clone for &T>","engine::DeltaOp","breaks::BreaksInfo","multiset::Segment","engine::Contents","rope::BaseMetric","spans::Span","rope::Utf16CodeUnitsMetric","multiset::CountMatcher"]},"spans::SpansInfo":{"T":["engine::DeltaOp","breaks::BreaksInfo","find::CaseMatching","engine::RevId","diff::DiffOp","tree::NodeVal","rope::Utf16CodeUnitsMetric","delta::InsertDelta","engine::FullPriority","spans::SpansInfo","rope::RopeInfo","multiset::ZipSegment","tree::Node","multiset::Segment","multiset::Subset","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for *const T>","rope::LinesMetric","spans::Span","engine::Error","interval::Interval","breaks::BreaksLeaf","multiset::CountMatcher","breaks::BreaksBaseMetric","breaks::BreaksMetric","engine::Contents","delta::Delta","tree::NodeBody","spans::SpansLeaf","rope::BaseMetric","diff::DiffBuilder"]},"spans::SpansLeaf":{"T":["spans::SpansInfo","delta::Delta","engine::FullPriority","diff::DiffOp","multiset::CountMatcher","diff::DiffBuilder","rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for *const T>","tree::Node","spans::Span","rope::RopeInfo","multiset::Subset","breaks::BreaksBaseMetric","engine::Contents","breaks::BreaksLeaf","multiset::Segment","spans::SpansLeaf","breaks::BreaksInfo","tree::NodeVal","rope::LinesMetric","rope::BaseMetric","breaks::BreaksMetric","delta::DeltaElement","delta::InsertDelta","engine::RevId","multiset::ZipSegment","engine::DeltaOp","engine::Error","std::clone::impls::<impl std::clone::Clone for *mut T>","tree::NodeBody","interval::Interval","find::CaseMatching"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::TreeBuilder::<N>::push":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::TreeBuilder<N>
let mut p1 = MaybeUninit::uninit().assume_init(); // tree::Node<N>
+p0.push(p1);
+tree::TreeBuilder::<N>::push(p0, p1);
+crate::tree::TreeBuilder::<N>::push(p0, p1);
+<tree::TreeBuilder<N>>::push(p0, p1);
-----------------
rope/src/tree.rs tree::TreeBuilder::<N>::push_leaves
deps:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut thread_local::ThreadLocal<T> as std::iter::IntoIterator>":{},"<&'a mut thread_local::cached::CachedThreadLocal<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["std::marker::Sized","std::iter::Iterator"]},"delta::DeletionsIter":{"N":["tree::NodeInfo","std::marker::Sized"]},"delta::Delta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertsIter":{"N":["std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpanIter":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::CursorIter":{"M":["tree::Metric","std::marker::Sized"],"N":["tree::NodeInfo","std::marker::Sized"]},"tree::Node":{"N":["std::clone::Clone","std::marker::Sized","tree::DefaultMetric","tree::NodeInfo"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::TreeBuilder::<N>::push_leaves":{"N":["std::marker::Sized","tree::NodeInfo"],"impl IntoIterator<Item = N::L>":["std::marker::Sized","std::iter::IntoIterator"]}}
candidates:{"<&'a hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a hashbrown::set::HashSet<T, S, A> as std::iter::IntoIterator>":{},"<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a mut std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a mut std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a mut std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a mut std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a mut std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a mut std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&'a mut thread_local::ThreadLocal<T> as std::iter::IntoIterator>":{},"<&'a mut thread_local::cached::CachedThreadLocal<T> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeMap<K, V, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>":{},"<&'a std::collections::BinaryHeap<T> as std::iter::IntoIterator>":{},"<&'a std::collections::HashMap<K, V, S> as std::iter::IntoIterator>":{},"<&'a std::collections::HashSet<T, S> as std::iter::IntoIterator>":{},"<&'a std::collections::LinkedList<T> as std::iter::IntoIterator>":{},"<&'a std::collections::VecDeque<T, A> as std::iter::IntoIterator>":{},"<&'a std::option::Option<T> as std::iter::IntoIterator>":{},"<&'a std::result::Result<T, E> as std::iter::IntoIterator>":{},"<&'a std::sync::mpsc::Receiver<T> as std::iter::IntoIterator>":{},"<&'a std::vec::Vec<T, A> as std::iter::IntoIterator>":{},"<&mut I as std::iter::Iterator>":{},"<I as std::iter::IntoIterator>":{"I":["rope::ChunkIter","delta::DeletionsIter","delta::InsertsIter","<&mut I as std::iter::Iterator>","multiset::RangeIter","multiset::ZipIter","tree::CursorIter","rope::LinesRaw","rope::Lines","spans::SpanIter"]},"delta::DeletionsIter":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::Delta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertsIter":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["spans::Span","engine::Contents","multiset::CountMatcher","rope::Utf16CodeUnitsMetric","spans::SpansLeaf","multiset::ZipSegment","diff::DiffBuilder","tree::NodeBody","engine::RevId","find::CaseMatching","rope::RopeInfo","engine::DeltaOp","tree::NodeVal","engine::FullPriority","diff::DiffOp","delta::Delta","breaks::BreaksBaseMetric","spans::SpansInfo","interval::Interval","delta::DeltaElement","rope::BaseMetric","breaks::BreaksInfo","engine::Error","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksMetric","tree::Node","multiset::Subset","breaks::BreaksLeaf","multiset::Segment","delta::InsertDelta","rope::LinesMetric"]},"spans::SpanIter":{"T":["engine::RevId","spans::SpansInfo","tree::Node","engine::DeltaOp","interval::Interval","multiset::Subset","tree::NodeBody","engine::Contents","engine::FullPriority","std::clone::impls::<impl std::clone::Clone for &T>","delta::DeltaElement","delta::Delta","rope::LinesMetric","multiset::Segment","rope::RopeInfo","delta::InsertDelta","engine::Error","diff::DiffOp","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::Utf16CodeUnitsMetric","spans::Span","spans::SpansLeaf","breaks::BreaksBaseMetric","multiset::ZipSegment","multiset::CountMatcher","tree::NodeVal","breaks::BreaksMetric","diff::DiffBuilder","breaks::BreaksLeaf","find::CaseMatching","breaks::BreaksInfo"]},"spans::SpansInfo":{"T":["engine::FullPriority","engine::Error","delta::DeltaElement","diff::DiffBuilder","spans::SpansInfo","delta::Delta","find::CaseMatching","tree::NodeBody","rope::LinesMetric","multiset::Subset","spans::Span","multiset::Segment","rope::RopeInfo","breaks::BreaksLeaf","breaks::BreaksMetric","rope::Utf16CodeUnitsMetric","breaks::BreaksBaseMetric","interval::Interval","engine::RevId","tree::Node","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::DeltaOp","multiset::ZipSegment","breaks::BreaksInfo","diff::DiffOp","spans::SpansLeaf","tree::NodeVal","engine::Contents","multiset::CountMatcher","delta::InsertDelta"]},"spans::SpansLeaf":{"T":["std::clone::impls::<impl std::clone::Clone for *mut T>","rope::RopeInfo","engine::Contents","engine::FullPriority","delta::Delta","spans::SpansLeaf","engine::DeltaOp","diff::DiffOp","multiset::Subset","tree::NodeVal","breaks::BreaksLeaf","find::CaseMatching","breaks::BreaksBaseMetric","std::clone::impls::<impl std::clone::Clone for &T>","delta::InsertDelta","diff::DiffBuilder","engine::RevId","interval::Interval","spans::Span","rope::LinesMetric","multiset::Segment","rope::Utf16CodeUnitsMetric","breaks::BreaksMetric","breaks::BreaksInfo","tree::NodeBody","engine::Error","delta::DeltaElement","rope::BaseMetric","tree::Node","multiset::ZipSegment","spans::SpansInfo","multiset::CountMatcher"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::CursorIter":{"M":["rope::Utf16CodeUnitsMetric","breaks::BreaksBaseMetric","rope::LinesMetric","breaks::BreaksMetric","rope::BaseMetric"],"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::TreeBuilder::<N>::push_leaves":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"],"impl IntoIterator<Item = N::L>":["<&'a std::collections::BTreeSet<T, A> as std::iter::IntoIterator>","&'a std::path::PathBuf","std::collections::HashSet<T, S>","std::collections::BTreeMap<K, V, A>","std::collections::BinaryHeap<T>","std::collections::LinkedList<T>","std::vec::Vec<T, A>","&'a std::path::Path","std::collections::BTreeSet<T, A>","std::collections::HashMap<K, V, S>","std::result::Result<T, E>","std::collections::VecDeque<T, A>","std::option::Option<T>","&'a std::os::unix::net::UnixListener","std::sync::mpsc::Receiver<T>","<&'a mut hashbrown::map::HashMap<K, V, S, A> as std::iter::IntoIterator>"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::TreeBuilder<N>
let mut p1 = MaybeUninit::uninit().assume_init(); // impl IntoIterator<Item = N::L>
+p0.push_leaves(p1);
+tree::TreeBuilder::<N>::push_leaves(p0, p1);
+crate::tree::TreeBuilder::<N>::push_leaves(p0, p1);
+<tree::TreeBuilder<N>>::push_leaves(p0, p1);
-----------------
rope/src/tree.rs tree::TreeBuilder::<N>::push_leaf
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::marker::Sized","std::clone::Clone","tree::DefaultMetric","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::TreeBuilder::<N>::push_leaf":{"N":["tree::NodeInfo","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["interval::Interval","tree::Node","tree::NodeBody","delta::InsertDelta","diff::DiffBuilder","multiset::Segment","spans::SpansInfo","engine::Contents","breaks::BreaksLeaf","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::Error","diff::DiffOp","multiset::Subset","engine::DeltaOp","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","engine::RevId","tree::NodeVal","delta::DeltaElement","rope::BaseMetric","rope::RopeInfo","delta::Delta","engine::FullPriority","multiset::CountMatcher","rope::LinesMetric","multiset::ZipSegment","spans::Span","breaks::BreaksMetric","spans::SpansLeaf","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for *const T>"]},"spans::SpansInfo":{"T":["engine::Error","multiset::ZipSegment","engine::DeltaOp","engine::Contents","multiset::Subset","diff::DiffBuilder","breaks::BreaksBaseMetric","diff::DiffOp","find::CaseMatching","spans::SpansInfo","delta::DeltaElement","engine::FullPriority","rope::Utf16CodeUnitsMetric","rope::BaseMetric","tree::NodeVal","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::RopeInfo","spans::Span","spans::SpansLeaf","delta::Delta","multiset::Segment","engine::RevId","breaks::BreaksInfo","interval::Interval","tree::NodeBody","tree::Node","breaks::BreaksMetric","breaks::BreaksLeaf","rope::LinesMetric","multiset::CountMatcher","delta::InsertDelta"]},"spans::SpansLeaf":{"T":["breaks::BreaksBaseMetric","rope::RopeInfo","delta::InsertDelta","engine::FullPriority","find::CaseMatching","breaks::BreaksInfo","tree::Node","delta::Delta","tree::NodeVal","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::Utf16CodeUnitsMetric","multiset::Subset","diff::DiffOp","tree::NodeBody","diff::DiffBuilder","rope::LinesMetric","engine::Error","engine::DeltaOp","multiset::Segment","breaks::BreaksLeaf","multiset::CountMatcher","interval::Interval","spans::SpansLeaf","rope::BaseMetric","delta::DeltaElement","engine::Contents","spans::Span","breaks::BreaksMetric","multiset::ZipSegment","engine::RevId","spans::SpansInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::TreeBuilder::<N>::push_leaf":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::TreeBuilder<N>
let mut p1 = MaybeUninit::uninit().assume_init(); // <N as tree::NodeInfo>::L
+p0.push_leaf(p1);
+tree::TreeBuilder::<N>::push_leaf(p0, p1);
+crate::tree::TreeBuilder::<N>::push_leaf(p0, p1);
+<tree::TreeBuilder<N>>::push_leaf(p0, p1);
-----------------
rope/src/tree.rs tree::TreeBuilder::<N>::push_leaf_slice
deps:{"delta::Delta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::TreeBuilder::<N>::push_leaf_slice":{"N":["std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"spans::Span":{"T":["breaks::BreaksBaseMetric","diff::DiffBuilder","delta::InsertDelta","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::FullPriority","multiset::Subset","breaks::BreaksInfo","engine::DeltaOp","tree::Node","spans::SpansInfo","std::clone::impls::<impl std::clone::Clone for *const T>","breaks::BreaksMetric","rope::RopeInfo","engine::Contents","spans::Span","diff::DiffOp","delta::DeltaElement","engine::Error","multiset::ZipSegment","rope::LinesMetric","tree::NodeVal","engine::RevId","rope::Utf16CodeUnitsMetric","multiset::Segment","spans::SpansLeaf","multiset::CountMatcher","interval::Interval","delta::Delta","tree::NodeBody","find::CaseMatching","rope::BaseMetric"]},"spans::SpansInfo":{"T":["multiset::Subset","tree::NodeVal","tree::NodeBody","rope::Utf16CodeUnitsMetric","diff::DiffOp","multiset::ZipSegment","tree::Node","engine::Contents","delta::Delta","multiset::Segment","rope::LinesMetric","breaks::BreaksLeaf","multiset::CountMatcher","rope::RopeInfo","engine::FullPriority","breaks::BreaksInfo","delta::InsertDelta","spans::SpansLeaf","diff::DiffBuilder","breaks::BreaksBaseMetric","engine::Error","delta::DeltaElement","engine::DeltaOp","find::CaseMatching","interval::Interval","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::RevId","spans::Span","rope::BaseMetric","spans::SpansInfo","breaks::BreaksMetric"]},"spans::SpansLeaf":{"T":["spans::SpansLeaf","engine::Error","breaks::BreaksBaseMetric","breaks::BreaksMetric","find::CaseMatching","engine::RevId","tree::NodeVal","breaks::BreaksInfo","interval::Interval","rope::Utf16CodeUnitsMetric","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","diff::DiffOp","multiset::Subset","rope::BaseMetric","rope::RopeInfo","delta::InsertDelta","breaks::BreaksLeaf","engine::FullPriority","multiset::CountMatcher","tree::NodeBody","tree::Node","spans::Span","diff::DiffBuilder","delta::DeltaElement","multiset::Segment","engine::Contents","spans::SpansInfo","engine::DeltaOp","delta::Delta","multiset::ZipSegment"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::TreeBuilder::<N>::push_leaf_slice":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::TreeBuilder<N>
let mut p1 = & MaybeUninit::uninit().assume_init(); // <N as tree::NodeInfo>::L
let mut p2 = MaybeUninit::uninit().assume_init(); // interval::Interval
+p0.push_leaf_slice(p1, p2);
+tree::TreeBuilder::<N>::push_leaf_slice(p0, p1, p2);
+crate::tree::TreeBuilder::<N>::push_leaf_slice(p0, p1, p2);
+<tree::TreeBuilder<N>>::push_leaf_slice(p0, p1, p2);
-----------------
rope/src/tree.rs tree::TreeBuilder::<N>::build
deps:{"delta::Delta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::TreeBuilder::<N>::build":{"N":["tree::NodeInfo","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["rope::BaseMetric","engine::Contents","breaks::BreaksInfo","diff::DiffBuilder","engine::Error","breaks::BreaksLeaf","engine::FullPriority","diff::DiffOp","delta::InsertDelta","spans::Span","breaks::BreaksMetric","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","spans::SpansInfo","engine::DeltaOp","tree::NodeVal","multiset::ZipSegment","rope::LinesMetric","delta::Delta","rope::RopeInfo","find::CaseMatching","multiset::Segment","multiset::Subset","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for *mut T>","interval::Interval","spans::SpansLeaf","tree::NodeBody","tree::Node","multiset::CountMatcher","engine::RevId","std::clone::impls::<impl std::clone::Clone for &T>"]},"spans::SpansInfo":{"T":["breaks::BreaksMetric","tree::NodeVal","delta::Delta","rope::Utf16CodeUnitsMetric","multiset::CountMatcher","engine::DeltaOp","engine::Contents","delta::InsertDelta","engine::RevId","diff::DiffOp","delta::DeltaElement","spans::SpansLeaf","breaks::BreaksInfo","tree::NodeBody","std::clone::impls::<impl std::clone::Clone for &T>","rope::LinesMetric","find::CaseMatching","interval::Interval","spans::SpansInfo","tree::Node","diff::DiffBuilder","rope::RopeInfo","breaks::BreaksLeaf","engine::Error","multiset::Segment","multiset::Subset","rope::BaseMetric","breaks::BreaksBaseMetric","multiset::ZipSegment","engine::FullPriority","spans::Span"]},"spans::SpansLeaf":{"T":["std::clone::impls::<impl std::clone::Clone for &mut T>","spans::Span","delta::DeltaElement","engine::FullPriority","diff::DiffBuilder","breaks::BreaksInfo","breaks::BreaksMetric","spans::SpansInfo","tree::Node","engine::Contents","delta::InsertDelta","multiset::ZipSegment","spans::SpansLeaf","delta::Delta","engine::DeltaOp","rope::LinesMetric","tree::NodeVal","rope::BaseMetric","interval::Interval","engine::Error","breaks::BreaksLeaf","multiset::CountMatcher","multiset::Segment","diff::DiffOp","find::CaseMatching","rope::RopeInfo","tree::NodeBody","rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for *const T>","breaks::BreaksBaseMetric","engine::RevId","multiset::Subset"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::TreeBuilder::<N>::build":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = MaybeUninit::uninit().assume_init(); // tree::TreeBuilder<N>
+p0.build();
+tree::TreeBuilder::<N>::build(p0);
+crate::tree::TreeBuilder::<N>::build(p0);
+<tree::TreeBuilder<N>>::build(p0);
-----------------
rope/src/tree.rs tree::TreeBuilder::<N>::pop
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::TreeBuilder::<N>::pop":{"N":["tree::NodeInfo","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["engine::Contents","delta::DeltaElement","engine::DeltaOp","delta::Delta","rope::RopeInfo","diff::DiffOp","breaks::BreaksBaseMetric","multiset::Segment","breaks::BreaksInfo","engine::FullPriority","tree::Node","engine::Error","std::clone::impls::<impl std::clone::Clone for &T>","multiset::CountMatcher","rope::LinesMetric","diff::DiffBuilder","delta::InsertDelta","interval::Interval","tree::NodeVal","multiset::Subset","tree::NodeBody","rope::Utf16CodeUnitsMetric","find::CaseMatching","spans::SpansInfo","breaks::BreaksMetric","breaks::BreaksLeaf","multiset::ZipSegment","spans::SpansLeaf","rope::BaseMetric","spans::Span","engine::RevId"]},"spans::SpansInfo":{"T":["breaks::BreaksLeaf","diff::DiffOp","rope::RopeInfo","breaks::BreaksInfo","spans::SpansLeaf","delta::Delta","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for &mut T>","multiset::ZipSegment","spans::Span","multiset::Subset","breaks::BreaksMetric","breaks::BreaksBaseMetric","tree::NodeVal","delta::InsertDelta","find::CaseMatching","interval::Interval","engine::Contents","rope::LinesMetric","multiset::CountMatcher","engine::Error","rope::Utf16CodeUnitsMetric","engine::RevId","tree::Node","tree::NodeBody","engine::DeltaOp","rope::BaseMetric","multiset::Segment","diff::DiffBuilder","engine::FullPriority","spans::SpansInfo"]},"spans::SpansLeaf":{"T":["tree::Node","engine::Contents","engine::FullPriority","engine::DeltaOp","multiset::CountMatcher","tree::NodeBody","delta::InsertDelta","diff::DiffOp","spans::SpansLeaf","breaks::BreaksBaseMetric","multiset::Subset","rope::RopeInfo","delta::DeltaElement","diff::DiffBuilder","rope::Utf16CodeUnitsMetric","breaks::BreaksMetric","tree::NodeVal","engine::Error","delta::Delta","rope::BaseMetric","engine::RevId","find::CaseMatching","interval::Interval","multiset::Segment","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for &T>","rope::LinesMetric","multiset::ZipSegment","spans::Span","spans::SpansInfo","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for *mut T>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::TreeBuilder::<N>::pop":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::TreeBuilder<N>
+p0.pop();
+tree::TreeBuilder::<N>::pop(p0);
+crate::tree::TreeBuilder::<N>::pop(p0);
+<tree::TreeBuilder<N>>::pop(p0);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::new
'a
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::new":{"N":["tree::NodeInfo","std::marker::Sized"]},"tree::Node":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["find::CaseMatching","spans::SpansLeaf","spans::Span","breaks::BreaksLeaf","engine::DeltaOp","multiset::CountMatcher","breaks::BreaksBaseMetric","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::Error","tree::NodeBody","engine::Contents","tree::NodeVal","delta::DeltaElement","engine::RevId","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for &T>","diff::DiffBuilder","breaks::BreaksMetric","multiset::Segment","delta::Delta","engine::FullPriority","delta::InsertDelta","rope::BaseMetric","breaks::BreaksInfo","spans::SpansInfo","rope::Utf16CodeUnitsMetric","rope::LinesMetric","tree::Node","interval::Interval","rope::RopeInfo","multiset::Subset"]},"spans::SpansInfo":{"T":["rope::RopeInfo","tree::NodeVal","engine::RevId","multiset::Segment","tree::Node","multiset::ZipSegment","rope::BaseMetric","multiset::CountMatcher","delta::Delta","spans::SpansInfo","diff::DiffBuilder","breaks::BreaksInfo","breaks::BreaksLeaf","interval::Interval","delta::DeltaElement","rope::Utf16CodeUnitsMetric","engine::Error","engine::FullPriority","engine::DeltaOp","rope::LinesMetric","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::Contents","tree::NodeBody","multiset::Subset","breaks::BreaksBaseMetric","spans::SpansLeaf","spans::Span","breaks::BreaksMetric","diff::DiffOp","delta::InsertDelta"]},"spans::SpansLeaf":{"T":["spans::SpansLeaf","spans::Span","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksMetric","rope::Utf16CodeUnitsMetric","rope::RopeInfo","engine::Contents","rope::LinesMetric","rope::BaseMetric","delta::DeltaElement","delta::Delta","spans::SpansInfo","tree::Node","diff::DiffBuilder","breaks::BreaksBaseMetric","diff::DiffOp","interval::Interval","multiset::Segment","tree::NodeVal","find::CaseMatching","tree::NodeBody","engine::RevId","breaks::BreaksInfo","engine::FullPriority","breaks::BreaksLeaf","engine::Error","engine::DeltaOp","multiset::ZipSegment","multiset::Subset","multiset::CountMatcher"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::new":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Node<N>
let mut p1 = 0usize; // None+usize
+tree::Cursor::<'a, N>::new(p0, p1);
+crate::tree::Cursor::<'a, N>::new(p0, p1);
+<tree::Cursor<'a, N>>::new(p0, p1);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::total_len
'a
deps:{"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::total_len":{"N":["tree::NodeInfo","std::marker::Sized"]},"tree::Node":{"N":["std::clone::Clone","tree::DefaultMetric","tree::NodeInfo","std::marker::Sized"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"spans::Span":{"T":["rope::LinesMetric","rope::RopeInfo","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for *const T>","find::CaseMatching","breaks::BreaksBaseMetric","spans::SpansInfo","engine::RevId","engine::DeltaOp","interval::Interval","tree::NodeVal","multiset::CountMatcher","multiset::Subset","rope::BaseMetric","delta::InsertDelta","rope::Utf16CodeUnitsMetric","spans::Span","engine::Contents","tree::Node","breaks::BreaksInfo","delta::Delta","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksMetric","engine::FullPriority","spans::SpansLeaf","diff::DiffOp","diff::DiffBuilder","tree::NodeBody","breaks::BreaksLeaf","engine::Error","multiset::Segment","multiset::ZipSegment"]},"spans::SpansInfo":{"T":["tree::NodeBody","multiset::Segment","delta::InsertDelta","multiset::CountMatcher","spans::SpansInfo","spans::SpansLeaf","multiset::ZipSegment","delta::Delta","engine::Contents","engine::FullPriority","multiset::Subset","diff::DiffOp","diff::DiffBuilder","breaks::BreaksMetric","rope::RopeInfo","interval::Interval","breaks::BreaksBaseMetric","breaks::BreaksInfo","tree::Node","tree::NodeVal","find::CaseMatching","engine::Error","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for *const T>","engine::RevId","delta::DeltaElement","engine::DeltaOp","breaks::BreaksLeaf","rope::LinesMetric","rope::Utf16CodeUnitsMetric","spans::Span"]},"spans::SpansLeaf":{"T":["engine::Contents","diff::DiffBuilder","breaks::BreaksInfo","engine::RevId","engine::FullPriority","rope::RopeInfo","spans::SpansLeaf","multiset::Subset","spans::Span","engine::Error","diff::DiffOp","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","delta::DeltaElement","delta::Delta","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::Utf16CodeUnitsMetric","spans::SpansInfo","tree::Node","rope::LinesMetric","interval::Interval","engine::DeltaOp","tree::NodeVal","multiset::Segment","tree::NodeBody","find::CaseMatching","multiset::CountMatcher","multiset::ZipSegment","breaks::BreaksMetric","breaks::BreaksBaseMetric","breaks::BreaksLeaf"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::total_len":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
+p0.total_len();
+tree::Cursor::<'a, N>::total_len(p0);
+crate::tree::Cursor::<'a, N>::total_len(p0);
+<tree::Cursor<'a, N>>::total_len(p0);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::root
'a
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::root":{"N":["std::marker::Sized","tree::NodeInfo"]},"tree::Node":{"N":["std::clone::Clone","tree::DefaultMetric","tree::NodeInfo","std::marker::Sized"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["breaks::BreaksBaseMetric","engine::Contents","tree::Node","engine::FullPriority","breaks::BreaksLeaf","breaks::BreaksInfo","rope::RopeInfo","breaks::BreaksMetric","engine::RevId","multiset::Subset","multiset::Segment","delta::DeltaElement","tree::NodeBody","rope::LinesMetric","rope::Utf16CodeUnitsMetric","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::ZipSegment","multiset::CountMatcher","spans::Span","delta::InsertDelta","diff::DiffOp","spans::SpansInfo","find::CaseMatching","delta::Delta","rope::BaseMetric","diff::DiffBuilder","engine::Error","spans::SpansLeaf","interval::Interval","tree::NodeVal"]},"spans::SpansInfo":{"T":["delta::InsertDelta","multiset::Segment","multiset::CountMatcher","engine::FullPriority","engine::Contents","multiset::ZipSegment","diff::DiffOp","engine::RevId","breaks::BreaksLeaf","spans::Span","breaks::BreaksMetric","rope::RopeInfo","interval::Interval","engine::Error","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::DeltaOp","rope::LinesMetric","diff::DiffBuilder","rope::Utf16CodeUnitsMetric","spans::SpansLeaf","breaks::BreaksBaseMetric","tree::NodeVal","tree::NodeBody","multiset::Subset","find::CaseMatching","breaks::BreaksInfo","spans::SpansInfo","tree::Node","rope::BaseMetric","delta::DeltaElement","delta::Delta"]},"spans::SpansLeaf":{"T":["multiset::ZipSegment","diff::DiffOp","delta::InsertDelta","breaks::BreaksBaseMetric","tree::Node","rope::LinesMetric","breaks::BreaksLeaf","rope::RopeInfo","engine::Contents","rope::BaseMetric","diff::DiffBuilder","engine::FullPriority","find::CaseMatching","multiset::Subset","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for &mut T>","breaks::BreaksMetric","interval::Interval","spans::SpansLeaf","spans::SpansInfo","std::clone::impls::<impl std::clone::Clone for &T>","multiset::CountMatcher","spans::Span","tree::NodeBody","delta::Delta","multiset::Segment","engine::Error","delta::DeltaElement","rope::Utf16CodeUnitsMetric","breaks::BreaksInfo","engine::RevId","tree::NodeVal"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::root":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
+p0.root();
+tree::Cursor::<'a, N>::root(p0);
+crate::tree::Cursor::<'a, N>::root(p0);
+<tree::Cursor<'a, N>>::root(p0);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::get_leaf
'a
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::get_leaf":{"N":["std::marker::Sized","tree::NodeInfo"]},"tree::Node":{"N":["std::clone::Clone","tree::NodeInfo","tree::DefaultMetric","std::marker::Sized"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeVal":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["diff::DiffBuilder","engine::RevId","multiset::Subset","diff::DiffOp","tree::NodeVal","delta::Delta","tree::NodeBody","breaks::BreaksBaseMetric","spans::SpansInfo","engine::DeltaOp","engine::FullPriority","rope::BaseMetric","interval::Interval","delta::DeltaElement","delta::InsertDelta","multiset::Segment","breaks::BreaksLeaf","multiset::CountMatcher","rope::LinesMetric","rope::Utf16CodeUnitsMetric","engine::Contents","rope::RopeInfo","engine::Error","breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for &T>","find::CaseMatching","spans::SpansLeaf","spans::Span","tree::Node","breaks::BreaksInfo","multiset::ZipSegment"]},"spans::SpansInfo":{"T":["tree::NodeBody","rope::BaseMetric","delta::DeltaElement","multiset::Subset","tree::NodeVal","rope::Utf16CodeUnitsMetric","find::CaseMatching","delta::Delta","spans::Span","diff::DiffOp","diff::DiffBuilder","spans::SpansLeaf","breaks::BreaksMetric","engine::DeltaOp","breaks::BreaksLeaf","breaks::BreaksBaseMetric","engine::Error","engine::FullPriority","tree::Node","multiset::Segment","interval::Interval","spans::SpansInfo","multiset::CountMatcher","engine::RevId","delta::InsertDelta","multiset::ZipSegment","engine::Contents","rope::LinesMetric","rope::RopeInfo","std::clone::impls::<impl std::clone::Clone for *mut T>","breaks::BreaksInfo"]},"spans::SpansLeaf":{"T":["std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksLeaf","tree::NodeVal","delta::DeltaElement","engine::RevId","spans::SpansLeaf","breaks::BreaksBaseMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","breaks::BreaksInfo","engine::FullPriority","spans::Span","rope::RopeInfo","diff::DiffBuilder","breaks::BreaksMetric","tree::NodeBody","multiset::Subset","interval::Interval","multiset::CountMatcher","find::CaseMatching","multiset::Segment","multiset::ZipSegment","delta::InsertDelta","engine::Error","diff::DiffOp","rope::LinesMetric","tree::Node","engine::DeltaOp","rope::Utf16CodeUnitsMetric","rope::BaseMetric","delta::Delta","engine::Contents","spans::SpansInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::get_leaf":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
+p0.get_leaf();
+tree::Cursor::<'a, N>::get_leaf(p0);
+crate::tree::Cursor::<'a, N>::get_leaf(p0);
+<tree::Cursor<'a, N>>::get_leaf(p0);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::set
'a
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::set":{"N":["tree::NodeInfo","std::marker::Sized"]},"tree::Node":{"N":["std::clone::Clone","std::marker::Sized","tree::DefaultMetric","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["breaks::BreaksMetric","breaks::BreaksInfo","tree::Node","engine::Error","spans::SpansInfo","std::clone::impls::<impl std::clone::Clone for &mut T>","delta::DeltaElement","multiset::Segment","multiset::Subset","breaks::BreaksBaseMetric","spans::SpansLeaf","rope::Utf16CodeUnitsMetric","tree::NodeVal","engine::Contents","multiset::ZipSegment","spans::Span","find::CaseMatching","rope::BaseMetric","delta::Delta","delta::InsertDelta","diff::DiffOp","rope::RopeInfo","interval::Interval","engine::RevId","breaks::BreaksLeaf","diff::DiffBuilder","engine::DeltaOp","multiset::CountMatcher","std::clone::impls::<impl std::clone::Clone for *mut T>","tree::NodeBody","engine::FullPriority","rope::LinesMetric"]},"spans::SpansInfo":{"T":["tree::NodeBody","breaks::BreaksBaseMetric","multiset::CountMatcher","breaks::BreaksInfo","rope::RopeInfo","delta::Delta","engine::RevId","delta::InsertDelta","spans::SpansInfo","rope::BaseMetric","spans::SpansLeaf","breaks::BreaksLeaf","rope::Utf16CodeUnitsMetric","spans::Span","tree::Node","breaks::BreaksMetric","engine::Contents","multiset::Subset","find::CaseMatching","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::LinesMetric","engine::FullPriority","delta::DeltaElement","interval::Interval","engine::Error","diff::DiffBuilder","diff::DiffOp","multiset::Segment","multiset::ZipSegment","tree::NodeVal"]},"spans::SpansLeaf":{"T":["find::CaseMatching","spans::SpansLeaf","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::ZipSegment","rope::BaseMetric","tree::NodeVal","breaks::BreaksLeaf","breaks::BreaksMetric","diff::DiffOp","breaks::BreaksBaseMetric","multiset::Subset","engine::Error","engine::DeltaOp","multiset::CountMatcher","tree::Node","spans::SpansInfo","tree::NodeBody","engine::Contents","rope::LinesMetric","multiset::Segment","rope::RopeInfo","rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for *const T>","spans::Span","interval::Interval","diff::DiffBuilder","engine::RevId","breaks::BreaksInfo","engine::FullPriority","delta::Delta","delta::InsertDelta"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::set":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
let mut p1 = 0usize; // None+usize
+p0.set(p1);
+tree::Cursor::<'a, N>::set(p0, p1);
+crate::tree::Cursor::<'a, N>::set(p0, p1);
+<tree::Cursor<'a, N>>::set(p0, p1);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::pos
'a
deps:{"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::pos":{"N":["tree::NodeInfo","std::marker::Sized"]},"tree::Node":{"N":["tree::DefaultMetric","tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["breaks::BreaksInfo","engine::DeltaOp","delta::Delta","std::clone::impls::<impl std::clone::Clone for &T>","delta::InsertDelta","breaks::BreaksLeaf","spans::SpansInfo","rope::LinesMetric","delta::DeltaElement","diff::DiffOp","breaks::BreaksBaseMetric","find::CaseMatching","tree::NodeBody","engine::Error","engine::RevId","interval::Interval","multiset::ZipSegment","multiset::CountMatcher","rope::BaseMetric","spans::Span","tree::Node","rope::Utf16CodeUnitsMetric","tree::NodeVal","multiset::Segment","engine::FullPriority","rope::RopeInfo","multiset::Subset","std::clone::impls::<impl std::clone::Clone for *mut T>","breaks::BreaksMetric","spans::SpansLeaf","diff::DiffBuilder","engine::Contents"]},"spans::SpansInfo":{"T":["tree::NodeBody","multiset::CountMatcher","rope::LinesMetric","breaks::BreaksMetric","find::CaseMatching","rope::Utf16CodeUnitsMetric","delta::InsertDelta","tree::Node","multiset::ZipSegment","spans::SpansLeaf","rope::RopeInfo","engine::DeltaOp","delta::DeltaElement","interval::Interval","engine::Error","std::clone::impls::<impl std::clone::Clone for *mut T>","delta::Delta","engine::RevId","engine::Contents","diff::DiffBuilder","breaks::BreaksInfo","engine::FullPriority","multiset::Subset","spans::Span","breaks::BreaksLeaf","tree::NodeVal","diff::DiffOp","breaks::BreaksBaseMetric","multiset::Segment","rope::BaseMetric","spans::SpansInfo"]},"spans::SpansLeaf":{"T":["spans::Span","engine::Contents","tree::Node","engine::RevId","breaks::BreaksBaseMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","engine::FullPriority","diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for &T>","rope::LinesMetric","rope::RopeInfo","find::CaseMatching","spans::SpansInfo","engine::Error","breaks::BreaksMetric","delta::Delta","multiset::Subset","delta::DeltaElement","multiset::Segment","rope::BaseMetric","engine::DeltaOp","breaks::BreaksInfo","breaks::BreaksLeaf","tree::NodeBody","spans::SpansLeaf","multiset::ZipSegment","delta::InsertDelta","diff::DiffOp","rope::Utf16CodeUnitsMetric","interval::Interval","multiset::CountMatcher","tree::NodeVal"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::pos":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
+p0.pos();
+tree::Cursor::<'a, N>::pos(p0);
+crate::tree::Cursor::<'a, N>::pos(p0);
+<tree::Cursor<'a, N>>::pos(p0);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::is_boundary
'a
deps:{"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::is_boundary":{"M":["tree::Metric","std::marker::Sized"],"N":["std::marker::Sized","tree::NodeInfo"]},"tree::Node":{"N":["std::marker::Sized","tree::DefaultMetric","tree::NodeInfo","std::clone::Clone"]},"tree::NodeBody":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["engine::DeltaOp","breaks::BreaksBaseMetric","engine::FullPriority","delta::InsertDelta","rope::Utf16CodeUnitsMetric","spans::SpansLeaf","multiset::CountMatcher","tree::NodeBody","interval::Interval","spans::SpansInfo","find::CaseMatching","multiset::ZipSegment","rope::LinesMetric","breaks::BreaksInfo","tree::Node","engine::Contents","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::BaseMetric","delta::DeltaElement","diff::DiffBuilder","multiset::Subset","breaks::BreaksMetric","engine::Error","breaks::BreaksLeaf","rope::RopeInfo","tree::NodeVal","std::clone::impls::<impl std::clone::Clone for &T>","multiset::Segment","engine::RevId","diff::DiffOp","delta::Delta","spans::Span"]},"spans::SpansInfo":{"T":["multiset::Subset","rope::LinesMetric","breaks::BreaksInfo","delta::DeltaElement","find::CaseMatching","delta::Delta","rope::RopeInfo","breaks::BreaksMetric","interval::Interval","tree::NodeBody","diff::DiffBuilder","diff::DiffOp","engine::DeltaOp","multiset::Segment","breaks::BreaksBaseMetric","spans::SpansLeaf","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::FullPriority","rope::Utf16CodeUnitsMetric","engine::Contents","delta::InsertDelta","spans::Span","engine::Error","multiset::ZipSegment","tree::Node","tree::NodeVal","breaks::BreaksLeaf","engine::RevId","multiset::CountMatcher","spans::SpansInfo","rope::BaseMetric"]},"spans::SpansLeaf":{"T":["multiset::Subset","breaks::BreaksBaseMetric","multiset::Segment","breaks::BreaksMetric","engine::FullPriority","engine::DeltaOp","diff::DiffOp","interval::Interval","std::clone::impls::<impl std::clone::Clone for *const T>","breaks::BreaksLeaf","delta::InsertDelta","delta::Delta","rope::RopeInfo","delta::DeltaElement","diff::DiffBuilder","rope::Utf16CodeUnitsMetric","rope::LinesMetric","breaks::BreaksInfo","tree::NodeBody","spans::SpansInfo","multiset::ZipSegment","rope::BaseMetric","tree::NodeVal","find::CaseMatching","tree::Node","std::clone::impls::<impl std::clone::Clone for &T>","spans::SpansLeaf","engine::Error","multiset::CountMatcher","spans::Span","engine::Contents","engine::RevId"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::is_boundary":{"M":["breaks::BreaksMetric","rope::LinesMetric","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","rope::BaseMetric"],"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
+p0.is_boundary();
+tree::Cursor::<'a, N>::is_boundary(p0);
+crate::tree::Cursor::<'a, N>::is_boundary(p0);
+<tree::Cursor<'a, N>>::is_boundary(p0);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::prev
'a
deps:{"delta::Delta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::prev":{"M":["std::marker::Sized","tree::Metric"],"N":["tree::NodeInfo","std::marker::Sized"]},"tree::Node":{"N":["tree::DefaultMetric","std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["breaks::BreaksLeaf","engine::RevId","multiset::CountMatcher","delta::InsertDelta","find::CaseMatching","spans::Span","delta::Delta","rope::RopeInfo","breaks::BreaksBaseMetric","diff::DiffBuilder","engine::DeltaOp","multiset::Segment","rope::BaseMetric","engine::Contents","tree::NodeBody","rope::LinesMetric","tree::Node","rope::Utf16CodeUnitsMetric","engine::Error","spans::SpansLeaf","engine::FullPriority","multiset::Subset","interval::Interval","spans::SpansInfo","std::clone::impls::<impl std::clone::Clone for *mut T>","diff::DiffOp","tree::NodeVal","multiset::ZipSegment","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksMetric","breaks::BreaksInfo"]},"spans::SpansInfo":{"T":["delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for &T>","diff::DiffBuilder","multiset::Subset","rope::LinesMetric","multiset::Segment","tree::Node","breaks::BreaksLeaf","tree::NodeVal","engine::DeltaOp","engine::RevId","diff::DiffOp","breaks::BreaksInfo","rope::Utf16CodeUnitsMetric","engine::FullPriority","spans::Span","find::CaseMatching","spans::SpansInfo","delta::Delta","multiset::CountMatcher","engine::Contents","rope::RopeInfo","breaks::BreaksMetric","spans::SpansLeaf","breaks::BreaksBaseMetric","interval::Interval","multiset::ZipSegment","delta::InsertDelta","engine::Error","tree::NodeBody","rope::BaseMetric"]},"spans::SpansLeaf":{"T":["interval::Interval","spans::SpansLeaf","engine::Error","breaks::BreaksBaseMetric","breaks::BreaksInfo","multiset::CountMatcher","spans::Span","rope::Utf16CodeUnitsMetric","tree::NodeVal","engine::Contents","delta::Delta","tree::NodeBody","multiset::Segment","multiset::Subset","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for &T>","diff::DiffOp","rope::LinesMetric","engine::RevId","rope::BaseMetric","breaks::BreaksMetric","tree::Node","engine::FullPriority","find::CaseMatching","rope::RopeInfo","spans::SpansInfo","multiset::ZipSegment","delta::DeltaElement","diff::DiffBuilder","breaks::BreaksLeaf","engine::DeltaOp"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::prev":{"M":["rope::Utf16CodeUnitsMetric","rope::BaseMetric","rope::LinesMetric","breaks::BreaksMetric","breaks::BreaksBaseMetric"],"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
+p0.prev();
+tree::Cursor::<'a, N>::prev(p0);
+crate::tree::Cursor::<'a, N>::prev(p0);
+<tree::Cursor<'a, N>>::prev(p0);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::next
'a
deps:{"delta::Delta":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::next":{"M":["tree::Metric","std::marker::Sized"],"N":["std::marker::Sized","tree::NodeInfo"]},"tree::Node":{"N":["std::marker::Sized","tree::DefaultMetric","tree::NodeInfo","std::clone::Clone"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["std::clone::impls::<impl std::clone::Clone for *const T>","engine::RevId","spans::Span","breaks::BreaksLeaf","find::CaseMatching","delta::Delta","engine::Contents","engine::DeltaOp","rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::BaseMetric","breaks::BreaksInfo","interval::Interval","breaks::BreaksBaseMetric","diff::DiffBuilder","rope::LinesMetric","tree::Node","multiset::CountMatcher","diff::DiffOp","engine::Error","multiset::Subset","breaks::BreaksMetric","multiset::ZipSegment","multiset::Segment","delta::DeltaElement","spans::SpansLeaf","engine::FullPriority","tree::NodeBody","tree::NodeVal","spans::SpansInfo","rope::RopeInfo","delta::InsertDelta"]},"spans::SpansInfo":{"T":["tree::Node","diff::DiffBuilder","diff::DiffOp","engine::Contents","interval::Interval","tree::NodeVal","delta::DeltaElement","delta::Delta","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for &T>","engine::Error","breaks::BreaksInfo","engine::FullPriority","breaks::BreaksLeaf","breaks::BreaksMetric","find::CaseMatching","delta::InsertDelta","engine::RevId","spans::SpansInfo","rope::RopeInfo","tree::NodeBody","multiset::ZipSegment","spans::Span","rope::Utf16CodeUnitsMetric","multiset::CountMatcher","multiset::Segment","spans::SpansLeaf","breaks::BreaksBaseMetric","multiset::Subset","rope::LinesMetric","rope::BaseMetric"]},"spans::SpansLeaf":{"T":["std::clone::impls::<impl std::clone::Clone for &mut T>","breaks::BreaksBaseMetric","spans::Span","std::clone::impls::<impl std::clone::Clone for &T>","engine::DeltaOp","rope::RopeInfo","engine::RevId","delta::Delta","multiset::ZipSegment","engine::Error","interval::Interval","find::CaseMatching","delta::InsertDelta","engine::Contents","spans::SpansLeaf","tree::NodeVal","engine::FullPriority","multiset::Segment","multiset::CountMatcher","rope::Utf16CodeUnitsMetric","diff::DiffBuilder","tree::NodeBody","breaks::BreaksMetric","spans::SpansInfo","delta::DeltaElement","rope::BaseMetric","tree::Node","breaks::BreaksInfo","breaks::BreaksLeaf","rope::LinesMetric","multiset::Subset","diff::DiffOp"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::next":{"M":["rope::BaseMetric","breaks::BreaksBaseMetric","breaks::BreaksMetric","rope::LinesMetric","rope::Utf16CodeUnitsMetric"],"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
+p0.next();
+tree::Cursor::<'a, N>::next(p0);
+crate::tree::Cursor::<'a, N>::next(p0);
+<tree::Cursor<'a, N>>::next(p0);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::at_or_next
'a
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::at_or_next":{"M":["tree::Metric","std::marker::Sized"],"N":["std::marker::Sized","tree::NodeInfo"]},"tree::Node":{"N":["tree::NodeInfo","tree::DefaultMetric","std::clone::Clone","std::marker::Sized"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["std::clone::impls::<impl std::clone::Clone for *const T>","multiset::CountMatcher","spans::SpansInfo","rope::Utf16CodeUnitsMetric","tree::Node","diff::DiffBuilder","interval::Interval","breaks::BreaksBaseMetric","multiset::Segment","diff::DiffOp","breaks::BreaksInfo","rope::RopeInfo","engine::Contents","engine::RevId","tree::NodeBody","spans::SpansLeaf","delta::Delta","spans::Span","multiset::Subset","engine::DeltaOp","rope::LinesMetric","tree::NodeVal","delta::InsertDelta","breaks::BreaksLeaf","rope::BaseMetric","engine::FullPriority","delta::DeltaElement","breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for *mut T>","engine::Error","multiset::ZipSegment","find::CaseMatching"]},"spans::SpansInfo":{"T":["multiset::ZipSegment","breaks::BreaksInfo","multiset::Subset","engine::Error","multiset::CountMatcher","rope::BaseMetric","tree::NodeBody","delta::InsertDelta","spans::SpansInfo","rope::RopeInfo","rope::LinesMetric","interval::Interval","spans::SpansLeaf","engine::RevId","diff::DiffBuilder","tree::Node","diff::DiffOp","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::Segment","breaks::BreaksLeaf","engine::Contents","engine::DeltaOp","find::CaseMatching","breaks::BreaksMetric","tree::NodeVal","spans::Span","engine::FullPriority","delta::Delta"]},"spans::SpansLeaf":{"T":["engine::FullPriority","tree::NodeBody","multiset::CountMatcher","delta::InsertDelta","spans::SpansLeaf","breaks::BreaksLeaf","delta::DeltaElement","engine::RevId","diff::DiffBuilder","breaks::BreaksMetric","spans::Span","std::clone::impls::<impl std::clone::Clone for *const T>","interval::Interval","delta::Delta","rope::Utf16CodeUnitsMetric","rope::LinesMetric","engine::DeltaOp","multiset::Subset","multiset::Segment","engine::Error","find::CaseMatching","rope::BaseMetric","rope::RopeInfo","spans::SpansInfo","tree::Node","diff::DiffOp","engine::Contents","multiset::ZipSegment","breaks::BreaksInfo","breaks::BreaksBaseMetric","tree::NodeVal"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::at_or_next":{"M":["rope::Utf16CodeUnitsMetric","breaks::BreaksBaseMetric","rope::LinesMetric","breaks::BreaksMetric","rope::BaseMetric"],"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
+p0.at_or_next();
+tree::Cursor::<'a, N>::at_or_next(p0);
+crate::tree::Cursor::<'a, N>::at_or_next(p0);
+<tree::Cursor<'a, N>>::at_or_next(p0);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::at_or_prev
'a
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::at_or_prev":{"M":["std::marker::Sized","tree::Metric"],"N":["std::marker::Sized","tree::NodeInfo"]},"tree::Node":{"N":["tree::DefaultMetric","std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["spans::Span","multiset::Subset","engine::RevId","engine::FullPriority","find::CaseMatching","engine::DeltaOp","rope::BaseMetric","tree::Node","breaks::BreaksInfo","delta::Delta","rope::RopeInfo","interval::Interval","std::clone::impls::<impl std::clone::Clone for *mut T>","delta::DeltaElement","tree::NodeVal","multiset::CountMatcher","delta::InsertDelta","multiset::ZipSegment","breaks::BreaksMetric","multiset::Segment","spans::SpansLeaf","breaks::BreaksBaseMetric","engine::Contents","diff::DiffBuilder","engine::Error","rope::LinesMetric","breaks::BreaksLeaf","rope::Utf16CodeUnitsMetric","std::clone::impls::<impl std::clone::Clone for &T>","spans::SpansInfo","tree::NodeBody","diff::DiffOp"]},"spans::SpansInfo":{"T":["multiset::CountMatcher","spans::Span","rope::BaseMetric","delta::InsertDelta","rope::Utf16CodeUnitsMetric","breaks::BreaksMetric","rope::LinesMetric","multiset::ZipSegment","engine::RevId","breaks::BreaksInfo","engine::Error","spans::SpansInfo","diff::DiffBuilder","engine::FullPriority","multiset::Subset","delta::Delta","tree::Node","interval::Interval","find::CaseMatching","spans::SpansLeaf","diff::DiffOp","breaks::BreaksLeaf","rope::RopeInfo","engine::DeltaOp","engine::Contents","multiset::Segment","std::clone::impls::<impl std::clone::Clone for &mut T>","tree::NodeBody","breaks::BreaksBaseMetric","tree::NodeVal","delta::DeltaElement"]},"spans::SpansLeaf":{"T":["tree::NodeBody","multiset::Subset","rope::BaseMetric","multiset::CountMatcher","tree::NodeVal","delta::DeltaElement","engine::FullPriority","engine::DeltaOp","spans::SpansLeaf","interval::Interval","engine::Error","delta::Delta","spans::SpansInfo","rope::LinesMetric","find::CaseMatching","breaks::BreaksBaseMetric","std::clone::impls::<impl std::clone::Clone for &T>","multiset::ZipSegment","breaks::BreaksMetric","engine::Contents","rope::Utf16CodeUnitsMetric","diff::DiffOp","rope::RopeInfo","delta::InsertDelta","breaks::BreaksLeaf","multiset::Segment","diff::DiffBuilder","engine::RevId","tree::Node","spans::Span","breaks::BreaksInfo"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::at_or_prev":{"M":["breaks::BreaksBaseMetric","rope::LinesMetric","rope::Utf16CodeUnitsMetric","rope::BaseMetric","breaks::BreaksMetric"],"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
+p0.at_or_prev();
+tree::Cursor::<'a, N>::at_or_prev(p0);
+crate::tree::Cursor::<'a, N>::at_or_prev(p0);
+<tree::Cursor<'a, N>>::at_or_prev(p0);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::iter
'a
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::iter":{"M":["tree::Metric","std::marker::Sized"],"N":["std::marker::Sized","tree::NodeInfo"]},"tree::Node":{"N":["std::marker::Sized","tree::NodeInfo","tree::DefaultMetric","std::clone::Clone"]},"tree::NodeBody":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"tree::NodeVal":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"spans::Span":{"T":["spans::Span","breaks::BreaksBaseMetric","spans::SpansInfo","rope::Utf16CodeUnitsMetric","breaks::BreaksLeaf","rope::BaseMetric","tree::NodeVal","spans::SpansLeaf","breaks::BreaksInfo","interval::Interval","multiset::Segment","delta::DeltaElement","diff::DiffOp","engine::Error","engine::RevId","diff::DiffBuilder","rope::LinesMetric","engine::Contents","multiset::CountMatcher","rope::RopeInfo","engine::DeltaOp","multiset::ZipSegment","breaks::BreaksMetric","tree::Node","delta::InsertDelta","tree::NodeBody","delta::Delta","engine::FullPriority","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::Subset","std::clone::impls::<impl std::clone::Clone for *const T>"]},"spans::SpansInfo":{"T":["delta::DeltaElement","rope::BaseMetric","delta::InsertDelta","engine::DeltaOp","rope::LinesMetric","breaks::BreaksInfo","diff::DiffBuilder","spans::SpansInfo","engine::Contents","engine::Error","multiset::Segment","delta::Delta","spans::Span","find::CaseMatching","multiset::ZipSegment","breaks::BreaksLeaf","interval::Interval","multiset::CountMatcher","tree::Node","rope::Utf16CodeUnitsMetric","engine::FullPriority","breaks::BreaksBaseMetric","tree::NodeVal","engine::RevId","multiset::Subset","spans::SpansLeaf","std::clone::impls::<impl std::clone::Clone for &T>","diff::DiffOp","breaks::BreaksMetric","tree::NodeBody","rope::RopeInfo"]},"spans::SpansLeaf":{"T":["breaks::BreaksInfo","breaks::BreaksBaseMetric","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for &mut T>","tree::Node","spans::SpansLeaf","interval::Interval","spans::Span","breaks::BreaksMetric","diff::DiffOp","engine::DeltaOp","rope::Utf16CodeUnitsMetric","spans::SpansInfo","rope::LinesMetric","engine::FullPriority","delta::Delta","delta::DeltaElement","tree::NodeVal","delta::InsertDelta","engine::RevId","diff::DiffBuilder","engine::Error","rope::RopeInfo","rope::BaseMetric","engine::Contents","std::clone::impls::<impl std::clone::Clone for *const T>","find::CaseMatching","multiset::Segment","multiset::Subset","multiset::ZipSegment","tree::NodeBody","multiset::CountMatcher"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::iter":{"M":["breaks::BreaksBaseMetric","rope::LinesMetric","breaks::BreaksMetric","rope::BaseMetric","rope::Utf16CodeUnitsMetric"],"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
+p0.iter();
+tree::Cursor::<'a, N>::iter(p0);
+crate::tree::Cursor::<'a, N>::iter(p0);
+<tree::Cursor<'a, N>>::iter(p0);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::last_inside_leaf
'a
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::last_inside_leaf":{"M":["std::marker::Sized","tree::Metric"],"N":["std::marker::Sized","tree::NodeInfo"]},"tree::Node":{"N":["tree::DefaultMetric","std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["spans::SpansInfo","multiset::Segment","engine::Error","find::CaseMatching","diff::DiffOp","tree::NodeBody","spans::SpansLeaf","tree::Node","delta::DeltaElement","breaks::BreaksInfo","engine::Contents","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::LinesMetric","multiset::CountMatcher","breaks::BreaksMetric","multiset::ZipSegment","rope::Utf16CodeUnitsMetric","spans::Span","breaks::BreaksLeaf","engine::DeltaOp","rope::RopeInfo","engine::RevId","tree::NodeVal","breaks::BreaksBaseMetric","engine::FullPriority","delta::Delta","diff::DiffBuilder","multiset::Subset","interval::Interval","rope::BaseMetric","delta::InsertDelta"]},"spans::SpansInfo":{"T":["tree::NodeBody","multiset::Segment","delta::DeltaElement","engine::Error","breaks::BreaksInfo","rope::Utf16CodeUnitsMetric","find::CaseMatching","rope::RopeInfo","multiset::CountMatcher","multiset::ZipSegment","interval::Interval","spans::SpansLeaf","delta::InsertDelta","engine::RevId","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksBaseMetric","spans::Span","tree::NodeVal","rope::BaseMetric","breaks::BreaksLeaf","engine::FullPriority","diff::DiffOp","spans::SpansInfo","engine::DeltaOp","multiset::Subset","breaks::BreaksMetric","engine::Contents","tree::Node","delta::Delta","rope::LinesMetric","diff::DiffBuilder"]},"spans::SpansLeaf":{"T":["breaks::BreaksInfo","spans::Span","rope::BaseMetric","rope::RopeInfo","delta::Delta","rope::Utf16CodeUnitsMetric","tree::NodeBody","multiset::Subset","delta::DeltaElement","engine::FullPriority","tree::NodeVal","breaks::BreaksMetric","multiset::Segment","breaks::BreaksLeaf","spans::SpansLeaf","find::CaseMatching","std::clone::impls::<impl std::clone::Clone for *mut T>","tree::Node","engine::DeltaOp","engine::Error","engine::Contents","multiset::CountMatcher","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for *const T>","interval::Interval","delta::InsertDelta","spans::SpansInfo","breaks::BreaksBaseMetric","rope::LinesMetric","engine::RevId","diff::DiffOp","diff::DiffBuilder"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::last_inside_leaf":{"M":["breaks::BreaksMetric","rope::BaseMetric","rope::Utf16CodeUnitsMetric","rope::LinesMetric","breaks::BreaksBaseMetric"],"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
let mut p1 = 0usize; // None+usize
+p0.last_inside_leaf(p1);
+tree::Cursor::<'a, N>::last_inside_leaf(p0, p1);
+crate::tree::Cursor::<'a, N>::last_inside_leaf(p0, p1);
+<tree::Cursor<'a, N>>::last_inside_leaf(p0, p1);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::next_inside_leaf
'a
deps:{"delta::Delta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::DeltaElement":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::next_inside_leaf":{"M":["std::marker::Sized","tree::Metric"],"N":["std::marker::Sized","tree::NodeInfo"]},"tree::Node":{"N":["std::marker::Sized","std::clone::Clone","tree::DefaultMetric","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["breaks::BreaksBaseMetric","tree::Node","std::clone::impls::<impl std::clone::Clone for &mut T>","rope::Utf16CodeUnitsMetric","delta::InsertDelta","engine::Contents","find::CaseMatching","engine::RevId","std::clone::impls::<impl std::clone::Clone for *mut T>","rope::BaseMetric","multiset::Subset","delta::Delta","spans::Span","multiset::ZipSegment","spans::SpansLeaf","breaks::BreaksLeaf","tree::NodeBody","diff::DiffBuilder","diff::DiffOp","multiset::Segment","breaks::BreaksMetric","engine::DeltaOp","interval::Interval","breaks::BreaksInfo","rope::LinesMetric","engine::FullPriority","spans::SpansInfo","delta::DeltaElement","multiset::CountMatcher","tree::NodeVal","rope::RopeInfo","engine::Error"]},"spans::SpansInfo":{"T":["breaks::BreaksInfo","tree::NodeBody","rope::LinesMetric","spans::SpansInfo","spans::Span","multiset::CountMatcher","rope::RopeInfo","interval::Interval","diff::DiffBuilder","spans::SpansLeaf","multiset::ZipSegment","breaks::BreaksLeaf","rope::BaseMetric","tree::NodeVal","engine::Error","engine::FullPriority","tree::Node","engine::DeltaOp","breaks::BreaksBaseMetric","engine::RevId","breaks::BreaksMetric","delta::Delta","delta::DeltaElement","delta::InsertDelta","find::CaseMatching","diff::DiffOp","rope::Utf16CodeUnitsMetric","multiset::Segment","engine::Contents","multiset::Subset","std::clone::impls::<impl std::clone::Clone for &mut T>"]},"spans::SpansLeaf":{"T":["spans::Span","rope::BaseMetric","engine::FullPriority","diff::DiffBuilder","breaks::BreaksBaseMetric","std::clone::impls::<impl std::clone::Clone for &mut T>","std::clone::impls::<impl std::clone::Clone for *const T>","multiset::Segment","tree::NodeVal","breaks::BreaksInfo","rope::RopeInfo","spans::SpansLeaf","engine::DeltaOp","rope::LinesMetric","multiset::Subset","tree::Node","rope::Utf16CodeUnitsMetric","breaks::BreaksMetric","engine::Contents","delta::InsertDelta","multiset::CountMatcher","find::CaseMatching","tree::NodeBody","engine::RevId","interval::Interval","delta::DeltaElement","engine::Error","spans::SpansInfo","diff::DiffOp","delta::Delta","breaks::BreaksLeaf","multiset::ZipSegment"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::next_inside_leaf":{"M":["rope::LinesMetric","breaks::BreaksBaseMetric","rope::BaseMetric","rope::Utf16CodeUnitsMetric","breaks::BreaksMetric"],"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
+p0.next_inside_leaf();
+tree::Cursor::<'a, N>::next_inside_leaf(p0);
+crate::tree::Cursor::<'a, N>::next_inside_leaf(p0);
+<tree::Cursor<'a, N>>::next_inside_leaf(p0);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::next_leaf
'a
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::next_leaf":{"N":["std::marker::Sized","tree::NodeInfo"]},"tree::Node":{"N":["tree::DefaultMetric","std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["spans::SpansLeaf","find::CaseMatching","engine::FullPriority","spans::SpansInfo","engine::Contents","breaks::BreaksInfo","interval::Interval","rope::BaseMetric","tree::NodeVal","std::clone::impls::<impl std::clone::Clone for *mut T>","tree::Node","spans::Span","multiset::ZipSegment","engine::RevId","breaks::BreaksBaseMetric","multiset::CountMatcher","delta::Delta","tree::NodeBody","multiset::Segment","engine::Error","diff::DiffBuilder","rope::LinesMetric","multiset::Subset","engine::DeltaOp","delta::InsertDelta","rope::Utf16CodeUnitsMetric","breaks::BreaksLeaf","rope::RopeInfo","delta::DeltaElement","breaks::BreaksMetric","diff::DiffOp"]},"spans::SpansInfo":{"T":["spans::Span","engine::Contents","spans::SpansLeaf","multiset::Subset","breaks::BreaksBaseMetric","rope::LinesMetric","spans::SpansInfo","rope::RopeInfo","engine::RevId","interval::Interval","breaks::BreaksLeaf","breaks::BreaksInfo","diff::DiffBuilder","rope::BaseMetric","engine::FullPriority","delta::Delta","std::clone::impls::<impl std::clone::Clone for &T>","rope::Utf16CodeUnitsMetric","engine::DeltaOp","delta::DeltaElement","find::CaseMatching","tree::Node","tree::NodeVal","multiset::CountMatcher","engine::Error","multiset::Segment","tree::NodeBody","diff::DiffOp","breaks::BreaksMetric","delta::InsertDelta","multiset::ZipSegment"]},"spans::SpansLeaf":{"T":["diff::DiffBuilder","spans::Span","spans::SpansLeaf","engine::DeltaOp","find::CaseMatching","breaks::BreaksBaseMetric","rope::LinesMetric","delta::InsertDelta","multiset::Segment","diff::DiffOp","breaks::BreaksLeaf","rope::Utf16CodeUnitsMetric","engine::FullPriority","multiset::Subset","engine::Contents","delta::Delta","std::clone::impls::<impl std::clone::Clone for *const T>","delta::DeltaElement","breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for &T>","multiset::ZipSegment","multiset::CountMatcher","rope::RopeInfo","engine::RevId","tree::Node","spans::SpansInfo","rope::BaseMetric","tree::NodeVal","interval::Interval","tree::NodeBody","breaks::BreaksInfo","engine::Error"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::next_leaf":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
+p0.next_leaf();
+tree::Cursor::<'a, N>::next_leaf(p0);
+crate::tree::Cursor::<'a, N>::next_leaf(p0);
+<tree::Cursor<'a, N>>::next_leaf(p0);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::prev_leaf
'a
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::prev_leaf":{"N":["std::marker::Sized","tree::NodeInfo"]},"tree::Node":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"spans::Span":{"T":["multiset::Subset","rope::LinesMetric","rope::RopeInfo","spans::SpansLeaf","diff::DiffBuilder","std::clone::impls::<impl std::clone::Clone for *mut T>","delta::DeltaElement","breaks::BreaksLeaf","delta::Delta","engine::Contents","engine::Error","breaks::BreaksMetric","interval::Interval","tree::Node","breaks::BreaksBaseMetric","delta::InsertDelta","multiset::Segment","spans::Span","tree::NodeVal","engine::RevId","multiset::ZipSegment","tree::NodeBody","spans::SpansInfo","diff::DiffOp","std::clone::impls::<impl std::clone::Clone for &T>","engine::FullPriority","rope::BaseMetric","engine::DeltaOp","rope::Utf16CodeUnitsMetric","breaks::BreaksInfo","find::CaseMatching","multiset::CountMatcher"]},"spans::SpansInfo":{"T":["find::CaseMatching","rope::RopeInfo","rope::BaseMetric","engine::DeltaOp","breaks::BreaksBaseMetric","tree::NodeVal","engine::RevId","tree::Node","spans::SpansInfo","delta::InsertDelta","multiset::ZipSegment","spans::Span","breaks::BreaksInfo","diff::DiffBuilder","delta::DeltaElement","engine::Error","multiset::CountMatcher","tree::NodeBody","rope::Utf16CodeUnitsMetric","interval::Interval","multiset::Subset","engine::Contents","delta::Delta","engine::FullPriority","rope::LinesMetric","spans::SpansLeaf","std::clone::impls::<impl std::clone::Clone for *mut T>","diff::DiffOp","multiset::Segment","breaks::BreaksMetric","breaks::BreaksLeaf"]},"spans::SpansLeaf":{"T":["rope::BaseMetric","engine::FullPriority","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for &T>","tree::NodeVal","breaks::BreaksInfo","multiset::Segment","rope::RopeInfo","breaks::BreaksMetric","breaks::BreaksLeaf","delta::Delta","rope::Utf16CodeUnitsMetric","tree::Node","std::clone::impls::<impl std::clone::Clone for &mut T>","multiset::Subset","engine::Contents","engine::Error","multiset::CountMatcher","spans::SpansInfo","multiset::ZipSegment","spans::Span","engine::DeltaOp","delta::DeltaElement","diff::DiffOp","interval::Interval","diff::DiffBuilder","find::CaseMatching","delta::InsertDelta","spans::SpansLeaf","engine::RevId","tree::NodeBody","breaks::BreaksBaseMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::prev_leaf":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
+p0.prev_leaf();
+tree::Cursor::<'a, N>::prev_leaf(p0);
+crate::tree::Cursor::<'a, N>::prev_leaf(p0);
+<tree::Cursor<'a, N>>::prev_leaf(p0);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::descend
'a
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::descend":{"N":["std::marker::Sized","tree::NodeInfo"]},"tree::Node":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo","tree::DefaultMetric"]},"tree::NodeBody":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"spans::Span":{"T":["multiset::ZipSegment","interval::Interval","multiset::Subset","tree::NodeBody","diff::DiffOp","rope::LinesMetric","delta::DeltaElement","spans::SpansLeaf","breaks::BreaksBaseMetric","engine::Error","tree::NodeVal","rope::Utf16CodeUnitsMetric","rope::RopeInfo","multiset::CountMatcher","diff::DiffBuilder","spans::Span","breaks::BreaksMetric","multiset::Segment","delta::Delta","engine::RevId","find::CaseMatching","engine::FullPriority","breaks::BreaksInfo","std::clone::impls::<impl std::clone::Clone for *const T>","spans::SpansInfo","delta::InsertDelta","engine::Contents","tree::Node","breaks::BreaksLeaf","engine::DeltaOp","rope::BaseMetric"]},"spans::SpansInfo":{"T":["engine::RevId","delta::DeltaElement","rope::Utf16CodeUnitsMetric","breaks::BreaksInfo","breaks::BreaksLeaf","engine::FullPriority","tree::NodeVal","multiset::Segment","tree::NodeBody","spans::SpansLeaf","rope::LinesMetric","std::clone::impls::<impl std::clone::Clone for *const T>","breaks::BreaksMetric","delta::InsertDelta","breaks::BreaksBaseMetric","find::CaseMatching","multiset::CountMatcher","diff::DiffOp","multiset::ZipSegment","spans::Span","delta::Delta","rope::BaseMetric","rope::RopeInfo","diff::DiffBuilder","multiset::Subset","spans::SpansInfo","tree::Node","engine::DeltaOp","interval::Interval","engine::Contents","engine::Error"]},"spans::SpansLeaf":{"T":["delta::InsertDelta","tree::NodeVal","multiset::Segment","breaks::BreaksMetric","spans::SpansInfo","diff::DiffBuilder","rope::LinesMetric","delta::Delta","engine::FullPriority","breaks::BreaksInfo","delta::DeltaElement","multiset::ZipSegment","find::CaseMatching","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for &T>","multiset::CountMatcher","tree::Node","rope::Utf16CodeUnitsMetric","rope::BaseMetric","engine::RevId","breaks::BreaksBaseMetric","interval::Interval","breaks::BreaksLeaf","engine::Error","tree::NodeBody","std::clone::impls::<impl std::clone::Clone for *const T>","diff::DiffOp","rope::RopeInfo","multiset::Subset","spans::Span","engine::Contents","spans::SpansLeaf"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::descend":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::Node":{"N":["rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
+p0.descend();
+tree::Cursor::<'a, N>::descend(p0);
+crate::tree::Cursor::<'a, N>::descend(p0);
+<tree::Cursor<'a, N>>::descend(p0);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::measure_leaf
'a
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::measure_leaf":{"M":["std::marker::Sized","tree::Metric"],"N":["std::marker::Sized","tree::NodeInfo"]},"tree::Node":{"N":["std::marker::Sized","tree::NodeInfo","tree::DefaultMetric","std::clone::Clone"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"spans::Span":{"T":["rope::LinesMetric","breaks::BreaksInfo","engine::Error","engine::FullPriority","breaks::BreaksBaseMetric","engine::RevId","delta::DeltaElement","tree::Node","spans::Span","multiset::Subset","delta::Delta","std::clone::impls::<impl std::clone::Clone for &T>","interval::Interval","rope::RopeInfo","delta::InsertDelta","spans::SpansLeaf","engine::Contents","tree::NodeVal","rope::BaseMetric","multiset::ZipSegment","diff::DiffOp","breaks::BreaksLeaf","breaks::BreaksMetric","std::clone::impls::<impl std::clone::Clone for *const T>","find::CaseMatching","spans::SpansInfo","multiset::CountMatcher","engine::DeltaOp","tree::NodeBody","diff::DiffBuilder","multiset::Segment","rope::Utf16CodeUnitsMetric"]},"spans::SpansInfo":{"T":["interval::Interval","engine::RevId","find::CaseMatching","engine::DeltaOp","breaks::BreaksBaseMetric","spans::SpansLeaf","rope::BaseMetric","diff::DiffOp","delta::DeltaElement","diff::DiffBuilder","rope::Utf16CodeUnitsMetric","spans::Span","delta::InsertDelta","breaks::BreaksLeaf","multiset::Subset","delta::Delta","rope::LinesMetric","spans::SpansInfo","breaks::BreaksMetric","tree::Node","std::clone::impls::<impl std::clone::Clone for &mut T>","breaks::BreaksInfo","multiset::Segment","engine::Error","tree::NodeVal","multiset::ZipSegment","rope::RopeInfo","tree::NodeBody","engine::FullPriority","multiset::CountMatcher","engine::Contents"]},"spans::SpansLeaf":{"T":["delta::DeltaElement","engine::RevId","engine::DeltaOp","delta::Delta","delta::InsertDelta","engine::FullPriority","rope::LinesMetric","tree::NodeBody","tree::Node","engine::Contents","spans::SpansInfo","breaks::BreaksBaseMetric","tree::NodeVal","spans::Span","std::clone::impls::<impl std::clone::Clone for &T>","multiset::ZipSegment","multiset::Subset","engine::Error","spans::SpansLeaf","breaks::BreaksMetric","find::CaseMatching","breaks::BreaksInfo","diff::DiffBuilder","multiset::CountMatcher","breaks::BreaksLeaf","interval::Interval","rope::Utf16CodeUnitsMetric","rope::RopeInfo","diff::DiffOp","multiset::Segment","rope::BaseMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::measure_leaf":{"M":["rope::BaseMetric","rope::LinesMetric","breaks::BreaksMetric","breaks::BreaksBaseMetric","rope::Utf16CodeUnitsMetric"],"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
let mut p1 = 0usize; // None+usize
+p0.measure_leaf(p1);
+tree::Cursor::<'a, N>::measure_leaf(p0, p1);
+crate::tree::Cursor::<'a, N>::measure_leaf(p0, p1);
+<tree::Cursor<'a, N>>::measure_leaf(p0, p1);
-----------------
rope/src/tree.rs tree::Cursor::<'a, N>::descend_metric
'a
deps:{"delta::Delta":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::marker::Sized","std::clone::Clone"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::descend_metric":{"M":["tree::Metric","std::marker::Sized"],"N":["std::marker::Sized","tree::NodeInfo"]},"tree::Node":{"N":["std::marker::Sized","tree::DefaultMetric","std::clone::Clone","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["rope::Utf16CodeUnitsMetric","rope::BaseMetric","multiset::Subset","breaks::BreaksMetric","breaks::BreaksInfo","multiset::Segment","diff::DiffBuilder","rope::LinesMetric","delta::DeltaElement","breaks::BreaksLeaf","diff::DiffOp","spans::SpansLeaf","std::clone::impls::<impl std::clone::Clone for *mut T>","spans::SpansInfo","find::CaseMatching","multiset::CountMatcher","interval::Interval","delta::InsertDelta","std::clone::impls::<impl std::clone::Clone for *const T>","engine::DeltaOp","engine::Contents","tree::NodeBody","rope::RopeInfo","multiset::ZipSegment","breaks::BreaksBaseMetric","engine::FullPriority","spans::Span","tree::Node","engine::Error","tree::NodeVal","delta::Delta","engine::RevId"]},"spans::SpansInfo":{"T":["rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for &T>","engine::DeltaOp","diff::DiffBuilder","breaks::BreaksMetric","delta::InsertDelta","rope::LinesMetric","tree::NodeBody","delta::Delta","rope::RopeInfo","find::CaseMatching","rope::Utf16CodeUnitsMetric","tree::Node","spans::SpansLeaf","breaks::BreaksInfo","multiset::CountMatcher","engine::FullPriority","spans::Span","engine::Contents","engine::Error","breaks::BreaksBaseMetric","spans::SpansInfo","breaks::BreaksLeaf","multiset::Segment","engine::RevId","tree::NodeVal","multiset::ZipSegment","diff::DiffOp","interval::Interval","multiset::Subset","delta::DeltaElement"]},"spans::SpansLeaf":{"T":["multiset::Subset","delta::DeltaElement","engine::RevId","find::CaseMatching","engine::FullPriority","diff::DiffBuilder","rope::BaseMetric","std::clone::impls::<impl std::clone::Clone for *mut T>","spans::SpansInfo","tree::Node","multiset::CountMatcher","diff::DiffOp","breaks::BreaksMetric","delta::InsertDelta","tree::NodeVal","delta::Delta","rope::RopeInfo","engine::Contents","rope::LinesMetric","breaks::BreaksLeaf","tree::NodeBody","engine::DeltaOp","std::clone::impls::<impl std::clone::Clone for &T>","breaks::BreaksInfo","spans::Span","multiset::Segment","multiset::ZipSegment","rope::Utf16CodeUnitsMetric","engine::Error","spans::SpansLeaf","interval::Interval","breaks::BreaksBaseMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Cursor::<'a, N>::descend_metric":{"M":["breaks::BreaksMetric","rope::LinesMetric","breaks::BreaksBaseMetric","rope::BaseMetric","rope::Utf16CodeUnitsMetric"],"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::Cursor<'a, N>
let mut p1 = 0usize; // None+usize
+p0.descend_metric(p1);
+tree::Cursor::<'a, N>::descend_metric(p0, p1);
+crate::tree::Cursor::<'a, N>::descend_metric(p0, p1);
+<tree::Cursor<'a, N>>::descend_metric(p0, p1);
-----------------
rope/src/tree.rs <tree::CursorIter<'c, 'a, N, M> as std::iter::Iterator>::next
'c,'a
deps:{"<tree::CursorIter<'c, 'a, N, M> as std::iter::Iterator>::next":{"M":["tree::Metric","std::marker::Sized"],"N":["tree::NodeInfo","std::marker::Sized"]},"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized"]},"delta::InsertDelta":{"N":["std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::clone::Clone","std::marker::Sized"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["tree::DefaultMetric","std::clone::Clone","std::marker::Sized","tree::NodeInfo"]},"tree::NodeBody":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"tree::NodeVal":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]}}
candidates:{"<tree::CursorIter<'c, 'a, N, M> as std::iter::Iterator>::next":{"M":["breaks::BreaksBaseMetric","rope::LinesMetric","rope::Utf16CodeUnitsMetric","rope::BaseMetric","breaks::BreaksMetric"],"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"delta::Delta":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]},"delta::InsertDelta":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"spans::Span":{"T":["delta::Delta","rope::Utf16CodeUnitsMetric","rope::RopeInfo","engine::Error","tree::NodeVal","multiset::CountMatcher","multiset::Segment","diff::DiffOp","engine::FullPriority","breaks::BreaksBaseMetric","multiset::Subset","delta::InsertDelta","delta::DeltaElement","interval::Interval","engine::RevId","std::clone::impls::<impl std::clone::Clone for &T>","engine::Contents","spans::SpansInfo","breaks::BreaksMetric","tree::NodeBody","spans::SpansLeaf","breaks::BreaksInfo","diff::DiffBuilder","rope::BaseMetric","tree::Node","engine::DeltaOp","spans::Span","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for *const T>","find::CaseMatching","rope::LinesMetric","breaks::BreaksLeaf"]},"spans::SpansInfo":{"T":["diff::DiffBuilder","multiset::Segment","rope::LinesMetric","delta::DeltaElement","multiset::Subset","rope::BaseMetric","diff::DiffOp","engine::DeltaOp","interval::Interval","find::CaseMatching","breaks::BreaksBaseMetric","multiset::ZipSegment","rope::Utf16CodeUnitsMetric","rope::RopeInfo","engine::Contents","std::clone::impls::<impl std::clone::Clone for *mut T>","multiset::CountMatcher","tree::Node","spans::Span","tree::NodeBody","breaks::BreaksLeaf","breaks::BreaksInfo","engine::Error","engine::RevId","delta::InsertDelta","spans::SpansInfo","breaks::BreaksMetric","engine::FullPriority","spans::SpansLeaf","delta::Delta","tree::NodeVal"]},"spans::SpansLeaf":{"T":["find::CaseMatching","diff::DiffOp","delta::Delta","multiset::ZipSegment","spans::Span","delta::InsertDelta","engine::RevId","engine::Error","diff::DiffBuilder","spans::SpansLeaf","tree::Node","breaks::BreaksMetric","engine::Contents","rope::RopeInfo","tree::NodeVal","rope::LinesMetric","engine::FullPriority","rope::Utf16CodeUnitsMetric","tree::NodeBody","engine::DeltaOp","multiset::CountMatcher","breaks::BreaksLeaf","multiset::Segment","interval::Interval","rope::BaseMetric","breaks::BreaksInfo","multiset::Subset","breaks::BreaksBaseMetric","spans::SpansInfo","delta::DeltaElement","std::clone::impls::<impl std::clone::Clone for *const T>"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["rope::RopeInfo","breaks::BreaksInfo","spans::SpansInfo"]},"tree::NodeVal":{"N":["breaks::BreaksInfo","rope::RopeInfo","spans::SpansInfo"]}}
let mut p0 = &mut  MaybeUninit::uninit().assume_init(); // tree::CursorIter<'c, 'a, N, M>
+p0.next();
+<tree::CursorIter<'c, 'a, N, M> as std::iter::Iterator>::next(p0);
+crate::<tree::CursorIter<'c, 'a, N, M> as std::iter::Iterator>::next(p0);
+<tree::CursorIter<'c, 'a, N, M>>::next(p0);
-----------------
rope/src/tree.rs tree::CursorIter::<'c, 'a, N, M>::pos
'c,'a
deps:{"delta::Delta":{"N":["std::marker::Sized","tree::NodeInfo","std::clone::Clone"]},"delta::DeltaElement":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]},"delta::InsertDelta":{"N":["tree::NodeInfo","std::marker::Sized","std::clone::Clone"]},"spans::Span":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansInfo":{"T":["std::marker::Sized","std::clone::Clone"]},"spans::SpansLeaf":{"T":["std::clone::Clone","std::marker::Sized"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::CursorIter::<'c, 'a, N, M>::pos":{"M":["std::marker::Sized","tree::Metric"],"N":["tree::NodeInfo","std::marker::Sized"]},"tree::Node":{"N":["std::clone::Clone","tree::NodeInfo","std::marker::Sized","tree::DefaultMetric"]},"tree::NodeBody":{"N":["std::marker::Sized","std::clone::Clone","tree::NodeInfo"]},"tree::NodeVal":{"N":["tree::NodeInfo","std::clone::Clone","std::marker::Sized"]}}
candidates:{"delta::Delta":{"N":["rope::RopeInfo","spans::SpansInfo","breaks::BreaksInfo"]},"delta::DeltaElement":{"N":["breaks::BreaksInfo","spans::SpansInfo","rope::RopeInfo"]},"delta::InsertDelta":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"spans::Span":{"T":["tree::NodeVal","multiset::Segment","rope::BaseMetric","tree::Node","multiset::ZipSegment","std::clone::impls::<impl std::clone::Clone for *const T>","engine::Contents","tree::NodeBody","diff::DiffBuilder","spans::SpansInfo","rope::RopeInfo","delta::Delta","std::clone::impls::<impl std::clone::Clone for *mut T>","breaks::BreaksBaseMetric","multiset::Subset","find::CaseMatching","delta::InsertDelta","interval::Interval","engine::DeltaOp","breaks::BreaksMetric","engine::Error","rope::Utf16CodeUnitsMetric","engine::FullPriority","spans::SpansLeaf","breaks::BreaksLeaf","multiset::CountMatcher","breaks::BreaksInfo","diff::DiffOp","spans::Span","delta::DeltaElement","engine::RevId","rope::LinesMetric"]},"spans::SpansInfo":{"T":["engine::RevId","engine::FullPriority","tree::NodeVal","interval::Interval","multiset::ZipSegment","spans::SpansInfo","delta::Delta","spans::SpansLeaf","tree::NodeBody","multiset::CountMatcher","engine::Error","spans::Span","rope::Utf16CodeUnitsMetric","find::CaseMatching","multiset::Subset","delta::InsertDelta","breaks::BreaksLeaf","std::clone::impls::<impl std::clone::Clone for *mut T>","breaks::BreaksBaseMetric","rope::RopeInfo","diff::DiffOp","rope::BaseMetric","engine::Contents","engine::DeltaOp","rope::LinesMetric","diff::DiffBuilder","multiset::Segment","tree::Node","delta::DeltaElement","breaks::BreaksInfo","breaks::BreaksMetric"]},"spans::SpansLeaf":{"T":["engine::RevId","tree::NodeVal","spans::Span","diff::DiffOp","delta::Delta","interval::Interval","breaks::BreaksBaseMetric","breaks::BreaksMetric","tree::Node","spans::SpansInfo","delta::DeltaElement","find::CaseMatching","multiset::Subset","engine::FullPriority","multiset::CountMatcher","rope::LinesMetric","spans::SpansLeaf","tree::NodeBody","rope::RopeInfo","delta::InsertDelta","multiset::ZipSegment","rope::BaseMetric","breaks::BreaksInfo","engine::Error","std::clone::impls::<impl std::clone::Clone for &T>","multiset::Segment","breaks::BreaksLeaf","engine::DeltaOp","diff::DiffBuilder","engine::Contents","rope::Utf16CodeUnitsMetric"]},"std::clone::impls::<impl std::clone::Clone for &T>":{},"std::clone::impls::<impl std::clone::Clone for &mut T>":{},"std::clone::impls::<impl std::clone::Clone for *const T>":{},"std::clone::impls::<impl std::clone::Clone for *mut T>":{},"tree::CursorIter::<'c, 'a, N, M>::pos":{"M":["rope::Utf16CodeUnitsMetric","breaks::BreaksBaseMetric","breaks::BreaksMetric","rope::BaseMetric","rope::LinesMetric"],"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]},"tree::Node":{"N":["breaks::BreaksInfo","rope::RopeInfo"]},"tree::NodeBody":{"N":["spans::SpansInfo","rope::RopeInfo","breaks::BreaksInfo"]},"tree::NodeVal":{"N":["spans::SpansInfo","breaks::BreaksInfo","rope::RopeInfo"]}}
let mut p0 = & MaybeUninit::uninit().assume_init(); // tree::CursorIter<'c, 'a, N, M>
+p0.pos();
+tree::CursorIter::<'c, 'a, N, M>::pos(p0);
+crate::tree::CursorIter::<'c, 'a, N, M>::pos(p0);
+<tree::CursorIter<'c, 'a, N, M>>::pos(p0);