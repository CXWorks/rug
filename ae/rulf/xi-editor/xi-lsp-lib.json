{"dependencies":{"init_logger":["std::marker::Sized","std::result::Result"],"main":[]},"glob_path_import":{},"self_to_fn":{},"single_path_import":{},"srcs":{"init_logger":["fn init_logger() -> Result<(), fern::InitError>{\n    let level_filter = match std::env::var(\"XI_LOG\") {\n        Ok(level) => match level.to_lowercase().as_ref() {\n            \"trace\" => log::LevelFilter::Trace,\n            \"debug\" => log::LevelFilter::Debug,\n            _ => log::LevelFilter::Info,\n        },\n        // Default to info\n        Err(_) => log::LevelFilter::Info,\n    };\n\n    fern::Dispatch::new()\n        .format(|out, message, record| {\n            out.finish(format_args!(\n                \"{}[{}][{}] {}\",\n                chrono::Local::now().format(\"[%Y-%m-%d][%H:%M:%S]\"),\n                record.target(),\n                record.level(),\n                message\n            ))\n        })\n        .level(level_filter)\n        .chain(std::io::stderr())\n        .chain(fern::log_file(\"xi-lsp-plugin.log\")?)\n        .apply()\n        .map_err(|e| e.into())\n}","Real(LocalPath(\"lsp-lib/src/bin/xi-lsp-plugin.rs\"))"],"main":["fn main(){\n    // The specified language server must be in PATH. XCode does not use\n    // the PATH variable of your shell. See the answers below to modify PATH to\n    // have language servers in PATH while running from XCode.\n    // https://stackoverflow.com/a/17394454 and https://stackoverflow.com/a/43043687\n    let config = json!({\n        \"language_config\": {\n            // Install instructions here: https://github.com/rust-lang-nursery/rls\n            \"rust\" : {\n                \"language_name\": \"Rust\",\n                \"start_command\": \"rls\",\n                \"start_arguments\": [],\n                \"extensions\": [\"rs\"],\n                \"supports_single_file\": false,\n                \"workspace_identifier\": \"Cargo.toml\"\n            },\n            // Install with: npm install -g vscode-json-languageserver\n            \"json\": {\n                \"language_name\": \"Json\",\n                \"start_command\": \"vscode-json-languageserver\",\n                \"start_arguments\": [\"--stdio\"],\n                \"extensions\": [\"json\", \"jsonc\"],\n                \"supports_single_file\": true,\n            },\n            // Install with: npm install -g javascript-typescript-langserver\n            \"typescript\": {\n                \"language_name\": \"Typescript\",\n                \"start_command\": \"javascript-typescript-stdio\",\n                \"start_arguments\": [],\n                \"extensions\": [\"ts\", \"js\", \"jsx\", \"tsx\"],\n                \"supports_single_file\": true,\n                \"workspace_identifier\": \"package.json\"\n            }\n        }\n    });\n\n    init_logger().expect(\"Failed to start logger for LSP Plugin\");\n    let config: Config = serde_json::from_value(config).unwrap();\n    let mut plugin = LspPlugin::new(config);\n\n    start_mainloop(&mut plugin);\n}","Real(LocalPath(\"lsp-lib/src/bin/xi-lsp-plugin.rs\"))"]},"struct_constructor":{},"struct_to_trait":{},"targets":{"init_logger":["init_logger","Real(LocalPath(\"lsp-lib/src/bin/xi-lsp-plugin.rs\"))",""],"main":["main","Real(LocalPath(\"lsp-lib/src/bin/xi-lsp-plugin.rs\"))",""]},"trait_to_struct":{},"type_to_def_path":{}}