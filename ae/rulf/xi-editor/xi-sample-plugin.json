{"dependencies":{"<SamplePlugin as xi_plugin_lib::Plugin>::config_changed":["SamplePlugin","serde_json::map::Map","std::marker::Sized","xi_plugin_lib::View"],"<SamplePlugin as xi_plugin_lib::Plugin>::did_close":["SamplePlugin","std::marker::Sized","xi_plugin_lib::View"],"<SamplePlugin as xi_plugin_lib::Plugin>::did_save":["SamplePlugin","std::marker::Sized","std::option::Option","xi_plugin_lib::View"],"<SamplePlugin as xi_plugin_lib::Plugin>::new_view":["SamplePlugin","std::marker::Sized","xi_plugin_lib::View"],"<SamplePlugin as xi_plugin_lib::Plugin>::update":["SamplePlugin","std::marker::Sized","std::option::Option","std::string::String","xi_plugin_lib::View"],"SamplePlugin":["SamplePlugin"],"SamplePlugin::capitalize_word":["SamplePlugin","std::marker::Sized","std::result::Result","xi_plugin_lib::View"],"main":[]},"glob_path_import":{},"self_to_fn":{"SamplePlugin":["impl Plugin for SamplePlugin {\n    type Cache = ChunkCache;\n\n    fn new_view(&mut self, view: &mut View<Self::Cache>) {\n        eprintln!(\"new view {}\", view.get_id());\n    }\n\n    fn did_close(&mut self, view: &View<Self::Cache>) {\n        eprintln!(\"close view {}\", view.get_id());\n    }\n\n    fn did_save(&mut self, view: &mut View<Self::Cache>, _old: Option<&Path>) {\n        eprintln!(\"saved view {}\", view.get_id());\n    }\n\n    fn config_changed(&mut self, _view: &mut View<Self::Cache>, _changes: &ConfigTable) {}\n\n    fn update(\n        &mut self,\n        view: &mut View<Self::Cache>,\n        delta: Option<&RopeDelta>,\n        _edit_type: String,\n        _author: String,\n    ) {\n        //NOTE: example simple conditional edit. If this delta is\n        //an insert of a single '!', we capitalize the preceding word.\n        if let Some(delta) = delta {\n            let (iv, _) = delta.summary();\n            let text: String = delta.as_simple_insert().map(String::from).unwrap_or_default();\n            if text == \"!\" {\n                let _ = self.capitalize_word(view, iv.end());\n            }\n        }\n    }\n}","impl SamplePlugin {\n    /// Uppercases the word preceding `end_offset`.\n    fn capitalize_word(&self, view: &mut View<ChunkCache>, end_offset: usize) -> Result<(), Error> {\n        //NOTE: this makes it clear to me that we need a better API for edits\n        let line_nb = view.line_of_offset(end_offset)?;\n        let line_start = view.offset_of_line(line_nb)?;\n\n        let mut cur_utf8_ix = 0;\n        let mut word_start = 0;\n        for c in view.get_line(line_nb)?.chars() {\n            if c.is_whitespace() {\n                word_start = cur_utf8_ix;\n            }\n\n            cur_utf8_ix += c.len_utf8();\n\n            if line_start + cur_utf8_ix == end_offset {\n                break;\n            }\n        }\n\n        let new_text = view.get_line(line_nb)?[word_start..end_offset - line_start].to_uppercase();\n        let buf_size = view.get_buf_size();\n        let mut builder = EditBuilder::new(buf_size);\n        let iv = Interval::new(line_start + word_start, end_offset);\n        builder.replace(iv, new_text.into());\n        view.edit(builder.build(), 0, false, true, \"sample\".into());\n        Ok(())\n    }\n}"]},"single_path_import":{},"srcs":{"<SamplePlugin as xi_plugin_lib::Plugin>::config_changed":["fn config_changed(&mut self, _view: &mut View<Self::Cache>, _changes: &ConfigTable){}","Real(LocalPath(\"sample-plugin/src/main.rs\"))"],"<SamplePlugin as xi_plugin_lib::Plugin>::did_close":["fn did_close(&mut self, view: &View<Self::Cache>){\n        eprintln!(\"close view {}\", view.get_id());\n    }","Real(LocalPath(\"sample-plugin/src/main.rs\"))"],"<SamplePlugin as xi_plugin_lib::Plugin>::did_save":["fn did_save(&mut self, view: &mut View<Self::Cache>, _old: Option<&Path>){\n        eprintln!(\"saved view {}\", view.get_id());\n    }","Real(LocalPath(\"sample-plugin/src/main.rs\"))"],"<SamplePlugin as xi_plugin_lib::Plugin>::new_view":["fn new_view(&mut self, view: &mut View<Self::Cache>){\n        eprintln!(\"new view {}\", view.get_id());\n    }","Real(LocalPath(\"sample-plugin/src/main.rs\"))"],"<SamplePlugin as xi_plugin_lib::Plugin>::update":["fn update(\n        &mut self,\n        view: &mut View<Self::Cache>,\n        delta: Option<&RopeDelta>,\n        _edit_type: String,\n        _author: String,\n    ){\n        //NOTE: example simple conditional edit. If this delta is\n        //an insert of a single '!', we capitalize the preceding word.\n        if let Some(delta) = delta {\n            let (iv, _) = delta.summary();\n            let text: String = delta.as_simple_insert().map(String::from).unwrap_or_default();\n            if text == \"!\" {\n                let _ = self.capitalize_word(view, iv.end());\n            }\n        }\n    }","Real(LocalPath(\"sample-plugin/src/main.rs\"))"],"SamplePlugin":["/// A type that implements the `Plugin` trait, and interacts with xi-core.\n///\n/// Currently, this plugin has a single noteworthy behaviour,\n/// intended to demonstrate how to edit a document; when the plugin is active,\n/// and the user inserts an exclamation mark, the plugin will capitalize the\n/// preceding word.\nstruct SamplePlugin;","Real(LocalPath(\"sample-plugin/src/main.rs\"))"],"SamplePlugin::capitalize_word":["/// Uppercases the word preceding `end_offset`.\nfn capitalize_word(&self, view: &mut View<ChunkCache>, end_offset: usize) -> Result<(), Error>{\n        //NOTE: this makes it clear to me that we need a better API for edits\n        let line_nb = view.line_of_offset(end_offset)?;\n        let line_start = view.offset_of_line(line_nb)?;\n\n        let mut cur_utf8_ix = 0;\n        let mut word_start = 0;\n        for c in view.get_line(line_nb)?.chars() {\n            if c.is_whitespace() {\n                word_start = cur_utf8_ix;\n            }\n\n            cur_utf8_ix += c.len_utf8();\n\n            if line_start + cur_utf8_ix == end_offset {\n                break;\n            }\n        }\n\n        let new_text = view.get_line(line_nb)?[word_start..end_offset - line_start].to_uppercase();\n        let buf_size = view.get_buf_size();\n        let mut builder = EditBuilder::new(buf_size);\n        let iv = Interval::new(line_start + word_start, end_offset);\n        builder.replace(iv, new_text.into());\n        view.edit(builder.build(), 0, false, true, \"sample\".into());\n        Ok(())\n    }","Real(LocalPath(\"sample-plugin/src/main.rs\"))"],"main":["fn main(){\n    let mut plugin = SamplePlugin;\n    mainloop(&mut plugin).unwrap();\n}","Real(LocalPath(\"sample-plugin/src/main.rs\"))"]},"struct_constructor":{},"struct_to_trait":{"SamplePlugin":["xi_plugin_lib::Plugin"]},"targets":{"<SamplePlugin as xi_plugin_lib::Plugin>::config_changed":["config_changed","Real(LocalPath(\"sample-plugin/src/main.rs\"))","xi_plugin_lib::Plugin"],"<SamplePlugin as xi_plugin_lib::Plugin>::did_close":["did_close","Real(LocalPath(\"sample-plugin/src/main.rs\"))","xi_plugin_lib::Plugin"],"<SamplePlugin as xi_plugin_lib::Plugin>::did_save":["did_save","Real(LocalPath(\"sample-plugin/src/main.rs\"))","xi_plugin_lib::Plugin"],"<SamplePlugin as xi_plugin_lib::Plugin>::new_view":["new_view","Real(LocalPath(\"sample-plugin/src/main.rs\"))","xi_plugin_lib::Plugin"],"<SamplePlugin as xi_plugin_lib::Plugin>::update":["update","Real(LocalPath(\"sample-plugin/src/main.rs\"))","xi_plugin_lib::Plugin"],"SamplePlugin::capitalize_word":["capitalize_word","Real(LocalPath(\"sample-plugin/src/main.rs\"))",""],"main":["main","Real(LocalPath(\"sample-plugin/src/main.rs\"))",""]},"trait_to_struct":{"xi_plugin_lib::Plugin":["SamplePlugin"]},"type_to_def_path":{"SamplePlugin":"SamplePlugin"}}