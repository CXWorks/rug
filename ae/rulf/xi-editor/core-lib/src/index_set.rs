//! A data structure for manipulating sets of indices (typically used for
//! representing valid lines).
use std::cmp::{max, min, Ordering};
use xi_rope::{RopeDelta, Transformer};
pub struct IndexSet {
    ranges: Vec<(usize, usize)>,
}
pub fn remove_n_at<T: Clone>(v: &mut Vec<T>, index: usize, n: usize) {
    match n.cmp(&1) {
        Ordering::Equal => {
            v.remove(index);
        }
        Ordering::Greater => {
            let new_len = v.len() - n;
            for i in index..new_len {
                v[i] = v[i + n].clone();
            }
            v.truncate(new_len);
        }
        Ordering::Less => {}
    }
}
impl IndexSet {
    /// Create a new, empty set.
    pub fn new() -> IndexSet {
        IndexSet { ranges: Vec::new() }
    }
    /// Clear the set.
    pub fn clear(&mut self) {
        self.ranges.clear();
    }
    /// Add the range start..end to the set.
    pub fn union_one_range(&mut self, start: usize, end: usize) {
        for i in 0..self.ranges.len() {
            let (istart, iend) = self.ranges[i];
            if start > iend {
                continue;
            } else if end < istart {
                self.ranges.insert(i, (start, end));
                return;
            } else {
                self.ranges[i].0 = min(start, istart);
                let mut j = i;
                while j + 1 < self.ranges.len() && end >= self.ranges[j + 1].0 {
                    j += 1;
                }
                self.ranges[i].1 = max(end, self.ranges[j].1);
                remove_n_at(&mut self.ranges, i + 1, j - i);
                return;
            }
        }
        self.ranges.push((start, end));
    }
    /// Deletes the given range from the set.
    pub fn delete_range(&mut self, start: usize, end: usize) {
        let mut ix = match self.ranges.binary_search_by(|r| r.1.cmp(&start)) {
            Ok(ix) => ix,
            Err(ix) => ix,
        };
        let mut del_from = None;
        let mut del_len = 0;
        while ix < self.ranges.len() {
            if self.ranges[ix].0 >= end {
                break;
            }
            if self.ranges[ix].0 < start {
                if self.ranges[ix].1 > end {
                    let range = (end, self.ranges[ix].1);
                    self.ranges.insert(ix + 1, range);
                }
                self.ranges[ix].1 = start;
            } else if self.ranges[ix].1 > end {
                self.ranges[ix].0 = end;
            } else {
                if del_from.is_none() {
                    del_from = Some(ix);
                }
                del_len += 1;
            }
            ix += 1;
        }
        if let Some(del_from) = del_from {
            remove_n_at(&mut self.ranges, del_from, del_len);
        }
    }
    /// Return an iterator that yields start..end minus the coverage in this set.
    pub fn minus_one_range(&self, start: usize, end: usize) -> MinusIter {
        let mut ranges = &self.ranges[..];
        while !ranges.is_empty() && start >= ranges[0].1 {
            ranges = &ranges[1..];
        }
        MinusIter { ranges, start, end }
    }
    /// Computes a new set based on applying a delta to the old set. Collapsed regions are removed
    /// and contiguous regions are combined.
    pub fn apply_delta(&self, delta: &RopeDelta) -> IndexSet {
        let mut ranges: Vec<(usize, usize)> = Vec::new();
        let mut transformer = Transformer::new(delta);
        for &(start, end) in &self.ranges {
            let new_range = (
                transformer.transform(start, false),
                transformer.transform(end, false),
            );
            if new_range.0 == new_range.1 {
                continue;
            }
            if !ranges.is_empty() {
                let ix = ranges.len() - 1;
                if ranges[ix].1 == new_range.0 {
                    ranges[ix] = (ranges[ix].0, new_range.1);
                    continue;
                }
            }
            ranges.push(new_range);
        }
        IndexSet { ranges }
    }
    #[cfg(test)]
    fn get_ranges(&self) -> &[(usize, usize)] {
        &self.ranges
    }
}
/// The iterator generated by `minus_one_range`.
pub struct MinusIter<'a> {
    ranges: &'a [(usize, usize)],
    start: usize,
    end: usize,
}
impl<'a> Iterator for MinusIter<'a> {
    type Item = (usize, usize);
    fn next(&mut self) -> Option<(usize, usize)> {
        while self.start < self.end {
            if self.ranges.is_empty() || self.end <= self.ranges[0].0 {
                let result = (self.start, self.end);
                self.start = self.end;
                return Some(result);
            }
            let result = (self.start, self.ranges[0].0);
            self.start = self.ranges[0].1;
            self.ranges = &self.ranges[1..];
            if result.1 > result.0 {
                return Some(result);
            }
        }
        None
    }
}
impl<'a> DoubleEndedIterator for MinusIter<'a> {
    fn next_back(&mut self) -> Option<Self::Item> {
        while self.start < self.end {
            if self.ranges.is_empty()
                || self.ranges[self.ranges.len() - 1].1 <= self.start
            {
                let result = (self.start, self.end);
                self.start = self.end;
                return Some(result);
            }
            let last_ix = self.ranges.len() - 1;
            let result = (self.ranges[last_ix].1, self.end);
            self.end = self.ranges[last_ix].0;
            self.ranges = &self.ranges[..last_ix];
            if result.1 > result.0 {
                return Some(result);
            }
        }
        None
    }
}
#[cfg(test)]
mod tests {
    use super::IndexSet;
    #[test]
    fn empty_behavior() {
        let e = IndexSet::new();
        assert_eq!(e.minus_one_range(0, 0).collect::< Vec < _ >> (), vec![]);
        assert_eq!(e.minus_one_range(3, 5).collect::< Vec < _ >> (), vec![(3, 5)]);
    }
    #[test]
    fn single_range_behavior() {
        let mut e = IndexSet::new();
        e.union_one_range(3, 5);
        assert_eq!(e.minus_one_range(0, 0).collect::< Vec < _ >> (), vec![]);
        assert_eq!(e.minus_one_range(3, 5).collect::< Vec < _ >> (), vec![]);
        assert_eq!(e.minus_one_range(0, 3).collect::< Vec < _ >> (), vec![(0, 3)]);
        assert_eq!(e.minus_one_range(0, 4).collect::< Vec < _ >> (), vec![(0, 3)]);
        assert_eq!(e.minus_one_range(4, 10).collect::< Vec < _ >> (), vec![(5, 10)]);
        assert_eq!(e.minus_one_range(5, 10).collect::< Vec < _ >> (), vec![(5, 10)]);
        assert_eq!(
            e.minus_one_range(0, 10).collect::< Vec < _ >> (), vec![(0, 3), (5, 10)]
        );
    }
    #[test]
    fn two_range_minus() {
        let mut e = IndexSet::new();
        e.union_one_range(3, 5);
        e.union_one_range(7, 9);
        assert_eq!(e.minus_one_range(0, 0).collect::< Vec < _ >> (), vec![]);
        assert_eq!(e.minus_one_range(3, 5).collect::< Vec < _ >> (), vec![]);
        assert_eq!(e.minus_one_range(0, 3).collect::< Vec < _ >> (), vec![(0, 3)]);
        assert_eq!(e.minus_one_range(0, 4).collect::< Vec < _ >> (), vec![(0, 3)]);
        assert_eq!(
            e.minus_one_range(4, 10).collect::< Vec < _ >> (), vec![(5, 7), (9, 10)]
        );
        assert_eq!(
            e.minus_one_range(5, 10).collect::< Vec < _ >> (), vec![(5, 7), (9, 10)]
        );
        assert_eq!(e.minus_one_range(8, 10).collect::< Vec < _ >> (), vec![(9, 10)]);
        assert_eq!(
            e.minus_one_range(0, 10).collect::< Vec < _ >> (), vec![(0, 3), (5, 7), (9,
            10)]
        );
    }
    #[test]
    fn minus_one_range_double_ended_iter() {
        let mut e = IndexSet::new();
        e.union_one_range(3, 5);
        e.union_one_range(7, 9);
        e.union_one_range(12, 15);
        let mut iter = e.minus_one_range(4, 13);
        assert_eq!(iter.next(), Some((5, 7)));
        assert_eq!(iter.next(), Some((9, 12)));
        assert_eq!(iter.next(), None);
        let mut iter = e.minus_one_range(4, 13);
        assert_eq!(iter.next_back(), Some((9, 12)));
        assert_eq!(iter.next_back(), Some((5, 7)));
        assert_eq!(iter.next_back(), None);
        let mut iter = e.minus_one_range(4, 13);
        assert_eq!(iter.next_back(), Some((9, 12)));
        assert_eq!(iter.next(), Some((5, 7)));
        assert_eq!(iter.next_back(), None);
        assert_eq!(iter.next(), None);
    }
    #[test]
    fn unions() {
        let mut e = IndexSet::new();
        e.union_one_range(3, 5);
        assert_eq!(e.get_ranges(), & [(3, 5)]);
        e.union_one_range(7, 9);
        assert_eq!(e.get_ranges(), & [(3, 5), (7, 9)]);
        e.union_one_range(1, 2);
        assert_eq!(e.get_ranges(), & [(1, 2), (3, 5), (7, 9)]);
        e.union_one_range(2, 3);
        assert_eq!(e.get_ranges(), & [(1, 5), (7, 9)]);
        e.union_one_range(4, 6);
        assert_eq!(e.get_ranges(), & [(1, 6), (7, 9)]);
        assert_eq!(
            e.minus_one_range(0, 10).collect::< Vec < _ >> (), vec![(0, 1), (6, 7), (9,
            10)]
        );
        e.clear();
        assert_eq!(e.get_ranges(), & []);
        e.union_one_range(3, 4);
        assert_eq!(e.get_ranges(), & [(3, 4)]);
        e.union_one_range(5, 6);
        assert_eq!(e.get_ranges(), & [(3, 4), (5, 6)]);
        e.union_one_range(7, 8);
        assert_eq!(e.get_ranges(), & [(3, 4), (5, 6), (7, 8)]);
        e.union_one_range(9, 10);
        assert_eq!(e.get_ranges(), & [(3, 4), (5, 6), (7, 8), (9, 10)]);
        e.union_one_range(11, 12);
        assert_eq!(e.get_ranges(), & [(3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]);
        e.union_one_range(2, 10);
        assert_eq!(e.get_ranges(), & [(2, 10), (11, 12)]);
    }
    #[test]
    fn delete_range() {
        let mut e = IndexSet::new();
        e.union_one_range(1, 2);
        e.union_one_range(4, 6);
        e.union_one_range(6, 7);
        e.union_one_range(8, 8);
        e.union_one_range(10, 12);
        e.union_one_range(13, 14);
        e.delete_range(5, 11);
        assert_eq!(e.get_ranges(), & [(1, 2), (4, 5), (11, 12), (13, 14)]);
        let mut e = IndexSet::new();
        e.union_one_range(1, 2);
        e.union_one_range(4, 6);
        e.delete_range(2, 4);
        assert_eq!(e.get_ranges(), & [(1, 2), (4, 6)]);
        let mut e = IndexSet::new();
        e.union_one_range(0, 10);
        e.delete_range(4, 6);
        assert_eq!(e.get_ranges(), & [(0, 4), (6, 10)]);
    }
    #[test]
    fn apply_delta() {
        use xi_rope::{Delta, Interval, Rope};
        let mut e = IndexSet::new();
        e.union_one_range(1, 3);
        e.union_one_range(5, 9);
        let d = Delta::simple_edit(Interval::new(2, 2), Rope::from("..."), 10);
        let s = e.apply_delta(&d);
        assert_eq!(s.get_ranges(), & [(1, 6), (8, 12)]);
        let d = Delta::simple_edit(Interval::new(0, 3), Rope::from(""), 10);
        let s = e.apply_delta(&d);
        assert_eq!(s.get_ranges(), & [(2, 6)]);
        let d = Delta::simple_edit(Interval::new(2, 6), Rope::from(""), 10);
        let s = e.apply_delta(&d);
        assert_eq!(s.get_ranges(), & [(1, 5)]);
    }
}
#[cfg(test)]
mod tests_llm_16_30 {
    use super::*;
    use crate::*;
    use std::iter::DoubleEndedIterator;
    #[test]
    fn test_next_back() {
        let _rug_st_tests_llm_16_30_rrrruuuugggg_test_next_back = 0;
        let rug_fuzz_0 = 1;
        let rug_fuzz_1 = 3;
        let rug_fuzz_2 = 5;
        let rug_fuzz_3 = 10;
        let rug_fuzz_4 = 12;
        let rug_fuzz_5 = 15;
        let rug_fuzz_6 = 0;
        let rug_fuzz_7 = 16;
        let ranges: &[(usize, usize)] = &[
            (rug_fuzz_0, rug_fuzz_1),
            (rug_fuzz_2, rug_fuzz_3),
            (rug_fuzz_4, rug_fuzz_5),
        ];
        let mut iter = MinusIter {
            ranges,
            start: rug_fuzz_6,
            end: rug_fuzz_7,
        };
        debug_assert_eq!(iter.next_back(), Some((12, 16)));
        debug_assert_eq!(iter.next_back(), Some((5, 12)));
        debug_assert_eq!(iter.next_back(), Some((1, 5)));
        debug_assert_eq!(iter.next_back(), None);
        let _rug_ed_tests_llm_16_30_rrrruuuugggg_test_next_back = 0;
    }
}
#[cfg(test)]
mod tests_llm_16_32_llm_16_31 {
    use super::*;
    use crate::*;
    use crate::index_set::MinusIter;
    #[test]
    fn test_next() {
        let _rug_st_tests_llm_16_32_llm_16_31_rrrruuuugggg_test_next = 0;
        let rug_fuzz_0 = 0;
        let rug_fuzz_1 = 5;
        let rug_fuzz_2 = 8;
        let rug_fuzz_3 = 10;
        let rug_fuzz_4 = 15;
        let rug_fuzz_5 = 20;
        let rug_fuzz_6 = 0;
        let rug_fuzz_7 = 20;
        let ranges: &[(usize, usize)] = &[
            (rug_fuzz_0, rug_fuzz_1),
            (rug_fuzz_2, rug_fuzz_3),
            (rug_fuzz_4, rug_fuzz_5),
        ];
        let mut iter = MinusIter {
            ranges,
            start: rug_fuzz_6,
            end: rug_fuzz_7,
        };
        debug_assert_eq!(iter.next(), Some((0, 5)));
        debug_assert_eq!(iter.next(), Some((5, 8)));
        debug_assert_eq!(iter.next(), Some((10, 15)));
        debug_assert_eq!(iter.next(), Some((20, 20)));
        debug_assert_eq!(iter.next(), None);
        let _rug_ed_tests_llm_16_32_llm_16_31_rrrruuuugggg_test_next = 0;
    }
    #[test]
    fn test_next_back() {
        let _rug_st_tests_llm_16_32_llm_16_31_rrrruuuugggg_test_next_back = 0;
        let rug_fuzz_0 = 0;
        let rug_fuzz_1 = 5;
        let rug_fuzz_2 = 8;
        let rug_fuzz_3 = 10;
        let rug_fuzz_4 = 15;
        let rug_fuzz_5 = 20;
        let rug_fuzz_6 = 0;
        let rug_fuzz_7 = 20;
        let ranges: &[(usize, usize)] = &[
            (rug_fuzz_0, rug_fuzz_1),
            (rug_fuzz_2, rug_fuzz_3),
            (rug_fuzz_4, rug_fuzz_5),
        ];
        let mut iter = MinusIter {
            ranges,
            start: rug_fuzz_6,
            end: rug_fuzz_7,
        };
        debug_assert_eq!(iter.next_back(), Some((15, 20)));
        debug_assert_eq!(iter.next_back(), Some((10, 15)));
        debug_assert_eq!(iter.next_back(), Some((5, 8)));
        debug_assert_eq!(iter.next_back(), Some((0, 5)));
        debug_assert_eq!(iter.next_back(), None);
        let _rug_ed_tests_llm_16_32_llm_16_31_rrrruuuugggg_test_next_back = 0;
    }
}
#[cfg(test)]
mod tests_llm_16_458 {
    use super::*;
    use crate::*;
    #[test]
    fn test_clear() {
        let _rug_st_tests_llm_16_458_rrrruuuugggg_test_clear = 0;
        let rug_fuzz_0 = 0;
        let rug_fuzz_1 = 10;
        let rug_fuzz_2 = 20;
        let rug_fuzz_3 = 30;
        let rug_fuzz_4 = 40;
        let rug_fuzz_5 = 50;
        let mut index_set = IndexSet::new();
        index_set.union_one_range(rug_fuzz_0, rug_fuzz_1);
        index_set.union_one_range(rug_fuzz_2, rug_fuzz_3);
        index_set.union_one_range(rug_fuzz_4, rug_fuzz_5);
        index_set.clear();
        debug_assert_eq!(index_set.get_ranges(), & []);
        let _rug_ed_tests_llm_16_458_rrrruuuugggg_test_clear = 0;
    }
}
#[cfg(test)]
mod tests_llm_16_459 {
    use super::*;
    use crate::*;
    #[test]
    fn test_delete_range() {
        let _rug_st_tests_llm_16_459_rrrruuuugggg_test_delete_range = 0;
        let rug_fuzz_0 = 0;
        let rug_fuzz_1 = 10;
        let rug_fuzz_2 = 20;
        let rug_fuzz_3 = 30;
        let rug_fuzz_4 = 40;
        let rug_fuzz_5 = 50;
        let rug_fuzz_6 = 60;
        let rug_fuzz_7 = 70;
        let rug_fuzz_8 = 10;
        let rug_fuzz_9 = 30;
        let rug_fuzz_10 = 5;
        let rug_fuzz_11 = 25;
        let rug_fuzz_12 = 45;
        let rug_fuzz_13 = 65;
        let rug_fuzz_14 = 0;
        let rug_fuzz_15 = 70;
        let mut set = IndexSet::new();
        set.union_one_range(rug_fuzz_0, rug_fuzz_1);
        set.union_one_range(rug_fuzz_2, rug_fuzz_3);
        set.union_one_range(rug_fuzz_4, rug_fuzz_5);
        set.union_one_range(rug_fuzz_6, rug_fuzz_7);
        set.delete_range(rug_fuzz_8, rug_fuzz_9);
        let ranges = set.get_ranges();
        debug_assert_eq!(ranges, & [(0, 10), (30, 30), (40, 50), (60, 70)]);
        set.delete_range(rug_fuzz_10, rug_fuzz_11);
        let ranges = set.get_ranges();
        debug_assert_eq!(ranges, & [(0, 5), (25, 30), (30, 30), (40, 50), (60, 70)]);
        set.delete_range(rug_fuzz_12, rug_fuzz_13);
        let ranges = set.get_ranges();
        debug_assert_eq!(ranges, & [(0, 5), (25, 30), (30, 30), (40, 45), (65, 70)]);
        set.delete_range(rug_fuzz_14, rug_fuzz_15);
        let ranges = set.get_ranges();
        debug_assert_eq!(ranges, & []);
        let _rug_ed_tests_llm_16_459_rrrruuuugggg_test_delete_range = 0;
    }
}
#[cfg(test)]
mod tests_llm_16_460 {
    use super::*;
    use crate::*;
    #[test]
    fn test_minus_one_range() {
        let _rug_st_tests_llm_16_460_rrrruuuugggg_test_minus_one_range = 0;
        let rug_fuzz_0 = 0;
        let rug_fuzz_1 = 5;
        let rug_fuzz_2 = 10;
        let rug_fuzz_3 = 15;
        let rug_fuzz_4 = 20;
        let rug_fuzz_5 = 25;
        let rug_fuzz_6 = 0;
        let rug_fuzz_7 = 25;
        let rug_fuzz_8 = 0;
        let rug_fuzz_9 = 30;
        let rug_fuzz_10 = 0;
        let rug_fuzz_11 = 5;
        let rug_fuzz_12 = 0;
        let rug_fuzz_13 = 0;
        let mut set = IndexSet::new();
        set.union_one_range(rug_fuzz_0, rug_fuzz_1);
        set.union_one_range(rug_fuzz_2, rug_fuzz_3);
        set.union_one_range(rug_fuzz_4, rug_fuzz_5);
        let mut iter = set.minus_one_range(rug_fuzz_6, rug_fuzz_7);
        debug_assert_eq!(iter.next(), Some((5, 10)));
        debug_assert_eq!(iter.next(), Some((15, 20)));
        debug_assert_eq!(iter.next(), None);
        let mut iter = set.minus_one_range(rug_fuzz_8, rug_fuzz_9);
        debug_assert_eq!(iter.next(), Some((5, 10)));
        debug_assert_eq!(iter.next(), Some((15, 20)));
        debug_assert_eq!(iter.next(), Some((25, 30)));
        debug_assert_eq!(iter.next(), None);
        let mut iter = set.minus_one_range(rug_fuzz_10, rug_fuzz_11);
        debug_assert_eq!(iter.next(), None);
        let mut iter = set.minus_one_range(rug_fuzz_12, rug_fuzz_13);
        debug_assert_eq!(iter.next(), Some((0, 0)));
        debug_assert_eq!(iter.next(), None);
        let _rug_ed_tests_llm_16_460_rrrruuuugggg_test_minus_one_range = 0;
    }
}
#[cfg(test)]
mod tests_llm_16_461 {
    use super::*;
    use crate::*;
    #[test]
    fn test_new() {
        let _rug_st_tests_llm_16_461_rrrruuuugggg_test_new = 0;
        let set = IndexSet::new();
        debug_assert_eq!(set.get_ranges().len(), 0);
        let _rug_ed_tests_llm_16_461_rrrruuuugggg_test_new = 0;
    }
}
#[cfg(test)]
mod tests_llm_16_462 {
    use super::*;
    use crate::*;
    #[test]
    fn test_union_one_range() {
        let _rug_st_tests_llm_16_462_rrrruuuugggg_test_union_one_range = 0;
        let rug_fuzz_0 = 3;
        let rug_fuzz_1 = 5;
        let rug_fuzz_2 = 1;
        let rug_fuzz_3 = 2;
        let rug_fuzz_4 = 7;
        let rug_fuzz_5 = 10;
        let rug_fuzz_6 = 4;
        let rug_fuzz_7 = 6;
        let rug_fuzz_8 = 8;
        let rug_fuzz_9 = 12;
        let rug_fuzz_10 = 14;
        let rug_fuzz_11 = 16;
        let rug_fuzz_12 = 11;
        let rug_fuzz_13 = 13;
        let rug_fuzz_14 = 17;
        let rug_fuzz_15 = 20;
        let rug_fuzz_16 = 1;
        let rug_fuzz_17 = 2;
        let rug_fuzz_18 = 3;
        let rug_fuzz_19 = 6;
        let rug_fuzz_20 = 7;
        let rug_fuzz_21 = 13;
        let rug_fuzz_22 = 14;
        let rug_fuzz_23 = 16;
        let rug_fuzz_24 = 17;
        let rug_fuzz_25 = 20;
        let mut set = IndexSet::new();
        set.union_one_range(rug_fuzz_0, rug_fuzz_1);
        set.union_one_range(rug_fuzz_2, rug_fuzz_3);
        set.union_one_range(rug_fuzz_4, rug_fuzz_5);
        set.union_one_range(rug_fuzz_6, rug_fuzz_7);
        set.union_one_range(rug_fuzz_8, rug_fuzz_9);
        set.union_one_range(rug_fuzz_10, rug_fuzz_11);
        set.union_one_range(rug_fuzz_12, rug_fuzz_13);
        set.union_one_range(rug_fuzz_14, rug_fuzz_15);
        let expected_ranges = &[
            (rug_fuzz_16, rug_fuzz_17),
            (rug_fuzz_18, rug_fuzz_19),
            (rug_fuzz_20, rug_fuzz_21),
            (rug_fuzz_22, rug_fuzz_23),
            (rug_fuzz_24, rug_fuzz_25),
        ];
        debug_assert_eq!(set.get_ranges(), expected_ranges);
        let _rug_ed_tests_llm_16_462_rrrruuuugggg_test_union_one_range = 0;
    }
}
#[cfg(test)]
mod tests_llm_16_463 {
    use super::*;
    use crate::*;
    use serde_json;
    #[derive(Clone, Debug, Default, PartialEq, serde::Serialize, serde::Deserialize)]
    struct AnnotationRange {
        start_line: usize,
        start_col: usize,
        end_line: usize,
        end_col: usize,
    }
    #[test]
    fn test_remove_n_at() {
        let _rug_st_tests_llm_16_463_rrrruuuugggg_test_remove_n_at = 0;
        let rug_fuzz_0 = 1;
        let rug_fuzz_1 = 2;
        let rug_fuzz_2 = 3;
        let rug_fuzz_3 = 4;
        let rug_fuzz_4 = 5;
        let rug_fuzz_5 = 6;
        let rug_fuzz_6 = 7;
        let rug_fuzz_7 = 8;
        let rug_fuzz_8 = 0;
        let rug_fuzz_9 = 1;
        let mut v: Vec<AnnotationRange> = vec![
            AnnotationRange { start_line : rug_fuzz_0, start_col : rug_fuzz_1, end_line :
            rug_fuzz_2, end_col : rug_fuzz_3, }, AnnotationRange { start_line : 5,
            start_col : 6, end_line : 7, end_col : 8, }
        ];
        let expected: Vec<AnnotationRange> = vec![
            AnnotationRange { start_line : rug_fuzz_4, start_col : rug_fuzz_5, end_line :
            rug_fuzz_6, end_col : rug_fuzz_7, }
        ];
        remove_n_at(&mut v, rug_fuzz_8, rug_fuzz_9);
        debug_assert_eq!(v, expected);
        let _rug_ed_tests_llm_16_463_rrrruuuugggg_test_remove_n_at = 0;
    }
}
