{"<T as interval::IntervalBounds>::into_interval": true, "<breaks::BreakBuilder as std::default::Default>::default": false, "<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::can_fragment": false, "<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::from_base_units": false, "<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::is_boundary": true, "<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::measure": false, "<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::next": false, "<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::prev": false, "<breaks::BreaksBaseMetric as tree::Metric<breaks::BreaksInfo>>::to_base_units": false, "<breaks::BreaksInfo as tree::NodeInfo>::accumulate": false, "<breaks::BreaksInfo as tree::NodeInfo>::compute_info": false, "<breaks::BreaksLeaf as tree::Leaf>::is_ok_child": false, "<breaks::BreaksLeaf as tree::Leaf>::len": false, "<breaks::BreaksLeaf as tree::Leaf>::push_maybe_split": false, "<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::can_fragment": true, "<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::from_base_units": true, "<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::is_boundary": true, "<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::measure": false, "<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::next": false, "<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::prev": false, "<breaks::BreaksMetric as tree::Metric<breaks::BreaksInfo>>::to_base_units": false, "<delta::DeletionsIter<'a, N> as std::iter::Iterator>::next": false, "<delta::InsertDelta<N> as std::ops::Deref>::deref": false, "<delta::InsertsIter<'a, N> as std::iter::Iterator>::next": false, "<diff::LineHashDiff as diff::Diff<rope::RopeInfo>>::compute_delta": false, "<interval::Interval as std::convert::From<std::ops::Range<usize>>>::from": true, "<interval::Interval as std::convert::From<std::ops::RangeInclusive<usize>>>::from": true, "<interval::Interval as std::convert::From<std::ops::RangeTo<usize>>>::from": true, "<interval::Interval as std::convert::From<std::ops::RangeToInclusive<usize>>>::from": true, "<multiset::RangeIter<'a> as std::iter::Iterator>::next": true, "<multiset::ZipIter<'a> as std::iter::Iterator>::next": false, "<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::can_fragment": false, "<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::from_base_units": false, "<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::is_boundary": false, "<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::measure": false, "<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::next": false, "<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::prev": false, "<rope::BaseMetric as tree::Metric<rope::RopeInfo>>::to_base_units": true, "<rope::ChunkIter<'a> as std::iter::Iterator>::next": false, "<rope::Lines<'a> as std::iter::Iterator>::next": false, "<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::can_fragment": false, "<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::from_base_units": false, "<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::is_boundary": false, "<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::measure": true, "<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::next": false, "<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::prev": false, "<rope::LinesMetric as tree::Metric<rope::RopeInfo>>::to_base_units": false, "<rope::LinesRaw<'a> as std::iter::Iterator>::next": false, "<rope::RopeInfo as tree::NodeInfo>::accumulate": true, "<rope::RopeInfo as tree::NodeInfo>::compute_info": true, "<rope::RopeInfo as tree::NodeInfo>::identity": false, "<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::can_fragment": false, "<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::from_base_units": true, "<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::is_boundary": true, "<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::measure": false, "<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::next": true, "<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::prev": false, "<rope::Utf16CodeUnitsMetric as tree::Metric<rope::RopeInfo>>::to_base_units": true, "<spans::SpanIter<'a, T> as std::iter::Iterator>::next": false, "<spans::SpansInfo<T> as tree::NodeInfo>::accumulate": false, "<spans::SpansInfo<T> as tree::NodeInfo>::compute_info": true, "<spans::SpansLeaf<T> as std::default::Default>::default": false, "<spans::SpansLeaf<T> as tree::Leaf>::is_ok_child": true, "<spans::SpansLeaf<T> as tree::Leaf>::len": true, "<spans::SpansLeaf<T> as tree::Leaf>::push_maybe_split": false, "<std::ops::RangeFrom<usize> as interval::IntervalBounds>::into_interval": true, "<std::ops::RangeFull as interval::IntervalBounds>::into_interval": true, "<tree::CursorIter<'c, 'a, N, M> as std::iter::Iterator>::next": false, "<tree::Node<N> as std::default::Default>::default": false, "breaks::<impl tree::Node<breaks::BreaksInfo>>::new_no_break": false, "breaks::BreakBuilder::add_break": false, "breaks::BreakBuilder::add_no_break": false, "breaks::BreakBuilder::build": false, "breaks::BreakBuilder::new": true, "breaks::BreaksLeaf::get_data_cloned": false, "compare::RopeScanner::<'a>::find_min_diff_range": true, "compare::RopeScanner::<'a>::find_ne_char": false, "compare::RopeScanner::<'a>::find_ne_char_back": true, "compare::RopeScanner::<'a>::load_next_chunk": false, "compare::RopeScanner::<'a>::load_prev_chunk": false, "compare::RopeScanner::<'a>::new": false, "compare::avx_compare_mask": true, "compare::ne_idx": true, "compare::ne_idx_avx": true, "compare::ne_idx_fallback": false, "compare::ne_idx_rev": true, "compare::ne_idx_rev_fallback": true, "compare::ne_idx_rev_sse": true, "compare::ne_idx_sse": true, "compare::sse_compare_mask": false, "delta::Builder::<N>::build": false, "delta::Builder::<N>::delete": false, "delta::Builder::<N>::is_empty": false, "delta::Builder::<N>::new": false, "delta::Builder::<N>::replace": false, "delta::Delta::<N>::apply": false, "delta::Delta::<N>::as_simple_insert": false, "delta::Delta::<N>::factor": true, "delta::Delta::<N>::inserts_len": false, "delta::Delta::<N>::is_identity": false, "delta::Delta::<N>::is_simple_delete": false, "delta::Delta::<N>::iter_deletions": false, "delta::Delta::<N>::iter_inserts": false, "delta::Delta::<N>::new_document_len": false, "delta::Delta::<N>::simple_edit": true, "delta::Delta::<N>::summary": false, "delta::Delta::<N>::synthesize": true, "delta::Delta::<N>::total_element_len": false, "delta::DeltaRegion::new": true, "delta::InsertDelta::<N>::inserted_subset": false, "delta::InsertDelta::<N>::transform_expand": false, "delta::InsertDelta::<N>::transform_shrink": false, "delta::Transformer::<'a, N>::interval_untouched": false, "delta::Transformer::<'a, N>::new": false, "delta::Transformer::<'a, N>::transform": true, "diff::DiffBuilder::copy": false, "diff::DiffBuilder::to_delta": false, "diff::expand_match": false, "diff::longest_increasing_region_set": true, "diff::make_line_hashes": false, "diff::non_ws_offset": false, "engine::Engine::compute_undo": false, "engine::Engine::deletes_from_cur_union_for_index": false, "engine::Engine::deletes_from_union_before_index": false, "engine::Engine::deletes_from_union_for_index": false, "engine::Engine::edit_rev": false, "engine::Engine::empty": true, "engine::Engine::empty_subset_before_first_rev": true, "engine::Engine::find_first_undo_candidate_index": false, "engine::Engine::find_rev": false, "engine::Engine::find_rev_token": false, "engine::Engine::gc": true, "engine::Engine::get_head": true, "engine::Engine::get_head_rev_id": false, "engine::Engine::get_rev": false, "engine::Engine::is_equivalent_revision": false, "engine::Engine::max_undo_group_id": false, "engine::Engine::merge": false, "engine::Engine::mk_new_rev": false, "engine::Engine::new": false, "engine::Engine::next_rev_id": true, "engine::Engine::rev_content_for_index": false, "engine::Engine::set_session_id": false, "engine::Engine::try_delta_rev_head": false, "engine::Engine::try_edit_rev": false, "engine::Engine::undo": false, "engine::RevId::session_id": true, "engine::RevId::token": true, "engine::compute_deltas": false, "engine::compute_transforms": false, "engine::default_session": true, "engine::find_base_index": true, "engine::find_common": false, "engine::rearrange": true, "engine::rebase": false, "engine::shuffle": true, "engine::shuffle_tombstones": false, "find::compare_cursor_regex": false, "find::compare_cursor_str": false, "find::compare_cursor_str_casei": false, "find::find": false, "find::find_core": false, "find::find_progress": false, "find::find_progress_iter": true, "find::is_multiline_regex": true, "find::scan_lowercase": false, "interval::Interval::contains": true, "interval::Interval::end": true, "interval::Interval::intersect": true, "interval::Interval::is_after": true, "interval::Interval::is_before": true, "interval::Interval::is_empty": true, "interval::Interval::new": true, "interval::Interval::new_closed_closed": true, "interval::Interval::new_closed_open": true, "interval::Interval::new_open_closed": true, "interval::Interval::new_open_open": true, "interval::Interval::prefix": true, "interval::Interval::size": true, "interval::Interval::start": true, "interval::Interval::start_end": true, "interval::Interval::suffix": true, "interval::Interval::translate": true, "interval::Interval::translate_neg": true, "interval::Interval::union": true, "multiset::CountMatcher::matches": true, "multiset::Mapper::<'a>::doc_index_to_subset": true, "multiset::Subset::bitxor": true, "multiset::Subset::complement": true, "multiset::Subset::complement_iter": true, "multiset::Subset::count": false, "multiset::Subset::delete_from": false, "multiset::Subset::delete_from_string": true, "multiset::Subset::is_empty": false, "multiset::Subset::len": true, "multiset::Subset::len_after_delete": true, "multiset::Subset::mapper": true, "multiset::Subset::new": true, "multiset::Subset::range_iter": true, "multiset::Subset::subtract": true, "multiset::Subset::transform": true, "multiset::Subset::transform_expand": true, "multiset::Subset::transform_shrink": true, "multiset::Subset::transform_union": true, "multiset::Subset::union": false, "multiset::Subset::zip": true, "multiset::SubsetBuilder::add_range": false, "multiset::SubsetBuilder::build": true, "multiset::SubsetBuilder::new": true, "multiset::SubsetBuilder::pad_to_len": true, "multiset::SubsetBuilder::push_segment": true, "rope::<impl std::convert::From<&'a tree::Node<rope::RopeInfo>> for std::string::String>::from": false, "rope::<impl std::convert::From<T> for tree::Node<rope::RopeInfo>>::from": false, "rope::<impl std::convert::From<tree::Node<rope::RopeInfo>> for std::string::String>::from": false, "rope::<impl std::ops::Add for tree::Node<rope::RopeInfo>>::add": true, "rope::<impl std::str::FromStr for tree::Node<rope::RopeInfo>>::from_str": false, "rope::<impl tree::Cursor<'a, rope::RopeInfo>>::next_codepoint": false, "rope::<impl tree::Cursor<'a, rope::RopeInfo>>::next_grapheme": false, "rope::<impl tree::Cursor<'a, rope::RopeInfo>>::peek_next_codepoint": false, "rope::<impl tree::Cursor<'a, rope::RopeInfo>>::prev_codepoint": false, "rope::<impl tree::Cursor<'a, rope::RopeInfo>>::prev_grapheme": false, "rope::<impl tree::Leaf for std::string::String>::is_ok_child": false, "rope::<impl tree::Leaf for std::string::String>::len": false, "rope::<impl tree::Leaf for std::string::String>::push_maybe_split": false, "rope::<impl tree::Node<rope::RopeInfo>>::at_or_next_codepoint_boundary": false, "rope::<impl tree::Node<rope::RopeInfo>>::at_or_prev_codepoint_boundary": false, "rope::<impl tree::Node<rope::RopeInfo>>::byte_at": true, "rope::<impl tree::Node<rope::RopeInfo>>::edit_str": false, "rope::<impl tree::Node<rope::RopeInfo>>::is_codepoint_boundary": false, "rope::<impl tree::Node<rope::RopeInfo>>::iter_chunks": false, "rope::<impl tree::Node<rope::RopeInfo>>::line_of_offset": true, "rope::<impl tree::Node<rope::RopeInfo>>::lines": false, "rope::<impl tree::Node<rope::RopeInfo>>::lines_raw": true, "rope::<impl tree::Node<rope::RopeInfo>>::next_codepoint_offset": true, "rope::<impl tree::Node<rope::RopeInfo>>::next_grapheme_offset": false, "rope::<impl tree::Node<rope::RopeInfo>>::offset_of_line": false, "rope::<impl tree::Node<rope::RopeInfo>>::prev_codepoint_offset": false, "rope::<impl tree::Node<rope::RopeInfo>>::prev_grapheme_offset": false, "rope::<impl tree::Node<rope::RopeInfo>>::slice": false, "rope::<impl tree::Node<rope::RopeInfo>>::slice_to_cow": false, "rope::<impl tree::TreeBuilder<rope::RopeInfo>>::push_str": false, "rope::count_newlines": true, "rope::count_utf16_code_units": true, "rope::cow_append": true, "rope::find_leaf_split": true, "rope::find_leaf_split_for_bulk": true, "rope::find_leaf_split_for_merge": false, "rope::len_utf8_from_first_byte": false, "spans::<impl tree::Node<spans::SpansInfo<T>>>::apply_shape": false, "spans::<impl tree::Node<spans::SpansInfo<T>>>::delete_after": false, "spans::<impl tree::Node<spans::SpansInfo<T>>>::iter": false, "spans::<impl tree::Node<spans::SpansInfo<T>>>::merge": false, "spans::<impl tree::Node<spans::SpansInfo<T>>>::transform": false, "spans::SpansBuilder::<T>::add_span": false, "spans::SpansBuilder::<T>::build": false, "spans::SpansBuilder::<T>::new": false, "tree::Cursor::<'a, N>::at_or_next": false, "tree::Cursor::<'a, N>::at_or_prev": false, "tree::Cursor::<'a, N>::descend": false, "tree::Cursor::<'a, N>::descend_metric": false, "tree::Cursor::<'a, N>::get_leaf": false, "tree::Cursor::<'a, N>::is_boundary": false, "tree::Cursor::<'a, N>::iter": true, "tree::Cursor::<'a, N>::last_inside_leaf": false, "tree::Cursor::<'a, N>::measure_leaf": false, "tree::Cursor::<'a, N>::new": false, "tree::Cursor::<'a, N>::next": false, "tree::Cursor::<'a, N>::next_inside_leaf": false, "tree::Cursor::<'a, N>::next_leaf": false, "tree::Cursor::<'a, N>::pos": false, "tree::Cursor::<'a, N>::prev": false, "tree::Cursor::<'a, N>::prev_leaf": false, "tree::Cursor::<'a, N>::root": false, "tree::Cursor::<'a, N>::set": false, "tree::Cursor::<'a, N>::total_len": false, "tree::CursorIter::<'c, 'a, N, M>::pos": false, "tree::Leaf::subseq": false, "tree::Node::<N>::concat": false, "tree::Node::<N>::convert_metrics": false, "tree::Node::<N>::count": false, "tree::Node::<N>::count_base_units": false, "tree::Node::<N>::edit": false, "tree::Node::<N>::from_leaf": false, "tree::Node::<N>::from_nodes": false, "tree::Node::<N>::get_children": false, "tree::Node::<N>::get_leaf": false, "tree::Node::<N>::height": false, "tree::Node::<N>::interval": false, "tree::Node::<N>::is_empty": false, "tree::Node::<N>::is_leaf": false, "tree::Node::<N>::is_ok_child": false, "tree::Node::<N>::len": true, "tree::Node::<N>::measure": false, "tree::Node::<N>::merge_leaves": false, "tree::Node::<N>::merge_nodes": false, "tree::Node::<N>::ptr_eq": false, "tree::Node::<N>::push_subseq": false, "tree::Node::<N>::subseq": true, "tree::Node::<N>::with_leaf_mut": false, "tree::NodeInfo::identity": false, "tree::NodeInfo::interval": false, "tree::TreeBuilder::<N>::build": false, "tree::TreeBuilder::<N>::new": true, "tree::TreeBuilder::<N>::pop": false, "tree::TreeBuilder::<N>::push": false, "tree::TreeBuilder::<N>::push_leaf": false, "tree::TreeBuilder::<N>::push_leaf_slice": false, "tree::TreeBuilder::<N>::push_leaves": false}