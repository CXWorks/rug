{"<&'a header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter": false, "<&'a header::name::HeaderName as header::map::as_header_name::Sealed>::as_str": true, "<&'a header::name::HeaderName as header::map::as_header_name::Sealed>::find": false, "<&'a header::name::HeaderName as header::map::as_header_name::Sealed>::try_entry": false, "<&'a header::name::HeaderName as header::map::into_header_name::Sealed>::append": true, "<&'a header::name::HeaderName as header::map::into_header_name::Sealed>::insert": false, "<&'a header::name::HeaderName as std::cmp::PartialEq<header::name::HeaderName>>::eq": true, "<&'a header::value::HeaderValue as std::cmp::PartialEq<header::value::HeaderValue>>::eq": true, "<&'a header::value::HeaderValue as std::cmp::PartialOrd<header::value::HeaderValue>>::partial_cmp": true, "<&'a method::Method as std::cmp::PartialEq<method::Method>>::eq": true, "<&'a mut header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter": false, "<&'a std::string::String as header::map::as_header_name::Sealed>::as_str": false, "<&'a std::string::String as header::map::as_header_name::Sealed>::find": false, "<&'a std::string::String as header::map::as_header_name::Sealed>::try_entry": false, "<&'a str as header::map::as_header_name::Sealed>::as_str": false, "<&'a str as header::map::as_header_name::Sealed>::find": false, "<&'a str as header::map::as_header_name::Sealed>::try_entry": false, "<&'b header::map::GetAll<'a, T> as std::iter::IntoIterator>::into_iter": true, "<&'b header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter": false, "<&'b mut header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter": true, "<&'static str as header::map::into_header_name::Sealed>::append": false, "<&'static str as header::map::into_header_name::Sealed>::insert": false, "<byte_str::ByteStr as std::convert::From<&'a str>>::from": false, "<byte_str::ByteStr as std::convert::From<std::string::String>>::from": true, "<byte_str::ByteStr as std::ops::Deref>::deref": true, "<error::Error as std::convert::From<header::name::InvalidHeaderName>>::from": false, "<error::Error as std::convert::From<header::value::InvalidHeaderValue>>::from": false, "<error::Error as std::convert::From<method::InvalidMethod>>::from": false, "<error::Error as std::convert::From<status::InvalidStatusCode>>::from": false, "<error::Error as std::convert::From<std::convert::Infallible>>::from": false, "<error::Error as std::convert::From<uri::InvalidUri>>::from": false, "<error::Error as std::convert::From<uri::InvalidUriParts>>::from": false, "<error::Error as std::error::Error>::source": false, "<extensions::IdHasher as std::hash::Hasher>::finish": true, "<extensions::IdHasher as std::hash::Hasher>::write": true, "<extensions::IdHasher as std::hash::Hasher>::write_u64": true, "<header::map::Drain<'a, T> as std::iter::Iterator>::next": false, "<header::map::Drain<'a, T> as std::iter::Iterator>::size_hint": false, "<header::map::Drain<'a, T> as std::ops::Drop>::drop": false, "<header::map::GetAll<'a, T> as std::cmp::PartialEq>::eq": true, "<header::map::GetAll<'a, T> as std::iter::IntoIterator>::into_iter": false, "<header::map::HeaderMap<T> as std::cmp::PartialEq>::eq": false, "<header::map::HeaderMap<T> as std::convert::TryFrom<&'a std::collections::HashMap<K, V>>>::try_from": false, "<header::map::HeaderMap<T> as std::default::Default>::default": true, "<header::map::HeaderMap<T> as std::iter::Extend<(header::name::HeaderName, T)>>::extend": false, "<header::map::HeaderMap<T> as std::iter::Extend<(std::option::Option<header::name::HeaderName>, T)>>::extend": true, "<header::map::HeaderMap<T> as std::iter::FromIterator<(header::name::HeaderName, T)>>::from_iter": true, "<header::map::HeaderMap<T> as std::iter::IntoIterator>::into_iter": false, "<header::map::HeaderMap<T> as std::ops::Index<K>>::index": false, "<header::map::IntoIter<T> as std::iter::Iterator>::next": true, "<header::map::IntoIter<T> as std::iter::Iterator>::size_hint": false, "<header::map::IntoIter<T> as std::ops::Drop>::drop": false, "<header::map::Iter<'a, T> as std::iter::Iterator>::next": true, "<header::map::Iter<'a, T> as std::iter::Iterator>::size_hint": true, "<header::map::IterMut<'a, T> as std::iter::Iterator>::next": false, "<header::map::IterMut<'a, T> as std::iter::Iterator>::size_hint": false, "<header::map::Keys<'a, T> as std::iter::Iterator>::next": false, "<header::map::Keys<'a, T> as std::iter::Iterator>::size_hint": false, "<header::map::OccupiedEntry<'a, T> as std::iter::IntoIterator>::into_iter": true, "<header::map::RawLinks<T> as std::clone::Clone>::clone": false, "<header::map::RawLinks<T> as std::ops::Index<usize>>::index": false, "<header::map::RawLinks<T> as std::ops::IndexMut<usize>>::index_mut": false, "<header::map::ValueDrain<'a, T> as std::iter::Iterator>::next": true, "<header::map::ValueDrain<'a, T> as std::iter::Iterator>::size_hint": true, "<header::map::ValueDrain<'a, T> as std::ops::Drop>::drop": false, "<header::map::ValueIter<'a, T> as std::iter::DoubleEndedIterator>::next_back": false, "<header::map::ValueIter<'a, T> as std::iter::Iterator>::next": false, "<header::map::ValueIter<'a, T> as std::iter::Iterator>::size_hint": false, "<header::map::ValueIterMut<'a, T> as std::iter::DoubleEndedIterator>::next_back": false, "<header::map::ValueIterMut<'a, T> as std::iter::Iterator>::next": false, "<header::map::Values<'a, T> as std::iter::Iterator>::next": false, "<header::map::Values<'a, T> as std::iter::Iterator>::size_hint": false, "<header::map::ValuesMut<'a, T> as std::iter::Iterator>::next": false, "<header::map::ValuesMut<'a, T> as std::iter::Iterator>::size_hint": false, "<header::name::Custom as std::hash::Hash>::hash": false, "<header::name::HdrName<'a> as std::convert::From<header::name::StandardHeader>>::from": false, "<header::name::HeaderName as header::map::as_header_name::Sealed>::as_str": true, "<header::name::HeaderName as header::map::as_header_name::Sealed>::find": false, "<header::name::HeaderName as header::map::as_header_name::Sealed>::try_entry": false, "<header::name::HeaderName as header::map::into_header_name::Sealed>::append": true, "<header::name::HeaderName as header::map::into_header_name::Sealed>::insert": false, "<header::name::HeaderName as std::borrow::Borrow<str>>::borrow": true, "<header::name::HeaderName as std::cmp::PartialEq<&'a header::name::HeaderName>>::eq": true, "<header::name::HeaderName as std::cmp::PartialEq<&'a str>>::eq": true, "<header::name::HeaderName as std::cmp::PartialEq<header::name::HdrName<'a>>>::eq": false, "<header::name::HeaderName as std::cmp::PartialEq<str>>::eq": true, "<header::name::HeaderName as std::convert::AsRef<[u8]>>::as_ref": true, "<header::name::HeaderName as std::convert::AsRef<str>>::as_ref": true, "<header::name::HeaderName as std::convert::From<&'a header::name::HeaderName>>::from": true, "<header::name::HeaderName as std::convert::From<header::name::Custom>>::from": false, "<header::name::HeaderName as std::convert::From<header::name::HdrName<'a>>>::from": false, "<header::name::HeaderName as std::convert::From<header::name::StandardHeader>>::from": true, "<header::name::HeaderName as std::convert::TryFrom<&'a [u8]>>::try_from": false, "<header::name::HeaderName as std::convert::TryFrom<&'a std::string::String>>::try_from": false, "<header::name::HeaderName as std::convert::TryFrom<&'a str>>::try_from": true, "<header::name::HeaderName as std::str::FromStr>::from_str": true, "<header::name::MaybeLower<'a> as std::hash::Hash>::hash": false, "<header::value::HeaderValue as std::cmp::Ord>::cmp": true, "<header::value::HeaderValue as std::cmp::PartialEq<&'a T>>::eq": true, "<header::value::HeaderValue as std::cmp::PartialEq<[u8]>>::eq": false, "<header::value::HeaderValue as std::cmp::PartialEq<std::string::String>>::eq": true, "<header::value::HeaderValue as std::cmp::PartialEq<str>>::eq": true, "<header::value::HeaderValue as std::cmp::PartialEq>::eq": true, "<header::value::HeaderValue as std::cmp::PartialOrd<&'a T>>::partial_cmp": true, "<header::value::HeaderValue as std::cmp::PartialOrd<[u8]>>::partial_cmp": false, "<header::value::HeaderValue as std::cmp::PartialOrd<std::string::String>>::partial_cmp": true, "<header::value::HeaderValue as std::cmp::PartialOrd<str>>::partial_cmp": true, "<header::value::HeaderValue as std::cmp::PartialOrd>::partial_cmp": true, "<header::value::HeaderValue as std::convert::AsRef<[u8]>>::as_ref": true, "<header::value::HeaderValue as std::convert::From<&'a header::value::HeaderValue>>::from": true, "<header::value::HeaderValue as std::convert::From<header::name::HeaderName>>::from": false, "<header::value::HeaderValue as std::convert::From<i16>>::from": false, "<header::value::HeaderValue as std::convert::From<i32>>::from": true, "<header::value::HeaderValue as std::convert::From<i64>>::from": false, "<header::value::HeaderValue as std::convert::From<isize>>::from": true, "<header::value::HeaderValue as std::convert::From<u16>>::from": true, "<header::value::HeaderValue as std::convert::From<u32>>::from": true, "<header::value::HeaderValue as std::convert::From<u64>>::from": true, "<header::value::HeaderValue as std::convert::From<usize>>::from": true, "<header::value::HeaderValue as std::convert::TryFrom<&'a [u8]>>::try_from": false, "<header::value::HeaderValue as std::convert::TryFrom<&'a std::string::String>>::try_from": false, "<header::value::HeaderValue as std::convert::TryFrom<&'a str>>::try_from": true, "<header::value::HeaderValue as std::convert::TryFrom<std::string::String>>::try_from": false, "<header::value::HeaderValue as std::convert::TryFrom<std::vec::Vec<u8>>>::try_from": true, "<header::value::HeaderValue as std::str::FromStr>::from_str": true, "<method::Method as std::cmp::PartialEq<&'a method::Method>>::eq": false, "<method::Method as std::cmp::PartialEq<&'a str>>::eq": true, "<method::Method as std::cmp::PartialEq<str>>::eq": true, "<method::Method as std::convert::AsRef<str>>::as_ref": true, "<method::Method as std::convert::From<&'a method::Method>>::from": false, "<method::Method as std::convert::TryFrom<&'a [u8]>>::try_from": false, "<method::Method as std::convert::TryFrom<&'a str>>::try_from": false, "<method::Method as std::default::Default>::default": true, "<method::Method as std::str::FromStr>::from_str": false, "<request::Builder as std::default::Default>::default": false, "<response::Builder as std::default::Default>::default": true, "<status::StatusCode as std::cmp::PartialEq<u16>>::eq": true, "<status::StatusCode as std::convert::From<&'a status::StatusCode>>::from": true, "<status::StatusCode as std::convert::TryFrom<&'a [u8]>>::try_from": true, "<status::StatusCode as std::convert::TryFrom<&'a str>>::try_from": false, "<status::StatusCode as std::convert::TryFrom<u16>>::try_from": false, "<status::StatusCode as std::default::Default>::default": true, "<status::StatusCode as std::str::FromStr>::from_str": false, "<std::string::String as header::map::as_header_name::Sealed>::as_str": true, "<std::string::String as header::map::as_header_name::Sealed>::find": false, "<std::string::String as header::map::as_header_name::Sealed>::try_entry": false, "<uri::InvalidUri as std::convert::From<uri::ErrorKind>>::from": false, "<uri::InvalidUriParts as std::convert::From<uri::ErrorKind>>::from": false, "<uri::Parts as std::convert::From<uri::Uri>>::from": false, "<uri::Uri as std::cmp::PartialEq<&'a str>>::eq": false, "<uri::Uri as std::cmp::PartialEq<str>>::eq": true, "<uri::Uri as std::cmp::PartialEq>::eq": false, "<uri::Uri as std::convert::TryFrom<&'a [u8]>>::try_from": true, "<uri::Uri as std::convert::TryFrom<&'a std::string::String>>::try_from": true, "<uri::Uri as std::convert::TryFrom<&'a str>>::try_from": true, "<uri::Uri as std::convert::TryFrom<&'a uri::Uri>>::try_from": true, "<uri::Uri as std::convert::TryFrom<std::string::String>>::try_from": true, "<uri::Uri as std::convert::TryFrom<uri::Parts>>::try_from": false, "<uri::Uri as std::default::Default>::default": false, "<uri::Uri as std::hash::Hash>::hash": false, "<uri::Uri as std::str::FromStr>::from_str": false, "<uri::authority::Authority as std::cmp::PartialEq<&'a str>>::eq": true, "<uri::authority::Authority as std::cmp::PartialEq<std::string::String>>::eq": true, "<uri::authority::Authority as std::cmp::PartialEq<str>>::eq": true, "<uri::authority::Authority as std::cmp::PartialEq>::eq": true, "<uri::authority::Authority as std::cmp::PartialOrd<&'a str>>::partial_cmp": false, "<uri::authority::Authority as std::cmp::PartialOrd<std::string::String>>::partial_cmp": false, "<uri::authority::Authority as std::cmp::PartialOrd<str>>::partial_cmp": true, "<uri::authority::Authority as std::cmp::PartialOrd>::partial_cmp": true, "<uri::authority::Authority as std::convert::AsRef<str>>::as_ref": true, "<uri::authority::Authority as std::convert::TryFrom<&'a [u8]>>::try_from": true, "<uri::authority::Authority as std::convert::TryFrom<&'a str>>::try_from": true, "<uri::authority::Authority as std::hash::Hash>::hash": false, "<uri::authority::Authority as std::str::FromStr>::from_str": false, "<uri::builder::Builder as std::default::Default>::default": false, "<uri::path::PathAndQuery as std::cmp::PartialEq<&'a str>>::eq": true, "<uri::path::PathAndQuery as std::cmp::PartialEq<std::string::String>>::eq": false, "<uri::path::PathAndQuery as std::cmp::PartialEq<str>>::eq": true, "<uri::path::PathAndQuery as std::cmp::PartialEq>::eq": true, "<uri::path::PathAndQuery as std::cmp::PartialOrd<&'a str>>::partial_cmp": true, "<uri::path::PathAndQuery as std::cmp::PartialOrd<std::string::String>>::partial_cmp": true, "<uri::path::PathAndQuery as std::cmp::PartialOrd<str>>::partial_cmp": true, "<uri::path::PathAndQuery as std::cmp::PartialOrd>::partial_cmp": true, "<uri::path::PathAndQuery as std::convert::TryFrom<&'a [u8]>>::try_from": false, "<uri::path::PathAndQuery as std::convert::TryFrom<&'a str>>::try_from": true, "<uri::path::PathAndQuery as std::convert::TryFrom<&std::string::String>>::try_from": true, "<uri::path::PathAndQuery as std::convert::TryFrom<std::string::String>>::try_from": false, "<uri::path::PathAndQuery as std::str::FromStr>::from_str": true, "<uri::port::Port<T> as std::cmp::PartialEq<u16>>::eq": true, "<uri::port::Port<T> as std::cmp::PartialEq<uri::port::Port<U>>>::eq": true, "<uri::port::Port<T> as std::convert::AsRef<str>>::as_ref": false, "<uri::scheme::Scheme as std::cmp::PartialEq<str>>::eq": true, "<uri::scheme::Scheme as std::cmp::PartialEq>::eq": true, "<uri::scheme::Scheme as std::convert::AsRef<str>>::as_ref": true, "<uri::scheme::Scheme as std::convert::From<uri::scheme::Scheme2>>::from": false, "<uri::scheme::Scheme as std::convert::TryFrom<&'a [u8]>>::try_from": false, "<uri::scheme::Scheme as std::convert::TryFrom<&'a str>>::try_from": false, "<uri::scheme::Scheme as std::hash::Hash>::hash": false, "<uri::scheme::Scheme as std::str::FromStr>::from_str": true, "<uri::scheme::Scheme2<T> as std::convert::From<uri::scheme::Protocol>>::from": false, "<version::Version as std::default::Default>::default": true, "_assert_types": true, "_assert_types::assert_send": false, "_assert_types::assert_sync": false, "byte_str::<impl std::convert::From<byte_str::ByteStr> for bytes::Bytes>::from": true, "byte_str::ByteStr::from_static": true, "byte_str::ByteStr::from_utf8_unchecked": true, "byte_str::ByteStr::new": true, "error::Error::get_ref": false, "error::Error::is": false, "extensions::Extensions::clear": true, "extensions::Extensions::get": true, "extensions::Extensions::get_mut": true, "extensions::Extensions::insert": false, "extensions::Extensions::new": true, "extensions::Extensions::remove": false, "header::map::Danger::is_red": true, "header::map::Danger::is_yellow": true, "header::map::Danger::to_green": false, "header::map::Danger::to_red": true, "header::map::Danger::to_yellow": false, "header::map::GetAll::<'a, T>::iter": false, "header::map::HeaderMap::<T>::append": false, "header::map::HeaderMap::<T>::append2": false, "header::map::HeaderMap::<T>::capacity": true, "header::map::HeaderMap::<T>::clear": false, "header::map::HeaderMap::<T>::contains_key": true, "header::map::HeaderMap::<T>::drain": true, "header::map::HeaderMap::<T>::find": false, "header::map::HeaderMap::<T>::get": false, "header::map::HeaderMap::<T>::get2": false, "header::map::HeaderMap::<T>::get_all": false, "header::map::HeaderMap::<T>::get_mut": false, "header::map::HeaderMap::<T>::grow": false, "header::map::HeaderMap::<T>::insert": false, "header::map::HeaderMap::<T>::insert2": false, "header::map::HeaderMap::<T>::insert_entry": false, "header::map::HeaderMap::<T>::insert_occupied": false, "header::map::HeaderMap::<T>::insert_occupied_mult": false, "header::map::HeaderMap::<T>::insert_phase_two": false, "header::map::HeaderMap::<T>::is_empty": true, "header::map::HeaderMap::<T>::iter": true, "header::map::HeaderMap::<T>::iter_mut": false, "header::map::HeaderMap::<T>::keys": false, "header::map::HeaderMap::<T>::keys_len": true, "header::map::HeaderMap::<T>::len": false, "header::map::HeaderMap::<T>::raw_links": false, "header::map::HeaderMap::<T>::rebuild": false, "header::map::HeaderMap::<T>::reinsert_entry_in_order": true, "header::map::HeaderMap::<T>::remove": true, "header::map::HeaderMap::<T>::remove_all_extra_values": false, "header::map::HeaderMap::<T>::remove_extra_value": true, "header::map::HeaderMap::<T>::remove_found": false, "header::map::HeaderMap::<T>::reserve": false, "header::map::HeaderMap::<T>::reserve_one": true, "header::map::HeaderMap::<T>::try_entry": true, "header::map::HeaderMap::<T>::value_iter": true, "header::map::HeaderMap::<T>::value_iter_mut": false, "header::map::HeaderMap::<T>::values": true, "header::map::HeaderMap::<T>::values_mut": false, "header::map::HeaderMap::<T>::with_capacity": true, "header::map::HeaderMap::new": true, "header::map::IterMut::<'a, T>::next_unsafe": false, "header::map::OccupiedEntry::<'a, T>::append": true, "header::map::OccupiedEntry::<'a, T>::get": false, "header::map::OccupiedEntry::<'a, T>::get_mut": false, "header::map::OccupiedEntry::<'a, T>::insert": false, "header::map::OccupiedEntry::<'a, T>::insert_mult": true, "header::map::OccupiedEntry::<'a, T>::into_mut": true, "header::map::OccupiedEntry::<'a, T>::iter": false, "header::map::OccupiedEntry::<'a, T>::iter_mut": false, "header::map::OccupiedEntry::<'a, T>::remove": false, "header::map::Pos::is_none": true, "header::map::Pos::is_some": true, "header::map::Pos::new": true, "header::map::Pos::none": true, "header::map::Pos::resolve": true, "header::map::VacantEntry::<'a, T>::insert": false, "header::map::VacantEntry::<'a, T>::into_key": true, "header::map::VacantEntry::<'a, T>::key": false, "header::map::append_value": false, "header::map::desired_pos": false, "header::map::do_insert_phase_two": false, "header::map::drain_all_extra_values": false, "header::map::hash_elem_using": true, "header::map::probe_distance": true, "header::map::remove_extra_value": false, "header::map::to_raw_capacity": true, "header::map::usable_capacity": true, "header::name::<impl std::cmp::PartialEq<header::name::HeaderName> for &'a str>::eq": true, "header::name::<impl std::cmp::PartialEq<header::name::HeaderName> for str>::eq": false, "header::name::<impl std::convert::From<header::name::Custom> for bytes::Bytes>::from": true, "header::name::<impl std::convert::From<header::name::Repr<T>> for bytes::Bytes>::from": false, "header::name::HdrName::<'a>::custom": false, "header::name::HdrName::<'a>::from_bytes": false, "header::name::HdrName::<'a>::from_static": true, "header::name::HeaderName::as_str": true, "header::name::HeaderName::from_bytes": false, "header::name::HeaderName::from_lowercase": true, "header::name::HeaderName::from_static": true, "header::name::HeaderName::into_bytes": true, "header::name::InvalidHeaderName::new": false, "header::name::StandardHeader::as_str": true, "header::name::eq_ignore_ascii_case": true, "header::name::parse_hdr": false, "header::value::<impl std::cmp::PartialEq<header::value::HeaderValue> for &'a str>::eq": true, "header::value::<impl std::cmp::PartialEq<header::value::HeaderValue> for [u8]>::eq": true, "header::value::<impl std::cmp::PartialEq<header::value::HeaderValue> for std::string::String>::eq": true, "header::value::<impl std::cmp::PartialEq<header::value::HeaderValue> for str>::eq": true, "header::value::<impl std::cmp::PartialOrd<header::value::HeaderValue> for &'a str>::partial_cmp": true, "header::value::<impl std::cmp::PartialOrd<header::value::HeaderValue> for [u8]>::partial_cmp": true, "header::value::<impl std::cmp::PartialOrd<header::value::HeaderValue> for std::string::String>::partial_cmp": true, "header::value::<impl std::cmp::PartialOrd<header::value::HeaderValue> for str>::partial_cmp": true, "header::value::HeaderValue::as_bytes": true, "header::value::HeaderValue::from_bytes": true, "header::value::HeaderValue::from_maybe_shared": true, "header::value::HeaderValue::from_maybe_shared_unchecked": true, "header::value::HeaderValue::from_name": false, "header::value::HeaderValue::from_shared": true, "header::value::HeaderValue::from_static": true, "header::value::HeaderValue::from_str": true, "header::value::HeaderValue::is_empty": true, "header::value::HeaderValue::is_sensitive": true, "header::value::HeaderValue::len": true, "header::value::HeaderValue::set_sensitive": true, "header::value::HeaderValue::to_str": true, "header::value::HeaderValue::try_from_generic": false, "header::value::is_valid": false, "header::value::is_visible_ascii": true, "method::<impl std::cmp::PartialEq<method::Method> for &'a str>::eq": true, "method::<impl std::cmp::PartialEq<method::Method> for str>::eq": true, "method::InvalidMethod::new": false, "method::Method::as_str": true, "method::Method::extension_inline": true, "method::Method::from_bytes": false, "method::Method::is_idempotent": true, "method::Method::is_safe": true, "method::extension::AllocatedExtension::as_str": true, "method::extension::AllocatedExtension::new": false, "method::extension::InlineExtension::as_str": false, "method::extension::InlineExtension::new": false, "method::extension::write_checked": false, "request::Builder::and_then": false, "request::Builder::body": false, "request::Builder::extension": true, "request::Builder::extensions_mut": true, "request::Builder::extensions_ref": true, "request::Builder::header": false, "request::Builder::headers_mut": true, "request::Builder::headers_ref": false, "request::Builder::method": false, "request::Builder::method_ref": true, "request::Builder::new": false, "request::Builder::uri": false, "request::Builder::uri_ref": true, "request::Builder::version": true, "request::Request::<()>::builder": false, "request::Request::<()>::connect": false, "request::Request::<()>::delete": true, "request::Request::<()>::get": true, "request::Request::<()>::head": false, "request::Request::<()>::options": false, "request::Request::<()>::patch": true, "request::Request::<()>::post": false, "request::Request::<()>::put": false, "request::Request::<()>::trace": false, "response::Builder::and_then": false, "response::Builder::body": false, "response::Builder::extension": true, "response::Builder::extensions_mut": true, "response::Builder::extensions_ref": true, "response::Builder::header": false, "response::Builder::headers_mut": true, "response::Builder::headers_ref": false, "response::Builder::new": false, "response::Builder::status": false, "response::Builder::version": true, "response::Parts::new": false, "response::Response::<()>::builder": false, "status::<impl std::cmp::PartialEq<status::StatusCode> for u16>::eq": true, "status::<impl std::convert::From<status::StatusCode> for u16>::from": false, "status::InvalidStatusCode::new": false, "status::StatusCode::as_str": true, "status::StatusCode::as_u16": true, "status::StatusCode::canonical_reason": true, "status::StatusCode::from_bytes": true, "status::StatusCode::from_u16": false, "status::StatusCode::is_client_error": true, "status::StatusCode::is_informational": true, "status::StatusCode::is_redirection": true, "status::StatusCode::is_server_error": true, "status::StatusCode::is_success": true, "status::canonical_reason": true, "uri::<impl std::cmp::PartialEq<uri::Uri> for &'a str>::eq": false, "uri::<impl std::cmp::PartialEq<uri::Uri> for str>::eq": true, "uri::InvalidUri::s": true, "uri::Uri::authority": false, "uri::Uri::builder": true, "uri::Uri::from_maybe_shared": false, "uri::Uri::from_parts": false, "uri::Uri::from_shared": true, "uri::Uri::from_static": true, "uri::Uri::has_path": true, "uri::Uri::host": true, "uri::Uri::into_parts": false, "uri::Uri::path": true, "uri::Uri::path_and_query": true, "uri::Uri::port": true, "uri::Uri::port_u16": false, "uri::Uri::query": true, "uri::Uri::scheme": true, "uri::Uri::scheme_str": true, "uri::authority::<impl std::cmp::PartialEq<uri::authority::Authority> for &'a str>::eq": true, "uri::authority::<impl std::cmp::PartialEq<uri::authority::Authority> for std::string::String>::eq": false, "uri::authority::<impl std::cmp::PartialEq<uri::authority::Authority> for str>::eq": true, "uri::authority::<impl std::cmp::PartialOrd<uri::authority::Authority> for &'a str>::partial_cmp": true, "uri::authority::<impl std::cmp::PartialOrd<uri::authority::Authority> for std::string::String>::partial_cmp": true, "uri::authority::<impl std::cmp::PartialOrd<uri::authority::Authority> for str>::partial_cmp": true, "uri::authority::Authority::as_str": true, "uri::authority::Authority::empty": true, "uri::authority::Authority::from_maybe_shared": false, "uri::authority::Authority::from_shared": true, "uri::authority::Authority::from_static": true, "uri::authority::Authority::host": true, "uri::authority::Authority::parse": false, "uri::authority::Authority::parse_non_empty": true, "uri::authority::Authority::port": true, "uri::authority::Authority::port_u16": false, "uri::authority::create_authority": false, "uri::authority::host": true, "uri::builder::Builder::authority": false, "uri::builder::Builder::build": true, "uri::builder::Builder::map": true, "uri::builder::Builder::new": true, "uri::builder::Builder::path_and_query": false, "uri::builder::Builder::scheme": true, "uri::parse_full": false, "uri::path::<impl std::cmp::PartialEq<uri::path::PathAndQuery> for &'a str>::eq": true, "uri::path::<impl std::cmp::PartialEq<uri::path::PathAndQuery> for std::string::String>::eq": true, "uri::path::<impl std::cmp::PartialEq<uri::path::PathAndQuery> for str>::eq": true, "uri::path::<impl std::cmp::PartialOrd<uri::path::PathAndQuery> for &'a str>::partial_cmp": true, "uri::path::<impl std::cmp::PartialOrd<uri::path::PathAndQuery> for std::string::String>::partial_cmp": true, "uri::path::<impl std::cmp::PartialOrd<uri::path::PathAndQuery> for str>::partial_cmp": false, "uri::path::PathAndQuery::as_str": true, "uri::path::PathAndQuery::empty": false, "uri::path::PathAndQuery::from_maybe_shared": false, "uri::path::PathAndQuery::from_shared": false, "uri::path::PathAndQuery::from_static": true, "uri::path::PathAndQuery::path": false, "uri::path::PathAndQuery::query": true, "uri::path::PathAndQuery::slash": true, "uri::path::PathAndQuery::star": true, "uri::port::<impl std::cmp::PartialEq<uri::port::Port<T>> for u16>::eq": true, "uri::port::<impl std::convert::From<uri::port::Port<T>> for u16>::from": true, "uri::port::Port::<T>::as_str": true, "uri::port::Port::<T>::as_u16": false, "uri::port::Port::<T>::from_str": false, "uri::scheme::<impl std::cmp::PartialEq<uri::scheme::Scheme> for str>::eq": true, "uri::scheme::Protocol::len": false, "uri::scheme::Scheme2::<T>::is_none": true, "uri::scheme::Scheme2::<usize>::parse": false, "uri::scheme::Scheme2::<usize>::parse_exact": false, "uri::scheme::Scheme::as_str": true, "uri::scheme::Scheme::empty": true}