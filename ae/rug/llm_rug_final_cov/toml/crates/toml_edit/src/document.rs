use std::str::FromStr;
use crate::parser;
use crate::table::Iter;
use crate::{Item, RawString, Table};
/// Type representing a TOML document
#[derive(Debug, Clone)]
pub struct Document {
    pub(crate) root: Item,
    pub(crate) trailing: RawString,
    pub(crate) original: Option<String>,
    pub(crate) span: Option<std::ops::Range<usize>>,
}
impl Document {
    /// Creates an empty document
    pub fn new() -> Self {
        Default::default()
    }
    /// Returns a reference to the root item.
    pub fn as_item(&self) -> &Item {
        &self.root
    }
    /// Returns a mutable reference to the root item.
    pub fn as_item_mut(&mut self) -> &mut Item {
        &mut self.root
    }
    /// Returns a reference to the root table.
    pub fn as_table(&self) -> &Table {
        self.root.as_table().expect("root should always be a table")
    }
    /// Returns a mutable reference to the root table.
    pub fn as_table_mut(&mut self) -> &mut Table {
        self.root.as_table_mut().expect("root should always be a table")
    }
    /// Returns an iterator over the root table.
    pub fn iter(&self) -> Iter<'_> {
        self.as_table().iter()
    }
    /// Set whitespace after last element
    pub fn set_trailing(&mut self, trailing: impl Into<RawString>) {
        self.trailing = trailing.into();
    }
    /// Whitespace after last element
    pub fn trailing(&self) -> &RawString {
        &self.trailing
    }
    /// # Panics
    ///
    /// If run on on a `Document` not generated by the parser
    pub(crate) fn despan(&mut self) {
        self.span = None;
        self.root.despan(self.original.as_deref().unwrap());
        self.trailing.despan(self.original.as_deref().unwrap());
    }
}
impl Default for Document {
    fn default() -> Self {
        Self {
            root: Item::Table(Table::with_pos(Some(0))),
            trailing: Default::default(),
            original: Default::default(),
            span: Default::default(),
        }
    }
}
impl FromStr for Document {
    type Err = crate::TomlError;
    /// Parses a document from a &str
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let mut d = parser::parse_document(s)?;
        d.despan();
        Ok(d)
    }
}
impl std::ops::Deref for Document {
    type Target = Table;
    fn deref(&self) -> &Self::Target {
        self.as_table()
    }
}
impl std::ops::DerefMut for Document {
    fn deref_mut(&mut self) -> &mut Self::Target {
        self.as_table_mut()
    }
}
impl From<Table> for Document {
    fn from(root: Table) -> Self {
        Self {
            root: Item::Table(root),
            ..Default::default()
        }
    }
}
#[cfg(test)]
mod tests_rug_903 {
    use super::*;
    use crate::document::Document;
    #[test]
    fn test_rug() {
        let _rug_st_tests_rug_903_rrrruuuugggg_test_rug = 0;
        Document::new();
        let _rug_ed_tests_rug_903_rrrruuuugggg_test_rug = 0;
    }
}
#[cfg(test)]
mod tests_rug_904 {
    use super::*;
    use crate::{Document, Item};
    #[test]
    fn test_rug() {
        let _rug_st_tests_rug_904_rrrruuuugggg_test_rug = 0;
        let mut p0: Document = Document::default();
        Document::as_item(&p0);
        let _rug_ed_tests_rug_904_rrrruuuugggg_test_rug = 0;
    }
}
#[cfg(test)]
mod tests_rug_905 {
    use super::*;
    use crate::document::{Document, Item};
    use serde::de::Error;
    #[test]
    fn test_rug() {
        let _rug_st_tests_rug_905_rrrruuuugggg_test_rug = 0;
        let mut p0: Document = Document::default();
        Document::as_item_mut(&mut p0);
        let _rug_ed_tests_rug_905_rrrruuuugggg_test_rug = 0;
    }
}
#[cfg(test)]
mod tests_rug_906 {
    use super::*;
    use crate::{value, Document};
    #[test]
    fn test_rug() {
        let _rug_st_tests_rug_906_rrrruuuugggg_test_rug = 0;
        let mut p0: Document = Document::default();
        <Document>::as_table(&p0);
        let _rug_ed_tests_rug_906_rrrruuuugggg_test_rug = 0;
    }
}
#[cfg(test)]
mod tests_rug_907 {
    use super::*;
    use crate::Document;
    use crate::table::Table;
    #[test]
    fn test_rug() {
        let _rug_st_tests_rug_907_rrrruuuugggg_test_rug = 0;
        let mut p0: Document = Document::new();
        p0.as_table_mut();
        let _rug_ed_tests_rug_907_rrrruuuugggg_test_rug = 0;
    }
}
#[cfg(test)]
mod tests_rug_908 {
    use super::*;
    use crate::Document;
    use crate::table::Iter;
    #[test]
    fn test_iter() {
        let _rug_st_tests_rug_908_rrrruuuugggg_test_iter = 0;
        let mut p0: Document = Document::new();
        let _ = Document::iter(&p0);
        let _rug_ed_tests_rug_908_rrrruuuugggg_test_iter = 0;
    }
}
#[cfg(test)]
mod tests_rug_909 {
    use super::*;
    use crate::document::Document;
    use crate::RawString;
    #[test]
    fn test_set_trailing() {
        let _rug_st_tests_rug_909_rrrruuuugggg_test_set_trailing = 0;
        let rug_fuzz_0 = "trailing whitespace";
        let mut p0 = Document::new();
        let p1: RawString = rug_fuzz_0.into();
        p0.set_trailing(p1);
        let _rug_ed_tests_rug_909_rrrruuuugggg_test_set_trailing = 0;
    }
}
#[cfg(test)]
mod tests_rug_910 {
    use super::*;
    use crate::document::{Document, RawString};
    #[test]
    fn test_trailing() {
        let _rug_st_tests_rug_910_rrrruuuugggg_test_trailing = 0;
        let p0: Document = Document::new();
        let _ = Document::trailing(&p0);
        let _rug_ed_tests_rug_910_rrrruuuugggg_test_trailing = 0;
    }
}
#[cfg(test)]
mod tests_rug_911 {
    use super::*;
    use crate::document::Document;
    use serde::de::Error;
    #[test]
    fn test_rug() {
        let _rug_st_tests_rug_911_rrrruuuugggg_test_rug = 0;
        let mut p0: Document = Document::new();
        Document::despan(&mut p0);
        let _rug_ed_tests_rug_911_rrrruuuugggg_test_rug = 0;
    }
}
#[cfg(test)]
mod tests_rug_913 {
    use super::*;
    use crate::Document;
    use std::str::FromStr;
    #[test]
    fn test_rug() {
        let _rug_st_tests_rug_913_rrrruuuugggg_test_rug = 0;
        let rug_fuzz_0 = "{field = \"value\"}";
        let p0 = rug_fuzz_0;
        <Document as FromStr>::from_str(&p0);
        let _rug_ed_tests_rug_913_rrrruuuugggg_test_rug = 0;
    }
}
